
RTOS_task3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bd28  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000690  0800bef8  0800bef8  0001bef8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c588  0800c588  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800c588  0800c588  0001c588  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c590  0800c590  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c590  0800c590  0001c590  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c594  0800c594  0001c594  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800c598  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b08  200001e4  0800c77c  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004cec  0800c77c  00024cec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b1a3  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a71  00000000  00000000  0003b3b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001598  00000000  00000000  0003ee28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001420  00000000  00000000  000403c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002554b  00000000  00000000  000417e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019788  00000000  00000000  00066d2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dcc54  00000000  00000000  000804b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015d107  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006fec  00000000  00000000  0015d158  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e4 	.word	0x200001e4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800bee0 	.word	0x0800bee0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e8 	.word	0x200001e8
 800020c:	0800bee0 	.word	0x0800bee0

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cdc:	f000 b9aa 	b.w	8001034 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	468e      	mov	lr, r1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d14d      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d72:	428a      	cmp	r2, r1
 8000d74:	4694      	mov	ip, r2
 8000d76:	d969      	bls.n	8000e4c <__udivmoddi4+0xe8>
 8000d78:	fab2 f282 	clz	r2, r2
 8000d7c:	b152      	cbz	r2, 8000d94 <__udivmoddi4+0x30>
 8000d7e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d82:	f1c2 0120 	rsb	r1, r2, #32
 8000d86:	fa20 f101 	lsr.w	r1, r0, r1
 8000d8a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d92:	4094      	lsls	r4, r2
 8000d94:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d98:	0c21      	lsrs	r1, r4, #16
 8000d9a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d9e:	fa1f f78c 	uxth.w	r7, ip
 8000da2:	fb08 e316 	mls	r3, r8, r6, lr
 8000da6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000daa:	fb06 f107 	mul.w	r1, r6, r7
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000dba:	f080 811f 	bcs.w	8000ffc <__udivmoddi4+0x298>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 811c 	bls.w	8000ffc <__udivmoddi4+0x298>
 8000dc4:	3e02      	subs	r6, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a5b      	subs	r3, r3, r1
 8000dca:	b2a4      	uxth	r4, r4
 8000dcc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dd0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd8:	fb00 f707 	mul.w	r7, r0, r7
 8000ddc:	42a7      	cmp	r7, r4
 8000dde:	d90a      	bls.n	8000df6 <__udivmoddi4+0x92>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000de8:	f080 810a 	bcs.w	8001000 <__udivmoddi4+0x29c>
 8000dec:	42a7      	cmp	r7, r4
 8000dee:	f240 8107 	bls.w	8001000 <__udivmoddi4+0x29c>
 8000df2:	4464      	add	r4, ip
 8000df4:	3802      	subs	r0, #2
 8000df6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dfa:	1be4      	subs	r4, r4, r7
 8000dfc:	2600      	movs	r6, #0
 8000dfe:	b11d      	cbz	r5, 8000e08 <__udivmoddi4+0xa4>
 8000e00:	40d4      	lsrs	r4, r2
 8000e02:	2300      	movs	r3, #0
 8000e04:	e9c5 4300 	strd	r4, r3, [r5]
 8000e08:	4631      	mov	r1, r6
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d909      	bls.n	8000e26 <__udivmoddi4+0xc2>
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	f000 80ef 	beq.w	8000ff6 <__udivmoddi4+0x292>
 8000e18:	2600      	movs	r6, #0
 8000e1a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e1e:	4630      	mov	r0, r6
 8000e20:	4631      	mov	r1, r6
 8000e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e26:	fab3 f683 	clz	r6, r3
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	d14a      	bne.n	8000ec4 <__udivmoddi4+0x160>
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d302      	bcc.n	8000e38 <__udivmoddi4+0xd4>
 8000e32:	4282      	cmp	r2, r0
 8000e34:	f200 80f9 	bhi.w	800102a <__udivmoddi4+0x2c6>
 8000e38:	1a84      	subs	r4, r0, r2
 8000e3a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e3e:	2001      	movs	r0, #1
 8000e40:	469e      	mov	lr, r3
 8000e42:	2d00      	cmp	r5, #0
 8000e44:	d0e0      	beq.n	8000e08 <__udivmoddi4+0xa4>
 8000e46:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e4a:	e7dd      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000e4c:	b902      	cbnz	r2, 8000e50 <__udivmoddi4+0xec>
 8000e4e:	deff      	udf	#255	; 0xff
 8000e50:	fab2 f282 	clz	r2, r2
 8000e54:	2a00      	cmp	r2, #0
 8000e56:	f040 8092 	bne.w	8000f7e <__udivmoddi4+0x21a>
 8000e5a:	eba1 010c 	sub.w	r1, r1, ip
 8000e5e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e62:	fa1f fe8c 	uxth.w	lr, ip
 8000e66:	2601      	movs	r6, #1
 8000e68:	0c20      	lsrs	r0, r4, #16
 8000e6a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e6e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e72:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e76:	fb0e f003 	mul.w	r0, lr, r3
 8000e7a:	4288      	cmp	r0, r1
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x12c>
 8000e7e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e82:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x12a>
 8000e88:	4288      	cmp	r0, r1
 8000e8a:	f200 80cb 	bhi.w	8001024 <__udivmoddi4+0x2c0>
 8000e8e:	4643      	mov	r3, r8
 8000e90:	1a09      	subs	r1, r1, r0
 8000e92:	b2a4      	uxth	r4, r4
 8000e94:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e98:	fb07 1110 	mls	r1, r7, r0, r1
 8000e9c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ea0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ea4:	45a6      	cmp	lr, r4
 8000ea6:	d908      	bls.n	8000eba <__udivmoddi4+0x156>
 8000ea8:	eb1c 0404 	adds.w	r4, ip, r4
 8000eac:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000eb0:	d202      	bcs.n	8000eb8 <__udivmoddi4+0x154>
 8000eb2:	45a6      	cmp	lr, r4
 8000eb4:	f200 80bb 	bhi.w	800102e <__udivmoddi4+0x2ca>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	eba4 040e 	sub.w	r4, r4, lr
 8000ebe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ec2:	e79c      	b.n	8000dfe <__udivmoddi4+0x9a>
 8000ec4:	f1c6 0720 	rsb	r7, r6, #32
 8000ec8:	40b3      	lsls	r3, r6
 8000eca:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ece:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ed2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ed6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eda:	431c      	orrs	r4, r3
 8000edc:	40f9      	lsrs	r1, r7
 8000ede:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ee2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ee6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eea:	0c20      	lsrs	r0, r4, #16
 8000eec:	fa1f fe8c 	uxth.w	lr, ip
 8000ef0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ef4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ef8:	fb08 f00e 	mul.w	r0, r8, lr
 8000efc:	4288      	cmp	r0, r1
 8000efe:	fa02 f206 	lsl.w	r2, r2, r6
 8000f02:	d90b      	bls.n	8000f1c <__udivmoddi4+0x1b8>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000f0c:	f080 8088 	bcs.w	8001020 <__udivmoddi4+0x2bc>
 8000f10:	4288      	cmp	r0, r1
 8000f12:	f240 8085 	bls.w	8001020 <__udivmoddi4+0x2bc>
 8000f16:	f1a8 0802 	sub.w	r8, r8, #2
 8000f1a:	4461      	add	r1, ip
 8000f1c:	1a09      	subs	r1, r1, r0
 8000f1e:	b2a4      	uxth	r4, r4
 8000f20:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f24:	fb09 1110 	mls	r1, r9, r0, r1
 8000f28:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f2c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f30:	458e      	cmp	lr, r1
 8000f32:	d908      	bls.n	8000f46 <__udivmoddi4+0x1e2>
 8000f34:	eb1c 0101 	adds.w	r1, ip, r1
 8000f38:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000f3c:	d26c      	bcs.n	8001018 <__udivmoddi4+0x2b4>
 8000f3e:	458e      	cmp	lr, r1
 8000f40:	d96a      	bls.n	8001018 <__udivmoddi4+0x2b4>
 8000f42:	3802      	subs	r0, #2
 8000f44:	4461      	add	r1, ip
 8000f46:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f4a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f4e:	eba1 010e 	sub.w	r1, r1, lr
 8000f52:	42a1      	cmp	r1, r4
 8000f54:	46c8      	mov	r8, r9
 8000f56:	46a6      	mov	lr, r4
 8000f58:	d356      	bcc.n	8001008 <__udivmoddi4+0x2a4>
 8000f5a:	d053      	beq.n	8001004 <__udivmoddi4+0x2a0>
 8000f5c:	b15d      	cbz	r5, 8000f76 <__udivmoddi4+0x212>
 8000f5e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f62:	eb61 010e 	sbc.w	r1, r1, lr
 8000f66:	fa01 f707 	lsl.w	r7, r1, r7
 8000f6a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f6e:	40f1      	lsrs	r1, r6
 8000f70:	431f      	orrs	r7, r3
 8000f72:	e9c5 7100 	strd	r7, r1, [r5]
 8000f76:	2600      	movs	r6, #0
 8000f78:	4631      	mov	r1, r6
 8000f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f7e:	f1c2 0320 	rsb	r3, r2, #32
 8000f82:	40d8      	lsrs	r0, r3
 8000f84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f88:	fa21 f303 	lsr.w	r3, r1, r3
 8000f8c:	4091      	lsls	r1, r2
 8000f8e:	4301      	orrs	r1, r0
 8000f90:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f94:	fa1f fe8c 	uxth.w	lr, ip
 8000f98:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f9c:	fb07 3610 	mls	r6, r7, r0, r3
 8000fa0:	0c0b      	lsrs	r3, r1, #16
 8000fa2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fa6:	fb00 f60e 	mul.w	r6, r0, lr
 8000faa:	429e      	cmp	r6, r3
 8000fac:	fa04 f402 	lsl.w	r4, r4, r2
 8000fb0:	d908      	bls.n	8000fc4 <__udivmoddi4+0x260>
 8000fb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb6:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000fba:	d22f      	bcs.n	800101c <__udivmoddi4+0x2b8>
 8000fbc:	429e      	cmp	r6, r3
 8000fbe:	d92d      	bls.n	800101c <__udivmoddi4+0x2b8>
 8000fc0:	3802      	subs	r0, #2
 8000fc2:	4463      	add	r3, ip
 8000fc4:	1b9b      	subs	r3, r3, r6
 8000fc6:	b289      	uxth	r1, r1
 8000fc8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fcc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fd4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fd8:	428b      	cmp	r3, r1
 8000fda:	d908      	bls.n	8000fee <__udivmoddi4+0x28a>
 8000fdc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fe0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000fe4:	d216      	bcs.n	8001014 <__udivmoddi4+0x2b0>
 8000fe6:	428b      	cmp	r3, r1
 8000fe8:	d914      	bls.n	8001014 <__udivmoddi4+0x2b0>
 8000fea:	3e02      	subs	r6, #2
 8000fec:	4461      	add	r1, ip
 8000fee:	1ac9      	subs	r1, r1, r3
 8000ff0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ff4:	e738      	b.n	8000e68 <__udivmoddi4+0x104>
 8000ff6:	462e      	mov	r6, r5
 8000ff8:	4628      	mov	r0, r5
 8000ffa:	e705      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000ffc:	4606      	mov	r6, r0
 8000ffe:	e6e3      	b.n	8000dc8 <__udivmoddi4+0x64>
 8001000:	4618      	mov	r0, r3
 8001002:	e6f8      	b.n	8000df6 <__udivmoddi4+0x92>
 8001004:	454b      	cmp	r3, r9
 8001006:	d2a9      	bcs.n	8000f5c <__udivmoddi4+0x1f8>
 8001008:	ebb9 0802 	subs.w	r8, r9, r2
 800100c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001010:	3801      	subs	r0, #1
 8001012:	e7a3      	b.n	8000f5c <__udivmoddi4+0x1f8>
 8001014:	4646      	mov	r6, r8
 8001016:	e7ea      	b.n	8000fee <__udivmoddi4+0x28a>
 8001018:	4620      	mov	r0, r4
 800101a:	e794      	b.n	8000f46 <__udivmoddi4+0x1e2>
 800101c:	4640      	mov	r0, r8
 800101e:	e7d1      	b.n	8000fc4 <__udivmoddi4+0x260>
 8001020:	46d0      	mov	r8, sl
 8001022:	e77b      	b.n	8000f1c <__udivmoddi4+0x1b8>
 8001024:	3b02      	subs	r3, #2
 8001026:	4461      	add	r1, ip
 8001028:	e732      	b.n	8000e90 <__udivmoddi4+0x12c>
 800102a:	4630      	mov	r0, r6
 800102c:	e709      	b.n	8000e42 <__udivmoddi4+0xde>
 800102e:	4464      	add	r4, ip
 8001030:	3802      	subs	r0, #2
 8001032:	e742      	b.n	8000eba <__udivmoddi4+0x156>

08001034 <__aeabi_idiv0>:
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop

08001038 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of myMutex01 */
  myMutex01Handle = osMutexNew(&myMutex01_attributes);
 800103c:	481b      	ldr	r0, [pc, #108]	; (80010ac <MX_FREERTOS_Init+0x74>)
 800103e:	f002 ff03 	bl	8003e48 <osMutexNew>
 8001042:	4603      	mov	r3, r0
 8001044:	4a1a      	ldr	r2, [pc, #104]	; (80010b0 <MX_FREERTOS_Init+0x78>)
 8001046:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of myBinarySem01 */
  myBinarySem01Handle = osSemaphoreNew(1, 1, &myBinarySem01_attributes);
 8001048:	4a1a      	ldr	r2, [pc, #104]	; (80010b4 <MX_FREERTOS_Init+0x7c>)
 800104a:	2101      	movs	r1, #1
 800104c:	2001      	movs	r0, #1
 800104e:	f003 f809 	bl	8004064 <osSemaphoreNew>
 8001052:	4603      	mov	r3, r0
 8001054:	4a18      	ldr	r2, [pc, #96]	; (80010b8 <MX_FREERTOS_Init+0x80>)
 8001056:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001058:	4a18      	ldr	r2, [pc, #96]	; (80010bc <MX_FREERTOS_Init+0x84>)
 800105a:	2100      	movs	r1, #0
 800105c:	4818      	ldr	r0, [pc, #96]	; (80010c0 <MX_FREERTOS_Init+0x88>)
 800105e:	f002 fe46 	bl	8003cee <osThreadNew>
 8001062:	4603      	mov	r3, r0
 8001064:	4a17      	ldr	r2, [pc, #92]	; (80010c4 <MX_FREERTOS_Init+0x8c>)
 8001066:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 8001068:	4a17      	ldr	r2, [pc, #92]	; (80010c8 <MX_FREERTOS_Init+0x90>)
 800106a:	2100      	movs	r1, #0
 800106c:	4817      	ldr	r0, [pc, #92]	; (80010cc <MX_FREERTOS_Init+0x94>)
 800106e:	f002 fe3e 	bl	8003cee <osThreadNew>
 8001072:	4603      	mov	r3, r0
 8001074:	4a16      	ldr	r2, [pc, #88]	; (80010d0 <MX_FREERTOS_Init+0x98>)
 8001076:	6013      	str	r3, [r2, #0]

  /* creation of myTask03 */
  myTask03Handle = osThreadNew(StartTask03, NULL, &myTask03_attributes);
 8001078:	4a16      	ldr	r2, [pc, #88]	; (80010d4 <MX_FREERTOS_Init+0x9c>)
 800107a:	2100      	movs	r1, #0
 800107c:	4816      	ldr	r0, [pc, #88]	; (80010d8 <MX_FREERTOS_Init+0xa0>)
 800107e:	f002 fe36 	bl	8003cee <osThreadNew>
 8001082:	4603      	mov	r3, r0
 8001084:	4a15      	ldr	r2, [pc, #84]	; (80010dc <MX_FREERTOS_Init+0xa4>)
 8001086:	6013      	str	r3, [r2, #0]

  /* creation of myTask04 */
  myTask04Handle = osThreadNew(StartTask04, NULL, &myTask04_attributes);
 8001088:	4a15      	ldr	r2, [pc, #84]	; (80010e0 <MX_FREERTOS_Init+0xa8>)
 800108a:	2100      	movs	r1, #0
 800108c:	4815      	ldr	r0, [pc, #84]	; (80010e4 <MX_FREERTOS_Init+0xac>)
 800108e:	f002 fe2e 	bl	8003cee <osThreadNew>
 8001092:	4603      	mov	r3, r0
 8001094:	4a14      	ldr	r2, [pc, #80]	; (80010e8 <MX_FREERTOS_Init+0xb0>)
 8001096:	6013      	str	r3, [r2, #0]

  /* creation of myPrintTask */
  myPrintTaskHandle = osThreadNew(StartPrintTask, NULL, &myPrintTask_attributes);
 8001098:	4a14      	ldr	r2, [pc, #80]	; (80010ec <MX_FREERTOS_Init+0xb4>)
 800109a:	2100      	movs	r1, #0
 800109c:	4814      	ldr	r0, [pc, #80]	; (80010f0 <MX_FREERTOS_Init+0xb8>)
 800109e:	f002 fe26 	bl	8003cee <osThreadNew>
 80010a2:	4603      	mov	r3, r0
 80010a4:	4a13      	ldr	r2, [pc, #76]	; (80010f4 <MX_FREERTOS_Init+0xbc>)
 80010a6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80010a8:	bf00      	nop
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	0800c050 	.word	0x0800c050
 80010b0:	20000230 	.word	0x20000230
 80010b4:	0800c060 	.word	0x0800c060
 80010b8:	20000234 	.word	0x20000234
 80010bc:	0800bf9c 	.word	0x0800bf9c
 80010c0:	080010f9 	.word	0x080010f9
 80010c4:	2000021c 	.word	0x2000021c
 80010c8:	0800bfc0 	.word	0x0800bfc0
 80010cc:	08001109 	.word	0x08001109
 80010d0:	20000220 	.word	0x20000220
 80010d4:	0800bfe4 	.word	0x0800bfe4
 80010d8:	0800120d 	.word	0x0800120d
 80010dc:	20000224 	.word	0x20000224
 80010e0:	0800c008 	.word	0x0800c008
 80010e4:	08001311 	.word	0x08001311
 80010e8:	20000228 	.word	0x20000228
 80010ec:	0800c02c 	.word	0x0800c02c
 80010f0:	08001415 	.word	0x08001415
 80010f4:	2000022c 	.word	0x2000022c

080010f8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001100:	2001      	movs	r0, #1
 8001102:	f002 fe86 	bl	8003e12 <osDelay>
 8001106:	e7fb      	b.n	8001100 <StartDefaultTask+0x8>

08001108 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b086      	sub	sp, #24
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
	float rnd, mean, square;
	srand((unsigned)osKernelSysTick());
 8001110:	f002 fdb4 	bl	8003c7c <osKernelGetSysTimerCount>
 8001114:	4603      	mov	r3, r0
 8001116:	4618      	mov	r0, r3
 8001118:	f007 f8d0 	bl	80082bc <srand>
	data.status1 = 0;
 800111c:	4b37      	ldr	r3, [pc, #220]	; (80011fc <StartTask02+0xf4>)
 800111e:	2200      	movs	r2, #0
 8001120:	761a      	strb	r2, [r3, #24]

  /* Infinite loop */
  for(;;)
  {
	  if(!data.status1) {
 8001122:	4b36      	ldr	r3, [pc, #216]	; (80011fc <StartTask02+0xf4>)
 8001124:	7e1b      	ldrb	r3, [r3, #24]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d164      	bne.n	80011f4 <StartTask02+0xec>

		#ifdef SEMAPHORE
		osSemaphoreAcquire(myBinarySem01Handle, osWaitForever);
		#else
		osMutexAcquire(myMutex01Handle, osWaitForever);
 800112a:	4b35      	ldr	r3, [pc, #212]	; (8001200 <StartTask02+0xf8>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001132:	4618      	mov	r0, r3
 8001134:	f002 ff0e 	bl	8003f54 <osMutexAcquire>
		#endif

		mean = 0;
 8001138:	f04f 0300 	mov.w	r3, #0
 800113c:	617b      	str	r3, [r7, #20]
		square = 0;
 800113e:	f04f 0300 	mov.w	r3, #0
 8001142:	613b      	str	r3, [r7, #16]

		for(uint16_t i = 0; i < 1000; i++) {
 8001144:	2300      	movs	r3, #0
 8001146:	81fb      	strh	r3, [r7, #14]
 8001148:	e026      	b.n	8001198 <StartTask02+0x90>
		 // cast random value to float, divide by RAND_MAX to get 0-1 range, *2 to get 0-2 range and -1 to get -1 to 1 range
		  rnd = (float)rand() / RAND_MAX * 2.0f - 1.0f;
 800114a:	f007 f8e5 	bl	8008318 <rand>
 800114e:	ee07 0a90 	vmov	s15, r0
 8001152:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001156:	eddf 6a2b 	vldr	s13, [pc, #172]	; 8001204 <StartTask02+0xfc>
 800115a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800115e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001162:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001166:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800116a:	edc7 7a02 	vstr	s15, [r7, #8]
		  mean += rnd;
 800116e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001172:	edd7 7a02 	vldr	s15, [r7, #8]
 8001176:	ee77 7a27 	vadd.f32	s15, s14, s15
 800117a:	edc7 7a05 	vstr	s15, [r7, #20]
		  square += rnd * rnd;
 800117e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001182:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001186:	ed97 7a04 	vldr	s14, [r7, #16]
 800118a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800118e:	edc7 7a04 	vstr	s15, [r7, #16]
		for(uint16_t i = 0; i < 1000; i++) {
 8001192:	89fb      	ldrh	r3, [r7, #14]
 8001194:	3301      	adds	r3, #1
 8001196:	81fb      	strh	r3, [r7, #14]
 8001198:	89fb      	ldrh	r3, [r7, #14]
 800119a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800119e:	d3d4      	bcc.n	800114a <StartTask02+0x42>
		}

		data.data1[0] = mean/1000;
 80011a0:	ed97 7a05 	vldr	s14, [r7, #20]
 80011a4:	eddf 6a18 	vldr	s13, [pc, #96]	; 8001208 <StartTask02+0x100>
 80011a8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011ac:	4b13      	ldr	r3, [pc, #76]	; (80011fc <StartTask02+0xf4>)
 80011ae:	edc3 7a00 	vstr	s15, [r3]
		data.data1[1] = sqrt(square/1000);
 80011b2:	edd7 7a04 	vldr	s15, [r7, #16]
 80011b6:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001208 <StartTask02+0x100>
 80011ba:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80011be:	ee16 0a90 	vmov	r0, s13
 80011c2:	f7ff f9e1 	bl	8000588 <__aeabi_f2d>
 80011c6:	4602      	mov	r2, r0
 80011c8:	460b      	mov	r3, r1
 80011ca:	ec43 2b10 	vmov	d0, r2, r3
 80011ce:	f00a fda9 	bl	800bd24 <sqrt>
 80011d2:	ec53 2b10 	vmov	r2, r3, d0
 80011d6:	4610      	mov	r0, r2
 80011d8:	4619      	mov	r1, r3
 80011da:	f7ff fd25 	bl	8000c28 <__aeabi_d2f>
 80011de:	4603      	mov	r3, r0
 80011e0:	4a06      	ldr	r2, [pc, #24]	; (80011fc <StartTask02+0xf4>)
 80011e2:	6053      	str	r3, [r2, #4]
		data.status1  =	1;
 80011e4:	4b05      	ldr	r3, [pc, #20]	; (80011fc <StartTask02+0xf4>)
 80011e6:	2201      	movs	r2, #1
 80011e8:	761a      	strb	r2, [r3, #24]

		#ifdef SEMAPHORE
		osSemaphoreRelease(myBinarySem01Handle);
		#else
		osMutexRelease(myMutex01Handle);
 80011ea:	4b05      	ldr	r3, [pc, #20]	; (8001200 <StartTask02+0xf8>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4618      	mov	r0, r3
 80011f0:	f002 fefb 	bl	8003fea <osMutexRelease>
		#endif
	}
    osDelay(1);
 80011f4:	2001      	movs	r0, #1
 80011f6:	f002 fe0c 	bl	8003e12 <osDelay>
	  if(!data.status1) {
 80011fa:	e792      	b.n	8001122 <StartTask02+0x1a>
 80011fc:	20000200 	.word	0x20000200
 8001200:	20000230 	.word	0x20000230
 8001204:	4f000000 	.word	0x4f000000
 8001208:	447a0000 	.word	0x447a0000

0800120c <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b086      	sub	sp, #24
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
	float rnd, mean, square;
	srand((unsigned)osKernelSysTick());
 8001214:	f002 fd32 	bl	8003c7c <osKernelGetSysTimerCount>
 8001218:	4603      	mov	r3, r0
 800121a:	4618      	mov	r0, r3
 800121c:	f007 f84e 	bl	80082bc <srand>
	data.status2 = 0;
 8001220:	4b37      	ldr	r3, [pc, #220]	; (8001300 <StartTask03+0xf4>)
 8001222:	2200      	movs	r2, #0
 8001224:	765a      	strb	r2, [r3, #25]

  /* Infinite loop */
  for(;;)
  {
	  if(!data.status2) {
 8001226:	4b36      	ldr	r3, [pc, #216]	; (8001300 <StartTask03+0xf4>)
 8001228:	7e5b      	ldrb	r3, [r3, #25]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d164      	bne.n	80012f8 <StartTask03+0xec>

		#ifdef SEMAPHORE
		osSemaphoreAcquire(myBinarySem01Handle, osWaitForever);
		#else
		osMutexAcquire(myMutex01Handle, osWaitForever);
 800122e:	4b35      	ldr	r3, [pc, #212]	; (8001304 <StartTask03+0xf8>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001236:	4618      	mov	r0, r3
 8001238:	f002 fe8c 	bl	8003f54 <osMutexAcquire>
		#endif

		mean = 0;
 800123c:	f04f 0300 	mov.w	r3, #0
 8001240:	617b      	str	r3, [r7, #20]
		square = 0;
 8001242:	f04f 0300 	mov.w	r3, #0
 8001246:	613b      	str	r3, [r7, #16]

		for(uint16_t i = 0; i < 1000; i++){
 8001248:	2300      	movs	r3, #0
 800124a:	81fb      	strh	r3, [r7, #14]
 800124c:	e026      	b.n	800129c <StartTask03+0x90>
			// cast random value to float, divide by RAND_MAX to get 0-1 range, *2 to get 0-2 range and -1 to get -1 to 1 range
			rnd = (float)rand() / RAND_MAX * 2.0f - 1.0f;
 800124e:	f007 f863 	bl	8008318 <rand>
 8001252:	ee07 0a90 	vmov	s15, r0
 8001256:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800125a:	eddf 6a2b 	vldr	s13, [pc, #172]	; 8001308 <StartTask03+0xfc>
 800125e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001262:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001266:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800126a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800126e:	edc7 7a02 	vstr	s15, [r7, #8]
			mean += rnd;
 8001272:	ed97 7a05 	vldr	s14, [r7, #20]
 8001276:	edd7 7a02 	vldr	s15, [r7, #8]
 800127a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800127e:	edc7 7a05 	vstr	s15, [r7, #20]
			square += rnd * rnd;
 8001282:	edd7 7a02 	vldr	s15, [r7, #8]
 8001286:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800128a:	ed97 7a04 	vldr	s14, [r7, #16]
 800128e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001292:	edc7 7a04 	vstr	s15, [r7, #16]
		for(uint16_t i = 0; i < 1000; i++){
 8001296:	89fb      	ldrh	r3, [r7, #14]
 8001298:	3301      	adds	r3, #1
 800129a:	81fb      	strh	r3, [r7, #14]
 800129c:	89fb      	ldrh	r3, [r7, #14]
 800129e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80012a2:	d3d4      	bcc.n	800124e <StartTask03+0x42>
		}

		data.data2[0] = mean/1000;
 80012a4:	ed97 7a05 	vldr	s14, [r7, #20]
 80012a8:	eddf 6a18 	vldr	s13, [pc, #96]	; 800130c <StartTask03+0x100>
 80012ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012b0:	4b13      	ldr	r3, [pc, #76]	; (8001300 <StartTask03+0xf4>)
 80012b2:	edc3 7a02 	vstr	s15, [r3, #8]
		data.data2[1] = sqrt(square/1000);
 80012b6:	edd7 7a04 	vldr	s15, [r7, #16]
 80012ba:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800130c <StartTask03+0x100>
 80012be:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80012c2:	ee16 0a90 	vmov	r0, s13
 80012c6:	f7ff f95f 	bl	8000588 <__aeabi_f2d>
 80012ca:	4602      	mov	r2, r0
 80012cc:	460b      	mov	r3, r1
 80012ce:	ec43 2b10 	vmov	d0, r2, r3
 80012d2:	f00a fd27 	bl	800bd24 <sqrt>
 80012d6:	ec53 2b10 	vmov	r2, r3, d0
 80012da:	4610      	mov	r0, r2
 80012dc:	4619      	mov	r1, r3
 80012de:	f7ff fca3 	bl	8000c28 <__aeabi_d2f>
 80012e2:	4603      	mov	r3, r0
 80012e4:	4a06      	ldr	r2, [pc, #24]	; (8001300 <StartTask03+0xf4>)
 80012e6:	60d3      	str	r3, [r2, #12]
		data.status2  = 1;
 80012e8:	4b05      	ldr	r3, [pc, #20]	; (8001300 <StartTask03+0xf4>)
 80012ea:	2201      	movs	r2, #1
 80012ec:	765a      	strb	r2, [r3, #25]

		#ifdef SEMAPHORE
		osSemaphoreRelease(myBinarySem01Handle);
		#else
		osMutexRelease(myMutex01Handle);
 80012ee:	4b05      	ldr	r3, [pc, #20]	; (8001304 <StartTask03+0xf8>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4618      	mov	r0, r3
 80012f4:	f002 fe79 	bl	8003fea <osMutexRelease>
		#endif
	  }
	  osDelay(1);
 80012f8:	2001      	movs	r0, #1
 80012fa:	f002 fd8a 	bl	8003e12 <osDelay>
	  if(!data.status2) {
 80012fe:	e792      	b.n	8001226 <StartTask03+0x1a>
 8001300:	20000200 	.word	0x20000200
 8001304:	20000230 	.word	0x20000230
 8001308:	4f000000 	.word	0x4f000000
 800130c:	447a0000 	.word	0x447a0000

08001310 <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void *argument)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b086      	sub	sp, #24
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */
	float rnd, mean, square;
	srand((unsigned)osKernelSysTick());
 8001318:	f002 fcb0 	bl	8003c7c <osKernelGetSysTimerCount>
 800131c:	4603      	mov	r3, r0
 800131e:	4618      	mov	r0, r3
 8001320:	f006 ffcc 	bl	80082bc <srand>
	data.status3 = 0;
 8001324:	4b37      	ldr	r3, [pc, #220]	; (8001404 <StartTask04+0xf4>)
 8001326:	2200      	movs	r2, #0
 8001328:	769a      	strb	r2, [r3, #26]

  /* Infinite loop */
  for(;;)
  {
	  if(!data.status2) {
 800132a:	4b36      	ldr	r3, [pc, #216]	; (8001404 <StartTask04+0xf4>)
 800132c:	7e5b      	ldrb	r3, [r3, #25]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d164      	bne.n	80013fc <StartTask04+0xec>

		#ifdef SEMAPHORE
		  osSemaphoreAcquire(myBinarySem01Handle, osWaitForever);
		#else
		  osMutexAcquire(myMutex01Handle, osWaitForever);
 8001332:	4b35      	ldr	r3, [pc, #212]	; (8001408 <StartTask04+0xf8>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800133a:	4618      	mov	r0, r3
 800133c:	f002 fe0a 	bl	8003f54 <osMutexAcquire>
		#endif

		  mean = 0;
 8001340:	f04f 0300 	mov.w	r3, #0
 8001344:	617b      	str	r3, [r7, #20]
		  square = 0;
 8001346:	f04f 0300 	mov.w	r3, #0
 800134a:	613b      	str	r3, [r7, #16]

		  for(uint16_t i = 0; i < 1000; i++){
 800134c:	2300      	movs	r3, #0
 800134e:	81fb      	strh	r3, [r7, #14]
 8001350:	e026      	b.n	80013a0 <StartTask04+0x90>
			  // cast random value to float, divide by RAND_MAX to get 0-1 range, *2 to get 0-2 range and -1 to get -1 to 1 range
			  rnd = (float)rand() / RAND_MAX * 2.0f - 1.0f;
 8001352:	f006 ffe1 	bl	8008318 <rand>
 8001356:	ee07 0a90 	vmov	s15, r0
 800135a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800135e:	eddf 6a2b 	vldr	s13, [pc, #172]	; 800140c <StartTask04+0xfc>
 8001362:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001366:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800136a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800136e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001372:	edc7 7a02 	vstr	s15, [r7, #8]
			  mean += rnd;
 8001376:	ed97 7a05 	vldr	s14, [r7, #20]
 800137a:	edd7 7a02 	vldr	s15, [r7, #8]
 800137e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001382:	edc7 7a05 	vstr	s15, [r7, #20]
			  square += rnd * rnd;
 8001386:	edd7 7a02 	vldr	s15, [r7, #8]
 800138a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800138e:	ed97 7a04 	vldr	s14, [r7, #16]
 8001392:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001396:	edc7 7a04 	vstr	s15, [r7, #16]
		  for(uint16_t i = 0; i < 1000; i++){
 800139a:	89fb      	ldrh	r3, [r7, #14]
 800139c:	3301      	adds	r3, #1
 800139e:	81fb      	strh	r3, [r7, #14]
 80013a0:	89fb      	ldrh	r3, [r7, #14]
 80013a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80013a6:	d3d4      	bcc.n	8001352 <StartTask04+0x42>
		  }

		  data.data3[0] = mean/1000;
 80013a8:	ed97 7a05 	vldr	s14, [r7, #20]
 80013ac:	eddf 6a18 	vldr	s13, [pc, #96]	; 8001410 <StartTask04+0x100>
 80013b0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013b4:	4b13      	ldr	r3, [pc, #76]	; (8001404 <StartTask04+0xf4>)
 80013b6:	edc3 7a04 	vstr	s15, [r3, #16]
		  data.data3[1] = sqrt(square/1000);
 80013ba:	edd7 7a04 	vldr	s15, [r7, #16]
 80013be:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001410 <StartTask04+0x100>
 80013c2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80013c6:	ee16 0a90 	vmov	r0, s13
 80013ca:	f7ff f8dd 	bl	8000588 <__aeabi_f2d>
 80013ce:	4602      	mov	r2, r0
 80013d0:	460b      	mov	r3, r1
 80013d2:	ec43 2b10 	vmov	d0, r2, r3
 80013d6:	f00a fca5 	bl	800bd24 <sqrt>
 80013da:	ec53 2b10 	vmov	r2, r3, d0
 80013de:	4610      	mov	r0, r2
 80013e0:	4619      	mov	r1, r3
 80013e2:	f7ff fc21 	bl	8000c28 <__aeabi_d2f>
 80013e6:	4603      	mov	r3, r0
 80013e8:	4a06      	ldr	r2, [pc, #24]	; (8001404 <StartTask04+0xf4>)
 80013ea:	6153      	str	r3, [r2, #20]
		  data.status3  = 1;
 80013ec:	4b05      	ldr	r3, [pc, #20]	; (8001404 <StartTask04+0xf4>)
 80013ee:	2201      	movs	r2, #1
 80013f0:	769a      	strb	r2, [r3, #26]

		#ifdef SEMAPHORE
		osSemaphoreRelease(myBinarySem01Handle);
		#else
		osMutexRelease(myMutex01Handle);
 80013f2:	4b05      	ldr	r3, [pc, #20]	; (8001408 <StartTask04+0xf8>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4618      	mov	r0, r3
 80013f8:	f002 fdf7 	bl	8003fea <osMutexRelease>
		#endif
	  }
    osDelay(1);
 80013fc:	2001      	movs	r0, #1
 80013fe:	f002 fd08 	bl	8003e12 <osDelay>
	  if(!data.status2) {
 8001402:	e792      	b.n	800132a <StartTask04+0x1a>
 8001404:	20000200 	.word	0x20000200
 8001408:	20000230 	.word	0x20000230
 800140c:	4f000000 	.word	0x4f000000
 8001410:	447a0000 	.word	0x447a0000

08001414 <StartPrintTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPrintTask */
void StartPrintTask(void *argument)
{
 8001414:	b5b0      	push	{r4, r5, r7, lr}
 8001416:	b096      	sub	sp, #88	; 0x58
 8001418:	af02      	add	r7, sp, #8
 800141a:	6078      	str	r0, [r7, #4]
	float means[2];
	uint8_t buf[61];
	/* Infinite loop */
	for(;;)
	{
		if (data.status1 && data.status2 && data.status3){
 800141c:	4b3c      	ldr	r3, [pc, #240]	; (8001510 <StartPrintTask+0xfc>)
 800141e:	7e1b      	ldrb	r3, [r3, #24]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d070      	beq.n	8001506 <StartPrintTask+0xf2>
 8001424:	4b3a      	ldr	r3, [pc, #232]	; (8001510 <StartPrintTask+0xfc>)
 8001426:	7e5b      	ldrb	r3, [r3, #25]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d06c      	beq.n	8001506 <StartPrintTask+0xf2>
 800142c:	4b38      	ldr	r3, [pc, #224]	; (8001510 <StartPrintTask+0xfc>)
 800142e:	7e9b      	ldrb	r3, [r3, #26]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d068      	beq.n	8001506 <StartPrintTask+0xf2>

		#ifdef SEMAPHORE
		osSemaphoreAcquire(myBinarySem01Handle, osWaitForever);
		#else
		osMutexAcquire(myMutex01Handle, osWaitForever);
 8001434:	4b37      	ldr	r3, [pc, #220]	; (8001514 <StartPrintTask+0x100>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800143c:	4618      	mov	r0, r3
 800143e:	f002 fd89 	bl	8003f54 <osMutexAcquire>
		#endif

		  //means of means
		  means[0] = (data.data1[0] + data.data2[0] + data.data3[0]) / 3;
 8001442:	4b33      	ldr	r3, [pc, #204]	; (8001510 <StartPrintTask+0xfc>)
 8001444:	ed93 7a00 	vldr	s14, [r3]
 8001448:	4b31      	ldr	r3, [pc, #196]	; (8001510 <StartPrintTask+0xfc>)
 800144a:	edd3 7a02 	vldr	s15, [r3, #8]
 800144e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001452:	4b2f      	ldr	r3, [pc, #188]	; (8001510 <StartPrintTask+0xfc>)
 8001454:	edd3 7a04 	vldr	s15, [r3, #16]
 8001458:	ee37 7a27 	vadd.f32	s14, s14, s15
 800145c:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8001460:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001464:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
		  means[1] = (data.data1[1] + data.data2[2] + data.data3[3]) / 3;
 8001468:	4b29      	ldr	r3, [pc, #164]	; (8001510 <StartPrintTask+0xfc>)
 800146a:	ed93 7a01 	vldr	s14, [r3, #4]
 800146e:	4b28      	ldr	r3, [pc, #160]	; (8001510 <StartPrintTask+0xfc>)
 8001470:	edd3 7a04 	vldr	s15, [r3, #16]
 8001474:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001478:	4b25      	ldr	r3, [pc, #148]	; (8001510 <StartPrintTask+0xfc>)
 800147a:	edd3 7a07 	vldr	s15, [r3, #28]
 800147e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001482:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8001486:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800148a:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c

		  sprintf(buf, "Mean of means = %f | Mean of square means = %f", means[0], means[1]);
 800148e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001490:	4618      	mov	r0, r3
 8001492:	f7ff f879 	bl	8000588 <__aeabi_f2d>
 8001496:	4604      	mov	r4, r0
 8001498:	460d      	mov	r5, r1
 800149a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800149c:	4618      	mov	r0, r3
 800149e:	f7ff f873 	bl	8000588 <__aeabi_f2d>
 80014a2:	4602      	mov	r2, r0
 80014a4:	460b      	mov	r3, r1
 80014a6:	f107 0008 	add.w	r0, r7, #8
 80014aa:	e9cd 2300 	strd	r2, r3, [sp]
 80014ae:	4622      	mov	r2, r4
 80014b0:	462b      	mov	r3, r5
 80014b2:	4919      	ldr	r1, [pc, #100]	; (8001518 <StartPrintTask+0x104>)
 80014b4:	f006 ffee 	bl	8008494 <siprintf>
		  HAL_UART_Transmit(&huart2, buf, strlen((const char*)buf), HAL_MAX_DELAY);
 80014b8:	f107 0308 	add.w	r3, r7, #8
 80014bc:	4618      	mov	r0, r3
 80014be:	f7fe fea7 	bl	8000210 <strlen>
 80014c2:	4603      	mov	r3, r0
 80014c4:	b29a      	uxth	r2, r3
 80014c6:	f107 0108 	add.w	r1, r7, #8
 80014ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014ce:	4813      	ldr	r0, [pc, #76]	; (800151c <StartPrintTask+0x108>)
 80014d0:	f001 ffa5 	bl	800341e <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart2, (uint8_t*)"\n", sizeof("\n"), HAL_MAX_DELAY);
 80014d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014d8:	2202      	movs	r2, #2
 80014da:	4911      	ldr	r1, [pc, #68]	; (8001520 <StartPrintTask+0x10c>)
 80014dc:	480f      	ldr	r0, [pc, #60]	; (800151c <StartPrintTask+0x108>)
 80014de:	f001 ff9e 	bl	800341e <HAL_UART_Transmit>

		  data.status1 = 0;
 80014e2:	4b0b      	ldr	r3, [pc, #44]	; (8001510 <StartPrintTask+0xfc>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	761a      	strb	r2, [r3, #24]
		  data.status2 = 0;
 80014e8:	4b09      	ldr	r3, [pc, #36]	; (8001510 <StartPrintTask+0xfc>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	765a      	strb	r2, [r3, #25]
		  data.status3 = 0;
 80014ee:	4b08      	ldr	r3, [pc, #32]	; (8001510 <StartPrintTask+0xfc>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	769a      	strb	r2, [r3, #26]
		  // delay 10 * 60 chars
		  osDelay(600);
 80014f4:	f44f 7016 	mov.w	r0, #600	; 0x258
 80014f8:	f002 fc8b 	bl	8003e12 <osDelay>


		#ifdef SEMAPHORE
		  osSemaphoreRelease(myBinarySem01Handle);
		#else
		  osMutexRelease(myMutex01Handle);
 80014fc:	4b05      	ldr	r3, [pc, #20]	; (8001514 <StartPrintTask+0x100>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4618      	mov	r0, r3
 8001502:	f002 fd72 	bl	8003fea <osMutexRelease>
		#endif
		}
		//1s - 600ms from previous delay
		osDelay(400);
 8001506:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800150a:	f002 fc82 	bl	8003e12 <osDelay>
		if (data.status1 && data.status2 && data.status3){
 800150e:	e785      	b.n	800141c <StartPrintTask+0x8>
 8001510:	20000200 	.word	0x20000200
 8001514:	20000230 	.word	0x20000230
 8001518:	0800bf50 	.word	0x0800bf50
 800151c:	20000284 	.word	0x20000284
 8001520:	0800bf80 	.word	0x0800bf80

08001524 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b08a      	sub	sp, #40	; 0x28
 8001528:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800152a:	f107 0314 	add.w	r3, r7, #20
 800152e:	2200      	movs	r2, #0
 8001530:	601a      	str	r2, [r3, #0]
 8001532:	605a      	str	r2, [r3, #4]
 8001534:	609a      	str	r2, [r3, #8]
 8001536:	60da      	str	r2, [r3, #12]
 8001538:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800153a:	2300      	movs	r3, #0
 800153c:	613b      	str	r3, [r7, #16]
 800153e:	4b2d      	ldr	r3, [pc, #180]	; (80015f4 <MX_GPIO_Init+0xd0>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001542:	4a2c      	ldr	r2, [pc, #176]	; (80015f4 <MX_GPIO_Init+0xd0>)
 8001544:	f043 0304 	orr.w	r3, r3, #4
 8001548:	6313      	str	r3, [r2, #48]	; 0x30
 800154a:	4b2a      	ldr	r3, [pc, #168]	; (80015f4 <MX_GPIO_Init+0xd0>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154e:	f003 0304 	and.w	r3, r3, #4
 8001552:	613b      	str	r3, [r7, #16]
 8001554:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001556:	2300      	movs	r3, #0
 8001558:	60fb      	str	r3, [r7, #12]
 800155a:	4b26      	ldr	r3, [pc, #152]	; (80015f4 <MX_GPIO_Init+0xd0>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155e:	4a25      	ldr	r2, [pc, #148]	; (80015f4 <MX_GPIO_Init+0xd0>)
 8001560:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001564:	6313      	str	r3, [r2, #48]	; 0x30
 8001566:	4b23      	ldr	r3, [pc, #140]	; (80015f4 <MX_GPIO_Init+0xd0>)
 8001568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800156e:	60fb      	str	r3, [r7, #12]
 8001570:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001572:	2300      	movs	r3, #0
 8001574:	60bb      	str	r3, [r7, #8]
 8001576:	4b1f      	ldr	r3, [pc, #124]	; (80015f4 <MX_GPIO_Init+0xd0>)
 8001578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157a:	4a1e      	ldr	r2, [pc, #120]	; (80015f4 <MX_GPIO_Init+0xd0>)
 800157c:	f043 0301 	orr.w	r3, r3, #1
 8001580:	6313      	str	r3, [r2, #48]	; 0x30
 8001582:	4b1c      	ldr	r3, [pc, #112]	; (80015f4 <MX_GPIO_Init+0xd0>)
 8001584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001586:	f003 0301 	and.w	r3, r3, #1
 800158a:	60bb      	str	r3, [r7, #8]
 800158c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800158e:	2300      	movs	r3, #0
 8001590:	607b      	str	r3, [r7, #4]
 8001592:	4b18      	ldr	r3, [pc, #96]	; (80015f4 <MX_GPIO_Init+0xd0>)
 8001594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001596:	4a17      	ldr	r2, [pc, #92]	; (80015f4 <MX_GPIO_Init+0xd0>)
 8001598:	f043 0302 	orr.w	r3, r3, #2
 800159c:	6313      	str	r3, [r2, #48]	; 0x30
 800159e:	4b15      	ldr	r3, [pc, #84]	; (80015f4 <MX_GPIO_Init+0xd0>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a2:	f003 0302 	and.w	r3, r3, #2
 80015a6:	607b      	str	r3, [r7, #4]
 80015a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80015aa:	2200      	movs	r2, #0
 80015ac:	2120      	movs	r1, #32
 80015ae:	4812      	ldr	r0, [pc, #72]	; (80015f8 <MX_GPIO_Init+0xd4>)
 80015b0:	f000 fdb6 	bl	8002120 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80015b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80015ba:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80015be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c0:	2300      	movs	r3, #0
 80015c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80015c4:	f107 0314 	add.w	r3, r7, #20
 80015c8:	4619      	mov	r1, r3
 80015ca:	480c      	ldr	r0, [pc, #48]	; (80015fc <MX_GPIO_Init+0xd8>)
 80015cc:	f000 fc14 	bl	8001df8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80015d0:	2320      	movs	r3, #32
 80015d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015d4:	2301      	movs	r3, #1
 80015d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d8:	2300      	movs	r3, #0
 80015da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015dc:	2300      	movs	r3, #0
 80015de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80015e0:	f107 0314 	add.w	r3, r7, #20
 80015e4:	4619      	mov	r1, r3
 80015e6:	4804      	ldr	r0, [pc, #16]	; (80015f8 <MX_GPIO_Init+0xd4>)
 80015e8:	f000 fc06 	bl	8001df8 <HAL_GPIO_Init>

}
 80015ec:	bf00      	nop
 80015ee:	3728      	adds	r7, #40	; 0x28
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	40023800 	.word	0x40023800
 80015f8:	40020000 	.word	0x40020000
 80015fc:	40020800 	.word	0x40020800

08001600 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001604:	f000 fad4 	bl	8001bb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001608:	f000 f80c 	bl	8001624 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800160c:	f7ff ff8a 	bl	8001524 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001610:	f000 fa32 	bl	8001a78 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001614:	f002 fabc 	bl	8003b90 <osKernelInitialize>
  MX_FREERTOS_Init();
 8001618:	f7ff fd0e 	bl	8001038 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800161c:	f002 fadc 	bl	8003bd8 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001620:	e7fe      	b.n	8001620 <main+0x20>
	...

08001624 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b094      	sub	sp, #80	; 0x50
 8001628:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800162a:	f107 031c 	add.w	r3, r7, #28
 800162e:	2234      	movs	r2, #52	; 0x34
 8001630:	2100      	movs	r1, #0
 8001632:	4618      	mov	r0, r3
 8001634:	f005 ff2b 	bl	800748e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001638:	f107 0308 	add.w	r3, r7, #8
 800163c:	2200      	movs	r2, #0
 800163e:	601a      	str	r2, [r3, #0]
 8001640:	605a      	str	r2, [r3, #4]
 8001642:	609a      	str	r2, [r3, #8]
 8001644:	60da      	str	r2, [r3, #12]
 8001646:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001648:	2300      	movs	r3, #0
 800164a:	607b      	str	r3, [r7, #4]
 800164c:	4b2c      	ldr	r3, [pc, #176]	; (8001700 <SystemClock_Config+0xdc>)
 800164e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001650:	4a2b      	ldr	r2, [pc, #172]	; (8001700 <SystemClock_Config+0xdc>)
 8001652:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001656:	6413      	str	r3, [r2, #64]	; 0x40
 8001658:	4b29      	ldr	r3, [pc, #164]	; (8001700 <SystemClock_Config+0xdc>)
 800165a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001660:	607b      	str	r3, [r7, #4]
 8001662:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001664:	2300      	movs	r3, #0
 8001666:	603b      	str	r3, [r7, #0]
 8001668:	4b26      	ldr	r3, [pc, #152]	; (8001704 <SystemClock_Config+0xe0>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a25      	ldr	r2, [pc, #148]	; (8001704 <SystemClock_Config+0xe0>)
 800166e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001672:	6013      	str	r3, [r2, #0]
 8001674:	4b23      	ldr	r3, [pc, #140]	; (8001704 <SystemClock_Config+0xe0>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800167c:	603b      	str	r3, [r7, #0]
 800167e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001680:	2302      	movs	r3, #2
 8001682:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001684:	2301      	movs	r3, #1
 8001686:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001688:	2310      	movs	r3, #16
 800168a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800168c:	2302      	movs	r3, #2
 800168e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001690:	2300      	movs	r3, #0
 8001692:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001694:	2308      	movs	r3, #8
 8001696:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001698:	23b4      	movs	r3, #180	; 0xb4
 800169a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800169c:	2302      	movs	r3, #2
 800169e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80016a0:	2302      	movs	r3, #2
 80016a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80016a4:	2302      	movs	r3, #2
 80016a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016a8:	f107 031c 	add.w	r3, r7, #28
 80016ac:	4618      	mov	r0, r3
 80016ae:	f001 f91d 	bl	80028ec <HAL_RCC_OscConfig>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80016b8:	f000 f838 	bl	800172c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80016bc:	f000 fd4a 	bl	8002154 <HAL_PWREx_EnableOverDrive>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80016c6:	f000 f831 	bl	800172c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016ca:	230f      	movs	r3, #15
 80016cc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016ce:	2302      	movs	r3, #2
 80016d0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016d2:	2300      	movs	r3, #0
 80016d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80016d6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80016da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80016dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016e0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80016e2:	f107 0308 	add.w	r3, r7, #8
 80016e6:	2105      	movs	r1, #5
 80016e8:	4618      	mov	r0, r3
 80016ea:	f000 fd83 	bl	80021f4 <HAL_RCC_ClockConfig>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80016f4:	f000 f81a 	bl	800172c <Error_Handler>
  }
}
 80016f8:	bf00      	nop
 80016fa:	3750      	adds	r7, #80	; 0x50
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	40023800 	.word	0x40023800
 8001704:	40007000 	.word	0x40007000

08001708 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a04      	ldr	r2, [pc, #16]	; (8001728 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d101      	bne.n	800171e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800171a:	f000 fa6b 	bl	8001bf4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800171e:	bf00      	nop
 8001720:	3708      	adds	r7, #8
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	40001000 	.word	0x40001000

0800172c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001730:	b672      	cpsid	i
}
 8001732:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001734:	e7fe      	b.n	8001734 <Error_Handler+0x8>
	...

08001738 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800173e:	2300      	movs	r3, #0
 8001740:	607b      	str	r3, [r7, #4]
 8001742:	4b12      	ldr	r3, [pc, #72]	; (800178c <HAL_MspInit+0x54>)
 8001744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001746:	4a11      	ldr	r2, [pc, #68]	; (800178c <HAL_MspInit+0x54>)
 8001748:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800174c:	6453      	str	r3, [r2, #68]	; 0x44
 800174e:	4b0f      	ldr	r3, [pc, #60]	; (800178c <HAL_MspInit+0x54>)
 8001750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001752:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001756:	607b      	str	r3, [r7, #4]
 8001758:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800175a:	2300      	movs	r3, #0
 800175c:	603b      	str	r3, [r7, #0]
 800175e:	4b0b      	ldr	r3, [pc, #44]	; (800178c <HAL_MspInit+0x54>)
 8001760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001762:	4a0a      	ldr	r2, [pc, #40]	; (800178c <HAL_MspInit+0x54>)
 8001764:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001768:	6413      	str	r3, [r2, #64]	; 0x40
 800176a:	4b08      	ldr	r3, [pc, #32]	; (800178c <HAL_MspInit+0x54>)
 800176c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001772:	603b      	str	r3, [r7, #0]
 8001774:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001776:	2200      	movs	r2, #0
 8001778:	210f      	movs	r1, #15
 800177a:	f06f 0001 	mvn.w	r0, #1
 800177e:	f000 fb11 	bl	8001da4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001782:	bf00      	nop
 8001784:	3708      	adds	r7, #8
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	40023800 	.word	0x40023800

08001790 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b08e      	sub	sp, #56	; 0x38
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001798:	2300      	movs	r3, #0
 800179a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800179c:	2300      	movs	r3, #0
 800179e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80017a0:	2300      	movs	r3, #0
 80017a2:	60fb      	str	r3, [r7, #12]
 80017a4:	4b33      	ldr	r3, [pc, #204]	; (8001874 <HAL_InitTick+0xe4>)
 80017a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a8:	4a32      	ldr	r2, [pc, #200]	; (8001874 <HAL_InitTick+0xe4>)
 80017aa:	f043 0310 	orr.w	r3, r3, #16
 80017ae:	6413      	str	r3, [r2, #64]	; 0x40
 80017b0:	4b30      	ldr	r3, [pc, #192]	; (8001874 <HAL_InitTick+0xe4>)
 80017b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b4:	f003 0310 	and.w	r3, r3, #16
 80017b8:	60fb      	str	r3, [r7, #12]
 80017ba:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80017bc:	f107 0210 	add.w	r2, r7, #16
 80017c0:	f107 0314 	add.w	r3, r7, #20
 80017c4:	4611      	mov	r1, r2
 80017c6:	4618      	mov	r0, r3
 80017c8:	f000 fe2e 	bl	8002428 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80017cc:	6a3b      	ldr	r3, [r7, #32]
 80017ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80017d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d103      	bne.n	80017de <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80017d6:	f000 fdff 	bl	80023d8 <HAL_RCC_GetPCLK1Freq>
 80017da:	6378      	str	r0, [r7, #52]	; 0x34
 80017dc:	e004      	b.n	80017e8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80017de:	f000 fdfb 	bl	80023d8 <HAL_RCC_GetPCLK1Freq>
 80017e2:	4603      	mov	r3, r0
 80017e4:	005b      	lsls	r3, r3, #1
 80017e6:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80017e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017ea:	4a23      	ldr	r2, [pc, #140]	; (8001878 <HAL_InitTick+0xe8>)
 80017ec:	fba2 2303 	umull	r2, r3, r2, r3
 80017f0:	0c9b      	lsrs	r3, r3, #18
 80017f2:	3b01      	subs	r3, #1
 80017f4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80017f6:	4b21      	ldr	r3, [pc, #132]	; (800187c <HAL_InitTick+0xec>)
 80017f8:	4a21      	ldr	r2, [pc, #132]	; (8001880 <HAL_InitTick+0xf0>)
 80017fa:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80017fc:	4b1f      	ldr	r3, [pc, #124]	; (800187c <HAL_InitTick+0xec>)
 80017fe:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001802:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001804:	4a1d      	ldr	r2, [pc, #116]	; (800187c <HAL_InitTick+0xec>)
 8001806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001808:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800180a:	4b1c      	ldr	r3, [pc, #112]	; (800187c <HAL_InitTick+0xec>)
 800180c:	2200      	movs	r2, #0
 800180e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001810:	4b1a      	ldr	r3, [pc, #104]	; (800187c <HAL_InitTick+0xec>)
 8001812:	2200      	movs	r2, #0
 8001814:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001816:	4b19      	ldr	r3, [pc, #100]	; (800187c <HAL_InitTick+0xec>)
 8001818:	2200      	movs	r2, #0
 800181a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800181c:	4817      	ldr	r0, [pc, #92]	; (800187c <HAL_InitTick+0xec>)
 800181e:	f001 fb03 	bl	8002e28 <HAL_TIM_Base_Init>
 8001822:	4603      	mov	r3, r0
 8001824:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001828:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800182c:	2b00      	cmp	r3, #0
 800182e:	d11b      	bne.n	8001868 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001830:	4812      	ldr	r0, [pc, #72]	; (800187c <HAL_InitTick+0xec>)
 8001832:	f001 fb53 	bl	8002edc <HAL_TIM_Base_Start_IT>
 8001836:	4603      	mov	r3, r0
 8001838:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800183c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001840:	2b00      	cmp	r3, #0
 8001842:	d111      	bne.n	8001868 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001844:	2036      	movs	r0, #54	; 0x36
 8001846:	f000 fac9 	bl	8001ddc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2b0f      	cmp	r3, #15
 800184e:	d808      	bhi.n	8001862 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001850:	2200      	movs	r2, #0
 8001852:	6879      	ldr	r1, [r7, #4]
 8001854:	2036      	movs	r0, #54	; 0x36
 8001856:	f000 faa5 	bl	8001da4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800185a:	4a0a      	ldr	r2, [pc, #40]	; (8001884 <HAL_InitTick+0xf4>)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6013      	str	r3, [r2, #0]
 8001860:	e002      	b.n	8001868 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001868:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800186c:	4618      	mov	r0, r3
 800186e:	3738      	adds	r7, #56	; 0x38
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	40023800 	.word	0x40023800
 8001878:	431bde83 	.word	0x431bde83
 800187c:	20000238 	.word	0x20000238
 8001880:	40001000 	.word	0x40001000
 8001884:	20000004 	.word	0x20000004

08001888 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800188c:	e7fe      	b.n	800188c <NMI_Handler+0x4>

0800188e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800188e:	b480      	push	{r7}
 8001890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001892:	e7fe      	b.n	8001892 <HardFault_Handler+0x4>

08001894 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001898:	e7fe      	b.n	8001898 <MemManage_Handler+0x4>

0800189a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800189a:	b480      	push	{r7}
 800189c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800189e:	e7fe      	b.n	800189e <BusFault_Handler+0x4>

080018a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018a4:	e7fe      	b.n	80018a4 <UsageFault_Handler+0x4>

080018a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018a6:	b480      	push	{r7}
 80018a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018aa:	bf00      	nop
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr

080018b4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80018b8:	4802      	ldr	r0, [pc, #8]	; (80018c4 <TIM6_DAC_IRQHandler+0x10>)
 80018ba:	f001 fb7f 	bl	8002fbc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80018be:	bf00      	nop
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	20000238 	.word	0x20000238

080018c8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  return 1;
 80018cc:	2301      	movs	r3, #1
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr

080018d8 <_kill>:

int _kill(int pid, int sig)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
 80018e0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80018e2:	f005 fca3 	bl	800722c <__errno>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2216      	movs	r2, #22
 80018ea:	601a      	str	r2, [r3, #0]
  return -1;
 80018ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	3708      	adds	r7, #8
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}

080018f8 <_exit>:

void _exit (int status)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001900:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001904:	6878      	ldr	r0, [r7, #4]
 8001906:	f7ff ffe7 	bl	80018d8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800190a:	e7fe      	b.n	800190a <_exit+0x12>

0800190c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b086      	sub	sp, #24
 8001910:	af00      	add	r7, sp, #0
 8001912:	60f8      	str	r0, [r7, #12]
 8001914:	60b9      	str	r1, [r7, #8]
 8001916:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001918:	2300      	movs	r3, #0
 800191a:	617b      	str	r3, [r7, #20]
 800191c:	e00a      	b.n	8001934 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800191e:	f3af 8000 	nop.w
 8001922:	4601      	mov	r1, r0
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	1c5a      	adds	r2, r3, #1
 8001928:	60ba      	str	r2, [r7, #8]
 800192a:	b2ca      	uxtb	r2, r1
 800192c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	3301      	adds	r3, #1
 8001932:	617b      	str	r3, [r7, #20]
 8001934:	697a      	ldr	r2, [r7, #20]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	429a      	cmp	r2, r3
 800193a:	dbf0      	blt.n	800191e <_read+0x12>
  }

  return len;
 800193c:	687b      	ldr	r3, [r7, #4]
}
 800193e:	4618      	mov	r0, r3
 8001940:	3718      	adds	r7, #24
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}

08001946 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001946:	b580      	push	{r7, lr}
 8001948:	b086      	sub	sp, #24
 800194a:	af00      	add	r7, sp, #0
 800194c:	60f8      	str	r0, [r7, #12]
 800194e:	60b9      	str	r1, [r7, #8]
 8001950:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001952:	2300      	movs	r3, #0
 8001954:	617b      	str	r3, [r7, #20]
 8001956:	e009      	b.n	800196c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	1c5a      	adds	r2, r3, #1
 800195c:	60ba      	str	r2, [r7, #8]
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	4618      	mov	r0, r3
 8001962:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	3301      	adds	r3, #1
 800196a:	617b      	str	r3, [r7, #20]
 800196c:	697a      	ldr	r2, [r7, #20]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	429a      	cmp	r2, r3
 8001972:	dbf1      	blt.n	8001958 <_write+0x12>
  }
  return len;
 8001974:	687b      	ldr	r3, [r7, #4]
}
 8001976:	4618      	mov	r0, r3
 8001978:	3718      	adds	r7, #24
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}

0800197e <_close>:

int _close(int file)
{
 800197e:	b480      	push	{r7}
 8001980:	b083      	sub	sp, #12
 8001982:	af00      	add	r7, sp, #0
 8001984:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001986:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800198a:	4618      	mov	r0, r3
 800198c:	370c      	adds	r7, #12
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr

08001996 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001996:	b480      	push	{r7}
 8001998:	b083      	sub	sp, #12
 800199a:	af00      	add	r7, sp, #0
 800199c:	6078      	str	r0, [r7, #4]
 800199e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019a6:	605a      	str	r2, [r3, #4]
  return 0;
 80019a8:	2300      	movs	r3, #0
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	370c      	adds	r7, #12
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr

080019b6 <_isatty>:

int _isatty(int file)
{
 80019b6:	b480      	push	{r7}
 80019b8:	b083      	sub	sp, #12
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80019be:	2301      	movs	r3, #1
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	370c      	adds	r7, #12
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr

080019cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b085      	sub	sp, #20
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	60f8      	str	r0, [r7, #12]
 80019d4:	60b9      	str	r1, [r7, #8]
 80019d6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80019d8:	2300      	movs	r3, #0
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3714      	adds	r7, #20
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
	...

080019e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b086      	sub	sp, #24
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019f0:	4a14      	ldr	r2, [pc, #80]	; (8001a44 <_sbrk+0x5c>)
 80019f2:	4b15      	ldr	r3, [pc, #84]	; (8001a48 <_sbrk+0x60>)
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019fc:	4b13      	ldr	r3, [pc, #76]	; (8001a4c <_sbrk+0x64>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d102      	bne.n	8001a0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a04:	4b11      	ldr	r3, [pc, #68]	; (8001a4c <_sbrk+0x64>)
 8001a06:	4a12      	ldr	r2, [pc, #72]	; (8001a50 <_sbrk+0x68>)
 8001a08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a0a:	4b10      	ldr	r3, [pc, #64]	; (8001a4c <_sbrk+0x64>)
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	4413      	add	r3, r2
 8001a12:	693a      	ldr	r2, [r7, #16]
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d207      	bcs.n	8001a28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a18:	f005 fc08 	bl	800722c <__errno>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	220c      	movs	r2, #12
 8001a20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a26:	e009      	b.n	8001a3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a28:	4b08      	ldr	r3, [pc, #32]	; (8001a4c <_sbrk+0x64>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a2e:	4b07      	ldr	r3, [pc, #28]	; (8001a4c <_sbrk+0x64>)
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	4413      	add	r3, r2
 8001a36:	4a05      	ldr	r2, [pc, #20]	; (8001a4c <_sbrk+0x64>)
 8001a38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3718      	adds	r7, #24
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	20020000 	.word	0x20020000
 8001a48:	00000400 	.word	0x00000400
 8001a4c:	20000280 	.word	0x20000280
 8001a50:	20004cf0 	.word	0x20004cf0

08001a54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a58:	4b06      	ldr	r3, [pc, #24]	; (8001a74 <SystemInit+0x20>)
 8001a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a5e:	4a05      	ldr	r2, [pc, #20]	; (8001a74 <SystemInit+0x20>)
 8001a60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a68:	bf00      	nop
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop
 8001a74:	e000ed00 	.word	0xe000ed00

08001a78 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a7c:	4b11      	ldr	r3, [pc, #68]	; (8001ac4 <MX_USART2_UART_Init+0x4c>)
 8001a7e:	4a12      	ldr	r2, [pc, #72]	; (8001ac8 <MX_USART2_UART_Init+0x50>)
 8001a80:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001a82:	4b10      	ldr	r3, [pc, #64]	; (8001ac4 <MX_USART2_UART_Init+0x4c>)
 8001a84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a88:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a8a:	4b0e      	ldr	r3, [pc, #56]	; (8001ac4 <MX_USART2_UART_Init+0x4c>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a90:	4b0c      	ldr	r3, [pc, #48]	; (8001ac4 <MX_USART2_UART_Init+0x4c>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a96:	4b0b      	ldr	r3, [pc, #44]	; (8001ac4 <MX_USART2_UART_Init+0x4c>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a9c:	4b09      	ldr	r3, [pc, #36]	; (8001ac4 <MX_USART2_UART_Init+0x4c>)
 8001a9e:	220c      	movs	r2, #12
 8001aa0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001aa2:	4b08      	ldr	r3, [pc, #32]	; (8001ac4 <MX_USART2_UART_Init+0x4c>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001aa8:	4b06      	ldr	r3, [pc, #24]	; (8001ac4 <MX_USART2_UART_Init+0x4c>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001aae:	4805      	ldr	r0, [pc, #20]	; (8001ac4 <MX_USART2_UART_Init+0x4c>)
 8001ab0:	f001 fc68 	bl	8003384 <HAL_UART_Init>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001aba:	f7ff fe37 	bl	800172c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001abe:	bf00      	nop
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	20000284 	.word	0x20000284
 8001ac8:	40004400 	.word	0x40004400

08001acc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b08a      	sub	sp, #40	; 0x28
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad4:	f107 0314 	add.w	r3, r7, #20
 8001ad8:	2200      	movs	r2, #0
 8001ada:	601a      	str	r2, [r3, #0]
 8001adc:	605a      	str	r2, [r3, #4]
 8001ade:	609a      	str	r2, [r3, #8]
 8001ae0:	60da      	str	r2, [r3, #12]
 8001ae2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a19      	ldr	r2, [pc, #100]	; (8001b50 <HAL_UART_MspInit+0x84>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d12b      	bne.n	8001b46 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001aee:	2300      	movs	r3, #0
 8001af0:	613b      	str	r3, [r7, #16]
 8001af2:	4b18      	ldr	r3, [pc, #96]	; (8001b54 <HAL_UART_MspInit+0x88>)
 8001af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af6:	4a17      	ldr	r2, [pc, #92]	; (8001b54 <HAL_UART_MspInit+0x88>)
 8001af8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001afc:	6413      	str	r3, [r2, #64]	; 0x40
 8001afe:	4b15      	ldr	r3, [pc, #84]	; (8001b54 <HAL_UART_MspInit+0x88>)
 8001b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b06:	613b      	str	r3, [r7, #16]
 8001b08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	60fb      	str	r3, [r7, #12]
 8001b0e:	4b11      	ldr	r3, [pc, #68]	; (8001b54 <HAL_UART_MspInit+0x88>)
 8001b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b12:	4a10      	ldr	r2, [pc, #64]	; (8001b54 <HAL_UART_MspInit+0x88>)
 8001b14:	f043 0301 	orr.w	r3, r3, #1
 8001b18:	6313      	str	r3, [r2, #48]	; 0x30
 8001b1a:	4b0e      	ldr	r3, [pc, #56]	; (8001b54 <HAL_UART_MspInit+0x88>)
 8001b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1e:	f003 0301 	and.w	r3, r3, #1
 8001b22:	60fb      	str	r3, [r7, #12]
 8001b24:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001b26:	230c      	movs	r3, #12
 8001b28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b2a:	2302      	movs	r3, #2
 8001b2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b32:	2303      	movs	r3, #3
 8001b34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b36:	2307      	movs	r3, #7
 8001b38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b3a:	f107 0314 	add.w	r3, r7, #20
 8001b3e:	4619      	mov	r1, r3
 8001b40:	4805      	ldr	r0, [pc, #20]	; (8001b58 <HAL_UART_MspInit+0x8c>)
 8001b42:	f000 f959 	bl	8001df8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001b46:	bf00      	nop
 8001b48:	3728      	adds	r7, #40	; 0x28
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	40004400 	.word	0x40004400
 8001b54:	40023800 	.word	0x40023800
 8001b58:	40020000 	.word	0x40020000

08001b5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001b5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b94 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b60:	480d      	ldr	r0, [pc, #52]	; (8001b98 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b62:	490e      	ldr	r1, [pc, #56]	; (8001b9c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b64:	4a0e      	ldr	r2, [pc, #56]	; (8001ba0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b68:	e002      	b.n	8001b70 <LoopCopyDataInit>

08001b6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b6e:	3304      	adds	r3, #4

08001b70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b74:	d3f9      	bcc.n	8001b6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b76:	4a0b      	ldr	r2, [pc, #44]	; (8001ba4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b78:	4c0b      	ldr	r4, [pc, #44]	; (8001ba8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b7c:	e001      	b.n	8001b82 <LoopFillZerobss>

08001b7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b80:	3204      	adds	r2, #4

08001b82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b84:	d3fb      	bcc.n	8001b7e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b86:	f7ff ff65 	bl	8001a54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b8a:	f005 fc4b 	bl	8007424 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b8e:	f7ff fd37 	bl	8001600 <main>
  bx  lr    
 8001b92:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b94:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b9c:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001ba0:	0800c598 	.word	0x0800c598
  ldr r2, =_sbss
 8001ba4:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001ba8:	20004cec 	.word	0x20004cec

08001bac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bac:	e7fe      	b.n	8001bac <ADC_IRQHandler>
	...

08001bb0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001bb4:	4b0e      	ldr	r3, [pc, #56]	; (8001bf0 <HAL_Init+0x40>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a0d      	ldr	r2, [pc, #52]	; (8001bf0 <HAL_Init+0x40>)
 8001bba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bbe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001bc0:	4b0b      	ldr	r3, [pc, #44]	; (8001bf0 <HAL_Init+0x40>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a0a      	ldr	r2, [pc, #40]	; (8001bf0 <HAL_Init+0x40>)
 8001bc6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bcc:	4b08      	ldr	r3, [pc, #32]	; (8001bf0 <HAL_Init+0x40>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a07      	ldr	r2, [pc, #28]	; (8001bf0 <HAL_Init+0x40>)
 8001bd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bd6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bd8:	2003      	movs	r0, #3
 8001bda:	f000 f8d8 	bl	8001d8e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bde:	200f      	movs	r0, #15
 8001be0:	f7ff fdd6 	bl	8001790 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001be4:	f7ff fda8 	bl	8001738 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001be8:	2300      	movs	r3, #0
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	40023c00 	.word	0x40023c00

08001bf4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bf8:	4b06      	ldr	r3, [pc, #24]	; (8001c14 <HAL_IncTick+0x20>)
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	4b06      	ldr	r3, [pc, #24]	; (8001c18 <HAL_IncTick+0x24>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4413      	add	r3, r2
 8001c04:	4a04      	ldr	r2, [pc, #16]	; (8001c18 <HAL_IncTick+0x24>)
 8001c06:	6013      	str	r3, [r2, #0]
}
 8001c08:	bf00      	nop
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	20000008 	.word	0x20000008
 8001c18:	200002c8 	.word	0x200002c8

08001c1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c20:	4b03      	ldr	r3, [pc, #12]	; (8001c30 <HAL_GetTick+0x14>)
 8001c22:	681b      	ldr	r3, [r3, #0]
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	200002c8 	.word	0x200002c8

08001c34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b085      	sub	sp, #20
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	f003 0307 	and.w	r3, r3, #7
 8001c42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c44:	4b0c      	ldr	r3, [pc, #48]	; (8001c78 <__NVIC_SetPriorityGrouping+0x44>)
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c4a:	68ba      	ldr	r2, [r7, #8]
 8001c4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c50:	4013      	ands	r3, r2
 8001c52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c66:	4a04      	ldr	r2, [pc, #16]	; (8001c78 <__NVIC_SetPriorityGrouping+0x44>)
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	60d3      	str	r3, [r2, #12]
}
 8001c6c:	bf00      	nop
 8001c6e:	3714      	adds	r7, #20
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr
 8001c78:	e000ed00 	.word	0xe000ed00

08001c7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c80:	4b04      	ldr	r3, [pc, #16]	; (8001c94 <__NVIC_GetPriorityGrouping+0x18>)
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	0a1b      	lsrs	r3, r3, #8
 8001c86:	f003 0307 	and.w	r3, r3, #7
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr
 8001c94:	e000ed00 	.word	0xe000ed00

08001c98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	db0b      	blt.n	8001cc2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001caa:	79fb      	ldrb	r3, [r7, #7]
 8001cac:	f003 021f 	and.w	r2, r3, #31
 8001cb0:	4907      	ldr	r1, [pc, #28]	; (8001cd0 <__NVIC_EnableIRQ+0x38>)
 8001cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb6:	095b      	lsrs	r3, r3, #5
 8001cb8:	2001      	movs	r0, #1
 8001cba:	fa00 f202 	lsl.w	r2, r0, r2
 8001cbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cc2:	bf00      	nop
 8001cc4:	370c      	adds	r7, #12
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	e000e100 	.word	0xe000e100

08001cd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	4603      	mov	r3, r0
 8001cdc:	6039      	str	r1, [r7, #0]
 8001cde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ce0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	db0a      	blt.n	8001cfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	b2da      	uxtb	r2, r3
 8001cec:	490c      	ldr	r1, [pc, #48]	; (8001d20 <__NVIC_SetPriority+0x4c>)
 8001cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf2:	0112      	lsls	r2, r2, #4
 8001cf4:	b2d2      	uxtb	r2, r2
 8001cf6:	440b      	add	r3, r1
 8001cf8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cfc:	e00a      	b.n	8001d14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	b2da      	uxtb	r2, r3
 8001d02:	4908      	ldr	r1, [pc, #32]	; (8001d24 <__NVIC_SetPriority+0x50>)
 8001d04:	79fb      	ldrb	r3, [r7, #7]
 8001d06:	f003 030f 	and.w	r3, r3, #15
 8001d0a:	3b04      	subs	r3, #4
 8001d0c:	0112      	lsls	r2, r2, #4
 8001d0e:	b2d2      	uxtb	r2, r2
 8001d10:	440b      	add	r3, r1
 8001d12:	761a      	strb	r2, [r3, #24]
}
 8001d14:	bf00      	nop
 8001d16:	370c      	adds	r7, #12
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr
 8001d20:	e000e100 	.word	0xe000e100
 8001d24:	e000ed00 	.word	0xe000ed00

08001d28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b089      	sub	sp, #36	; 0x24
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	60f8      	str	r0, [r7, #12]
 8001d30:	60b9      	str	r1, [r7, #8]
 8001d32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	f003 0307 	and.w	r3, r3, #7
 8001d3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	f1c3 0307 	rsb	r3, r3, #7
 8001d42:	2b04      	cmp	r3, #4
 8001d44:	bf28      	it	cs
 8001d46:	2304      	movcs	r3, #4
 8001d48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	3304      	adds	r3, #4
 8001d4e:	2b06      	cmp	r3, #6
 8001d50:	d902      	bls.n	8001d58 <NVIC_EncodePriority+0x30>
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	3b03      	subs	r3, #3
 8001d56:	e000      	b.n	8001d5a <NVIC_EncodePriority+0x32>
 8001d58:	2300      	movs	r3, #0
 8001d5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d60:	69bb      	ldr	r3, [r7, #24]
 8001d62:	fa02 f303 	lsl.w	r3, r2, r3
 8001d66:	43da      	mvns	r2, r3
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	401a      	ands	r2, r3
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d70:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	fa01 f303 	lsl.w	r3, r1, r3
 8001d7a:	43d9      	mvns	r1, r3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d80:	4313      	orrs	r3, r2
         );
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3724      	adds	r7, #36	; 0x24
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr

08001d8e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d8e:	b580      	push	{r7, lr}
 8001d90:	b082      	sub	sp, #8
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f7ff ff4c 	bl	8001c34 <__NVIC_SetPriorityGrouping>
}
 8001d9c:	bf00      	nop
 8001d9e:	3708      	adds	r7, #8
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}

08001da4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b086      	sub	sp, #24
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	4603      	mov	r3, r0
 8001dac:	60b9      	str	r1, [r7, #8]
 8001dae:	607a      	str	r2, [r7, #4]
 8001db0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001db2:	2300      	movs	r3, #0
 8001db4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001db6:	f7ff ff61 	bl	8001c7c <__NVIC_GetPriorityGrouping>
 8001dba:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dbc:	687a      	ldr	r2, [r7, #4]
 8001dbe:	68b9      	ldr	r1, [r7, #8]
 8001dc0:	6978      	ldr	r0, [r7, #20]
 8001dc2:	f7ff ffb1 	bl	8001d28 <NVIC_EncodePriority>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dcc:	4611      	mov	r1, r2
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f7ff ff80 	bl	8001cd4 <__NVIC_SetPriority>
}
 8001dd4:	bf00      	nop
 8001dd6:	3718      	adds	r7, #24
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}

08001ddc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	4603      	mov	r3, r0
 8001de4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dea:	4618      	mov	r0, r3
 8001dec:	f7ff ff54 	bl	8001c98 <__NVIC_EnableIRQ>
}
 8001df0:	bf00      	nop
 8001df2:	3708      	adds	r7, #8
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}

08001df8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b089      	sub	sp, #36	; 0x24
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e02:	2300      	movs	r3, #0
 8001e04:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e06:	2300      	movs	r3, #0
 8001e08:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e0e:	2300      	movs	r3, #0
 8001e10:	61fb      	str	r3, [r7, #28]
 8001e12:	e165      	b.n	80020e0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e14:	2201      	movs	r2, #1
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	697a      	ldr	r2, [r7, #20]
 8001e24:	4013      	ands	r3, r2
 8001e26:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e28:	693a      	ldr	r2, [r7, #16]
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	f040 8154 	bne.w	80020da <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	f003 0303 	and.w	r3, r3, #3
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d005      	beq.n	8001e4a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e46:	2b02      	cmp	r3, #2
 8001e48:	d130      	bne.n	8001eac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e50:	69fb      	ldr	r3, [r7, #28]
 8001e52:	005b      	lsls	r3, r3, #1
 8001e54:	2203      	movs	r2, #3
 8001e56:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5a:	43db      	mvns	r3, r3
 8001e5c:	69ba      	ldr	r2, [r7, #24]
 8001e5e:	4013      	ands	r3, r2
 8001e60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	68da      	ldr	r2, [r3, #12]
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	005b      	lsls	r3, r3, #1
 8001e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6e:	69ba      	ldr	r2, [r7, #24]
 8001e70:	4313      	orrs	r3, r2
 8001e72:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	69ba      	ldr	r2, [r7, #24]
 8001e78:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e80:	2201      	movs	r2, #1
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	fa02 f303 	lsl.w	r3, r2, r3
 8001e88:	43db      	mvns	r3, r3
 8001e8a:	69ba      	ldr	r2, [r7, #24]
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	091b      	lsrs	r3, r3, #4
 8001e96:	f003 0201 	and.w	r2, r3, #1
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea0:	69ba      	ldr	r2, [r7, #24]
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	69ba      	ldr	r2, [r7, #24]
 8001eaa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f003 0303 	and.w	r3, r3, #3
 8001eb4:	2b03      	cmp	r3, #3
 8001eb6:	d017      	beq.n	8001ee8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	005b      	lsls	r3, r3, #1
 8001ec2:	2203      	movs	r2, #3
 8001ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec8:	43db      	mvns	r3, r3
 8001eca:	69ba      	ldr	r2, [r7, #24]
 8001ecc:	4013      	ands	r3, r2
 8001ece:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	689a      	ldr	r2, [r3, #8]
 8001ed4:	69fb      	ldr	r3, [r7, #28]
 8001ed6:	005b      	lsls	r3, r3, #1
 8001ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8001edc:	69ba      	ldr	r2, [r7, #24]
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	69ba      	ldr	r2, [r7, #24]
 8001ee6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f003 0303 	and.w	r3, r3, #3
 8001ef0:	2b02      	cmp	r3, #2
 8001ef2:	d123      	bne.n	8001f3c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ef4:	69fb      	ldr	r3, [r7, #28]
 8001ef6:	08da      	lsrs	r2, r3, #3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	3208      	adds	r2, #8
 8001efc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f00:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	f003 0307 	and.w	r3, r3, #7
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	220f      	movs	r2, #15
 8001f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f10:	43db      	mvns	r3, r3
 8001f12:	69ba      	ldr	r2, [r7, #24]
 8001f14:	4013      	ands	r3, r2
 8001f16:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	691a      	ldr	r2, [r3, #16]
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	f003 0307 	and.w	r3, r3, #7
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	fa02 f303 	lsl.w	r3, r2, r3
 8001f28:	69ba      	ldr	r2, [r7, #24]
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	08da      	lsrs	r2, r3, #3
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	3208      	adds	r2, #8
 8001f36:	69b9      	ldr	r1, [r7, #24]
 8001f38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	005b      	lsls	r3, r3, #1
 8001f46:	2203      	movs	r2, #3
 8001f48:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4c:	43db      	mvns	r3, r3
 8001f4e:	69ba      	ldr	r2, [r7, #24]
 8001f50:	4013      	ands	r3, r2
 8001f52:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f003 0203 	and.w	r2, r3, #3
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	005b      	lsls	r3, r3, #1
 8001f60:	fa02 f303 	lsl.w	r3, r2, r3
 8001f64:	69ba      	ldr	r2, [r7, #24]
 8001f66:	4313      	orrs	r3, r2
 8001f68:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	69ba      	ldr	r2, [r7, #24]
 8001f6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	f000 80ae 	beq.w	80020da <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f7e:	2300      	movs	r3, #0
 8001f80:	60fb      	str	r3, [r7, #12]
 8001f82:	4b5d      	ldr	r3, [pc, #372]	; (80020f8 <HAL_GPIO_Init+0x300>)
 8001f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f86:	4a5c      	ldr	r2, [pc, #368]	; (80020f8 <HAL_GPIO_Init+0x300>)
 8001f88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f8c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f8e:	4b5a      	ldr	r3, [pc, #360]	; (80020f8 <HAL_GPIO_Init+0x300>)
 8001f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f96:	60fb      	str	r3, [r7, #12]
 8001f98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f9a:	4a58      	ldr	r2, [pc, #352]	; (80020fc <HAL_GPIO_Init+0x304>)
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	089b      	lsrs	r3, r3, #2
 8001fa0:	3302      	adds	r3, #2
 8001fa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	f003 0303 	and.w	r3, r3, #3
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	220f      	movs	r2, #15
 8001fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb6:	43db      	mvns	r3, r3
 8001fb8:	69ba      	ldr	r2, [r7, #24]
 8001fba:	4013      	ands	r3, r2
 8001fbc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4a4f      	ldr	r2, [pc, #316]	; (8002100 <HAL_GPIO_Init+0x308>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d025      	beq.n	8002012 <HAL_GPIO_Init+0x21a>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4a4e      	ldr	r2, [pc, #312]	; (8002104 <HAL_GPIO_Init+0x30c>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d01f      	beq.n	800200e <HAL_GPIO_Init+0x216>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4a4d      	ldr	r2, [pc, #308]	; (8002108 <HAL_GPIO_Init+0x310>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d019      	beq.n	800200a <HAL_GPIO_Init+0x212>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4a4c      	ldr	r2, [pc, #304]	; (800210c <HAL_GPIO_Init+0x314>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d013      	beq.n	8002006 <HAL_GPIO_Init+0x20e>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4a4b      	ldr	r2, [pc, #300]	; (8002110 <HAL_GPIO_Init+0x318>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d00d      	beq.n	8002002 <HAL_GPIO_Init+0x20a>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4a4a      	ldr	r2, [pc, #296]	; (8002114 <HAL_GPIO_Init+0x31c>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d007      	beq.n	8001ffe <HAL_GPIO_Init+0x206>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4a49      	ldr	r2, [pc, #292]	; (8002118 <HAL_GPIO_Init+0x320>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d101      	bne.n	8001ffa <HAL_GPIO_Init+0x202>
 8001ff6:	2306      	movs	r3, #6
 8001ff8:	e00c      	b.n	8002014 <HAL_GPIO_Init+0x21c>
 8001ffa:	2307      	movs	r3, #7
 8001ffc:	e00a      	b.n	8002014 <HAL_GPIO_Init+0x21c>
 8001ffe:	2305      	movs	r3, #5
 8002000:	e008      	b.n	8002014 <HAL_GPIO_Init+0x21c>
 8002002:	2304      	movs	r3, #4
 8002004:	e006      	b.n	8002014 <HAL_GPIO_Init+0x21c>
 8002006:	2303      	movs	r3, #3
 8002008:	e004      	b.n	8002014 <HAL_GPIO_Init+0x21c>
 800200a:	2302      	movs	r3, #2
 800200c:	e002      	b.n	8002014 <HAL_GPIO_Init+0x21c>
 800200e:	2301      	movs	r3, #1
 8002010:	e000      	b.n	8002014 <HAL_GPIO_Init+0x21c>
 8002012:	2300      	movs	r3, #0
 8002014:	69fa      	ldr	r2, [r7, #28]
 8002016:	f002 0203 	and.w	r2, r2, #3
 800201a:	0092      	lsls	r2, r2, #2
 800201c:	4093      	lsls	r3, r2
 800201e:	69ba      	ldr	r2, [r7, #24]
 8002020:	4313      	orrs	r3, r2
 8002022:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002024:	4935      	ldr	r1, [pc, #212]	; (80020fc <HAL_GPIO_Init+0x304>)
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	089b      	lsrs	r3, r3, #2
 800202a:	3302      	adds	r3, #2
 800202c:	69ba      	ldr	r2, [r7, #24]
 800202e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002032:	4b3a      	ldr	r3, [pc, #232]	; (800211c <HAL_GPIO_Init+0x324>)
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	43db      	mvns	r3, r3
 800203c:	69ba      	ldr	r2, [r7, #24]
 800203e:	4013      	ands	r3, r2
 8002040:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800204a:	2b00      	cmp	r3, #0
 800204c:	d003      	beq.n	8002056 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800204e:	69ba      	ldr	r2, [r7, #24]
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	4313      	orrs	r3, r2
 8002054:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002056:	4a31      	ldr	r2, [pc, #196]	; (800211c <HAL_GPIO_Init+0x324>)
 8002058:	69bb      	ldr	r3, [r7, #24]
 800205a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800205c:	4b2f      	ldr	r3, [pc, #188]	; (800211c <HAL_GPIO_Init+0x324>)
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	43db      	mvns	r3, r3
 8002066:	69ba      	ldr	r2, [r7, #24]
 8002068:	4013      	ands	r3, r2
 800206a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002074:	2b00      	cmp	r3, #0
 8002076:	d003      	beq.n	8002080 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002078:	69ba      	ldr	r2, [r7, #24]
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	4313      	orrs	r3, r2
 800207e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002080:	4a26      	ldr	r2, [pc, #152]	; (800211c <HAL_GPIO_Init+0x324>)
 8002082:	69bb      	ldr	r3, [r7, #24]
 8002084:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002086:	4b25      	ldr	r3, [pc, #148]	; (800211c <HAL_GPIO_Init+0x324>)
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	43db      	mvns	r3, r3
 8002090:	69ba      	ldr	r2, [r7, #24]
 8002092:	4013      	ands	r3, r2
 8002094:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d003      	beq.n	80020aa <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80020a2:	69ba      	ldr	r2, [r7, #24]
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	4313      	orrs	r3, r2
 80020a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020aa:	4a1c      	ldr	r2, [pc, #112]	; (800211c <HAL_GPIO_Init+0x324>)
 80020ac:	69bb      	ldr	r3, [r7, #24]
 80020ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020b0:	4b1a      	ldr	r3, [pc, #104]	; (800211c <HAL_GPIO_Init+0x324>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	43db      	mvns	r3, r3
 80020ba:	69ba      	ldr	r2, [r7, #24]
 80020bc:	4013      	ands	r3, r2
 80020be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d003      	beq.n	80020d4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80020cc:	69ba      	ldr	r2, [r7, #24]
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	4313      	orrs	r3, r2
 80020d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020d4:	4a11      	ldr	r2, [pc, #68]	; (800211c <HAL_GPIO_Init+0x324>)
 80020d6:	69bb      	ldr	r3, [r7, #24]
 80020d8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	3301      	adds	r3, #1
 80020de:	61fb      	str	r3, [r7, #28]
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	2b0f      	cmp	r3, #15
 80020e4:	f67f ae96 	bls.w	8001e14 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80020e8:	bf00      	nop
 80020ea:	bf00      	nop
 80020ec:	3724      	adds	r7, #36	; 0x24
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr
 80020f6:	bf00      	nop
 80020f8:	40023800 	.word	0x40023800
 80020fc:	40013800 	.word	0x40013800
 8002100:	40020000 	.word	0x40020000
 8002104:	40020400 	.word	0x40020400
 8002108:	40020800 	.word	0x40020800
 800210c:	40020c00 	.word	0x40020c00
 8002110:	40021000 	.word	0x40021000
 8002114:	40021400 	.word	0x40021400
 8002118:	40021800 	.word	0x40021800
 800211c:	40013c00 	.word	0x40013c00

08002120 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	460b      	mov	r3, r1
 800212a:	807b      	strh	r3, [r7, #2]
 800212c:	4613      	mov	r3, r2
 800212e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002130:	787b      	ldrb	r3, [r7, #1]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d003      	beq.n	800213e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002136:	887a      	ldrh	r2, [r7, #2]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800213c:	e003      	b.n	8002146 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800213e:	887b      	ldrh	r3, [r7, #2]
 8002140:	041a      	lsls	r2, r3, #16
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	619a      	str	r2, [r3, #24]
}
 8002146:	bf00      	nop
 8002148:	370c      	adds	r7, #12
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr
	...

08002154 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800215a:	2300      	movs	r3, #0
 800215c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800215e:	2300      	movs	r3, #0
 8002160:	603b      	str	r3, [r7, #0]
 8002162:	4b20      	ldr	r3, [pc, #128]	; (80021e4 <HAL_PWREx_EnableOverDrive+0x90>)
 8002164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002166:	4a1f      	ldr	r2, [pc, #124]	; (80021e4 <HAL_PWREx_EnableOverDrive+0x90>)
 8002168:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800216c:	6413      	str	r3, [r2, #64]	; 0x40
 800216e:	4b1d      	ldr	r3, [pc, #116]	; (80021e4 <HAL_PWREx_EnableOverDrive+0x90>)
 8002170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002172:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002176:	603b      	str	r3, [r7, #0]
 8002178:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800217a:	4b1b      	ldr	r3, [pc, #108]	; (80021e8 <HAL_PWREx_EnableOverDrive+0x94>)
 800217c:	2201      	movs	r2, #1
 800217e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002180:	f7ff fd4c 	bl	8001c1c <HAL_GetTick>
 8002184:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002186:	e009      	b.n	800219c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002188:	f7ff fd48 	bl	8001c1c <HAL_GetTick>
 800218c:	4602      	mov	r2, r0
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002196:	d901      	bls.n	800219c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002198:	2303      	movs	r3, #3
 800219a:	e01f      	b.n	80021dc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800219c:	4b13      	ldr	r3, [pc, #76]	; (80021ec <HAL_PWREx_EnableOverDrive+0x98>)
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021a8:	d1ee      	bne.n	8002188 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80021aa:	4b11      	ldr	r3, [pc, #68]	; (80021f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80021ac:	2201      	movs	r2, #1
 80021ae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80021b0:	f7ff fd34 	bl	8001c1c <HAL_GetTick>
 80021b4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80021b6:	e009      	b.n	80021cc <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80021b8:	f7ff fd30 	bl	8001c1c <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80021c6:	d901      	bls.n	80021cc <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80021c8:	2303      	movs	r3, #3
 80021ca:	e007      	b.n	80021dc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80021cc:	4b07      	ldr	r3, [pc, #28]	; (80021ec <HAL_PWREx_EnableOverDrive+0x98>)
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80021d8:	d1ee      	bne.n	80021b8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80021da:	2300      	movs	r3, #0
}
 80021dc:	4618      	mov	r0, r3
 80021de:	3708      	adds	r7, #8
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	40023800 	.word	0x40023800
 80021e8:	420e0040 	.word	0x420e0040
 80021ec:	40007000 	.word	0x40007000
 80021f0:	420e0044 	.word	0x420e0044

080021f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b084      	sub	sp, #16
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d101      	bne.n	8002208 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	e0cc      	b.n	80023a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002208:	4b68      	ldr	r3, [pc, #416]	; (80023ac <HAL_RCC_ClockConfig+0x1b8>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 030f 	and.w	r3, r3, #15
 8002210:	683a      	ldr	r2, [r7, #0]
 8002212:	429a      	cmp	r2, r3
 8002214:	d90c      	bls.n	8002230 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002216:	4b65      	ldr	r3, [pc, #404]	; (80023ac <HAL_RCC_ClockConfig+0x1b8>)
 8002218:	683a      	ldr	r2, [r7, #0]
 800221a:	b2d2      	uxtb	r2, r2
 800221c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800221e:	4b63      	ldr	r3, [pc, #396]	; (80023ac <HAL_RCC_ClockConfig+0x1b8>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 030f 	and.w	r3, r3, #15
 8002226:	683a      	ldr	r2, [r7, #0]
 8002228:	429a      	cmp	r2, r3
 800222a:	d001      	beq.n	8002230 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	e0b8      	b.n	80023a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 0302 	and.w	r3, r3, #2
 8002238:	2b00      	cmp	r3, #0
 800223a:	d020      	beq.n	800227e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 0304 	and.w	r3, r3, #4
 8002244:	2b00      	cmp	r3, #0
 8002246:	d005      	beq.n	8002254 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002248:	4b59      	ldr	r3, [pc, #356]	; (80023b0 <HAL_RCC_ClockConfig+0x1bc>)
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	4a58      	ldr	r2, [pc, #352]	; (80023b0 <HAL_RCC_ClockConfig+0x1bc>)
 800224e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002252:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0308 	and.w	r3, r3, #8
 800225c:	2b00      	cmp	r3, #0
 800225e:	d005      	beq.n	800226c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002260:	4b53      	ldr	r3, [pc, #332]	; (80023b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	4a52      	ldr	r2, [pc, #328]	; (80023b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002266:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800226a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800226c:	4b50      	ldr	r3, [pc, #320]	; (80023b0 <HAL_RCC_ClockConfig+0x1bc>)
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	494d      	ldr	r1, [pc, #308]	; (80023b0 <HAL_RCC_ClockConfig+0x1bc>)
 800227a:	4313      	orrs	r3, r2
 800227c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0301 	and.w	r3, r3, #1
 8002286:	2b00      	cmp	r3, #0
 8002288:	d044      	beq.n	8002314 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	2b01      	cmp	r3, #1
 8002290:	d107      	bne.n	80022a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002292:	4b47      	ldr	r3, [pc, #284]	; (80023b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d119      	bne.n	80022d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e07f      	b.n	80023a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	2b02      	cmp	r3, #2
 80022a8:	d003      	beq.n	80022b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022ae:	2b03      	cmp	r3, #3
 80022b0:	d107      	bne.n	80022c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022b2:	4b3f      	ldr	r3, [pc, #252]	; (80023b0 <HAL_RCC_ClockConfig+0x1bc>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d109      	bne.n	80022d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e06f      	b.n	80023a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022c2:	4b3b      	ldr	r3, [pc, #236]	; (80023b0 <HAL_RCC_ClockConfig+0x1bc>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 0302 	and.w	r3, r3, #2
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d101      	bne.n	80022d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e067      	b.n	80023a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022d2:	4b37      	ldr	r3, [pc, #220]	; (80023b0 <HAL_RCC_ClockConfig+0x1bc>)
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	f023 0203 	bic.w	r2, r3, #3
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	4934      	ldr	r1, [pc, #208]	; (80023b0 <HAL_RCC_ClockConfig+0x1bc>)
 80022e0:	4313      	orrs	r3, r2
 80022e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022e4:	f7ff fc9a 	bl	8001c1c <HAL_GetTick>
 80022e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022ea:	e00a      	b.n	8002302 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022ec:	f7ff fc96 	bl	8001c1c <HAL_GetTick>
 80022f0:	4602      	mov	r2, r0
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d901      	bls.n	8002302 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022fe:	2303      	movs	r3, #3
 8002300:	e04f      	b.n	80023a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002302:	4b2b      	ldr	r3, [pc, #172]	; (80023b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	f003 020c 	and.w	r2, r3, #12
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	429a      	cmp	r2, r3
 8002312:	d1eb      	bne.n	80022ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002314:	4b25      	ldr	r3, [pc, #148]	; (80023ac <HAL_RCC_ClockConfig+0x1b8>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 030f 	and.w	r3, r3, #15
 800231c:	683a      	ldr	r2, [r7, #0]
 800231e:	429a      	cmp	r2, r3
 8002320:	d20c      	bcs.n	800233c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002322:	4b22      	ldr	r3, [pc, #136]	; (80023ac <HAL_RCC_ClockConfig+0x1b8>)
 8002324:	683a      	ldr	r2, [r7, #0]
 8002326:	b2d2      	uxtb	r2, r2
 8002328:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800232a:	4b20      	ldr	r3, [pc, #128]	; (80023ac <HAL_RCC_ClockConfig+0x1b8>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 030f 	and.w	r3, r3, #15
 8002332:	683a      	ldr	r2, [r7, #0]
 8002334:	429a      	cmp	r2, r3
 8002336:	d001      	beq.n	800233c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	e032      	b.n	80023a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 0304 	and.w	r3, r3, #4
 8002344:	2b00      	cmp	r3, #0
 8002346:	d008      	beq.n	800235a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002348:	4b19      	ldr	r3, [pc, #100]	; (80023b0 <HAL_RCC_ClockConfig+0x1bc>)
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	4916      	ldr	r1, [pc, #88]	; (80023b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002356:	4313      	orrs	r3, r2
 8002358:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0308 	and.w	r3, r3, #8
 8002362:	2b00      	cmp	r3, #0
 8002364:	d009      	beq.n	800237a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002366:	4b12      	ldr	r3, [pc, #72]	; (80023b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	691b      	ldr	r3, [r3, #16]
 8002372:	00db      	lsls	r3, r3, #3
 8002374:	490e      	ldr	r1, [pc, #56]	; (80023b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002376:	4313      	orrs	r3, r2
 8002378:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800237a:	f000 f887 	bl	800248c <HAL_RCC_GetSysClockFreq>
 800237e:	4602      	mov	r2, r0
 8002380:	4b0b      	ldr	r3, [pc, #44]	; (80023b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	091b      	lsrs	r3, r3, #4
 8002386:	f003 030f 	and.w	r3, r3, #15
 800238a:	490a      	ldr	r1, [pc, #40]	; (80023b4 <HAL_RCC_ClockConfig+0x1c0>)
 800238c:	5ccb      	ldrb	r3, [r1, r3]
 800238e:	fa22 f303 	lsr.w	r3, r2, r3
 8002392:	4a09      	ldr	r2, [pc, #36]	; (80023b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002394:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002396:	4b09      	ldr	r3, [pc, #36]	; (80023bc <HAL_RCC_ClockConfig+0x1c8>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4618      	mov	r0, r3
 800239c:	f7ff f9f8 	bl	8001790 <HAL_InitTick>

  return HAL_OK;
 80023a0:	2300      	movs	r3, #0
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3710      	adds	r7, #16
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	40023c00 	.word	0x40023c00
 80023b0:	40023800 	.word	0x40023800
 80023b4:	0800c070 	.word	0x0800c070
 80023b8:	20000000 	.word	0x20000000
 80023bc:	20000004 	.word	0x20000004

080023c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023c0:	b480      	push	{r7}
 80023c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023c4:	4b03      	ldr	r3, [pc, #12]	; (80023d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80023c6:	681b      	ldr	r3, [r3, #0]
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr
 80023d2:	bf00      	nop
 80023d4:	20000000 	.word	0x20000000

080023d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80023dc:	f7ff fff0 	bl	80023c0 <HAL_RCC_GetHCLKFreq>
 80023e0:	4602      	mov	r2, r0
 80023e2:	4b05      	ldr	r3, [pc, #20]	; (80023f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	0a9b      	lsrs	r3, r3, #10
 80023e8:	f003 0307 	and.w	r3, r3, #7
 80023ec:	4903      	ldr	r1, [pc, #12]	; (80023fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80023ee:	5ccb      	ldrb	r3, [r1, r3]
 80023f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	40023800 	.word	0x40023800
 80023fc:	0800c080 	.word	0x0800c080

08002400 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002404:	f7ff ffdc 	bl	80023c0 <HAL_RCC_GetHCLKFreq>
 8002408:	4602      	mov	r2, r0
 800240a:	4b05      	ldr	r3, [pc, #20]	; (8002420 <HAL_RCC_GetPCLK2Freq+0x20>)
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	0b5b      	lsrs	r3, r3, #13
 8002410:	f003 0307 	and.w	r3, r3, #7
 8002414:	4903      	ldr	r1, [pc, #12]	; (8002424 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002416:	5ccb      	ldrb	r3, [r1, r3]
 8002418:	fa22 f303 	lsr.w	r3, r2, r3
}
 800241c:	4618      	mov	r0, r3
 800241e:	bd80      	pop	{r7, pc}
 8002420:	40023800 	.word	0x40023800
 8002424:	0800c080 	.word	0x0800c080

08002428 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	220f      	movs	r2, #15
 8002436:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002438:	4b12      	ldr	r3, [pc, #72]	; (8002484 <HAL_RCC_GetClockConfig+0x5c>)
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	f003 0203 	and.w	r2, r3, #3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002444:	4b0f      	ldr	r3, [pc, #60]	; (8002484 <HAL_RCC_GetClockConfig+0x5c>)
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002450:	4b0c      	ldr	r3, [pc, #48]	; (8002484 <HAL_RCC_GetClockConfig+0x5c>)
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800245c:	4b09      	ldr	r3, [pc, #36]	; (8002484 <HAL_RCC_GetClockConfig+0x5c>)
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	08db      	lsrs	r3, r3, #3
 8002462:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800246a:	4b07      	ldr	r3, [pc, #28]	; (8002488 <HAL_RCC_GetClockConfig+0x60>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 020f 	and.w	r2, r3, #15
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	601a      	str	r2, [r3, #0]
}
 8002476:	bf00      	nop
 8002478:	370c      	adds	r7, #12
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr
 8002482:	bf00      	nop
 8002484:	40023800 	.word	0x40023800
 8002488:	40023c00 	.word	0x40023c00

0800248c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800248c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002490:	b0ae      	sub	sp, #184	; 0xb8
 8002492:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002494:	2300      	movs	r3, #0
 8002496:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800249a:	2300      	movs	r3, #0
 800249c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80024a0:	2300      	movs	r3, #0
 80024a2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80024a6:	2300      	movs	r3, #0
 80024a8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80024ac:	2300      	movs	r3, #0
 80024ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80024b2:	4bcb      	ldr	r3, [pc, #812]	; (80027e0 <HAL_RCC_GetSysClockFreq+0x354>)
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	f003 030c 	and.w	r3, r3, #12
 80024ba:	2b0c      	cmp	r3, #12
 80024bc:	f200 8206 	bhi.w	80028cc <HAL_RCC_GetSysClockFreq+0x440>
 80024c0:	a201      	add	r2, pc, #4	; (adr r2, 80024c8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80024c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024c6:	bf00      	nop
 80024c8:	080024fd 	.word	0x080024fd
 80024cc:	080028cd 	.word	0x080028cd
 80024d0:	080028cd 	.word	0x080028cd
 80024d4:	080028cd 	.word	0x080028cd
 80024d8:	08002505 	.word	0x08002505
 80024dc:	080028cd 	.word	0x080028cd
 80024e0:	080028cd 	.word	0x080028cd
 80024e4:	080028cd 	.word	0x080028cd
 80024e8:	0800250d 	.word	0x0800250d
 80024ec:	080028cd 	.word	0x080028cd
 80024f0:	080028cd 	.word	0x080028cd
 80024f4:	080028cd 	.word	0x080028cd
 80024f8:	080026fd 	.word	0x080026fd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80024fc:	4bb9      	ldr	r3, [pc, #740]	; (80027e4 <HAL_RCC_GetSysClockFreq+0x358>)
 80024fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002502:	e1e7      	b.n	80028d4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002504:	4bb8      	ldr	r3, [pc, #736]	; (80027e8 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002506:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800250a:	e1e3      	b.n	80028d4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800250c:	4bb4      	ldr	r3, [pc, #720]	; (80027e0 <HAL_RCC_GetSysClockFreq+0x354>)
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002514:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002518:	4bb1      	ldr	r3, [pc, #708]	; (80027e0 <HAL_RCC_GetSysClockFreq+0x354>)
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002520:	2b00      	cmp	r3, #0
 8002522:	d071      	beq.n	8002608 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002524:	4bae      	ldr	r3, [pc, #696]	; (80027e0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	099b      	lsrs	r3, r3, #6
 800252a:	2200      	movs	r2, #0
 800252c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002530:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002534:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002538:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800253c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002540:	2300      	movs	r3, #0
 8002542:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002546:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800254a:	4622      	mov	r2, r4
 800254c:	462b      	mov	r3, r5
 800254e:	f04f 0000 	mov.w	r0, #0
 8002552:	f04f 0100 	mov.w	r1, #0
 8002556:	0159      	lsls	r1, r3, #5
 8002558:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800255c:	0150      	lsls	r0, r2, #5
 800255e:	4602      	mov	r2, r0
 8002560:	460b      	mov	r3, r1
 8002562:	4621      	mov	r1, r4
 8002564:	1a51      	subs	r1, r2, r1
 8002566:	6439      	str	r1, [r7, #64]	; 0x40
 8002568:	4629      	mov	r1, r5
 800256a:	eb63 0301 	sbc.w	r3, r3, r1
 800256e:	647b      	str	r3, [r7, #68]	; 0x44
 8002570:	f04f 0200 	mov.w	r2, #0
 8002574:	f04f 0300 	mov.w	r3, #0
 8002578:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 800257c:	4649      	mov	r1, r9
 800257e:	018b      	lsls	r3, r1, #6
 8002580:	4641      	mov	r1, r8
 8002582:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002586:	4641      	mov	r1, r8
 8002588:	018a      	lsls	r2, r1, #6
 800258a:	4641      	mov	r1, r8
 800258c:	1a51      	subs	r1, r2, r1
 800258e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002590:	4649      	mov	r1, r9
 8002592:	eb63 0301 	sbc.w	r3, r3, r1
 8002596:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002598:	f04f 0200 	mov.w	r2, #0
 800259c:	f04f 0300 	mov.w	r3, #0
 80025a0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80025a4:	4649      	mov	r1, r9
 80025a6:	00cb      	lsls	r3, r1, #3
 80025a8:	4641      	mov	r1, r8
 80025aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80025ae:	4641      	mov	r1, r8
 80025b0:	00ca      	lsls	r2, r1, #3
 80025b2:	4610      	mov	r0, r2
 80025b4:	4619      	mov	r1, r3
 80025b6:	4603      	mov	r3, r0
 80025b8:	4622      	mov	r2, r4
 80025ba:	189b      	adds	r3, r3, r2
 80025bc:	633b      	str	r3, [r7, #48]	; 0x30
 80025be:	462b      	mov	r3, r5
 80025c0:	460a      	mov	r2, r1
 80025c2:	eb42 0303 	adc.w	r3, r2, r3
 80025c6:	637b      	str	r3, [r7, #52]	; 0x34
 80025c8:	f04f 0200 	mov.w	r2, #0
 80025cc:	f04f 0300 	mov.w	r3, #0
 80025d0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80025d4:	4629      	mov	r1, r5
 80025d6:	024b      	lsls	r3, r1, #9
 80025d8:	4621      	mov	r1, r4
 80025da:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80025de:	4621      	mov	r1, r4
 80025e0:	024a      	lsls	r2, r1, #9
 80025e2:	4610      	mov	r0, r2
 80025e4:	4619      	mov	r1, r3
 80025e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80025ea:	2200      	movs	r2, #0
 80025ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80025f0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80025f4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80025f8:	f7fe fb66 	bl	8000cc8 <__aeabi_uldivmod>
 80025fc:	4602      	mov	r2, r0
 80025fe:	460b      	mov	r3, r1
 8002600:	4613      	mov	r3, r2
 8002602:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002606:	e067      	b.n	80026d8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002608:	4b75      	ldr	r3, [pc, #468]	; (80027e0 <HAL_RCC_GetSysClockFreq+0x354>)
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	099b      	lsrs	r3, r3, #6
 800260e:	2200      	movs	r2, #0
 8002610:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002614:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002618:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800261c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002620:	67bb      	str	r3, [r7, #120]	; 0x78
 8002622:	2300      	movs	r3, #0
 8002624:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002626:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800262a:	4622      	mov	r2, r4
 800262c:	462b      	mov	r3, r5
 800262e:	f04f 0000 	mov.w	r0, #0
 8002632:	f04f 0100 	mov.w	r1, #0
 8002636:	0159      	lsls	r1, r3, #5
 8002638:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800263c:	0150      	lsls	r0, r2, #5
 800263e:	4602      	mov	r2, r0
 8002640:	460b      	mov	r3, r1
 8002642:	4621      	mov	r1, r4
 8002644:	1a51      	subs	r1, r2, r1
 8002646:	62b9      	str	r1, [r7, #40]	; 0x28
 8002648:	4629      	mov	r1, r5
 800264a:	eb63 0301 	sbc.w	r3, r3, r1
 800264e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002650:	f04f 0200 	mov.w	r2, #0
 8002654:	f04f 0300 	mov.w	r3, #0
 8002658:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 800265c:	4649      	mov	r1, r9
 800265e:	018b      	lsls	r3, r1, #6
 8002660:	4641      	mov	r1, r8
 8002662:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002666:	4641      	mov	r1, r8
 8002668:	018a      	lsls	r2, r1, #6
 800266a:	4641      	mov	r1, r8
 800266c:	ebb2 0a01 	subs.w	sl, r2, r1
 8002670:	4649      	mov	r1, r9
 8002672:	eb63 0b01 	sbc.w	fp, r3, r1
 8002676:	f04f 0200 	mov.w	r2, #0
 800267a:	f04f 0300 	mov.w	r3, #0
 800267e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002682:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002686:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800268a:	4692      	mov	sl, r2
 800268c:	469b      	mov	fp, r3
 800268e:	4623      	mov	r3, r4
 8002690:	eb1a 0303 	adds.w	r3, sl, r3
 8002694:	623b      	str	r3, [r7, #32]
 8002696:	462b      	mov	r3, r5
 8002698:	eb4b 0303 	adc.w	r3, fp, r3
 800269c:	627b      	str	r3, [r7, #36]	; 0x24
 800269e:	f04f 0200 	mov.w	r2, #0
 80026a2:	f04f 0300 	mov.w	r3, #0
 80026a6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80026aa:	4629      	mov	r1, r5
 80026ac:	028b      	lsls	r3, r1, #10
 80026ae:	4621      	mov	r1, r4
 80026b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80026b4:	4621      	mov	r1, r4
 80026b6:	028a      	lsls	r2, r1, #10
 80026b8:	4610      	mov	r0, r2
 80026ba:	4619      	mov	r1, r3
 80026bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80026c0:	2200      	movs	r2, #0
 80026c2:	673b      	str	r3, [r7, #112]	; 0x70
 80026c4:	677a      	str	r2, [r7, #116]	; 0x74
 80026c6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80026ca:	f7fe fafd 	bl	8000cc8 <__aeabi_uldivmod>
 80026ce:	4602      	mov	r2, r0
 80026d0:	460b      	mov	r3, r1
 80026d2:	4613      	mov	r3, r2
 80026d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80026d8:	4b41      	ldr	r3, [pc, #260]	; (80027e0 <HAL_RCC_GetSysClockFreq+0x354>)
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	0c1b      	lsrs	r3, r3, #16
 80026de:	f003 0303 	and.w	r3, r3, #3
 80026e2:	3301      	adds	r3, #1
 80026e4:	005b      	lsls	r3, r3, #1
 80026e6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80026ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80026ee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80026f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80026f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80026fa:	e0eb      	b.n	80028d4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80026fc:	4b38      	ldr	r3, [pc, #224]	; (80027e0 <HAL_RCC_GetSysClockFreq+0x354>)
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002704:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002708:	4b35      	ldr	r3, [pc, #212]	; (80027e0 <HAL_RCC_GetSysClockFreq+0x354>)
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002710:	2b00      	cmp	r3, #0
 8002712:	d06b      	beq.n	80027ec <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002714:	4b32      	ldr	r3, [pc, #200]	; (80027e0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	099b      	lsrs	r3, r3, #6
 800271a:	2200      	movs	r2, #0
 800271c:	66bb      	str	r3, [r7, #104]	; 0x68
 800271e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002720:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002722:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002726:	663b      	str	r3, [r7, #96]	; 0x60
 8002728:	2300      	movs	r3, #0
 800272a:	667b      	str	r3, [r7, #100]	; 0x64
 800272c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002730:	4622      	mov	r2, r4
 8002732:	462b      	mov	r3, r5
 8002734:	f04f 0000 	mov.w	r0, #0
 8002738:	f04f 0100 	mov.w	r1, #0
 800273c:	0159      	lsls	r1, r3, #5
 800273e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002742:	0150      	lsls	r0, r2, #5
 8002744:	4602      	mov	r2, r0
 8002746:	460b      	mov	r3, r1
 8002748:	4621      	mov	r1, r4
 800274a:	1a51      	subs	r1, r2, r1
 800274c:	61b9      	str	r1, [r7, #24]
 800274e:	4629      	mov	r1, r5
 8002750:	eb63 0301 	sbc.w	r3, r3, r1
 8002754:	61fb      	str	r3, [r7, #28]
 8002756:	f04f 0200 	mov.w	r2, #0
 800275a:	f04f 0300 	mov.w	r3, #0
 800275e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002762:	4659      	mov	r1, fp
 8002764:	018b      	lsls	r3, r1, #6
 8002766:	4651      	mov	r1, sl
 8002768:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800276c:	4651      	mov	r1, sl
 800276e:	018a      	lsls	r2, r1, #6
 8002770:	4651      	mov	r1, sl
 8002772:	ebb2 0801 	subs.w	r8, r2, r1
 8002776:	4659      	mov	r1, fp
 8002778:	eb63 0901 	sbc.w	r9, r3, r1
 800277c:	f04f 0200 	mov.w	r2, #0
 8002780:	f04f 0300 	mov.w	r3, #0
 8002784:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002788:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800278c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002790:	4690      	mov	r8, r2
 8002792:	4699      	mov	r9, r3
 8002794:	4623      	mov	r3, r4
 8002796:	eb18 0303 	adds.w	r3, r8, r3
 800279a:	613b      	str	r3, [r7, #16]
 800279c:	462b      	mov	r3, r5
 800279e:	eb49 0303 	adc.w	r3, r9, r3
 80027a2:	617b      	str	r3, [r7, #20]
 80027a4:	f04f 0200 	mov.w	r2, #0
 80027a8:	f04f 0300 	mov.w	r3, #0
 80027ac:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80027b0:	4629      	mov	r1, r5
 80027b2:	024b      	lsls	r3, r1, #9
 80027b4:	4621      	mov	r1, r4
 80027b6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80027ba:	4621      	mov	r1, r4
 80027bc:	024a      	lsls	r2, r1, #9
 80027be:	4610      	mov	r0, r2
 80027c0:	4619      	mov	r1, r3
 80027c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80027c6:	2200      	movs	r2, #0
 80027c8:	65bb      	str	r3, [r7, #88]	; 0x58
 80027ca:	65fa      	str	r2, [r7, #92]	; 0x5c
 80027cc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80027d0:	f7fe fa7a 	bl	8000cc8 <__aeabi_uldivmod>
 80027d4:	4602      	mov	r2, r0
 80027d6:	460b      	mov	r3, r1
 80027d8:	4613      	mov	r3, r2
 80027da:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80027de:	e065      	b.n	80028ac <HAL_RCC_GetSysClockFreq+0x420>
 80027e0:	40023800 	.word	0x40023800
 80027e4:	00f42400 	.word	0x00f42400
 80027e8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027ec:	4b3d      	ldr	r3, [pc, #244]	; (80028e4 <HAL_RCC_GetSysClockFreq+0x458>)
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	099b      	lsrs	r3, r3, #6
 80027f2:	2200      	movs	r2, #0
 80027f4:	4618      	mov	r0, r3
 80027f6:	4611      	mov	r1, r2
 80027f8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80027fc:	653b      	str	r3, [r7, #80]	; 0x50
 80027fe:	2300      	movs	r3, #0
 8002800:	657b      	str	r3, [r7, #84]	; 0x54
 8002802:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002806:	4642      	mov	r2, r8
 8002808:	464b      	mov	r3, r9
 800280a:	f04f 0000 	mov.w	r0, #0
 800280e:	f04f 0100 	mov.w	r1, #0
 8002812:	0159      	lsls	r1, r3, #5
 8002814:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002818:	0150      	lsls	r0, r2, #5
 800281a:	4602      	mov	r2, r0
 800281c:	460b      	mov	r3, r1
 800281e:	4641      	mov	r1, r8
 8002820:	1a51      	subs	r1, r2, r1
 8002822:	60b9      	str	r1, [r7, #8]
 8002824:	4649      	mov	r1, r9
 8002826:	eb63 0301 	sbc.w	r3, r3, r1
 800282a:	60fb      	str	r3, [r7, #12]
 800282c:	f04f 0200 	mov.w	r2, #0
 8002830:	f04f 0300 	mov.w	r3, #0
 8002834:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002838:	4659      	mov	r1, fp
 800283a:	018b      	lsls	r3, r1, #6
 800283c:	4651      	mov	r1, sl
 800283e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002842:	4651      	mov	r1, sl
 8002844:	018a      	lsls	r2, r1, #6
 8002846:	4651      	mov	r1, sl
 8002848:	1a54      	subs	r4, r2, r1
 800284a:	4659      	mov	r1, fp
 800284c:	eb63 0501 	sbc.w	r5, r3, r1
 8002850:	f04f 0200 	mov.w	r2, #0
 8002854:	f04f 0300 	mov.w	r3, #0
 8002858:	00eb      	lsls	r3, r5, #3
 800285a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800285e:	00e2      	lsls	r2, r4, #3
 8002860:	4614      	mov	r4, r2
 8002862:	461d      	mov	r5, r3
 8002864:	4643      	mov	r3, r8
 8002866:	18e3      	adds	r3, r4, r3
 8002868:	603b      	str	r3, [r7, #0]
 800286a:	464b      	mov	r3, r9
 800286c:	eb45 0303 	adc.w	r3, r5, r3
 8002870:	607b      	str	r3, [r7, #4]
 8002872:	f04f 0200 	mov.w	r2, #0
 8002876:	f04f 0300 	mov.w	r3, #0
 800287a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800287e:	4629      	mov	r1, r5
 8002880:	028b      	lsls	r3, r1, #10
 8002882:	4621      	mov	r1, r4
 8002884:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002888:	4621      	mov	r1, r4
 800288a:	028a      	lsls	r2, r1, #10
 800288c:	4610      	mov	r0, r2
 800288e:	4619      	mov	r1, r3
 8002890:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002894:	2200      	movs	r2, #0
 8002896:	64bb      	str	r3, [r7, #72]	; 0x48
 8002898:	64fa      	str	r2, [r7, #76]	; 0x4c
 800289a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800289e:	f7fe fa13 	bl	8000cc8 <__aeabi_uldivmod>
 80028a2:	4602      	mov	r2, r0
 80028a4:	460b      	mov	r3, r1
 80028a6:	4613      	mov	r3, r2
 80028a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80028ac:	4b0d      	ldr	r3, [pc, #52]	; (80028e4 <HAL_RCC_GetSysClockFreq+0x458>)
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	0f1b      	lsrs	r3, r3, #28
 80028b2:	f003 0307 	and.w	r3, r3, #7
 80028b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80028ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80028be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80028c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80028c6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80028ca:	e003      	b.n	80028d4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80028cc:	4b06      	ldr	r3, [pc, #24]	; (80028e8 <HAL_RCC_GetSysClockFreq+0x45c>)
 80028ce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80028d2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028d4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80028d8:	4618      	mov	r0, r3
 80028da:	37b8      	adds	r7, #184	; 0xb8
 80028dc:	46bd      	mov	sp, r7
 80028de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80028e2:	bf00      	nop
 80028e4:	40023800 	.word	0x40023800
 80028e8:	00f42400 	.word	0x00f42400

080028ec <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b086      	sub	sp, #24
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d101      	bne.n	80028fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e28d      	b.n	8002e1a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0301 	and.w	r3, r3, #1
 8002906:	2b00      	cmp	r3, #0
 8002908:	f000 8083 	beq.w	8002a12 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800290c:	4b94      	ldr	r3, [pc, #592]	; (8002b60 <HAL_RCC_OscConfig+0x274>)
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	f003 030c 	and.w	r3, r3, #12
 8002914:	2b04      	cmp	r3, #4
 8002916:	d019      	beq.n	800294c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002918:	4b91      	ldr	r3, [pc, #580]	; (8002b60 <HAL_RCC_OscConfig+0x274>)
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002920:	2b08      	cmp	r3, #8
 8002922:	d106      	bne.n	8002932 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002924:	4b8e      	ldr	r3, [pc, #568]	; (8002b60 <HAL_RCC_OscConfig+0x274>)
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800292c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002930:	d00c      	beq.n	800294c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002932:	4b8b      	ldr	r3, [pc, #556]	; (8002b60 <HAL_RCC_OscConfig+0x274>)
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800293a:	2b0c      	cmp	r3, #12
 800293c:	d112      	bne.n	8002964 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800293e:	4b88      	ldr	r3, [pc, #544]	; (8002b60 <HAL_RCC_OscConfig+0x274>)
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002946:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800294a:	d10b      	bne.n	8002964 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800294c:	4b84      	ldr	r3, [pc, #528]	; (8002b60 <HAL_RCC_OscConfig+0x274>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002954:	2b00      	cmp	r3, #0
 8002956:	d05b      	beq.n	8002a10 <HAL_RCC_OscConfig+0x124>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d157      	bne.n	8002a10 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e25a      	b.n	8002e1a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800296c:	d106      	bne.n	800297c <HAL_RCC_OscConfig+0x90>
 800296e:	4b7c      	ldr	r3, [pc, #496]	; (8002b60 <HAL_RCC_OscConfig+0x274>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a7b      	ldr	r2, [pc, #492]	; (8002b60 <HAL_RCC_OscConfig+0x274>)
 8002974:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002978:	6013      	str	r3, [r2, #0]
 800297a:	e01d      	b.n	80029b8 <HAL_RCC_OscConfig+0xcc>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002984:	d10c      	bne.n	80029a0 <HAL_RCC_OscConfig+0xb4>
 8002986:	4b76      	ldr	r3, [pc, #472]	; (8002b60 <HAL_RCC_OscConfig+0x274>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a75      	ldr	r2, [pc, #468]	; (8002b60 <HAL_RCC_OscConfig+0x274>)
 800298c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002990:	6013      	str	r3, [r2, #0]
 8002992:	4b73      	ldr	r3, [pc, #460]	; (8002b60 <HAL_RCC_OscConfig+0x274>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a72      	ldr	r2, [pc, #456]	; (8002b60 <HAL_RCC_OscConfig+0x274>)
 8002998:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800299c:	6013      	str	r3, [r2, #0]
 800299e:	e00b      	b.n	80029b8 <HAL_RCC_OscConfig+0xcc>
 80029a0:	4b6f      	ldr	r3, [pc, #444]	; (8002b60 <HAL_RCC_OscConfig+0x274>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a6e      	ldr	r2, [pc, #440]	; (8002b60 <HAL_RCC_OscConfig+0x274>)
 80029a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029aa:	6013      	str	r3, [r2, #0]
 80029ac:	4b6c      	ldr	r3, [pc, #432]	; (8002b60 <HAL_RCC_OscConfig+0x274>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a6b      	ldr	r2, [pc, #428]	; (8002b60 <HAL_RCC_OscConfig+0x274>)
 80029b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d013      	beq.n	80029e8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029c0:	f7ff f92c 	bl	8001c1c <HAL_GetTick>
 80029c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029c6:	e008      	b.n	80029da <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029c8:	f7ff f928 	bl	8001c1c <HAL_GetTick>
 80029cc:	4602      	mov	r2, r0
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	2b64      	cmp	r3, #100	; 0x64
 80029d4:	d901      	bls.n	80029da <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80029d6:	2303      	movs	r3, #3
 80029d8:	e21f      	b.n	8002e1a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029da:	4b61      	ldr	r3, [pc, #388]	; (8002b60 <HAL_RCC_OscConfig+0x274>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d0f0      	beq.n	80029c8 <HAL_RCC_OscConfig+0xdc>
 80029e6:	e014      	b.n	8002a12 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029e8:	f7ff f918 	bl	8001c1c <HAL_GetTick>
 80029ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029ee:	e008      	b.n	8002a02 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029f0:	f7ff f914 	bl	8001c1c <HAL_GetTick>
 80029f4:	4602      	mov	r2, r0
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	2b64      	cmp	r3, #100	; 0x64
 80029fc:	d901      	bls.n	8002a02 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e20b      	b.n	8002e1a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a02:	4b57      	ldr	r3, [pc, #348]	; (8002b60 <HAL_RCC_OscConfig+0x274>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d1f0      	bne.n	80029f0 <HAL_RCC_OscConfig+0x104>
 8002a0e:	e000      	b.n	8002a12 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0302 	and.w	r3, r3, #2
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d06f      	beq.n	8002afe <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002a1e:	4b50      	ldr	r3, [pc, #320]	; (8002b60 <HAL_RCC_OscConfig+0x274>)
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	f003 030c 	and.w	r3, r3, #12
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d017      	beq.n	8002a5a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002a2a:	4b4d      	ldr	r3, [pc, #308]	; (8002b60 <HAL_RCC_OscConfig+0x274>)
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002a32:	2b08      	cmp	r3, #8
 8002a34:	d105      	bne.n	8002a42 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002a36:	4b4a      	ldr	r3, [pc, #296]	; (8002b60 <HAL_RCC_OscConfig+0x274>)
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d00b      	beq.n	8002a5a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a42:	4b47      	ldr	r3, [pc, #284]	; (8002b60 <HAL_RCC_OscConfig+0x274>)
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002a4a:	2b0c      	cmp	r3, #12
 8002a4c:	d11c      	bne.n	8002a88 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a4e:	4b44      	ldr	r3, [pc, #272]	; (8002b60 <HAL_RCC_OscConfig+0x274>)
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d116      	bne.n	8002a88 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a5a:	4b41      	ldr	r3, [pc, #260]	; (8002b60 <HAL_RCC_OscConfig+0x274>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 0302 	and.w	r3, r3, #2
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d005      	beq.n	8002a72 <HAL_RCC_OscConfig+0x186>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	68db      	ldr	r3, [r3, #12]
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d001      	beq.n	8002a72 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e1d3      	b.n	8002e1a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a72:	4b3b      	ldr	r3, [pc, #236]	; (8002b60 <HAL_RCC_OscConfig+0x274>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	691b      	ldr	r3, [r3, #16]
 8002a7e:	00db      	lsls	r3, r3, #3
 8002a80:	4937      	ldr	r1, [pc, #220]	; (8002b60 <HAL_RCC_OscConfig+0x274>)
 8002a82:	4313      	orrs	r3, r2
 8002a84:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a86:	e03a      	b.n	8002afe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d020      	beq.n	8002ad2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a90:	4b34      	ldr	r3, [pc, #208]	; (8002b64 <HAL_RCC_OscConfig+0x278>)
 8002a92:	2201      	movs	r2, #1
 8002a94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a96:	f7ff f8c1 	bl	8001c1c <HAL_GetTick>
 8002a9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a9c:	e008      	b.n	8002ab0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a9e:	f7ff f8bd 	bl	8001c1c <HAL_GetTick>
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	1ad3      	subs	r3, r2, r3
 8002aa8:	2b02      	cmp	r3, #2
 8002aaa:	d901      	bls.n	8002ab0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002aac:	2303      	movs	r3, #3
 8002aae:	e1b4      	b.n	8002e1a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ab0:	4b2b      	ldr	r3, [pc, #172]	; (8002b60 <HAL_RCC_OscConfig+0x274>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 0302 	and.w	r3, r3, #2
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d0f0      	beq.n	8002a9e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002abc:	4b28      	ldr	r3, [pc, #160]	; (8002b60 <HAL_RCC_OscConfig+0x274>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	691b      	ldr	r3, [r3, #16]
 8002ac8:	00db      	lsls	r3, r3, #3
 8002aca:	4925      	ldr	r1, [pc, #148]	; (8002b60 <HAL_RCC_OscConfig+0x274>)
 8002acc:	4313      	orrs	r3, r2
 8002ace:	600b      	str	r3, [r1, #0]
 8002ad0:	e015      	b.n	8002afe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ad2:	4b24      	ldr	r3, [pc, #144]	; (8002b64 <HAL_RCC_OscConfig+0x278>)
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ad8:	f7ff f8a0 	bl	8001c1c <HAL_GetTick>
 8002adc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ade:	e008      	b.n	8002af2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ae0:	f7ff f89c 	bl	8001c1c <HAL_GetTick>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	1ad3      	subs	r3, r2, r3
 8002aea:	2b02      	cmp	r3, #2
 8002aec:	d901      	bls.n	8002af2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002aee:	2303      	movs	r3, #3
 8002af0:	e193      	b.n	8002e1a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002af2:	4b1b      	ldr	r3, [pc, #108]	; (8002b60 <HAL_RCC_OscConfig+0x274>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0302 	and.w	r3, r3, #2
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d1f0      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 0308 	and.w	r3, r3, #8
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d036      	beq.n	8002b78 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	695b      	ldr	r3, [r3, #20]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d016      	beq.n	8002b40 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b12:	4b15      	ldr	r3, [pc, #84]	; (8002b68 <HAL_RCC_OscConfig+0x27c>)
 8002b14:	2201      	movs	r2, #1
 8002b16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b18:	f7ff f880 	bl	8001c1c <HAL_GetTick>
 8002b1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b1e:	e008      	b.n	8002b32 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b20:	f7ff f87c 	bl	8001c1c <HAL_GetTick>
 8002b24:	4602      	mov	r2, r0
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	2b02      	cmp	r3, #2
 8002b2c:	d901      	bls.n	8002b32 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	e173      	b.n	8002e1a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b32:	4b0b      	ldr	r3, [pc, #44]	; (8002b60 <HAL_RCC_OscConfig+0x274>)
 8002b34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b36:	f003 0302 	and.w	r3, r3, #2
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d0f0      	beq.n	8002b20 <HAL_RCC_OscConfig+0x234>
 8002b3e:	e01b      	b.n	8002b78 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b40:	4b09      	ldr	r3, [pc, #36]	; (8002b68 <HAL_RCC_OscConfig+0x27c>)
 8002b42:	2200      	movs	r2, #0
 8002b44:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b46:	f7ff f869 	bl	8001c1c <HAL_GetTick>
 8002b4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b4c:	e00e      	b.n	8002b6c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b4e:	f7ff f865 	bl	8001c1c <HAL_GetTick>
 8002b52:	4602      	mov	r2, r0
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	1ad3      	subs	r3, r2, r3
 8002b58:	2b02      	cmp	r3, #2
 8002b5a:	d907      	bls.n	8002b6c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	e15c      	b.n	8002e1a <HAL_RCC_OscConfig+0x52e>
 8002b60:	40023800 	.word	0x40023800
 8002b64:	42470000 	.word	0x42470000
 8002b68:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b6c:	4b8a      	ldr	r3, [pc, #552]	; (8002d98 <HAL_RCC_OscConfig+0x4ac>)
 8002b6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b70:	f003 0302 	and.w	r3, r3, #2
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d1ea      	bne.n	8002b4e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 0304 	and.w	r3, r3, #4
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	f000 8097 	beq.w	8002cb4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b86:	2300      	movs	r3, #0
 8002b88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b8a:	4b83      	ldr	r3, [pc, #524]	; (8002d98 <HAL_RCC_OscConfig+0x4ac>)
 8002b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d10f      	bne.n	8002bb6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b96:	2300      	movs	r3, #0
 8002b98:	60bb      	str	r3, [r7, #8]
 8002b9a:	4b7f      	ldr	r3, [pc, #508]	; (8002d98 <HAL_RCC_OscConfig+0x4ac>)
 8002b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9e:	4a7e      	ldr	r2, [pc, #504]	; (8002d98 <HAL_RCC_OscConfig+0x4ac>)
 8002ba0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ba4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ba6:	4b7c      	ldr	r3, [pc, #496]	; (8002d98 <HAL_RCC_OscConfig+0x4ac>)
 8002ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002baa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bae:	60bb      	str	r3, [r7, #8]
 8002bb0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bb6:	4b79      	ldr	r3, [pc, #484]	; (8002d9c <HAL_RCC_OscConfig+0x4b0>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d118      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bc2:	4b76      	ldr	r3, [pc, #472]	; (8002d9c <HAL_RCC_OscConfig+0x4b0>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a75      	ldr	r2, [pc, #468]	; (8002d9c <HAL_RCC_OscConfig+0x4b0>)
 8002bc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bcc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bce:	f7ff f825 	bl	8001c1c <HAL_GetTick>
 8002bd2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bd4:	e008      	b.n	8002be8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bd6:	f7ff f821 	bl	8001c1c <HAL_GetTick>
 8002bda:	4602      	mov	r2, r0
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	1ad3      	subs	r3, r2, r3
 8002be0:	2b02      	cmp	r3, #2
 8002be2:	d901      	bls.n	8002be8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002be4:	2303      	movs	r3, #3
 8002be6:	e118      	b.n	8002e1a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002be8:	4b6c      	ldr	r3, [pc, #432]	; (8002d9c <HAL_RCC_OscConfig+0x4b0>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d0f0      	beq.n	8002bd6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d106      	bne.n	8002c0a <HAL_RCC_OscConfig+0x31e>
 8002bfc:	4b66      	ldr	r3, [pc, #408]	; (8002d98 <HAL_RCC_OscConfig+0x4ac>)
 8002bfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c00:	4a65      	ldr	r2, [pc, #404]	; (8002d98 <HAL_RCC_OscConfig+0x4ac>)
 8002c02:	f043 0301 	orr.w	r3, r3, #1
 8002c06:	6713      	str	r3, [r2, #112]	; 0x70
 8002c08:	e01c      	b.n	8002c44 <HAL_RCC_OscConfig+0x358>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	2b05      	cmp	r3, #5
 8002c10:	d10c      	bne.n	8002c2c <HAL_RCC_OscConfig+0x340>
 8002c12:	4b61      	ldr	r3, [pc, #388]	; (8002d98 <HAL_RCC_OscConfig+0x4ac>)
 8002c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c16:	4a60      	ldr	r2, [pc, #384]	; (8002d98 <HAL_RCC_OscConfig+0x4ac>)
 8002c18:	f043 0304 	orr.w	r3, r3, #4
 8002c1c:	6713      	str	r3, [r2, #112]	; 0x70
 8002c1e:	4b5e      	ldr	r3, [pc, #376]	; (8002d98 <HAL_RCC_OscConfig+0x4ac>)
 8002c20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c22:	4a5d      	ldr	r2, [pc, #372]	; (8002d98 <HAL_RCC_OscConfig+0x4ac>)
 8002c24:	f043 0301 	orr.w	r3, r3, #1
 8002c28:	6713      	str	r3, [r2, #112]	; 0x70
 8002c2a:	e00b      	b.n	8002c44 <HAL_RCC_OscConfig+0x358>
 8002c2c:	4b5a      	ldr	r3, [pc, #360]	; (8002d98 <HAL_RCC_OscConfig+0x4ac>)
 8002c2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c30:	4a59      	ldr	r2, [pc, #356]	; (8002d98 <HAL_RCC_OscConfig+0x4ac>)
 8002c32:	f023 0301 	bic.w	r3, r3, #1
 8002c36:	6713      	str	r3, [r2, #112]	; 0x70
 8002c38:	4b57      	ldr	r3, [pc, #348]	; (8002d98 <HAL_RCC_OscConfig+0x4ac>)
 8002c3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c3c:	4a56      	ldr	r2, [pc, #344]	; (8002d98 <HAL_RCC_OscConfig+0x4ac>)
 8002c3e:	f023 0304 	bic.w	r3, r3, #4
 8002c42:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d015      	beq.n	8002c78 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c4c:	f7fe ffe6 	bl	8001c1c <HAL_GetTick>
 8002c50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c52:	e00a      	b.n	8002c6a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c54:	f7fe ffe2 	bl	8001c1c <HAL_GetTick>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d901      	bls.n	8002c6a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	e0d7      	b.n	8002e1a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c6a:	4b4b      	ldr	r3, [pc, #300]	; (8002d98 <HAL_RCC_OscConfig+0x4ac>)
 8002c6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c6e:	f003 0302 	and.w	r3, r3, #2
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d0ee      	beq.n	8002c54 <HAL_RCC_OscConfig+0x368>
 8002c76:	e014      	b.n	8002ca2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c78:	f7fe ffd0 	bl	8001c1c <HAL_GetTick>
 8002c7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c7e:	e00a      	b.n	8002c96 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c80:	f7fe ffcc 	bl	8001c1c <HAL_GetTick>
 8002c84:	4602      	mov	r2, r0
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d901      	bls.n	8002c96 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002c92:	2303      	movs	r3, #3
 8002c94:	e0c1      	b.n	8002e1a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c96:	4b40      	ldr	r3, [pc, #256]	; (8002d98 <HAL_RCC_OscConfig+0x4ac>)
 8002c98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c9a:	f003 0302 	and.w	r3, r3, #2
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d1ee      	bne.n	8002c80 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ca2:	7dfb      	ldrb	r3, [r7, #23]
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d105      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ca8:	4b3b      	ldr	r3, [pc, #236]	; (8002d98 <HAL_RCC_OscConfig+0x4ac>)
 8002caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cac:	4a3a      	ldr	r2, [pc, #232]	; (8002d98 <HAL_RCC_OscConfig+0x4ac>)
 8002cae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cb2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	699b      	ldr	r3, [r3, #24]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	f000 80ad 	beq.w	8002e18 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002cbe:	4b36      	ldr	r3, [pc, #216]	; (8002d98 <HAL_RCC_OscConfig+0x4ac>)
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	f003 030c 	and.w	r3, r3, #12
 8002cc6:	2b08      	cmp	r3, #8
 8002cc8:	d060      	beq.n	8002d8c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	699b      	ldr	r3, [r3, #24]
 8002cce:	2b02      	cmp	r3, #2
 8002cd0:	d145      	bne.n	8002d5e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cd2:	4b33      	ldr	r3, [pc, #204]	; (8002da0 <HAL_RCC_OscConfig+0x4b4>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cd8:	f7fe ffa0 	bl	8001c1c <HAL_GetTick>
 8002cdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cde:	e008      	b.n	8002cf2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ce0:	f7fe ff9c 	bl	8001c1c <HAL_GetTick>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	2b02      	cmp	r3, #2
 8002cec:	d901      	bls.n	8002cf2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	e093      	b.n	8002e1a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cf2:	4b29      	ldr	r3, [pc, #164]	; (8002d98 <HAL_RCC_OscConfig+0x4ac>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d1f0      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	69da      	ldr	r2, [r3, #28]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6a1b      	ldr	r3, [r3, #32]
 8002d06:	431a      	orrs	r2, r3
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d0c:	019b      	lsls	r3, r3, #6
 8002d0e:	431a      	orrs	r2, r3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d14:	085b      	lsrs	r3, r3, #1
 8002d16:	3b01      	subs	r3, #1
 8002d18:	041b      	lsls	r3, r3, #16
 8002d1a:	431a      	orrs	r2, r3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d20:	061b      	lsls	r3, r3, #24
 8002d22:	431a      	orrs	r2, r3
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d28:	071b      	lsls	r3, r3, #28
 8002d2a:	491b      	ldr	r1, [pc, #108]	; (8002d98 <HAL_RCC_OscConfig+0x4ac>)
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d30:	4b1b      	ldr	r3, [pc, #108]	; (8002da0 <HAL_RCC_OscConfig+0x4b4>)
 8002d32:	2201      	movs	r2, #1
 8002d34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d36:	f7fe ff71 	bl	8001c1c <HAL_GetTick>
 8002d3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d3c:	e008      	b.n	8002d50 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d3e:	f7fe ff6d 	bl	8001c1c <HAL_GetTick>
 8002d42:	4602      	mov	r2, r0
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	1ad3      	subs	r3, r2, r3
 8002d48:	2b02      	cmp	r3, #2
 8002d4a:	d901      	bls.n	8002d50 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002d4c:	2303      	movs	r3, #3
 8002d4e:	e064      	b.n	8002e1a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d50:	4b11      	ldr	r3, [pc, #68]	; (8002d98 <HAL_RCC_OscConfig+0x4ac>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d0f0      	beq.n	8002d3e <HAL_RCC_OscConfig+0x452>
 8002d5c:	e05c      	b.n	8002e18 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d5e:	4b10      	ldr	r3, [pc, #64]	; (8002da0 <HAL_RCC_OscConfig+0x4b4>)
 8002d60:	2200      	movs	r2, #0
 8002d62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d64:	f7fe ff5a 	bl	8001c1c <HAL_GetTick>
 8002d68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d6a:	e008      	b.n	8002d7e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d6c:	f7fe ff56 	bl	8001c1c <HAL_GetTick>
 8002d70:	4602      	mov	r2, r0
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	2b02      	cmp	r3, #2
 8002d78:	d901      	bls.n	8002d7e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	e04d      	b.n	8002e1a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d7e:	4b06      	ldr	r3, [pc, #24]	; (8002d98 <HAL_RCC_OscConfig+0x4ac>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d1f0      	bne.n	8002d6c <HAL_RCC_OscConfig+0x480>
 8002d8a:	e045      	b.n	8002e18 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	699b      	ldr	r3, [r3, #24]
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d107      	bne.n	8002da4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e040      	b.n	8002e1a <HAL_RCC_OscConfig+0x52e>
 8002d98:	40023800 	.word	0x40023800
 8002d9c:	40007000 	.word	0x40007000
 8002da0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002da4:	4b1f      	ldr	r3, [pc, #124]	; (8002e24 <HAL_RCC_OscConfig+0x538>)
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	699b      	ldr	r3, [r3, #24]
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d030      	beq.n	8002e14 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d129      	bne.n	8002e14 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	d122      	bne.n	8002e14 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002dce:	68fa      	ldr	r2, [r7, #12]
 8002dd0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	687a      	ldr	r2, [r7, #4]
 8002dd8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002dda:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d119      	bne.n	8002e14 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dea:	085b      	lsrs	r3, r3, #1
 8002dec:	3b01      	subs	r3, #1
 8002dee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d10f      	bne.n	8002e14 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dfe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d107      	bne.n	8002e14 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e0e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d001      	beq.n	8002e18 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e000      	b.n	8002e1a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002e18:	2300      	movs	r3, #0
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3718      	adds	r7, #24
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	40023800 	.word	0x40023800

08002e28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b082      	sub	sp, #8
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d101      	bne.n	8002e3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e041      	b.n	8002ebe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d106      	bne.n	8002e54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f000 f839 	bl	8002ec6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2202      	movs	r2, #2
 8002e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	3304      	adds	r3, #4
 8002e64:	4619      	mov	r1, r3
 8002e66:	4610      	mov	r0, r2
 8002e68:	f000 f9d8 	bl	800321c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2201      	movs	r2, #1
 8002e70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2201      	movs	r2, #1
 8002e78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2201      	movs	r2, #1
 8002e80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2201      	movs	r2, #1
 8002e88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2201      	movs	r2, #1
 8002e98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ebc:	2300      	movs	r3, #0
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3708      	adds	r7, #8
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}

08002ec6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002ec6:	b480      	push	{r7}
 8002ec8:	b083      	sub	sp, #12
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002ece:	bf00      	nop
 8002ed0:	370c      	adds	r7, #12
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr
	...

08002edc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b085      	sub	sp, #20
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d001      	beq.n	8002ef4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e04e      	b.n	8002f92 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2202      	movs	r2, #2
 8002ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	68da      	ldr	r2, [r3, #12]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f042 0201 	orr.w	r2, r2, #1
 8002f0a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a23      	ldr	r2, [pc, #140]	; (8002fa0 <HAL_TIM_Base_Start_IT+0xc4>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d022      	beq.n	8002f5c <HAL_TIM_Base_Start_IT+0x80>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f1e:	d01d      	beq.n	8002f5c <HAL_TIM_Base_Start_IT+0x80>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a1f      	ldr	r2, [pc, #124]	; (8002fa4 <HAL_TIM_Base_Start_IT+0xc8>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d018      	beq.n	8002f5c <HAL_TIM_Base_Start_IT+0x80>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a1e      	ldr	r2, [pc, #120]	; (8002fa8 <HAL_TIM_Base_Start_IT+0xcc>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d013      	beq.n	8002f5c <HAL_TIM_Base_Start_IT+0x80>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a1c      	ldr	r2, [pc, #112]	; (8002fac <HAL_TIM_Base_Start_IT+0xd0>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d00e      	beq.n	8002f5c <HAL_TIM_Base_Start_IT+0x80>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a1b      	ldr	r2, [pc, #108]	; (8002fb0 <HAL_TIM_Base_Start_IT+0xd4>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d009      	beq.n	8002f5c <HAL_TIM_Base_Start_IT+0x80>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a19      	ldr	r2, [pc, #100]	; (8002fb4 <HAL_TIM_Base_Start_IT+0xd8>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d004      	beq.n	8002f5c <HAL_TIM_Base_Start_IT+0x80>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a18      	ldr	r2, [pc, #96]	; (8002fb8 <HAL_TIM_Base_Start_IT+0xdc>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d111      	bne.n	8002f80 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	f003 0307 	and.w	r3, r3, #7
 8002f66:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2b06      	cmp	r3, #6
 8002f6c:	d010      	beq.n	8002f90 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f042 0201 	orr.w	r2, r2, #1
 8002f7c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f7e:	e007      	b.n	8002f90 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f042 0201 	orr.w	r2, r2, #1
 8002f8e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f90:	2300      	movs	r3, #0
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3714      	adds	r7, #20
 8002f96:	46bd      	mov	sp, r7
 8002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9c:	4770      	bx	lr
 8002f9e:	bf00      	nop
 8002fa0:	40010000 	.word	0x40010000
 8002fa4:	40000400 	.word	0x40000400
 8002fa8:	40000800 	.word	0x40000800
 8002fac:	40000c00 	.word	0x40000c00
 8002fb0:	40010400 	.word	0x40010400
 8002fb4:	40014000 	.word	0x40014000
 8002fb8:	40001800 	.word	0x40001800

08002fbc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b082      	sub	sp, #8
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	691b      	ldr	r3, [r3, #16]
 8002fca:	f003 0302 	and.w	r3, r3, #2
 8002fce:	2b02      	cmp	r3, #2
 8002fd0:	d122      	bne.n	8003018 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	68db      	ldr	r3, [r3, #12]
 8002fd8:	f003 0302 	and.w	r3, r3, #2
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	d11b      	bne.n	8003018 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f06f 0202 	mvn.w	r2, #2
 8002fe8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2201      	movs	r2, #1
 8002fee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	699b      	ldr	r3, [r3, #24]
 8002ff6:	f003 0303 	and.w	r3, r3, #3
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d003      	beq.n	8003006 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f000 f8ee 	bl	80031e0 <HAL_TIM_IC_CaptureCallback>
 8003004:	e005      	b.n	8003012 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f000 f8e0 	bl	80031cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	f000 f8f1 	bl	80031f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2200      	movs	r2, #0
 8003016:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	691b      	ldr	r3, [r3, #16]
 800301e:	f003 0304 	and.w	r3, r3, #4
 8003022:	2b04      	cmp	r3, #4
 8003024:	d122      	bne.n	800306c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	f003 0304 	and.w	r3, r3, #4
 8003030:	2b04      	cmp	r3, #4
 8003032:	d11b      	bne.n	800306c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f06f 0204 	mvn.w	r2, #4
 800303c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2202      	movs	r2, #2
 8003042:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	699b      	ldr	r3, [r3, #24]
 800304a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800304e:	2b00      	cmp	r3, #0
 8003050:	d003      	beq.n	800305a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f000 f8c4 	bl	80031e0 <HAL_TIM_IC_CaptureCallback>
 8003058:	e005      	b.n	8003066 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	f000 f8b6 	bl	80031cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003060:	6878      	ldr	r0, [r7, #4]
 8003062:	f000 f8c7 	bl	80031f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2200      	movs	r2, #0
 800306a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	691b      	ldr	r3, [r3, #16]
 8003072:	f003 0308 	and.w	r3, r3, #8
 8003076:	2b08      	cmp	r3, #8
 8003078:	d122      	bne.n	80030c0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	68db      	ldr	r3, [r3, #12]
 8003080:	f003 0308 	and.w	r3, r3, #8
 8003084:	2b08      	cmp	r3, #8
 8003086:	d11b      	bne.n	80030c0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f06f 0208 	mvn.w	r2, #8
 8003090:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2204      	movs	r2, #4
 8003096:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	69db      	ldr	r3, [r3, #28]
 800309e:	f003 0303 	and.w	r3, r3, #3
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d003      	beq.n	80030ae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f000 f89a 	bl	80031e0 <HAL_TIM_IC_CaptureCallback>
 80030ac:	e005      	b.n	80030ba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f000 f88c 	bl	80031cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030b4:	6878      	ldr	r0, [r7, #4]
 80030b6:	f000 f89d 	bl	80031f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2200      	movs	r2, #0
 80030be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	691b      	ldr	r3, [r3, #16]
 80030c6:	f003 0310 	and.w	r3, r3, #16
 80030ca:	2b10      	cmp	r3, #16
 80030cc:	d122      	bne.n	8003114 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	68db      	ldr	r3, [r3, #12]
 80030d4:	f003 0310 	and.w	r3, r3, #16
 80030d8:	2b10      	cmp	r3, #16
 80030da:	d11b      	bne.n	8003114 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f06f 0210 	mvn.w	r2, #16
 80030e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2208      	movs	r2, #8
 80030ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	69db      	ldr	r3, [r3, #28]
 80030f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d003      	beq.n	8003102 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f000 f870 	bl	80031e0 <HAL_TIM_IC_CaptureCallback>
 8003100:	e005      	b.n	800310e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f000 f862 	bl	80031cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f000 f873 	bl	80031f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2200      	movs	r2, #0
 8003112:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	691b      	ldr	r3, [r3, #16]
 800311a:	f003 0301 	and.w	r3, r3, #1
 800311e:	2b01      	cmp	r3, #1
 8003120:	d10e      	bne.n	8003140 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	f003 0301 	and.w	r3, r3, #1
 800312c:	2b01      	cmp	r3, #1
 800312e:	d107      	bne.n	8003140 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f06f 0201 	mvn.w	r2, #1
 8003138:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f7fe fae4 	bl	8001708 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	691b      	ldr	r3, [r3, #16]
 8003146:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800314a:	2b80      	cmp	r3, #128	; 0x80
 800314c:	d10e      	bne.n	800316c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003158:	2b80      	cmp	r3, #128	; 0x80
 800315a:	d107      	bne.n	800316c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003164:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f000 f902 	bl	8003370 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	691b      	ldr	r3, [r3, #16]
 8003172:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003176:	2b40      	cmp	r3, #64	; 0x40
 8003178:	d10e      	bne.n	8003198 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	68db      	ldr	r3, [r3, #12]
 8003180:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003184:	2b40      	cmp	r3, #64	; 0x40
 8003186:	d107      	bne.n	8003198 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003190:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f000 f838 	bl	8003208 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	691b      	ldr	r3, [r3, #16]
 800319e:	f003 0320 	and.w	r3, r3, #32
 80031a2:	2b20      	cmp	r3, #32
 80031a4:	d10e      	bne.n	80031c4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	f003 0320 	and.w	r3, r3, #32
 80031b0:	2b20      	cmp	r3, #32
 80031b2:	d107      	bne.n	80031c4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f06f 0220 	mvn.w	r2, #32
 80031bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f000 f8cc 	bl	800335c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80031c4:	bf00      	nop
 80031c6:	3708      	adds	r7, #8
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}

080031cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b083      	sub	sp, #12
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80031d4:	bf00      	nop
 80031d6:	370c      	adds	r7, #12
 80031d8:	46bd      	mov	sp, r7
 80031da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031de:	4770      	bx	lr

080031e0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b083      	sub	sp, #12
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80031e8:	bf00      	nop
 80031ea:	370c      	adds	r7, #12
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr

080031f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b083      	sub	sp, #12
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80031fc:	bf00      	nop
 80031fe:	370c      	adds	r7, #12
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr

08003208 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003208:	b480      	push	{r7}
 800320a:	b083      	sub	sp, #12
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003210:	bf00      	nop
 8003212:	370c      	adds	r7, #12
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr

0800321c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800321c:	b480      	push	{r7}
 800321e:	b085      	sub	sp, #20
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
 8003224:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	4a40      	ldr	r2, [pc, #256]	; (8003330 <TIM_Base_SetConfig+0x114>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d013      	beq.n	800325c <TIM_Base_SetConfig+0x40>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800323a:	d00f      	beq.n	800325c <TIM_Base_SetConfig+0x40>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	4a3d      	ldr	r2, [pc, #244]	; (8003334 <TIM_Base_SetConfig+0x118>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d00b      	beq.n	800325c <TIM_Base_SetConfig+0x40>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	4a3c      	ldr	r2, [pc, #240]	; (8003338 <TIM_Base_SetConfig+0x11c>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d007      	beq.n	800325c <TIM_Base_SetConfig+0x40>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	4a3b      	ldr	r2, [pc, #236]	; (800333c <TIM_Base_SetConfig+0x120>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d003      	beq.n	800325c <TIM_Base_SetConfig+0x40>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	4a3a      	ldr	r2, [pc, #232]	; (8003340 <TIM_Base_SetConfig+0x124>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d108      	bne.n	800326e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003262:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	68fa      	ldr	r2, [r7, #12]
 800326a:	4313      	orrs	r3, r2
 800326c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	4a2f      	ldr	r2, [pc, #188]	; (8003330 <TIM_Base_SetConfig+0x114>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d02b      	beq.n	80032ce <TIM_Base_SetConfig+0xb2>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800327c:	d027      	beq.n	80032ce <TIM_Base_SetConfig+0xb2>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	4a2c      	ldr	r2, [pc, #176]	; (8003334 <TIM_Base_SetConfig+0x118>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d023      	beq.n	80032ce <TIM_Base_SetConfig+0xb2>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	4a2b      	ldr	r2, [pc, #172]	; (8003338 <TIM_Base_SetConfig+0x11c>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d01f      	beq.n	80032ce <TIM_Base_SetConfig+0xb2>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4a2a      	ldr	r2, [pc, #168]	; (800333c <TIM_Base_SetConfig+0x120>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d01b      	beq.n	80032ce <TIM_Base_SetConfig+0xb2>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	4a29      	ldr	r2, [pc, #164]	; (8003340 <TIM_Base_SetConfig+0x124>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d017      	beq.n	80032ce <TIM_Base_SetConfig+0xb2>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	4a28      	ldr	r2, [pc, #160]	; (8003344 <TIM_Base_SetConfig+0x128>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d013      	beq.n	80032ce <TIM_Base_SetConfig+0xb2>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	4a27      	ldr	r2, [pc, #156]	; (8003348 <TIM_Base_SetConfig+0x12c>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d00f      	beq.n	80032ce <TIM_Base_SetConfig+0xb2>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	4a26      	ldr	r2, [pc, #152]	; (800334c <TIM_Base_SetConfig+0x130>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d00b      	beq.n	80032ce <TIM_Base_SetConfig+0xb2>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	4a25      	ldr	r2, [pc, #148]	; (8003350 <TIM_Base_SetConfig+0x134>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d007      	beq.n	80032ce <TIM_Base_SetConfig+0xb2>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	4a24      	ldr	r2, [pc, #144]	; (8003354 <TIM_Base_SetConfig+0x138>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d003      	beq.n	80032ce <TIM_Base_SetConfig+0xb2>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	4a23      	ldr	r2, [pc, #140]	; (8003358 <TIM_Base_SetConfig+0x13c>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d108      	bne.n	80032e0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	68db      	ldr	r3, [r3, #12]
 80032da:	68fa      	ldr	r2, [r7, #12]
 80032dc:	4313      	orrs	r3, r2
 80032de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	695b      	ldr	r3, [r3, #20]
 80032ea:	4313      	orrs	r3, r2
 80032ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	68fa      	ldr	r2, [r7, #12]
 80032f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	689a      	ldr	r2, [r3, #8]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	4a0a      	ldr	r2, [pc, #40]	; (8003330 <TIM_Base_SetConfig+0x114>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d003      	beq.n	8003314 <TIM_Base_SetConfig+0xf8>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	4a0c      	ldr	r2, [pc, #48]	; (8003340 <TIM_Base_SetConfig+0x124>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d103      	bne.n	800331c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	691a      	ldr	r2, [r3, #16]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2201      	movs	r2, #1
 8003320:	615a      	str	r2, [r3, #20]
}
 8003322:	bf00      	nop
 8003324:	3714      	adds	r7, #20
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr
 800332e:	bf00      	nop
 8003330:	40010000 	.word	0x40010000
 8003334:	40000400 	.word	0x40000400
 8003338:	40000800 	.word	0x40000800
 800333c:	40000c00 	.word	0x40000c00
 8003340:	40010400 	.word	0x40010400
 8003344:	40014000 	.word	0x40014000
 8003348:	40014400 	.word	0x40014400
 800334c:	40014800 	.word	0x40014800
 8003350:	40001800 	.word	0x40001800
 8003354:	40001c00 	.word	0x40001c00
 8003358:	40002000 	.word	0x40002000

0800335c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800335c:	b480      	push	{r7}
 800335e:	b083      	sub	sp, #12
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003364:	bf00      	nop
 8003366:	370c      	adds	r7, #12
 8003368:	46bd      	mov	sp, r7
 800336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336e:	4770      	bx	lr

08003370 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003370:	b480      	push	{r7}
 8003372:	b083      	sub	sp, #12
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003378:	bf00      	nop
 800337a:	370c      	adds	r7, #12
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr

08003384 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b082      	sub	sp, #8
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d101      	bne.n	8003396 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e03f      	b.n	8003416 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800339c:	b2db      	uxtb	r3, r3
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d106      	bne.n	80033b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2200      	movs	r2, #0
 80033a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f7fe fb8e 	bl	8001acc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2224      	movs	r2, #36	; 0x24
 80033b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	68da      	ldr	r2, [r3, #12]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80033c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80033c8:	6878      	ldr	r0, [r7, #4]
 80033ca:	f000 f929 	bl	8003620 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	691a      	ldr	r2, [r3, #16]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80033dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	695a      	ldr	r2, [r3, #20]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80033ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	68da      	ldr	r2, [r3, #12]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80033fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2200      	movs	r2, #0
 8003402:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2220      	movs	r2, #32
 8003408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2220      	movs	r2, #32
 8003410:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003414:	2300      	movs	r3, #0
}
 8003416:	4618      	mov	r0, r3
 8003418:	3708      	adds	r7, #8
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}

0800341e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800341e:	b580      	push	{r7, lr}
 8003420:	b08a      	sub	sp, #40	; 0x28
 8003422:	af02      	add	r7, sp, #8
 8003424:	60f8      	str	r0, [r7, #12]
 8003426:	60b9      	str	r1, [r7, #8]
 8003428:	603b      	str	r3, [r7, #0]
 800342a:	4613      	mov	r3, r2
 800342c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800342e:	2300      	movs	r3, #0
 8003430:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003438:	b2db      	uxtb	r3, r3
 800343a:	2b20      	cmp	r3, #32
 800343c:	d17c      	bne.n	8003538 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d002      	beq.n	800344a <HAL_UART_Transmit+0x2c>
 8003444:	88fb      	ldrh	r3, [r7, #6]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d101      	bne.n	800344e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e075      	b.n	800353a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003454:	2b01      	cmp	r3, #1
 8003456:	d101      	bne.n	800345c <HAL_UART_Transmit+0x3e>
 8003458:	2302      	movs	r3, #2
 800345a:	e06e      	b.n	800353a <HAL_UART_Transmit+0x11c>
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2201      	movs	r2, #1
 8003460:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2200      	movs	r2, #0
 8003468:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2221      	movs	r2, #33	; 0x21
 800346e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003472:	f7fe fbd3 	bl	8001c1c <HAL_GetTick>
 8003476:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	88fa      	ldrh	r2, [r7, #6]
 800347c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	88fa      	ldrh	r2, [r7, #6]
 8003482:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800348c:	d108      	bne.n	80034a0 <HAL_UART_Transmit+0x82>
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	691b      	ldr	r3, [r3, #16]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d104      	bne.n	80034a0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003496:	2300      	movs	r3, #0
 8003498:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	61bb      	str	r3, [r7, #24]
 800349e:	e003      	b.n	80034a8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80034a4:	2300      	movs	r3, #0
 80034a6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2200      	movs	r2, #0
 80034ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80034b0:	e02a      	b.n	8003508 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	9300      	str	r3, [sp, #0]
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	2200      	movs	r2, #0
 80034ba:	2180      	movs	r1, #128	; 0x80
 80034bc:	68f8      	ldr	r0, [r7, #12]
 80034be:	f000 f840 	bl	8003542 <UART_WaitOnFlagUntilTimeout>
 80034c2:	4603      	mov	r3, r0
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d001      	beq.n	80034cc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80034c8:	2303      	movs	r3, #3
 80034ca:	e036      	b.n	800353a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80034cc:	69fb      	ldr	r3, [r7, #28]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d10b      	bne.n	80034ea <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80034d2:	69bb      	ldr	r3, [r7, #24]
 80034d4:	881b      	ldrh	r3, [r3, #0]
 80034d6:	461a      	mov	r2, r3
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80034e0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80034e2:	69bb      	ldr	r3, [r7, #24]
 80034e4:	3302      	adds	r3, #2
 80034e6:	61bb      	str	r3, [r7, #24]
 80034e8:	e007      	b.n	80034fa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80034ea:	69fb      	ldr	r3, [r7, #28]
 80034ec:	781a      	ldrb	r2, [r3, #0]
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80034f4:	69fb      	ldr	r3, [r7, #28]
 80034f6:	3301      	adds	r3, #1
 80034f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80034fe:	b29b      	uxth	r3, r3
 8003500:	3b01      	subs	r3, #1
 8003502:	b29a      	uxth	r2, r3
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800350c:	b29b      	uxth	r3, r3
 800350e:	2b00      	cmp	r3, #0
 8003510:	d1cf      	bne.n	80034b2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	9300      	str	r3, [sp, #0]
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	2200      	movs	r2, #0
 800351a:	2140      	movs	r1, #64	; 0x40
 800351c:	68f8      	ldr	r0, [r7, #12]
 800351e:	f000 f810 	bl	8003542 <UART_WaitOnFlagUntilTimeout>
 8003522:	4603      	mov	r3, r0
 8003524:	2b00      	cmp	r3, #0
 8003526:	d001      	beq.n	800352c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003528:	2303      	movs	r3, #3
 800352a:	e006      	b.n	800353a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2220      	movs	r2, #32
 8003530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003534:	2300      	movs	r3, #0
 8003536:	e000      	b.n	800353a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003538:	2302      	movs	r3, #2
  }
}
 800353a:	4618      	mov	r0, r3
 800353c:	3720      	adds	r7, #32
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}

08003542 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003542:	b580      	push	{r7, lr}
 8003544:	b090      	sub	sp, #64	; 0x40
 8003546:	af00      	add	r7, sp, #0
 8003548:	60f8      	str	r0, [r7, #12]
 800354a:	60b9      	str	r1, [r7, #8]
 800354c:	603b      	str	r3, [r7, #0]
 800354e:	4613      	mov	r3, r2
 8003550:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003552:	e050      	b.n	80035f6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003554:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003556:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800355a:	d04c      	beq.n	80035f6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800355c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800355e:	2b00      	cmp	r3, #0
 8003560:	d007      	beq.n	8003572 <UART_WaitOnFlagUntilTimeout+0x30>
 8003562:	f7fe fb5b 	bl	8001c1c <HAL_GetTick>
 8003566:	4602      	mov	r2, r0
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	1ad3      	subs	r3, r2, r3
 800356c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800356e:	429a      	cmp	r2, r3
 8003570:	d241      	bcs.n	80035f6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	330c      	adds	r3, #12
 8003578:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800357a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800357c:	e853 3f00 	ldrex	r3, [r3]
 8003580:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003584:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003588:	63fb      	str	r3, [r7, #60]	; 0x3c
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	330c      	adds	r3, #12
 8003590:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003592:	637a      	str	r2, [r7, #52]	; 0x34
 8003594:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003596:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003598:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800359a:	e841 2300 	strex	r3, r2, [r1]
 800359e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80035a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d1e5      	bne.n	8003572 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	3314      	adds	r3, #20
 80035ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	e853 3f00 	ldrex	r3, [r3]
 80035b4:	613b      	str	r3, [r7, #16]
   return(result);
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	f023 0301 	bic.w	r3, r3, #1
 80035bc:	63bb      	str	r3, [r7, #56]	; 0x38
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	3314      	adds	r3, #20
 80035c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80035c6:	623a      	str	r2, [r7, #32]
 80035c8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035ca:	69f9      	ldr	r1, [r7, #28]
 80035cc:	6a3a      	ldr	r2, [r7, #32]
 80035ce:	e841 2300 	strex	r3, r2, [r1]
 80035d2:	61bb      	str	r3, [r7, #24]
   return(result);
 80035d4:	69bb      	ldr	r3, [r7, #24]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d1e5      	bne.n	80035a6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2220      	movs	r2, #32
 80035de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2220      	movs	r2, #32
 80035e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2200      	movs	r2, #0
 80035ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80035f2:	2303      	movs	r3, #3
 80035f4:	e00f      	b.n	8003616 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	4013      	ands	r3, r2
 8003600:	68ba      	ldr	r2, [r7, #8]
 8003602:	429a      	cmp	r2, r3
 8003604:	bf0c      	ite	eq
 8003606:	2301      	moveq	r3, #1
 8003608:	2300      	movne	r3, #0
 800360a:	b2db      	uxtb	r3, r3
 800360c:	461a      	mov	r2, r3
 800360e:	79fb      	ldrb	r3, [r7, #7]
 8003610:	429a      	cmp	r2, r3
 8003612:	d09f      	beq.n	8003554 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003614:	2300      	movs	r3, #0
}
 8003616:	4618      	mov	r0, r3
 8003618:	3740      	adds	r7, #64	; 0x40
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}
	...

08003620 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003620:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003624:	b0c0      	sub	sp, #256	; 0x100
 8003626:	af00      	add	r7, sp, #0
 8003628:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800362c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	691b      	ldr	r3, [r3, #16]
 8003634:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800363c:	68d9      	ldr	r1, [r3, #12]
 800363e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	ea40 0301 	orr.w	r3, r0, r1
 8003648:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800364a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800364e:	689a      	ldr	r2, [r3, #8]
 8003650:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003654:	691b      	ldr	r3, [r3, #16]
 8003656:	431a      	orrs	r2, r3
 8003658:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800365c:	695b      	ldr	r3, [r3, #20]
 800365e:	431a      	orrs	r2, r3
 8003660:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003664:	69db      	ldr	r3, [r3, #28]
 8003666:	4313      	orrs	r3, r2
 8003668:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800366c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003678:	f021 010c 	bic.w	r1, r1, #12
 800367c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003686:	430b      	orrs	r3, r1
 8003688:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800368a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	695b      	ldr	r3, [r3, #20]
 8003692:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003696:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800369a:	6999      	ldr	r1, [r3, #24]
 800369c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	ea40 0301 	orr.w	r3, r0, r1
 80036a6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80036a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	4b8f      	ldr	r3, [pc, #572]	; (80038ec <UART_SetConfig+0x2cc>)
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d005      	beq.n	80036c0 <UART_SetConfig+0xa0>
 80036b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	4b8d      	ldr	r3, [pc, #564]	; (80038f0 <UART_SetConfig+0x2d0>)
 80036bc:	429a      	cmp	r2, r3
 80036be:	d104      	bne.n	80036ca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80036c0:	f7fe fe9e 	bl	8002400 <HAL_RCC_GetPCLK2Freq>
 80036c4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80036c8:	e003      	b.n	80036d2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80036ca:	f7fe fe85 	bl	80023d8 <HAL_RCC_GetPCLK1Freq>
 80036ce:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036d6:	69db      	ldr	r3, [r3, #28]
 80036d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036dc:	f040 810c 	bne.w	80038f8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80036e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036e4:	2200      	movs	r2, #0
 80036e6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80036ea:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80036ee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80036f2:	4622      	mov	r2, r4
 80036f4:	462b      	mov	r3, r5
 80036f6:	1891      	adds	r1, r2, r2
 80036f8:	65b9      	str	r1, [r7, #88]	; 0x58
 80036fa:	415b      	adcs	r3, r3
 80036fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80036fe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003702:	4621      	mov	r1, r4
 8003704:	eb12 0801 	adds.w	r8, r2, r1
 8003708:	4629      	mov	r1, r5
 800370a:	eb43 0901 	adc.w	r9, r3, r1
 800370e:	f04f 0200 	mov.w	r2, #0
 8003712:	f04f 0300 	mov.w	r3, #0
 8003716:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800371a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800371e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003722:	4690      	mov	r8, r2
 8003724:	4699      	mov	r9, r3
 8003726:	4623      	mov	r3, r4
 8003728:	eb18 0303 	adds.w	r3, r8, r3
 800372c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003730:	462b      	mov	r3, r5
 8003732:	eb49 0303 	adc.w	r3, r9, r3
 8003736:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800373a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	2200      	movs	r2, #0
 8003742:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003746:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800374a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800374e:	460b      	mov	r3, r1
 8003750:	18db      	adds	r3, r3, r3
 8003752:	653b      	str	r3, [r7, #80]	; 0x50
 8003754:	4613      	mov	r3, r2
 8003756:	eb42 0303 	adc.w	r3, r2, r3
 800375a:	657b      	str	r3, [r7, #84]	; 0x54
 800375c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003760:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003764:	f7fd fab0 	bl	8000cc8 <__aeabi_uldivmod>
 8003768:	4602      	mov	r2, r0
 800376a:	460b      	mov	r3, r1
 800376c:	4b61      	ldr	r3, [pc, #388]	; (80038f4 <UART_SetConfig+0x2d4>)
 800376e:	fba3 2302 	umull	r2, r3, r3, r2
 8003772:	095b      	lsrs	r3, r3, #5
 8003774:	011c      	lsls	r4, r3, #4
 8003776:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800377a:	2200      	movs	r2, #0
 800377c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003780:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003784:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003788:	4642      	mov	r2, r8
 800378a:	464b      	mov	r3, r9
 800378c:	1891      	adds	r1, r2, r2
 800378e:	64b9      	str	r1, [r7, #72]	; 0x48
 8003790:	415b      	adcs	r3, r3
 8003792:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003794:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003798:	4641      	mov	r1, r8
 800379a:	eb12 0a01 	adds.w	sl, r2, r1
 800379e:	4649      	mov	r1, r9
 80037a0:	eb43 0b01 	adc.w	fp, r3, r1
 80037a4:	f04f 0200 	mov.w	r2, #0
 80037a8:	f04f 0300 	mov.w	r3, #0
 80037ac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80037b0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80037b4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80037b8:	4692      	mov	sl, r2
 80037ba:	469b      	mov	fp, r3
 80037bc:	4643      	mov	r3, r8
 80037be:	eb1a 0303 	adds.w	r3, sl, r3
 80037c2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80037c6:	464b      	mov	r3, r9
 80037c8:	eb4b 0303 	adc.w	r3, fp, r3
 80037cc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80037d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	2200      	movs	r2, #0
 80037d8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80037dc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80037e0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80037e4:	460b      	mov	r3, r1
 80037e6:	18db      	adds	r3, r3, r3
 80037e8:	643b      	str	r3, [r7, #64]	; 0x40
 80037ea:	4613      	mov	r3, r2
 80037ec:	eb42 0303 	adc.w	r3, r2, r3
 80037f0:	647b      	str	r3, [r7, #68]	; 0x44
 80037f2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80037f6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80037fa:	f7fd fa65 	bl	8000cc8 <__aeabi_uldivmod>
 80037fe:	4602      	mov	r2, r0
 8003800:	460b      	mov	r3, r1
 8003802:	4611      	mov	r1, r2
 8003804:	4b3b      	ldr	r3, [pc, #236]	; (80038f4 <UART_SetConfig+0x2d4>)
 8003806:	fba3 2301 	umull	r2, r3, r3, r1
 800380a:	095b      	lsrs	r3, r3, #5
 800380c:	2264      	movs	r2, #100	; 0x64
 800380e:	fb02 f303 	mul.w	r3, r2, r3
 8003812:	1acb      	subs	r3, r1, r3
 8003814:	00db      	lsls	r3, r3, #3
 8003816:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800381a:	4b36      	ldr	r3, [pc, #216]	; (80038f4 <UART_SetConfig+0x2d4>)
 800381c:	fba3 2302 	umull	r2, r3, r3, r2
 8003820:	095b      	lsrs	r3, r3, #5
 8003822:	005b      	lsls	r3, r3, #1
 8003824:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003828:	441c      	add	r4, r3
 800382a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800382e:	2200      	movs	r2, #0
 8003830:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003834:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003838:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800383c:	4642      	mov	r2, r8
 800383e:	464b      	mov	r3, r9
 8003840:	1891      	adds	r1, r2, r2
 8003842:	63b9      	str	r1, [r7, #56]	; 0x38
 8003844:	415b      	adcs	r3, r3
 8003846:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003848:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800384c:	4641      	mov	r1, r8
 800384e:	1851      	adds	r1, r2, r1
 8003850:	6339      	str	r1, [r7, #48]	; 0x30
 8003852:	4649      	mov	r1, r9
 8003854:	414b      	adcs	r3, r1
 8003856:	637b      	str	r3, [r7, #52]	; 0x34
 8003858:	f04f 0200 	mov.w	r2, #0
 800385c:	f04f 0300 	mov.w	r3, #0
 8003860:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003864:	4659      	mov	r1, fp
 8003866:	00cb      	lsls	r3, r1, #3
 8003868:	4651      	mov	r1, sl
 800386a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800386e:	4651      	mov	r1, sl
 8003870:	00ca      	lsls	r2, r1, #3
 8003872:	4610      	mov	r0, r2
 8003874:	4619      	mov	r1, r3
 8003876:	4603      	mov	r3, r0
 8003878:	4642      	mov	r2, r8
 800387a:	189b      	adds	r3, r3, r2
 800387c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003880:	464b      	mov	r3, r9
 8003882:	460a      	mov	r2, r1
 8003884:	eb42 0303 	adc.w	r3, r2, r3
 8003888:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800388c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	2200      	movs	r2, #0
 8003894:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003898:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800389c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80038a0:	460b      	mov	r3, r1
 80038a2:	18db      	adds	r3, r3, r3
 80038a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80038a6:	4613      	mov	r3, r2
 80038a8:	eb42 0303 	adc.w	r3, r2, r3
 80038ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038ae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80038b2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80038b6:	f7fd fa07 	bl	8000cc8 <__aeabi_uldivmod>
 80038ba:	4602      	mov	r2, r0
 80038bc:	460b      	mov	r3, r1
 80038be:	4b0d      	ldr	r3, [pc, #52]	; (80038f4 <UART_SetConfig+0x2d4>)
 80038c0:	fba3 1302 	umull	r1, r3, r3, r2
 80038c4:	095b      	lsrs	r3, r3, #5
 80038c6:	2164      	movs	r1, #100	; 0x64
 80038c8:	fb01 f303 	mul.w	r3, r1, r3
 80038cc:	1ad3      	subs	r3, r2, r3
 80038ce:	00db      	lsls	r3, r3, #3
 80038d0:	3332      	adds	r3, #50	; 0x32
 80038d2:	4a08      	ldr	r2, [pc, #32]	; (80038f4 <UART_SetConfig+0x2d4>)
 80038d4:	fba2 2303 	umull	r2, r3, r2, r3
 80038d8:	095b      	lsrs	r3, r3, #5
 80038da:	f003 0207 	and.w	r2, r3, #7
 80038de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4422      	add	r2, r4
 80038e6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80038e8:	e105      	b.n	8003af6 <UART_SetConfig+0x4d6>
 80038ea:	bf00      	nop
 80038ec:	40011000 	.word	0x40011000
 80038f0:	40011400 	.word	0x40011400
 80038f4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80038f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80038fc:	2200      	movs	r2, #0
 80038fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003902:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003906:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800390a:	4642      	mov	r2, r8
 800390c:	464b      	mov	r3, r9
 800390e:	1891      	adds	r1, r2, r2
 8003910:	6239      	str	r1, [r7, #32]
 8003912:	415b      	adcs	r3, r3
 8003914:	627b      	str	r3, [r7, #36]	; 0x24
 8003916:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800391a:	4641      	mov	r1, r8
 800391c:	1854      	adds	r4, r2, r1
 800391e:	4649      	mov	r1, r9
 8003920:	eb43 0501 	adc.w	r5, r3, r1
 8003924:	f04f 0200 	mov.w	r2, #0
 8003928:	f04f 0300 	mov.w	r3, #0
 800392c:	00eb      	lsls	r3, r5, #3
 800392e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003932:	00e2      	lsls	r2, r4, #3
 8003934:	4614      	mov	r4, r2
 8003936:	461d      	mov	r5, r3
 8003938:	4643      	mov	r3, r8
 800393a:	18e3      	adds	r3, r4, r3
 800393c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003940:	464b      	mov	r3, r9
 8003942:	eb45 0303 	adc.w	r3, r5, r3
 8003946:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800394a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003956:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800395a:	f04f 0200 	mov.w	r2, #0
 800395e:	f04f 0300 	mov.w	r3, #0
 8003962:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003966:	4629      	mov	r1, r5
 8003968:	008b      	lsls	r3, r1, #2
 800396a:	4621      	mov	r1, r4
 800396c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003970:	4621      	mov	r1, r4
 8003972:	008a      	lsls	r2, r1, #2
 8003974:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003978:	f7fd f9a6 	bl	8000cc8 <__aeabi_uldivmod>
 800397c:	4602      	mov	r2, r0
 800397e:	460b      	mov	r3, r1
 8003980:	4b60      	ldr	r3, [pc, #384]	; (8003b04 <UART_SetConfig+0x4e4>)
 8003982:	fba3 2302 	umull	r2, r3, r3, r2
 8003986:	095b      	lsrs	r3, r3, #5
 8003988:	011c      	lsls	r4, r3, #4
 800398a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800398e:	2200      	movs	r2, #0
 8003990:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003994:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003998:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800399c:	4642      	mov	r2, r8
 800399e:	464b      	mov	r3, r9
 80039a0:	1891      	adds	r1, r2, r2
 80039a2:	61b9      	str	r1, [r7, #24]
 80039a4:	415b      	adcs	r3, r3
 80039a6:	61fb      	str	r3, [r7, #28]
 80039a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80039ac:	4641      	mov	r1, r8
 80039ae:	1851      	adds	r1, r2, r1
 80039b0:	6139      	str	r1, [r7, #16]
 80039b2:	4649      	mov	r1, r9
 80039b4:	414b      	adcs	r3, r1
 80039b6:	617b      	str	r3, [r7, #20]
 80039b8:	f04f 0200 	mov.w	r2, #0
 80039bc:	f04f 0300 	mov.w	r3, #0
 80039c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80039c4:	4659      	mov	r1, fp
 80039c6:	00cb      	lsls	r3, r1, #3
 80039c8:	4651      	mov	r1, sl
 80039ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80039ce:	4651      	mov	r1, sl
 80039d0:	00ca      	lsls	r2, r1, #3
 80039d2:	4610      	mov	r0, r2
 80039d4:	4619      	mov	r1, r3
 80039d6:	4603      	mov	r3, r0
 80039d8:	4642      	mov	r2, r8
 80039da:	189b      	adds	r3, r3, r2
 80039dc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80039e0:	464b      	mov	r3, r9
 80039e2:	460a      	mov	r2, r1
 80039e4:	eb42 0303 	adc.w	r3, r2, r3
 80039e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80039ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	2200      	movs	r2, #0
 80039f4:	67bb      	str	r3, [r7, #120]	; 0x78
 80039f6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80039f8:	f04f 0200 	mov.w	r2, #0
 80039fc:	f04f 0300 	mov.w	r3, #0
 8003a00:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003a04:	4649      	mov	r1, r9
 8003a06:	008b      	lsls	r3, r1, #2
 8003a08:	4641      	mov	r1, r8
 8003a0a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a0e:	4641      	mov	r1, r8
 8003a10:	008a      	lsls	r2, r1, #2
 8003a12:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003a16:	f7fd f957 	bl	8000cc8 <__aeabi_uldivmod>
 8003a1a:	4602      	mov	r2, r0
 8003a1c:	460b      	mov	r3, r1
 8003a1e:	4b39      	ldr	r3, [pc, #228]	; (8003b04 <UART_SetConfig+0x4e4>)
 8003a20:	fba3 1302 	umull	r1, r3, r3, r2
 8003a24:	095b      	lsrs	r3, r3, #5
 8003a26:	2164      	movs	r1, #100	; 0x64
 8003a28:	fb01 f303 	mul.w	r3, r1, r3
 8003a2c:	1ad3      	subs	r3, r2, r3
 8003a2e:	011b      	lsls	r3, r3, #4
 8003a30:	3332      	adds	r3, #50	; 0x32
 8003a32:	4a34      	ldr	r2, [pc, #208]	; (8003b04 <UART_SetConfig+0x4e4>)
 8003a34:	fba2 2303 	umull	r2, r3, r2, r3
 8003a38:	095b      	lsrs	r3, r3, #5
 8003a3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a3e:	441c      	add	r4, r3
 8003a40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a44:	2200      	movs	r2, #0
 8003a46:	673b      	str	r3, [r7, #112]	; 0x70
 8003a48:	677a      	str	r2, [r7, #116]	; 0x74
 8003a4a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003a4e:	4642      	mov	r2, r8
 8003a50:	464b      	mov	r3, r9
 8003a52:	1891      	adds	r1, r2, r2
 8003a54:	60b9      	str	r1, [r7, #8]
 8003a56:	415b      	adcs	r3, r3
 8003a58:	60fb      	str	r3, [r7, #12]
 8003a5a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003a5e:	4641      	mov	r1, r8
 8003a60:	1851      	adds	r1, r2, r1
 8003a62:	6039      	str	r1, [r7, #0]
 8003a64:	4649      	mov	r1, r9
 8003a66:	414b      	adcs	r3, r1
 8003a68:	607b      	str	r3, [r7, #4]
 8003a6a:	f04f 0200 	mov.w	r2, #0
 8003a6e:	f04f 0300 	mov.w	r3, #0
 8003a72:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003a76:	4659      	mov	r1, fp
 8003a78:	00cb      	lsls	r3, r1, #3
 8003a7a:	4651      	mov	r1, sl
 8003a7c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a80:	4651      	mov	r1, sl
 8003a82:	00ca      	lsls	r2, r1, #3
 8003a84:	4610      	mov	r0, r2
 8003a86:	4619      	mov	r1, r3
 8003a88:	4603      	mov	r3, r0
 8003a8a:	4642      	mov	r2, r8
 8003a8c:	189b      	adds	r3, r3, r2
 8003a8e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003a90:	464b      	mov	r3, r9
 8003a92:	460a      	mov	r2, r1
 8003a94:	eb42 0303 	adc.w	r3, r2, r3
 8003a98:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003a9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	663b      	str	r3, [r7, #96]	; 0x60
 8003aa4:	667a      	str	r2, [r7, #100]	; 0x64
 8003aa6:	f04f 0200 	mov.w	r2, #0
 8003aaa:	f04f 0300 	mov.w	r3, #0
 8003aae:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003ab2:	4649      	mov	r1, r9
 8003ab4:	008b      	lsls	r3, r1, #2
 8003ab6:	4641      	mov	r1, r8
 8003ab8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003abc:	4641      	mov	r1, r8
 8003abe:	008a      	lsls	r2, r1, #2
 8003ac0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003ac4:	f7fd f900 	bl	8000cc8 <__aeabi_uldivmod>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	460b      	mov	r3, r1
 8003acc:	4b0d      	ldr	r3, [pc, #52]	; (8003b04 <UART_SetConfig+0x4e4>)
 8003ace:	fba3 1302 	umull	r1, r3, r3, r2
 8003ad2:	095b      	lsrs	r3, r3, #5
 8003ad4:	2164      	movs	r1, #100	; 0x64
 8003ad6:	fb01 f303 	mul.w	r3, r1, r3
 8003ada:	1ad3      	subs	r3, r2, r3
 8003adc:	011b      	lsls	r3, r3, #4
 8003ade:	3332      	adds	r3, #50	; 0x32
 8003ae0:	4a08      	ldr	r2, [pc, #32]	; (8003b04 <UART_SetConfig+0x4e4>)
 8003ae2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ae6:	095b      	lsrs	r3, r3, #5
 8003ae8:	f003 020f 	and.w	r2, r3, #15
 8003aec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4422      	add	r2, r4
 8003af4:	609a      	str	r2, [r3, #8]
}
 8003af6:	bf00      	nop
 8003af8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003afc:	46bd      	mov	sp, r7
 8003afe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b02:	bf00      	nop
 8003b04:	51eb851f 	.word	0x51eb851f

08003b08 <__NVIC_SetPriority>:
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b083      	sub	sp, #12
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	4603      	mov	r3, r0
 8003b10:	6039      	str	r1, [r7, #0]
 8003b12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	db0a      	blt.n	8003b32 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	b2da      	uxtb	r2, r3
 8003b20:	490c      	ldr	r1, [pc, #48]	; (8003b54 <__NVIC_SetPriority+0x4c>)
 8003b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b26:	0112      	lsls	r2, r2, #4
 8003b28:	b2d2      	uxtb	r2, r2
 8003b2a:	440b      	add	r3, r1
 8003b2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003b30:	e00a      	b.n	8003b48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	b2da      	uxtb	r2, r3
 8003b36:	4908      	ldr	r1, [pc, #32]	; (8003b58 <__NVIC_SetPriority+0x50>)
 8003b38:	79fb      	ldrb	r3, [r7, #7]
 8003b3a:	f003 030f 	and.w	r3, r3, #15
 8003b3e:	3b04      	subs	r3, #4
 8003b40:	0112      	lsls	r2, r2, #4
 8003b42:	b2d2      	uxtb	r2, r2
 8003b44:	440b      	add	r3, r1
 8003b46:	761a      	strb	r2, [r3, #24]
}
 8003b48:	bf00      	nop
 8003b4a:	370c      	adds	r7, #12
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b52:	4770      	bx	lr
 8003b54:	e000e100 	.word	0xe000e100
 8003b58:	e000ed00 	.word	0xe000ed00

08003b5c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003b60:	4b05      	ldr	r3, [pc, #20]	; (8003b78 <SysTick_Handler+0x1c>)
 8003b62:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003b64:	f002 fa00 	bl	8005f68 <xTaskGetSchedulerState>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d001      	beq.n	8003b72 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003b6e:	f003 f8e3 	bl	8006d38 <xPortSysTickHandler>
  }
}
 8003b72:	bf00      	nop
 8003b74:	bd80      	pop	{r7, pc}
 8003b76:	bf00      	nop
 8003b78:	e000e010 	.word	0xe000e010

08003b7c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003b80:	2100      	movs	r1, #0
 8003b82:	f06f 0004 	mvn.w	r0, #4
 8003b86:	f7ff ffbf 	bl	8003b08 <__NVIC_SetPriority>
#endif
}
 8003b8a:	bf00      	nop
 8003b8c:	bd80      	pop	{r7, pc}
	...

08003b90 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003b90:	b480      	push	{r7}
 8003b92:	b083      	sub	sp, #12
 8003b94:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003b96:	f3ef 8305 	mrs	r3, IPSR
 8003b9a:	603b      	str	r3, [r7, #0]
  return(result);
 8003b9c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d003      	beq.n	8003baa <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003ba2:	f06f 0305 	mvn.w	r3, #5
 8003ba6:	607b      	str	r3, [r7, #4]
 8003ba8:	e00c      	b.n	8003bc4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003baa:	4b0a      	ldr	r3, [pc, #40]	; (8003bd4 <osKernelInitialize+0x44>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d105      	bne.n	8003bbe <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003bb2:	4b08      	ldr	r3, [pc, #32]	; (8003bd4 <osKernelInitialize+0x44>)
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	607b      	str	r3, [r7, #4]
 8003bbc:	e002      	b.n	8003bc4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003bbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003bc2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003bc4:	687b      	ldr	r3, [r7, #4]
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	370c      	adds	r7, #12
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr
 8003bd2:	bf00      	nop
 8003bd4:	200002cc 	.word	0x200002cc

08003bd8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b082      	sub	sp, #8
 8003bdc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003bde:	f3ef 8305 	mrs	r3, IPSR
 8003be2:	603b      	str	r3, [r7, #0]
  return(result);
 8003be4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d003      	beq.n	8003bf2 <osKernelStart+0x1a>
    stat = osErrorISR;
 8003bea:	f06f 0305 	mvn.w	r3, #5
 8003bee:	607b      	str	r3, [r7, #4]
 8003bf0:	e010      	b.n	8003c14 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003bf2:	4b0b      	ldr	r3, [pc, #44]	; (8003c20 <osKernelStart+0x48>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d109      	bne.n	8003c0e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003bfa:	f7ff ffbf 	bl	8003b7c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003bfe:	4b08      	ldr	r3, [pc, #32]	; (8003c20 <osKernelStart+0x48>)
 8003c00:	2202      	movs	r2, #2
 8003c02:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003c04:	f001 fd44 	bl	8005690 <vTaskStartScheduler>
      stat = osOK;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	607b      	str	r3, [r7, #4]
 8003c0c:	e002      	b.n	8003c14 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003c0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003c12:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003c14:	687b      	ldr	r3, [r7, #4]
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3708      	adds	r7, #8
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}
 8003c1e:	bf00      	nop
 8003c20:	200002cc 	.word	0x200002cc

08003c24 <OS_Tick_GetCount>:
uint32_t osKernelGetTickFreq (void) {
  return (configTICK_RATE_HZ);
}

/* Get OS Tick count value */
static uint32_t OS_Tick_GetCount (void) {
 8003c24:	b480      	push	{r7}
 8003c26:	b083      	sub	sp, #12
 8003c28:	af00      	add	r7, sp, #0
  uint32_t load = SysTick->LOAD;
 8003c2a:	4b06      	ldr	r3, [pc, #24]	; (8003c44 <OS_Tick_GetCount+0x20>)
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	607b      	str	r3, [r7, #4]
  return  (load - SysTick->VAL);
 8003c30:	4b04      	ldr	r3, [pc, #16]	; (8003c44 <OS_Tick_GetCount+0x20>)
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	687a      	ldr	r2, [r7, #4]
 8003c36:	1ad3      	subs	r3, r2, r3
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	370c      	adds	r7, #12
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c42:	4770      	bx	lr
 8003c44:	e000e010 	.word	0xe000e010

08003c48 <OS_Tick_GetOverflow>:

/* Get OS Tick overflow status */
static uint32_t OS_Tick_GetOverflow (void) {
 8003c48:	b480      	push	{r7}
 8003c4a:	af00      	add	r7, sp, #0
  return ((SysTick->CTRL >> 16) & 1U);
 8003c4c:	4b04      	ldr	r3, [pc, #16]	; (8003c60 <OS_Tick_GetOverflow+0x18>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	0c1b      	lsrs	r3, r3, #16
 8003c52:	f003 0301 	and.w	r3, r3, #1
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr
 8003c60:	e000e010 	.word	0xe000e010

08003c64 <OS_Tick_GetInterval>:

/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void) {
 8003c64:	b480      	push	{r7}
 8003c66:	af00      	add	r7, sp, #0
  return (SysTick->LOAD + 1U);
 8003c68:	4b03      	ldr	r3, [pc, #12]	; (8003c78 <OS_Tick_GetInterval+0x14>)
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	3301      	adds	r3, #1
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	46bd      	mov	sp, r7
 8003c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c76:	4770      	bx	lr
 8003c78:	e000e010 	.word	0xe000e010

08003c7c <osKernelGetSysTimerCount>:

uint32_t osKernelGetSysTimerCount (void) {
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b086      	sub	sp, #24
 8003c80:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c82:	f3ef 8310 	mrs	r3, PRIMASK
 8003c86:	60bb      	str	r3, [r7, #8]
  return(result);
 8003c88:	68bb      	ldr	r3, [r7, #8]
  uint32_t irqmask = IS_IRQ_MASKED();
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d105      	bne.n	8003c9a <osKernelGetSysTimerCount+0x1e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003c8e:	f3ef 8311 	mrs	r3, BASEPRI
 8003c92:	607b      	str	r3, [r7, #4]
  return(result);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d001      	beq.n	8003c9e <osKernelGetSysTimerCount+0x22>
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e000      	b.n	8003ca0 <osKernelGetSysTimerCount+0x24>
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8003ca2:	b672      	cpsid	i
}
 8003ca4:	bf00      	nop
  TickType_t ticks;
  uint32_t val;

  __disable_irq();

  ticks = xTaskGetTickCount();
 8003ca6:	f001 fe0f 	bl	80058c8 <xTaskGetTickCount>
 8003caa:	6178      	str	r0, [r7, #20]
  val   = OS_Tick_GetCount();
 8003cac:	f7ff ffba 	bl	8003c24 <OS_Tick_GetCount>
 8003cb0:	6138      	str	r0, [r7, #16]

  if (OS_Tick_GetOverflow() != 0U) {
 8003cb2:	f7ff ffc9 	bl	8003c48 <OS_Tick_GetOverflow>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d005      	beq.n	8003cc8 <osKernelGetSysTimerCount+0x4c>
    val = OS_Tick_GetCount();
 8003cbc:	f7ff ffb2 	bl	8003c24 <OS_Tick_GetCount>
 8003cc0:	6138      	str	r0, [r7, #16]
    ticks++;
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	3301      	adds	r3, #1
 8003cc6:	617b      	str	r3, [r7, #20]
  }
  val += ticks * OS_Tick_GetInterval();
 8003cc8:	f7ff ffcc 	bl	8003c64 <OS_Tick_GetInterval>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	fb02 f303 	mul.w	r3, r2, r3
 8003cd4:	693a      	ldr	r2, [r7, #16]
 8003cd6:	4413      	add	r3, r2
 8003cd8:	613b      	str	r3, [r7, #16]

  if (irqmask == 0U) {
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d101      	bne.n	8003ce4 <osKernelGetSysTimerCount+0x68>
  __ASM volatile ("cpsie i" : : : "memory");
 8003ce0:	b662      	cpsie	i
}
 8003ce2:	bf00      	nop
    __enable_irq();
  }

  return (val);
 8003ce4:	693b      	ldr	r3, [r7, #16]
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3718      	adds	r7, #24
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}

08003cee <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003cee:	b580      	push	{r7, lr}
 8003cf0:	b08e      	sub	sp, #56	; 0x38
 8003cf2:	af04      	add	r7, sp, #16
 8003cf4:	60f8      	str	r0, [r7, #12]
 8003cf6:	60b9      	str	r1, [r7, #8]
 8003cf8:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003cfe:	f3ef 8305 	mrs	r3, IPSR
 8003d02:	617b      	str	r3, [r7, #20]
  return(result);
 8003d04:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d17e      	bne.n	8003e08 <osThreadNew+0x11a>
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d07b      	beq.n	8003e08 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003d10:	2380      	movs	r3, #128	; 0x80
 8003d12:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003d14:	2318      	movs	r3, #24
 8003d16:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8003d1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003d20:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d045      	beq.n	8003db4 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d002      	beq.n	8003d36 <osThreadNew+0x48>
        name = attr->name;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	699b      	ldr	r3, [r3, #24]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d002      	beq.n	8003d44 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	699b      	ldr	r3, [r3, #24]
 8003d42:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003d44:	69fb      	ldr	r3, [r7, #28]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d008      	beq.n	8003d5c <osThreadNew+0x6e>
 8003d4a:	69fb      	ldr	r3, [r7, #28]
 8003d4c:	2b38      	cmp	r3, #56	; 0x38
 8003d4e:	d805      	bhi.n	8003d5c <osThreadNew+0x6e>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	f003 0301 	and.w	r3, r3, #1
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d001      	beq.n	8003d60 <osThreadNew+0x72>
        return (NULL);
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	e054      	b.n	8003e0a <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	695b      	ldr	r3, [r3, #20]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d003      	beq.n	8003d70 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	695b      	ldr	r3, [r3, #20]
 8003d6c:	089b      	lsrs	r3, r3, #2
 8003d6e:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d00e      	beq.n	8003d96 <osThreadNew+0xa8>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	2bbb      	cmp	r3, #187	; 0xbb
 8003d7e:	d90a      	bls.n	8003d96 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d006      	beq.n	8003d96 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	695b      	ldr	r3, [r3, #20]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d002      	beq.n	8003d96 <osThreadNew+0xa8>
        mem = 1;
 8003d90:	2301      	movs	r3, #1
 8003d92:	61bb      	str	r3, [r7, #24]
 8003d94:	e010      	b.n	8003db8 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d10c      	bne.n	8003db8 <osThreadNew+0xca>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	68db      	ldr	r3, [r3, #12]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d108      	bne.n	8003db8 <osThreadNew+0xca>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	691b      	ldr	r3, [r3, #16]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d104      	bne.n	8003db8 <osThreadNew+0xca>
          mem = 0;
 8003dae:	2300      	movs	r3, #0
 8003db0:	61bb      	str	r3, [r7, #24]
 8003db2:	e001      	b.n	8003db8 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003db4:	2300      	movs	r3, #0
 8003db6:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003db8:	69bb      	ldr	r3, [r7, #24]
 8003dba:	2b01      	cmp	r3, #1
 8003dbc:	d110      	bne.n	8003de0 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003dc6:	9202      	str	r2, [sp, #8]
 8003dc8:	9301      	str	r3, [sp, #4]
 8003dca:	69fb      	ldr	r3, [r7, #28]
 8003dcc:	9300      	str	r3, [sp, #0]
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	6a3a      	ldr	r2, [r7, #32]
 8003dd2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003dd4:	68f8      	ldr	r0, [r7, #12]
 8003dd6:	f001 fa6f 	bl	80052b8 <xTaskCreateStatic>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	613b      	str	r3, [r7, #16]
 8003dde:	e013      	b.n	8003e08 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003de0:	69bb      	ldr	r3, [r7, #24]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d110      	bne.n	8003e08 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003de6:	6a3b      	ldr	r3, [r7, #32]
 8003de8:	b29a      	uxth	r2, r3
 8003dea:	f107 0310 	add.w	r3, r7, #16
 8003dee:	9301      	str	r3, [sp, #4]
 8003df0:	69fb      	ldr	r3, [r7, #28]
 8003df2:	9300      	str	r3, [sp, #0]
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003df8:	68f8      	ldr	r0, [r7, #12]
 8003dfa:	f001 faba 	bl	8005372 <xTaskCreate>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d001      	beq.n	8003e08 <osThreadNew+0x11a>
            hTask = NULL;
 8003e04:	2300      	movs	r3, #0
 8003e06:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003e08:	693b      	ldr	r3, [r7, #16]
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3728      	adds	r7, #40	; 0x28
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}

08003e12 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003e12:	b580      	push	{r7, lr}
 8003e14:	b084      	sub	sp, #16
 8003e16:	af00      	add	r7, sp, #0
 8003e18:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003e1a:	f3ef 8305 	mrs	r3, IPSR
 8003e1e:	60bb      	str	r3, [r7, #8]
  return(result);
 8003e20:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d003      	beq.n	8003e2e <osDelay+0x1c>
    stat = osErrorISR;
 8003e26:	f06f 0305 	mvn.w	r3, #5
 8003e2a:	60fb      	str	r3, [r7, #12]
 8003e2c:	e007      	b.n	8003e3e <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d002      	beq.n	8003e3e <osDelay+0x2c>
      vTaskDelay(ticks);
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f001 fbf5 	bl	8005628 <vTaskDelay>
    }
  }

  return (stat);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	3710      	adds	r7, #16
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}

08003e48 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b088      	sub	sp, #32
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8003e50:	2300      	movs	r3, #0
 8003e52:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003e54:	f3ef 8305 	mrs	r3, IPSR
 8003e58:	60bb      	str	r3, [r7, #8]
  return(result);
 8003e5a:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d174      	bne.n	8003f4a <osMutexNew+0x102>
    if (attr != NULL) {
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d003      	beq.n	8003e6e <osMutexNew+0x26>
      type = attr->attr_bits;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	61bb      	str	r3, [r7, #24]
 8003e6c:	e001      	b.n	8003e72 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8003e72:	69bb      	ldr	r3, [r7, #24]
 8003e74:	f003 0301 	and.w	r3, r3, #1
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d002      	beq.n	8003e82 <osMutexNew+0x3a>
      rmtx = 1U;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	617b      	str	r3, [r7, #20]
 8003e80:	e001      	b.n	8003e86 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8003e82:	2300      	movs	r3, #0
 8003e84:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8003e86:	69bb      	ldr	r3, [r7, #24]
 8003e88:	f003 0308 	and.w	r3, r3, #8
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d15c      	bne.n	8003f4a <osMutexNew+0x102>
      mem = -1;
 8003e90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003e94:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d015      	beq.n	8003ec8 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d006      	beq.n	8003eb2 <osMutexNew+0x6a>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	2b4f      	cmp	r3, #79	; 0x4f
 8003eaa:	d902      	bls.n	8003eb2 <osMutexNew+0x6a>
          mem = 1;
 8003eac:	2301      	movs	r3, #1
 8003eae:	613b      	str	r3, [r7, #16]
 8003eb0:	e00c      	b.n	8003ecc <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d108      	bne.n	8003ecc <osMutexNew+0x84>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	68db      	ldr	r3, [r3, #12]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d104      	bne.n	8003ecc <osMutexNew+0x84>
            mem = 0;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	613b      	str	r3, [r7, #16]
 8003ec6:	e001      	b.n	8003ecc <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d112      	bne.n	8003ef8 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d007      	beq.n	8003ee8 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	4619      	mov	r1, r3
 8003ede:	2004      	movs	r0, #4
 8003ee0:	f000 fba1 	bl	8004626 <xQueueCreateMutexStatic>
 8003ee4:	61f8      	str	r0, [r7, #28]
 8003ee6:	e016      	b.n	8003f16 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	4619      	mov	r1, r3
 8003eee:	2001      	movs	r0, #1
 8003ef0:	f000 fb99 	bl	8004626 <xQueueCreateMutexStatic>
 8003ef4:	61f8      	str	r0, [r7, #28]
 8003ef6:	e00e      	b.n	8003f16 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d10b      	bne.n	8003f16 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d004      	beq.n	8003f0e <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8003f04:	2004      	movs	r0, #4
 8003f06:	f000 fb76 	bl	80045f6 <xQueueCreateMutex>
 8003f0a:	61f8      	str	r0, [r7, #28]
 8003f0c:	e003      	b.n	8003f16 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8003f0e:	2001      	movs	r0, #1
 8003f10:	f000 fb71 	bl	80045f6 <xQueueCreateMutex>
 8003f14:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8003f16:	69fb      	ldr	r3, [r7, #28]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d00c      	beq.n	8003f36 <osMutexNew+0xee>
        if (attr != NULL) {
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d003      	beq.n	8003f2a <osMutexNew+0xe2>
          name = attr->name;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	60fb      	str	r3, [r7, #12]
 8003f28:	e001      	b.n	8003f2e <osMutexNew+0xe6>
        } else {
          name = NULL;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8003f2e:	68f9      	ldr	r1, [r7, #12]
 8003f30:	69f8      	ldr	r0, [r7, #28]
 8003f32:	f001 f939 	bl	80051a8 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8003f36:	69fb      	ldr	r3, [r7, #28]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d006      	beq.n	8003f4a <osMutexNew+0x102>
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d003      	beq.n	8003f4a <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8003f42:	69fb      	ldr	r3, [r7, #28]
 8003f44:	f043 0301 	orr.w	r3, r3, #1
 8003f48:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8003f4a:	69fb      	ldr	r3, [r7, #28]
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	3720      	adds	r7, #32
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}

08003f54 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b086      	sub	sp, #24
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
 8003f5c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	f023 0301 	bic.w	r3, r3, #1
 8003f64:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	f003 0301 	and.w	r3, r3, #1
 8003f6c:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003f72:	f3ef 8305 	mrs	r3, IPSR
 8003f76:	60bb      	str	r3, [r7, #8]
  return(result);
 8003f78:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d003      	beq.n	8003f86 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8003f7e:	f06f 0305 	mvn.w	r3, #5
 8003f82:	617b      	str	r3, [r7, #20]
 8003f84:	e02c      	b.n	8003fe0 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d103      	bne.n	8003f94 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8003f8c:	f06f 0303 	mvn.w	r3, #3
 8003f90:	617b      	str	r3, [r7, #20]
 8003f92:	e025      	b.n	8003fe0 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d011      	beq.n	8003fbe <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8003f9a:	6839      	ldr	r1, [r7, #0]
 8003f9c:	6938      	ldr	r0, [r7, #16]
 8003f9e:	f000 fb91 	bl	80046c4 <xQueueTakeMutexRecursive>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d01b      	beq.n	8003fe0 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d003      	beq.n	8003fb6 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8003fae:	f06f 0301 	mvn.w	r3, #1
 8003fb2:	617b      	str	r3, [r7, #20]
 8003fb4:	e014      	b.n	8003fe0 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8003fb6:	f06f 0302 	mvn.w	r3, #2
 8003fba:	617b      	str	r3, [r7, #20]
 8003fbc:	e010      	b.n	8003fe0 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8003fbe:	6839      	ldr	r1, [r7, #0]
 8003fc0:	6938      	ldr	r0, [r7, #16]
 8003fc2:	f000 fe99 	bl	8004cf8 <xQueueSemaphoreTake>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d009      	beq.n	8003fe0 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d003      	beq.n	8003fda <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8003fd2:	f06f 0301 	mvn.w	r3, #1
 8003fd6:	617b      	str	r3, [r7, #20]
 8003fd8:	e002      	b.n	8003fe0 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8003fda:	f06f 0302 	mvn.w	r3, #2
 8003fde:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8003fe0:	697b      	ldr	r3, [r7, #20]
}
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	3718      	adds	r7, #24
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}

08003fea <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8003fea:	b580      	push	{r7, lr}
 8003fec:	b086      	sub	sp, #24
 8003fee:	af00      	add	r7, sp, #0
 8003ff0:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	f023 0301 	bic.w	r3, r3, #1
 8003ff8:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	f003 0301 	and.w	r3, r3, #1
 8004000:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8004002:	2300      	movs	r3, #0
 8004004:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004006:	f3ef 8305 	mrs	r3, IPSR
 800400a:	60bb      	str	r3, [r7, #8]
  return(result);
 800400c:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800400e:	2b00      	cmp	r3, #0
 8004010:	d003      	beq.n	800401a <osMutexRelease+0x30>
    stat = osErrorISR;
 8004012:	f06f 0305 	mvn.w	r3, #5
 8004016:	617b      	str	r3, [r7, #20]
 8004018:	e01f      	b.n	800405a <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d103      	bne.n	8004028 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8004020:	f06f 0303 	mvn.w	r3, #3
 8004024:	617b      	str	r3, [r7, #20]
 8004026:	e018      	b.n	800405a <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d009      	beq.n	8004042 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800402e:	6938      	ldr	r0, [r7, #16]
 8004030:	f000 fb14 	bl	800465c <xQueueGiveMutexRecursive>
 8004034:	4603      	mov	r3, r0
 8004036:	2b01      	cmp	r3, #1
 8004038:	d00f      	beq.n	800405a <osMutexRelease+0x70>
        stat = osErrorResource;
 800403a:	f06f 0302 	mvn.w	r3, #2
 800403e:	617b      	str	r3, [r7, #20]
 8004040:	e00b      	b.n	800405a <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8004042:	2300      	movs	r3, #0
 8004044:	2200      	movs	r2, #0
 8004046:	2100      	movs	r1, #0
 8004048:	6938      	ldr	r0, [r7, #16]
 800404a:	f000 fbdb 	bl	8004804 <xQueueGenericSend>
 800404e:	4603      	mov	r3, r0
 8004050:	2b01      	cmp	r3, #1
 8004052:	d002      	beq.n	800405a <osMutexRelease+0x70>
        stat = osErrorResource;
 8004054:	f06f 0302 	mvn.w	r3, #2
 8004058:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800405a:	697b      	ldr	r3, [r7, #20]
}
 800405c:	4618      	mov	r0, r3
 800405e:	3718      	adds	r7, #24
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}

08004064 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8004064:	b580      	push	{r7, lr}
 8004066:	b08a      	sub	sp, #40	; 0x28
 8004068:	af02      	add	r7, sp, #8
 800406a:	60f8      	str	r0, [r7, #12]
 800406c:	60b9      	str	r1, [r7, #8]
 800406e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8004070:	2300      	movs	r3, #0
 8004072:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004074:	f3ef 8305 	mrs	r3, IPSR
 8004078:	613b      	str	r3, [r7, #16]
  return(result);
 800407a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800407c:	2b00      	cmp	r3, #0
 800407e:	d175      	bne.n	800416c <osSemaphoreNew+0x108>
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d072      	beq.n	800416c <osSemaphoreNew+0x108>
 8004086:	68ba      	ldr	r2, [r7, #8]
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	429a      	cmp	r2, r3
 800408c:	d86e      	bhi.n	800416c <osSemaphoreNew+0x108>
    mem = -1;
 800408e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004092:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d015      	beq.n	80040c6 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d006      	beq.n	80040b0 <osSemaphoreNew+0x4c>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	68db      	ldr	r3, [r3, #12]
 80040a6:	2b4f      	cmp	r3, #79	; 0x4f
 80040a8:	d902      	bls.n	80040b0 <osSemaphoreNew+0x4c>
        mem = 1;
 80040aa:	2301      	movs	r3, #1
 80040ac:	61bb      	str	r3, [r7, #24]
 80040ae:	e00c      	b.n	80040ca <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d108      	bne.n	80040ca <osSemaphoreNew+0x66>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	68db      	ldr	r3, [r3, #12]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d104      	bne.n	80040ca <osSemaphoreNew+0x66>
          mem = 0;
 80040c0:	2300      	movs	r3, #0
 80040c2:	61bb      	str	r3, [r7, #24]
 80040c4:	e001      	b.n	80040ca <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 80040c6:	2300      	movs	r3, #0
 80040c8:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 80040ca:	69bb      	ldr	r3, [r7, #24]
 80040cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80040d0:	d04c      	beq.n	800416c <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d128      	bne.n	800412a <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80040d8:	69bb      	ldr	r3, [r7, #24]
 80040da:	2b01      	cmp	r3, #1
 80040dc:	d10a      	bne.n	80040f4 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	2203      	movs	r2, #3
 80040e4:	9200      	str	r2, [sp, #0]
 80040e6:	2200      	movs	r2, #0
 80040e8:	2100      	movs	r1, #0
 80040ea:	2001      	movs	r0, #1
 80040ec:	f000 f994 	bl	8004418 <xQueueGenericCreateStatic>
 80040f0:	61f8      	str	r0, [r7, #28]
 80040f2:	e005      	b.n	8004100 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80040f4:	2203      	movs	r2, #3
 80040f6:	2100      	movs	r1, #0
 80040f8:	2001      	movs	r0, #1
 80040fa:	f000 fa05 	bl	8004508 <xQueueGenericCreate>
 80040fe:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8004100:	69fb      	ldr	r3, [r7, #28]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d022      	beq.n	800414c <osSemaphoreNew+0xe8>
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d01f      	beq.n	800414c <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800410c:	2300      	movs	r3, #0
 800410e:	2200      	movs	r2, #0
 8004110:	2100      	movs	r1, #0
 8004112:	69f8      	ldr	r0, [r7, #28]
 8004114:	f000 fb76 	bl	8004804 <xQueueGenericSend>
 8004118:	4603      	mov	r3, r0
 800411a:	2b01      	cmp	r3, #1
 800411c:	d016      	beq.n	800414c <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800411e:	69f8      	ldr	r0, [r7, #28]
 8004120:	f000 fef6 	bl	8004f10 <vQueueDelete>
            hSemaphore = NULL;
 8004124:	2300      	movs	r3, #0
 8004126:	61fb      	str	r3, [r7, #28]
 8004128:	e010      	b.n	800414c <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800412a:	69bb      	ldr	r3, [r7, #24]
 800412c:	2b01      	cmp	r3, #1
 800412e:	d108      	bne.n	8004142 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	461a      	mov	r2, r3
 8004136:	68b9      	ldr	r1, [r7, #8]
 8004138:	68f8      	ldr	r0, [r7, #12]
 800413a:	f000 faf9 	bl	8004730 <xQueueCreateCountingSemaphoreStatic>
 800413e:	61f8      	str	r0, [r7, #28]
 8004140:	e004      	b.n	800414c <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8004142:	68b9      	ldr	r1, [r7, #8]
 8004144:	68f8      	ldr	r0, [r7, #12]
 8004146:	f000 fb2a 	bl	800479e <xQueueCreateCountingSemaphore>
 800414a:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800414c:	69fb      	ldr	r3, [r7, #28]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d00c      	beq.n	800416c <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d003      	beq.n	8004160 <osSemaphoreNew+0xfc>
          name = attr->name;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	617b      	str	r3, [r7, #20]
 800415e:	e001      	b.n	8004164 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8004160:	2300      	movs	r3, #0
 8004162:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8004164:	6979      	ldr	r1, [r7, #20]
 8004166:	69f8      	ldr	r0, [r7, #28]
 8004168:	f001 f81e 	bl	80051a8 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800416c:	69fb      	ldr	r3, [r7, #28]
}
 800416e:	4618      	mov	r0, r3
 8004170:	3720      	adds	r7, #32
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}
	...

08004178 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004178:	b480      	push	{r7}
 800417a:	b085      	sub	sp, #20
 800417c:	af00      	add	r7, sp, #0
 800417e:	60f8      	str	r0, [r7, #12]
 8004180:	60b9      	str	r1, [r7, #8]
 8004182:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	4a07      	ldr	r2, [pc, #28]	; (80041a4 <vApplicationGetIdleTaskMemory+0x2c>)
 8004188:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	4a06      	ldr	r2, [pc, #24]	; (80041a8 <vApplicationGetIdleTaskMemory+0x30>)
 800418e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2280      	movs	r2, #128	; 0x80
 8004194:	601a      	str	r2, [r3, #0]
}
 8004196:	bf00      	nop
 8004198:	3714      	adds	r7, #20
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr
 80041a2:	bf00      	nop
 80041a4:	200002d0 	.word	0x200002d0
 80041a8:	2000038c 	.word	0x2000038c

080041ac <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80041ac:	b480      	push	{r7}
 80041ae:	b085      	sub	sp, #20
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	60f8      	str	r0, [r7, #12]
 80041b4:	60b9      	str	r1, [r7, #8]
 80041b6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	4a07      	ldr	r2, [pc, #28]	; (80041d8 <vApplicationGetTimerTaskMemory+0x2c>)
 80041bc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	4a06      	ldr	r2, [pc, #24]	; (80041dc <vApplicationGetTimerTaskMemory+0x30>)
 80041c2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80041ca:	601a      	str	r2, [r3, #0]
}
 80041cc:	bf00      	nop
 80041ce:	3714      	adds	r7, #20
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr
 80041d8:	2000058c 	.word	0x2000058c
 80041dc:	20000648 	.word	0x20000648

080041e0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80041e0:	b480      	push	{r7}
 80041e2:	b083      	sub	sp, #12
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	f103 0208 	add.w	r2, r3, #8
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80041f8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	f103 0208 	add.w	r2, r3, #8
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	f103 0208 	add.w	r2, r3, #8
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2200      	movs	r2, #0
 8004212:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004214:	bf00      	nop
 8004216:	370c      	adds	r7, #12
 8004218:	46bd      	mov	sp, r7
 800421a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421e:	4770      	bx	lr

08004220 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004220:	b480      	push	{r7}
 8004222:	b083      	sub	sp, #12
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2200      	movs	r2, #0
 800422c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800422e:	bf00      	nop
 8004230:	370c      	adds	r7, #12
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr

0800423a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800423a:	b480      	push	{r7}
 800423c:	b085      	sub	sp, #20
 800423e:	af00      	add	r7, sp, #0
 8004240:	6078      	str	r0, [r7, #4]
 8004242:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	68fa      	ldr	r2, [r7, #12]
 800424e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	689a      	ldr	r2, [r3, #8]
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	683a      	ldr	r2, [r7, #0]
 800425e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	683a      	ldr	r2, [r7, #0]
 8004264:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	687a      	ldr	r2, [r7, #4]
 800426a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	1c5a      	adds	r2, r3, #1
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	601a      	str	r2, [r3, #0]
}
 8004276:	bf00      	nop
 8004278:	3714      	adds	r7, #20
 800427a:	46bd      	mov	sp, r7
 800427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004280:	4770      	bx	lr

08004282 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004282:	b480      	push	{r7}
 8004284:	b085      	sub	sp, #20
 8004286:	af00      	add	r7, sp, #0
 8004288:	6078      	str	r0, [r7, #4]
 800428a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004298:	d103      	bne.n	80042a2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	691b      	ldr	r3, [r3, #16]
 800429e:	60fb      	str	r3, [r7, #12]
 80042a0:	e00c      	b.n	80042bc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	3308      	adds	r3, #8
 80042a6:	60fb      	str	r3, [r7, #12]
 80042a8:	e002      	b.n	80042b0 <vListInsert+0x2e>
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	60fb      	str	r3, [r7, #12]
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	68ba      	ldr	r2, [r7, #8]
 80042b8:	429a      	cmp	r2, r3
 80042ba:	d2f6      	bcs.n	80042aa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	685a      	ldr	r2, [r3, #4]
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	683a      	ldr	r2, [r7, #0]
 80042ca:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	68fa      	ldr	r2, [r7, #12]
 80042d0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	683a      	ldr	r2, [r7, #0]
 80042d6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	687a      	ldr	r2, [r7, #4]
 80042dc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	1c5a      	adds	r2, r3, #1
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	601a      	str	r2, [r3, #0]
}
 80042e8:	bf00      	nop
 80042ea:	3714      	adds	r7, #20
 80042ec:	46bd      	mov	sp, r7
 80042ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f2:	4770      	bx	lr

080042f4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80042f4:	b480      	push	{r7}
 80042f6:	b085      	sub	sp, #20
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	691b      	ldr	r3, [r3, #16]
 8004300:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	687a      	ldr	r2, [r7, #4]
 8004308:	6892      	ldr	r2, [r2, #8]
 800430a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	687a      	ldr	r2, [r7, #4]
 8004312:	6852      	ldr	r2, [r2, #4]
 8004314:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	687a      	ldr	r2, [r7, #4]
 800431c:	429a      	cmp	r2, r3
 800431e:	d103      	bne.n	8004328 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	689a      	ldr	r2, [r3, #8]
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2200      	movs	r2, #0
 800432c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	1e5a      	subs	r2, r3, #1
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
}
 800433c:	4618      	mov	r0, r3
 800433e:	3714      	adds	r7, #20
 8004340:	46bd      	mov	sp, r7
 8004342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004346:	4770      	bx	lr

08004348 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b084      	sub	sp, #16
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
 8004350:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d10a      	bne.n	8004372 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800435c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004360:	f383 8811 	msr	BASEPRI, r3
 8004364:	f3bf 8f6f 	isb	sy
 8004368:	f3bf 8f4f 	dsb	sy
 800436c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800436e:	bf00      	nop
 8004370:	e7fe      	b.n	8004370 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004372:	f002 fc4f 	bl	8006c14 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800437e:	68f9      	ldr	r1, [r7, #12]
 8004380:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004382:	fb01 f303 	mul.w	r3, r1, r3
 8004386:	441a      	add	r2, r3
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2200      	movs	r2, #0
 8004390:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681a      	ldr	r2, [r3, #0]
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043a2:	3b01      	subs	r3, #1
 80043a4:	68f9      	ldr	r1, [r7, #12]
 80043a6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80043a8:	fb01 f303 	mul.w	r3, r1, r3
 80043ac:	441a      	add	r2, r3
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	22ff      	movs	r2, #255	; 0xff
 80043b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	22ff      	movs	r2, #255	; 0xff
 80043be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d114      	bne.n	80043f2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	691b      	ldr	r3, [r3, #16]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d01a      	beq.n	8004406 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	3310      	adds	r3, #16
 80043d4:	4618      	mov	r0, r3
 80043d6:	f001 fbf5 	bl	8005bc4 <xTaskRemoveFromEventList>
 80043da:	4603      	mov	r3, r0
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d012      	beq.n	8004406 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80043e0:	4b0c      	ldr	r3, [pc, #48]	; (8004414 <xQueueGenericReset+0xcc>)
 80043e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043e6:	601a      	str	r2, [r3, #0]
 80043e8:	f3bf 8f4f 	dsb	sy
 80043ec:	f3bf 8f6f 	isb	sy
 80043f0:	e009      	b.n	8004406 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	3310      	adds	r3, #16
 80043f6:	4618      	mov	r0, r3
 80043f8:	f7ff fef2 	bl	80041e0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	3324      	adds	r3, #36	; 0x24
 8004400:	4618      	mov	r0, r3
 8004402:	f7ff feed 	bl	80041e0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004406:	f002 fc35 	bl	8006c74 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800440a:	2301      	movs	r3, #1
}
 800440c:	4618      	mov	r0, r3
 800440e:	3710      	adds	r7, #16
 8004410:	46bd      	mov	sp, r7
 8004412:	bd80      	pop	{r7, pc}
 8004414:	e000ed04 	.word	0xe000ed04

08004418 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004418:	b580      	push	{r7, lr}
 800441a:	b08e      	sub	sp, #56	; 0x38
 800441c:	af02      	add	r7, sp, #8
 800441e:	60f8      	str	r0, [r7, #12]
 8004420:	60b9      	str	r1, [r7, #8]
 8004422:	607a      	str	r2, [r7, #4]
 8004424:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d10a      	bne.n	8004442 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800442c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004430:	f383 8811 	msr	BASEPRI, r3
 8004434:	f3bf 8f6f 	isb	sy
 8004438:	f3bf 8f4f 	dsb	sy
 800443c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800443e:	bf00      	nop
 8004440:	e7fe      	b.n	8004440 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d10a      	bne.n	800445e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800444c:	f383 8811 	msr	BASEPRI, r3
 8004450:	f3bf 8f6f 	isb	sy
 8004454:	f3bf 8f4f 	dsb	sy
 8004458:	627b      	str	r3, [r7, #36]	; 0x24
}
 800445a:	bf00      	nop
 800445c:	e7fe      	b.n	800445c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d002      	beq.n	800446a <xQueueGenericCreateStatic+0x52>
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d001      	beq.n	800446e <xQueueGenericCreateStatic+0x56>
 800446a:	2301      	movs	r3, #1
 800446c:	e000      	b.n	8004470 <xQueueGenericCreateStatic+0x58>
 800446e:	2300      	movs	r3, #0
 8004470:	2b00      	cmp	r3, #0
 8004472:	d10a      	bne.n	800448a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004478:	f383 8811 	msr	BASEPRI, r3
 800447c:	f3bf 8f6f 	isb	sy
 8004480:	f3bf 8f4f 	dsb	sy
 8004484:	623b      	str	r3, [r7, #32]
}
 8004486:	bf00      	nop
 8004488:	e7fe      	b.n	8004488 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d102      	bne.n	8004496 <xQueueGenericCreateStatic+0x7e>
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d101      	bne.n	800449a <xQueueGenericCreateStatic+0x82>
 8004496:	2301      	movs	r3, #1
 8004498:	e000      	b.n	800449c <xQueueGenericCreateStatic+0x84>
 800449a:	2300      	movs	r3, #0
 800449c:	2b00      	cmp	r3, #0
 800449e:	d10a      	bne.n	80044b6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80044a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044a4:	f383 8811 	msr	BASEPRI, r3
 80044a8:	f3bf 8f6f 	isb	sy
 80044ac:	f3bf 8f4f 	dsb	sy
 80044b0:	61fb      	str	r3, [r7, #28]
}
 80044b2:	bf00      	nop
 80044b4:	e7fe      	b.n	80044b4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80044b6:	2350      	movs	r3, #80	; 0x50
 80044b8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	2b50      	cmp	r3, #80	; 0x50
 80044be:	d00a      	beq.n	80044d6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80044c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044c4:	f383 8811 	msr	BASEPRI, r3
 80044c8:	f3bf 8f6f 	isb	sy
 80044cc:	f3bf 8f4f 	dsb	sy
 80044d0:	61bb      	str	r3, [r7, #24]
}
 80044d2:	bf00      	nop
 80044d4:	e7fe      	b.n	80044d4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80044d6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80044dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d00d      	beq.n	80044fe <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80044e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044e4:	2201      	movs	r2, #1
 80044e6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80044ea:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80044ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044f0:	9300      	str	r3, [sp, #0]
 80044f2:	4613      	mov	r3, r2
 80044f4:	687a      	ldr	r2, [r7, #4]
 80044f6:	68b9      	ldr	r1, [r7, #8]
 80044f8:	68f8      	ldr	r0, [r7, #12]
 80044fa:	f000 f83f 	bl	800457c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80044fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004500:	4618      	mov	r0, r3
 8004502:	3730      	adds	r7, #48	; 0x30
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}

08004508 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004508:	b580      	push	{r7, lr}
 800450a:	b08a      	sub	sp, #40	; 0x28
 800450c:	af02      	add	r7, sp, #8
 800450e:	60f8      	str	r0, [r7, #12]
 8004510:	60b9      	str	r1, [r7, #8]
 8004512:	4613      	mov	r3, r2
 8004514:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d10a      	bne.n	8004532 <xQueueGenericCreate+0x2a>
	__asm volatile
 800451c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004520:	f383 8811 	msr	BASEPRI, r3
 8004524:	f3bf 8f6f 	isb	sy
 8004528:	f3bf 8f4f 	dsb	sy
 800452c:	613b      	str	r3, [r7, #16]
}
 800452e:	bf00      	nop
 8004530:	e7fe      	b.n	8004530 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	68ba      	ldr	r2, [r7, #8]
 8004536:	fb02 f303 	mul.w	r3, r2, r3
 800453a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800453c:	69fb      	ldr	r3, [r7, #28]
 800453e:	3350      	adds	r3, #80	; 0x50
 8004540:	4618      	mov	r0, r3
 8004542:	f002 fc89 	bl	8006e58 <pvPortMalloc>
 8004546:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004548:	69bb      	ldr	r3, [r7, #24]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d011      	beq.n	8004572 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800454e:	69bb      	ldr	r3, [r7, #24]
 8004550:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	3350      	adds	r3, #80	; 0x50
 8004556:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004558:	69bb      	ldr	r3, [r7, #24]
 800455a:	2200      	movs	r2, #0
 800455c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004560:	79fa      	ldrb	r2, [r7, #7]
 8004562:	69bb      	ldr	r3, [r7, #24]
 8004564:	9300      	str	r3, [sp, #0]
 8004566:	4613      	mov	r3, r2
 8004568:	697a      	ldr	r2, [r7, #20]
 800456a:	68b9      	ldr	r1, [r7, #8]
 800456c:	68f8      	ldr	r0, [r7, #12]
 800456e:	f000 f805 	bl	800457c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004572:	69bb      	ldr	r3, [r7, #24]
	}
 8004574:	4618      	mov	r0, r3
 8004576:	3720      	adds	r7, #32
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}

0800457c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b084      	sub	sp, #16
 8004580:	af00      	add	r7, sp, #0
 8004582:	60f8      	str	r0, [r7, #12]
 8004584:	60b9      	str	r1, [r7, #8]
 8004586:	607a      	str	r2, [r7, #4]
 8004588:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d103      	bne.n	8004598 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004590:	69bb      	ldr	r3, [r7, #24]
 8004592:	69ba      	ldr	r2, [r7, #24]
 8004594:	601a      	str	r2, [r3, #0]
 8004596:	e002      	b.n	800459e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004598:	69bb      	ldr	r3, [r7, #24]
 800459a:	687a      	ldr	r2, [r7, #4]
 800459c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800459e:	69bb      	ldr	r3, [r7, #24]
 80045a0:	68fa      	ldr	r2, [r7, #12]
 80045a2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80045a4:	69bb      	ldr	r3, [r7, #24]
 80045a6:	68ba      	ldr	r2, [r7, #8]
 80045a8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80045aa:	2101      	movs	r1, #1
 80045ac:	69b8      	ldr	r0, [r7, #24]
 80045ae:	f7ff fecb 	bl	8004348 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80045b2:	69bb      	ldr	r3, [r7, #24]
 80045b4:	78fa      	ldrb	r2, [r7, #3]
 80045b6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80045ba:	bf00      	nop
 80045bc:	3710      	adds	r7, #16
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}

080045c2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80045c2:	b580      	push	{r7, lr}
 80045c4:	b082      	sub	sp, #8
 80045c6:	af00      	add	r7, sp, #0
 80045c8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d00e      	beq.n	80045ee <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2200      	movs	r2, #0
 80045d4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2200      	movs	r2, #0
 80045da:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2200      	movs	r2, #0
 80045e0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80045e2:	2300      	movs	r3, #0
 80045e4:	2200      	movs	r2, #0
 80045e6:	2100      	movs	r1, #0
 80045e8:	6878      	ldr	r0, [r7, #4]
 80045ea:	f000 f90b 	bl	8004804 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80045ee:	bf00      	nop
 80045f0:	3708      	adds	r7, #8
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}

080045f6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80045f6:	b580      	push	{r7, lr}
 80045f8:	b086      	sub	sp, #24
 80045fa:	af00      	add	r7, sp, #0
 80045fc:	4603      	mov	r3, r0
 80045fe:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004600:	2301      	movs	r3, #1
 8004602:	617b      	str	r3, [r7, #20]
 8004604:	2300      	movs	r3, #0
 8004606:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8004608:	79fb      	ldrb	r3, [r7, #7]
 800460a:	461a      	mov	r2, r3
 800460c:	6939      	ldr	r1, [r7, #16]
 800460e:	6978      	ldr	r0, [r7, #20]
 8004610:	f7ff ff7a 	bl	8004508 <xQueueGenericCreate>
 8004614:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004616:	68f8      	ldr	r0, [r7, #12]
 8004618:	f7ff ffd3 	bl	80045c2 <prvInitialiseMutex>

		return xNewQueue;
 800461c:	68fb      	ldr	r3, [r7, #12]
	}
 800461e:	4618      	mov	r0, r3
 8004620:	3718      	adds	r7, #24
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}

08004626 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8004626:	b580      	push	{r7, lr}
 8004628:	b088      	sub	sp, #32
 800462a:	af02      	add	r7, sp, #8
 800462c:	4603      	mov	r3, r0
 800462e:	6039      	str	r1, [r7, #0]
 8004630:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004632:	2301      	movs	r3, #1
 8004634:	617b      	str	r3, [r7, #20]
 8004636:	2300      	movs	r3, #0
 8004638:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800463a:	79fb      	ldrb	r3, [r7, #7]
 800463c:	9300      	str	r3, [sp, #0]
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	2200      	movs	r2, #0
 8004642:	6939      	ldr	r1, [r7, #16]
 8004644:	6978      	ldr	r0, [r7, #20]
 8004646:	f7ff fee7 	bl	8004418 <xQueueGenericCreateStatic>
 800464a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800464c:	68f8      	ldr	r0, [r7, #12]
 800464e:	f7ff ffb8 	bl	80045c2 <prvInitialiseMutex>

		return xNewQueue;
 8004652:	68fb      	ldr	r3, [r7, #12]
	}
 8004654:	4618      	mov	r0, r3
 8004656:	3718      	adds	r7, #24
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}

0800465c <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800465c:	b590      	push	{r4, r7, lr}
 800465e:	b087      	sub	sp, #28
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d10a      	bne.n	8004684 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 800466e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004672:	f383 8811 	msr	BASEPRI, r3
 8004676:	f3bf 8f6f 	isb	sy
 800467a:	f3bf 8f4f 	dsb	sy
 800467e:	60fb      	str	r3, [r7, #12]
}
 8004680:	bf00      	nop
 8004682:	e7fe      	b.n	8004682 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	689c      	ldr	r4, [r3, #8]
 8004688:	f001 fc5e 	bl	8005f48 <xTaskGetCurrentTaskHandle>
 800468c:	4603      	mov	r3, r0
 800468e:	429c      	cmp	r4, r3
 8004690:	d111      	bne.n	80046b6 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	68db      	ldr	r3, [r3, #12]
 8004696:	1e5a      	subs	r2, r3, #1
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	68db      	ldr	r3, [r3, #12]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d105      	bne.n	80046b0 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80046a4:	2300      	movs	r3, #0
 80046a6:	2200      	movs	r2, #0
 80046a8:	2100      	movs	r1, #0
 80046aa:	6938      	ldr	r0, [r7, #16]
 80046ac:	f000 f8aa 	bl	8004804 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80046b0:	2301      	movs	r3, #1
 80046b2:	617b      	str	r3, [r7, #20]
 80046b4:	e001      	b.n	80046ba <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80046b6:	2300      	movs	r3, #0
 80046b8:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80046ba:	697b      	ldr	r3, [r7, #20]
	}
 80046bc:	4618      	mov	r0, r3
 80046be:	371c      	adds	r7, #28
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd90      	pop	{r4, r7, pc}

080046c4 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80046c4:	b590      	push	{r4, r7, lr}
 80046c6:	b087      	sub	sp, #28
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
 80046cc:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d10a      	bne.n	80046ee <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 80046d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046dc:	f383 8811 	msr	BASEPRI, r3
 80046e0:	f3bf 8f6f 	isb	sy
 80046e4:	f3bf 8f4f 	dsb	sy
 80046e8:	60fb      	str	r3, [r7, #12]
}
 80046ea:	bf00      	nop
 80046ec:	e7fe      	b.n	80046ec <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	689c      	ldr	r4, [r3, #8]
 80046f2:	f001 fc29 	bl	8005f48 <xTaskGetCurrentTaskHandle>
 80046f6:	4603      	mov	r3, r0
 80046f8:	429c      	cmp	r4, r3
 80046fa:	d107      	bne.n	800470c <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	68db      	ldr	r3, [r3, #12]
 8004700:	1c5a      	adds	r2, r3, #1
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8004706:	2301      	movs	r3, #1
 8004708:	617b      	str	r3, [r7, #20]
 800470a:	e00c      	b.n	8004726 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800470c:	6839      	ldr	r1, [r7, #0]
 800470e:	6938      	ldr	r0, [r7, #16]
 8004710:	f000 faf2 	bl	8004cf8 <xQueueSemaphoreTake>
 8004714:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d004      	beq.n	8004726 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	68db      	ldr	r3, [r3, #12]
 8004720:	1c5a      	adds	r2, r3, #1
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8004726:	697b      	ldr	r3, [r7, #20]
	}
 8004728:	4618      	mov	r0, r3
 800472a:	371c      	adds	r7, #28
 800472c:	46bd      	mov	sp, r7
 800472e:	bd90      	pop	{r4, r7, pc}

08004730 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8004730:	b580      	push	{r7, lr}
 8004732:	b08a      	sub	sp, #40	; 0x28
 8004734:	af02      	add	r7, sp, #8
 8004736:	60f8      	str	r0, [r7, #12]
 8004738:	60b9      	str	r1, [r7, #8]
 800473a:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d10a      	bne.n	8004758 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8004742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004746:	f383 8811 	msr	BASEPRI, r3
 800474a:	f3bf 8f6f 	isb	sy
 800474e:	f3bf 8f4f 	dsb	sy
 8004752:	61bb      	str	r3, [r7, #24]
}
 8004754:	bf00      	nop
 8004756:	e7fe      	b.n	8004756 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8004758:	68ba      	ldr	r2, [r7, #8]
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	429a      	cmp	r2, r3
 800475e:	d90a      	bls.n	8004776 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8004760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004764:	f383 8811 	msr	BASEPRI, r3
 8004768:	f3bf 8f6f 	isb	sy
 800476c:	f3bf 8f4f 	dsb	sy
 8004770:	617b      	str	r3, [r7, #20]
}
 8004772:	bf00      	nop
 8004774:	e7fe      	b.n	8004774 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8004776:	2302      	movs	r3, #2
 8004778:	9300      	str	r3, [sp, #0]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2200      	movs	r2, #0
 800477e:	2100      	movs	r1, #0
 8004780:	68f8      	ldr	r0, [r7, #12]
 8004782:	f7ff fe49 	bl	8004418 <xQueueGenericCreateStatic>
 8004786:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8004788:	69fb      	ldr	r3, [r7, #28]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d002      	beq.n	8004794 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800478e:	69fb      	ldr	r3, [r7, #28]
 8004790:	68ba      	ldr	r2, [r7, #8]
 8004792:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8004794:	69fb      	ldr	r3, [r7, #28]
	}
 8004796:	4618      	mov	r0, r3
 8004798:	3720      	adds	r7, #32
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}

0800479e <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800479e:	b580      	push	{r7, lr}
 80047a0:	b086      	sub	sp, #24
 80047a2:	af00      	add	r7, sp, #0
 80047a4:	6078      	str	r0, [r7, #4]
 80047a6:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d10a      	bne.n	80047c4 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 80047ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047b2:	f383 8811 	msr	BASEPRI, r3
 80047b6:	f3bf 8f6f 	isb	sy
 80047ba:	f3bf 8f4f 	dsb	sy
 80047be:	613b      	str	r3, [r7, #16]
}
 80047c0:	bf00      	nop
 80047c2:	e7fe      	b.n	80047c2 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80047c4:	683a      	ldr	r2, [r7, #0]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	429a      	cmp	r2, r3
 80047ca:	d90a      	bls.n	80047e2 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 80047cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047d0:	f383 8811 	msr	BASEPRI, r3
 80047d4:	f3bf 8f6f 	isb	sy
 80047d8:	f3bf 8f4f 	dsb	sy
 80047dc:	60fb      	str	r3, [r7, #12]
}
 80047de:	bf00      	nop
 80047e0:	e7fe      	b.n	80047e0 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80047e2:	2202      	movs	r2, #2
 80047e4:	2100      	movs	r1, #0
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	f7ff fe8e 	bl	8004508 <xQueueGenericCreate>
 80047ec:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d002      	beq.n	80047fa <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	683a      	ldr	r2, [r7, #0]
 80047f8:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80047fa:	697b      	ldr	r3, [r7, #20]
	}
 80047fc:	4618      	mov	r0, r3
 80047fe:	3718      	adds	r7, #24
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}

08004804 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b08e      	sub	sp, #56	; 0x38
 8004808:	af00      	add	r7, sp, #0
 800480a:	60f8      	str	r0, [r7, #12]
 800480c:	60b9      	str	r1, [r7, #8]
 800480e:	607a      	str	r2, [r7, #4]
 8004810:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004812:	2300      	movs	r3, #0
 8004814:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800481a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800481c:	2b00      	cmp	r3, #0
 800481e:	d10a      	bne.n	8004836 <xQueueGenericSend+0x32>
	__asm volatile
 8004820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004824:	f383 8811 	msr	BASEPRI, r3
 8004828:	f3bf 8f6f 	isb	sy
 800482c:	f3bf 8f4f 	dsb	sy
 8004830:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004832:	bf00      	nop
 8004834:	e7fe      	b.n	8004834 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d103      	bne.n	8004844 <xQueueGenericSend+0x40>
 800483c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800483e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004840:	2b00      	cmp	r3, #0
 8004842:	d101      	bne.n	8004848 <xQueueGenericSend+0x44>
 8004844:	2301      	movs	r3, #1
 8004846:	e000      	b.n	800484a <xQueueGenericSend+0x46>
 8004848:	2300      	movs	r3, #0
 800484a:	2b00      	cmp	r3, #0
 800484c:	d10a      	bne.n	8004864 <xQueueGenericSend+0x60>
	__asm volatile
 800484e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004852:	f383 8811 	msr	BASEPRI, r3
 8004856:	f3bf 8f6f 	isb	sy
 800485a:	f3bf 8f4f 	dsb	sy
 800485e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004860:	bf00      	nop
 8004862:	e7fe      	b.n	8004862 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	2b02      	cmp	r3, #2
 8004868:	d103      	bne.n	8004872 <xQueueGenericSend+0x6e>
 800486a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800486c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800486e:	2b01      	cmp	r3, #1
 8004870:	d101      	bne.n	8004876 <xQueueGenericSend+0x72>
 8004872:	2301      	movs	r3, #1
 8004874:	e000      	b.n	8004878 <xQueueGenericSend+0x74>
 8004876:	2300      	movs	r3, #0
 8004878:	2b00      	cmp	r3, #0
 800487a:	d10a      	bne.n	8004892 <xQueueGenericSend+0x8e>
	__asm volatile
 800487c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004880:	f383 8811 	msr	BASEPRI, r3
 8004884:	f3bf 8f6f 	isb	sy
 8004888:	f3bf 8f4f 	dsb	sy
 800488c:	623b      	str	r3, [r7, #32]
}
 800488e:	bf00      	nop
 8004890:	e7fe      	b.n	8004890 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004892:	f001 fb69 	bl	8005f68 <xTaskGetSchedulerState>
 8004896:	4603      	mov	r3, r0
 8004898:	2b00      	cmp	r3, #0
 800489a:	d102      	bne.n	80048a2 <xQueueGenericSend+0x9e>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d101      	bne.n	80048a6 <xQueueGenericSend+0xa2>
 80048a2:	2301      	movs	r3, #1
 80048a4:	e000      	b.n	80048a8 <xQueueGenericSend+0xa4>
 80048a6:	2300      	movs	r3, #0
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d10a      	bne.n	80048c2 <xQueueGenericSend+0xbe>
	__asm volatile
 80048ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048b0:	f383 8811 	msr	BASEPRI, r3
 80048b4:	f3bf 8f6f 	isb	sy
 80048b8:	f3bf 8f4f 	dsb	sy
 80048bc:	61fb      	str	r3, [r7, #28]
}
 80048be:	bf00      	nop
 80048c0:	e7fe      	b.n	80048c0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80048c2:	f002 f9a7 	bl	8006c14 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80048c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048ce:	429a      	cmp	r2, r3
 80048d0:	d302      	bcc.n	80048d8 <xQueueGenericSend+0xd4>
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	2b02      	cmp	r3, #2
 80048d6:	d129      	bne.n	800492c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80048d8:	683a      	ldr	r2, [r7, #0]
 80048da:	68b9      	ldr	r1, [r7, #8]
 80048dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80048de:	f000 fb52 	bl	8004f86 <prvCopyDataToQueue>
 80048e2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80048e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d010      	beq.n	800490e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80048ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ee:	3324      	adds	r3, #36	; 0x24
 80048f0:	4618      	mov	r0, r3
 80048f2:	f001 f967 	bl	8005bc4 <xTaskRemoveFromEventList>
 80048f6:	4603      	mov	r3, r0
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d013      	beq.n	8004924 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80048fc:	4b3f      	ldr	r3, [pc, #252]	; (80049fc <xQueueGenericSend+0x1f8>)
 80048fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004902:	601a      	str	r2, [r3, #0]
 8004904:	f3bf 8f4f 	dsb	sy
 8004908:	f3bf 8f6f 	isb	sy
 800490c:	e00a      	b.n	8004924 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800490e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004910:	2b00      	cmp	r3, #0
 8004912:	d007      	beq.n	8004924 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004914:	4b39      	ldr	r3, [pc, #228]	; (80049fc <xQueueGenericSend+0x1f8>)
 8004916:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800491a:	601a      	str	r2, [r3, #0]
 800491c:	f3bf 8f4f 	dsb	sy
 8004920:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004924:	f002 f9a6 	bl	8006c74 <vPortExitCritical>
				return pdPASS;
 8004928:	2301      	movs	r3, #1
 800492a:	e063      	b.n	80049f4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d103      	bne.n	800493a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004932:	f002 f99f 	bl	8006c74 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004936:	2300      	movs	r3, #0
 8004938:	e05c      	b.n	80049f4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800493a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800493c:	2b00      	cmp	r3, #0
 800493e:	d106      	bne.n	800494e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004940:	f107 0314 	add.w	r3, r7, #20
 8004944:	4618      	mov	r0, r3
 8004946:	f001 f9a1 	bl	8005c8c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800494a:	2301      	movs	r3, #1
 800494c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800494e:	f002 f991 	bl	8006c74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004952:	f000 ff0d 	bl	8005770 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004956:	f002 f95d 	bl	8006c14 <vPortEnterCritical>
 800495a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800495c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004960:	b25b      	sxtb	r3, r3
 8004962:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004966:	d103      	bne.n	8004970 <xQueueGenericSend+0x16c>
 8004968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800496a:	2200      	movs	r2, #0
 800496c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004972:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004976:	b25b      	sxtb	r3, r3
 8004978:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800497c:	d103      	bne.n	8004986 <xQueueGenericSend+0x182>
 800497e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004980:	2200      	movs	r2, #0
 8004982:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004986:	f002 f975 	bl	8006c74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800498a:	1d3a      	adds	r2, r7, #4
 800498c:	f107 0314 	add.w	r3, r7, #20
 8004990:	4611      	mov	r1, r2
 8004992:	4618      	mov	r0, r3
 8004994:	f001 f990 	bl	8005cb8 <xTaskCheckForTimeOut>
 8004998:	4603      	mov	r3, r0
 800499a:	2b00      	cmp	r3, #0
 800499c:	d124      	bne.n	80049e8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800499e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80049a0:	f000 fbe9 	bl	8005176 <prvIsQueueFull>
 80049a4:	4603      	mov	r3, r0
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d018      	beq.n	80049dc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80049aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ac:	3310      	adds	r3, #16
 80049ae:	687a      	ldr	r2, [r7, #4]
 80049b0:	4611      	mov	r1, r2
 80049b2:	4618      	mov	r0, r3
 80049b4:	f001 f8b6 	bl	8005b24 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80049b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80049ba:	f000 fb74 	bl	80050a6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80049be:	f000 fee5 	bl	800578c <xTaskResumeAll>
 80049c2:	4603      	mov	r3, r0
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	f47f af7c 	bne.w	80048c2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80049ca:	4b0c      	ldr	r3, [pc, #48]	; (80049fc <xQueueGenericSend+0x1f8>)
 80049cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049d0:	601a      	str	r2, [r3, #0]
 80049d2:	f3bf 8f4f 	dsb	sy
 80049d6:	f3bf 8f6f 	isb	sy
 80049da:	e772      	b.n	80048c2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80049dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80049de:	f000 fb62 	bl	80050a6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80049e2:	f000 fed3 	bl	800578c <xTaskResumeAll>
 80049e6:	e76c      	b.n	80048c2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80049e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80049ea:	f000 fb5c 	bl	80050a6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80049ee:	f000 fecd 	bl	800578c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80049f2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	3738      	adds	r7, #56	; 0x38
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}
 80049fc:	e000ed04 	.word	0xe000ed04

08004a00 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b090      	sub	sp, #64	; 0x40
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	60f8      	str	r0, [r7, #12]
 8004a08:	60b9      	str	r1, [r7, #8]
 8004a0a:	607a      	str	r2, [r7, #4]
 8004a0c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d10a      	bne.n	8004a2e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a1c:	f383 8811 	msr	BASEPRI, r3
 8004a20:	f3bf 8f6f 	isb	sy
 8004a24:	f3bf 8f4f 	dsb	sy
 8004a28:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004a2a:	bf00      	nop
 8004a2c:	e7fe      	b.n	8004a2c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d103      	bne.n	8004a3c <xQueueGenericSendFromISR+0x3c>
 8004a34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d101      	bne.n	8004a40 <xQueueGenericSendFromISR+0x40>
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	e000      	b.n	8004a42 <xQueueGenericSendFromISR+0x42>
 8004a40:	2300      	movs	r3, #0
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d10a      	bne.n	8004a5c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004a46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a4a:	f383 8811 	msr	BASEPRI, r3
 8004a4e:	f3bf 8f6f 	isb	sy
 8004a52:	f3bf 8f4f 	dsb	sy
 8004a56:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004a58:	bf00      	nop
 8004a5a:	e7fe      	b.n	8004a5a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	2b02      	cmp	r3, #2
 8004a60:	d103      	bne.n	8004a6a <xQueueGenericSendFromISR+0x6a>
 8004a62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a66:	2b01      	cmp	r3, #1
 8004a68:	d101      	bne.n	8004a6e <xQueueGenericSendFromISR+0x6e>
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e000      	b.n	8004a70 <xQueueGenericSendFromISR+0x70>
 8004a6e:	2300      	movs	r3, #0
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d10a      	bne.n	8004a8a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a78:	f383 8811 	msr	BASEPRI, r3
 8004a7c:	f3bf 8f6f 	isb	sy
 8004a80:	f3bf 8f4f 	dsb	sy
 8004a84:	623b      	str	r3, [r7, #32]
}
 8004a86:	bf00      	nop
 8004a88:	e7fe      	b.n	8004a88 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004a8a:	f002 f9a5 	bl	8006dd8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004a8e:	f3ef 8211 	mrs	r2, BASEPRI
 8004a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a96:	f383 8811 	msr	BASEPRI, r3
 8004a9a:	f3bf 8f6f 	isb	sy
 8004a9e:	f3bf 8f4f 	dsb	sy
 8004aa2:	61fa      	str	r2, [r7, #28]
 8004aa4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004aa6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004aa8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ab0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	d302      	bcc.n	8004abc <xQueueGenericSendFromISR+0xbc>
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	2b02      	cmp	r3, #2
 8004aba:	d12f      	bne.n	8004b1c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004abe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ac2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004ac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aca:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004acc:	683a      	ldr	r2, [r7, #0]
 8004ace:	68b9      	ldr	r1, [r7, #8]
 8004ad0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004ad2:	f000 fa58 	bl	8004f86 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004ad6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004ada:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ade:	d112      	bne.n	8004b06 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004ae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d016      	beq.n	8004b16 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aea:	3324      	adds	r3, #36	; 0x24
 8004aec:	4618      	mov	r0, r3
 8004aee:	f001 f869 	bl	8005bc4 <xTaskRemoveFromEventList>
 8004af2:	4603      	mov	r3, r0
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d00e      	beq.n	8004b16 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d00b      	beq.n	8004b16 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2201      	movs	r2, #1
 8004b02:	601a      	str	r2, [r3, #0]
 8004b04:	e007      	b.n	8004b16 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004b06:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004b0a:	3301      	adds	r3, #1
 8004b0c:	b2db      	uxtb	r3, r3
 8004b0e:	b25a      	sxtb	r2, r3
 8004b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004b16:	2301      	movs	r3, #1
 8004b18:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004b1a:	e001      	b.n	8004b20 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b22:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004b2a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004b2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	3740      	adds	r7, #64	; 0x40
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}
	...

08004b38 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b08c      	sub	sp, #48	; 0x30
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	60f8      	str	r0, [r7, #12]
 8004b40:	60b9      	str	r1, [r7, #8]
 8004b42:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004b44:	2300      	movs	r3, #0
 8004b46:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d10a      	bne.n	8004b68 <xQueueReceive+0x30>
	__asm volatile
 8004b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b56:	f383 8811 	msr	BASEPRI, r3
 8004b5a:	f3bf 8f6f 	isb	sy
 8004b5e:	f3bf 8f4f 	dsb	sy
 8004b62:	623b      	str	r3, [r7, #32]
}
 8004b64:	bf00      	nop
 8004b66:	e7fe      	b.n	8004b66 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d103      	bne.n	8004b76 <xQueueReceive+0x3e>
 8004b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d101      	bne.n	8004b7a <xQueueReceive+0x42>
 8004b76:	2301      	movs	r3, #1
 8004b78:	e000      	b.n	8004b7c <xQueueReceive+0x44>
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d10a      	bne.n	8004b96 <xQueueReceive+0x5e>
	__asm volatile
 8004b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b84:	f383 8811 	msr	BASEPRI, r3
 8004b88:	f3bf 8f6f 	isb	sy
 8004b8c:	f3bf 8f4f 	dsb	sy
 8004b90:	61fb      	str	r3, [r7, #28]
}
 8004b92:	bf00      	nop
 8004b94:	e7fe      	b.n	8004b94 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004b96:	f001 f9e7 	bl	8005f68 <xTaskGetSchedulerState>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d102      	bne.n	8004ba6 <xQueueReceive+0x6e>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d101      	bne.n	8004baa <xQueueReceive+0x72>
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	e000      	b.n	8004bac <xQueueReceive+0x74>
 8004baa:	2300      	movs	r3, #0
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d10a      	bne.n	8004bc6 <xQueueReceive+0x8e>
	__asm volatile
 8004bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bb4:	f383 8811 	msr	BASEPRI, r3
 8004bb8:	f3bf 8f6f 	isb	sy
 8004bbc:	f3bf 8f4f 	dsb	sy
 8004bc0:	61bb      	str	r3, [r7, #24]
}
 8004bc2:	bf00      	nop
 8004bc4:	e7fe      	b.n	8004bc4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004bc6:	f002 f825 	bl	8006c14 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bce:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d01f      	beq.n	8004c16 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004bd6:	68b9      	ldr	r1, [r7, #8]
 8004bd8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004bda:	f000 fa3e 	bl	800505a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be0:	1e5a      	subs	r2, r3, #1
 8004be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004be4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004be8:	691b      	ldr	r3, [r3, #16]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d00f      	beq.n	8004c0e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bf0:	3310      	adds	r3, #16
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f000 ffe6 	bl	8005bc4 <xTaskRemoveFromEventList>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d007      	beq.n	8004c0e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004bfe:	4b3d      	ldr	r3, [pc, #244]	; (8004cf4 <xQueueReceive+0x1bc>)
 8004c00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c04:	601a      	str	r2, [r3, #0]
 8004c06:	f3bf 8f4f 	dsb	sy
 8004c0a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004c0e:	f002 f831 	bl	8006c74 <vPortExitCritical>
				return pdPASS;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e069      	b.n	8004cea <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d103      	bne.n	8004c24 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004c1c:	f002 f82a 	bl	8006c74 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004c20:	2300      	movs	r3, #0
 8004c22:	e062      	b.n	8004cea <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d106      	bne.n	8004c38 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004c2a:	f107 0310 	add.w	r3, r7, #16
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f001 f82c 	bl	8005c8c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004c34:	2301      	movs	r3, #1
 8004c36:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004c38:	f002 f81c 	bl	8006c74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004c3c:	f000 fd98 	bl	8005770 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004c40:	f001 ffe8 	bl	8006c14 <vPortEnterCritical>
 8004c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c46:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004c4a:	b25b      	sxtb	r3, r3
 8004c4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c50:	d103      	bne.n	8004c5a <xQueueReceive+0x122>
 8004c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c54:	2200      	movs	r2, #0
 8004c56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c5c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c60:	b25b      	sxtb	r3, r3
 8004c62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c66:	d103      	bne.n	8004c70 <xQueueReceive+0x138>
 8004c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c70:	f002 f800 	bl	8006c74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004c74:	1d3a      	adds	r2, r7, #4
 8004c76:	f107 0310 	add.w	r3, r7, #16
 8004c7a:	4611      	mov	r1, r2
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	f001 f81b 	bl	8005cb8 <xTaskCheckForTimeOut>
 8004c82:	4603      	mov	r3, r0
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d123      	bne.n	8004cd0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004c88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c8a:	f000 fa5e 	bl	800514a <prvIsQueueEmpty>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d017      	beq.n	8004cc4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c96:	3324      	adds	r3, #36	; 0x24
 8004c98:	687a      	ldr	r2, [r7, #4]
 8004c9a:	4611      	mov	r1, r2
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	f000 ff41 	bl	8005b24 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004ca2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ca4:	f000 f9ff 	bl	80050a6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004ca8:	f000 fd70 	bl	800578c <xTaskResumeAll>
 8004cac:	4603      	mov	r3, r0
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d189      	bne.n	8004bc6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004cb2:	4b10      	ldr	r3, [pc, #64]	; (8004cf4 <xQueueReceive+0x1bc>)
 8004cb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cb8:	601a      	str	r2, [r3, #0]
 8004cba:	f3bf 8f4f 	dsb	sy
 8004cbe:	f3bf 8f6f 	isb	sy
 8004cc2:	e780      	b.n	8004bc6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004cc4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004cc6:	f000 f9ee 	bl	80050a6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004cca:	f000 fd5f 	bl	800578c <xTaskResumeAll>
 8004cce:	e77a      	b.n	8004bc6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004cd0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004cd2:	f000 f9e8 	bl	80050a6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004cd6:	f000 fd59 	bl	800578c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004cda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004cdc:	f000 fa35 	bl	800514a <prvIsQueueEmpty>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	f43f af6f 	beq.w	8004bc6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004ce8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3730      	adds	r7, #48	; 0x30
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}
 8004cf2:	bf00      	nop
 8004cf4:	e000ed04 	.word	0xe000ed04

08004cf8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b08e      	sub	sp, #56	; 0x38
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
 8004d00:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004d02:	2300      	movs	r3, #0
 8004d04:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d10a      	bne.n	8004d2a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8004d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d18:	f383 8811 	msr	BASEPRI, r3
 8004d1c:	f3bf 8f6f 	isb	sy
 8004d20:	f3bf 8f4f 	dsb	sy
 8004d24:	623b      	str	r3, [r7, #32]
}
 8004d26:	bf00      	nop
 8004d28:	e7fe      	b.n	8004d28 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d00a      	beq.n	8004d48 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8004d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d36:	f383 8811 	msr	BASEPRI, r3
 8004d3a:	f3bf 8f6f 	isb	sy
 8004d3e:	f3bf 8f4f 	dsb	sy
 8004d42:	61fb      	str	r3, [r7, #28]
}
 8004d44:	bf00      	nop
 8004d46:	e7fe      	b.n	8004d46 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004d48:	f001 f90e 	bl	8005f68 <xTaskGetSchedulerState>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d102      	bne.n	8004d58 <xQueueSemaphoreTake+0x60>
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d101      	bne.n	8004d5c <xQueueSemaphoreTake+0x64>
 8004d58:	2301      	movs	r3, #1
 8004d5a:	e000      	b.n	8004d5e <xQueueSemaphoreTake+0x66>
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d10a      	bne.n	8004d78 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8004d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d66:	f383 8811 	msr	BASEPRI, r3
 8004d6a:	f3bf 8f6f 	isb	sy
 8004d6e:	f3bf 8f4f 	dsb	sy
 8004d72:	61bb      	str	r3, [r7, #24]
}
 8004d74:	bf00      	nop
 8004d76:	e7fe      	b.n	8004d76 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004d78:	f001 ff4c 	bl	8006c14 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d80:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d024      	beq.n	8004dd2 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d8a:	1e5a      	subs	r2, r3, #1
 8004d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d8e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d104      	bne.n	8004da2 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004d98:	f001 fa5c 	bl	8006254 <pvTaskIncrementMutexHeldCount>
 8004d9c:	4602      	mov	r2, r0
 8004d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004da0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004da4:	691b      	ldr	r3, [r3, #16]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d00f      	beq.n	8004dca <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dac:	3310      	adds	r3, #16
 8004dae:	4618      	mov	r0, r3
 8004db0:	f000 ff08 	bl	8005bc4 <xTaskRemoveFromEventList>
 8004db4:	4603      	mov	r3, r0
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d007      	beq.n	8004dca <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004dba:	4b54      	ldr	r3, [pc, #336]	; (8004f0c <xQueueSemaphoreTake+0x214>)
 8004dbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004dc0:	601a      	str	r2, [r3, #0]
 8004dc2:	f3bf 8f4f 	dsb	sy
 8004dc6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004dca:	f001 ff53 	bl	8006c74 <vPortExitCritical>
				return pdPASS;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	e097      	b.n	8004f02 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d111      	bne.n	8004dfc <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d00a      	beq.n	8004df4 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8004dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004de2:	f383 8811 	msr	BASEPRI, r3
 8004de6:	f3bf 8f6f 	isb	sy
 8004dea:	f3bf 8f4f 	dsb	sy
 8004dee:	617b      	str	r3, [r7, #20]
}
 8004df0:	bf00      	nop
 8004df2:	e7fe      	b.n	8004df2 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004df4:	f001 ff3e 	bl	8006c74 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004df8:	2300      	movs	r3, #0
 8004dfa:	e082      	b.n	8004f02 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004dfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d106      	bne.n	8004e10 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004e02:	f107 030c 	add.w	r3, r7, #12
 8004e06:	4618      	mov	r0, r3
 8004e08:	f000 ff40 	bl	8005c8c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004e10:	f001 ff30 	bl	8006c74 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004e14:	f000 fcac 	bl	8005770 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004e18:	f001 fefc 	bl	8006c14 <vPortEnterCritical>
 8004e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e1e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004e22:	b25b      	sxtb	r3, r3
 8004e24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e28:	d103      	bne.n	8004e32 <xQueueSemaphoreTake+0x13a>
 8004e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e34:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e38:	b25b      	sxtb	r3, r3
 8004e3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e3e:	d103      	bne.n	8004e48 <xQueueSemaphoreTake+0x150>
 8004e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e42:	2200      	movs	r2, #0
 8004e44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e48:	f001 ff14 	bl	8006c74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004e4c:	463a      	mov	r2, r7
 8004e4e:	f107 030c 	add.w	r3, r7, #12
 8004e52:	4611      	mov	r1, r2
 8004e54:	4618      	mov	r0, r3
 8004e56:	f000 ff2f 	bl	8005cb8 <xTaskCheckForTimeOut>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d132      	bne.n	8004ec6 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004e60:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004e62:	f000 f972 	bl	800514a <prvIsQueueEmpty>
 8004e66:	4603      	mov	r3, r0
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d026      	beq.n	8004eba <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d109      	bne.n	8004e88 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8004e74:	f001 fece 	bl	8006c14 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e7a:	689b      	ldr	r3, [r3, #8]
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	f001 f891 	bl	8005fa4 <xTaskPriorityInherit>
 8004e82:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8004e84:	f001 fef6 	bl	8006c74 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e8a:	3324      	adds	r3, #36	; 0x24
 8004e8c:	683a      	ldr	r2, [r7, #0]
 8004e8e:	4611      	mov	r1, r2
 8004e90:	4618      	mov	r0, r3
 8004e92:	f000 fe47 	bl	8005b24 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004e96:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004e98:	f000 f905 	bl	80050a6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004e9c:	f000 fc76 	bl	800578c <xTaskResumeAll>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	f47f af68 	bne.w	8004d78 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8004ea8:	4b18      	ldr	r3, [pc, #96]	; (8004f0c <xQueueSemaphoreTake+0x214>)
 8004eaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004eae:	601a      	str	r2, [r3, #0]
 8004eb0:	f3bf 8f4f 	dsb	sy
 8004eb4:	f3bf 8f6f 	isb	sy
 8004eb8:	e75e      	b.n	8004d78 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004eba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004ebc:	f000 f8f3 	bl	80050a6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004ec0:	f000 fc64 	bl	800578c <xTaskResumeAll>
 8004ec4:	e758      	b.n	8004d78 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004ec6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004ec8:	f000 f8ed 	bl	80050a6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004ecc:	f000 fc5e 	bl	800578c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004ed0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004ed2:	f000 f93a 	bl	800514a <prvIsQueueEmpty>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	f43f af4d 	beq.w	8004d78 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d00d      	beq.n	8004f00 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8004ee4:	f001 fe96 	bl	8006c14 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004ee8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004eea:	f000 f834 	bl	8004f56 <prvGetDisinheritPriorityAfterTimeout>
 8004eee:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	f001 f92a 	bl	8006150 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004efc:	f001 feba 	bl	8006c74 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004f00:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	3738      	adds	r7, #56	; 0x38
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}
 8004f0a:	bf00      	nop
 8004f0c:	e000ed04 	.word	0xe000ed04

08004f10 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b084      	sub	sp, #16
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d10a      	bne.n	8004f38 <vQueueDelete+0x28>
	__asm volatile
 8004f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f26:	f383 8811 	msr	BASEPRI, r3
 8004f2a:	f3bf 8f6f 	isb	sy
 8004f2e:	f3bf 8f4f 	dsb	sy
 8004f32:	60bb      	str	r3, [r7, #8]
}
 8004f34:	bf00      	nop
 8004f36:	e7fe      	b.n	8004f36 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8004f38:	68f8      	ldr	r0, [r7, #12]
 8004f3a:	f000 f95f 	bl	80051fc <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d102      	bne.n	8004f4e <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8004f48:	68f8      	ldr	r0, [r7, #12]
 8004f4a:	f002 f851 	bl	8006ff0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8004f4e:	bf00      	nop
 8004f50:	3710      	adds	r7, #16
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}

08004f56 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004f56:	b480      	push	{r7}
 8004f58:	b085      	sub	sp, #20
 8004f5a:	af00      	add	r7, sp, #0
 8004f5c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d006      	beq.n	8004f74 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8004f70:	60fb      	str	r3, [r7, #12]
 8004f72:	e001      	b.n	8004f78 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004f74:	2300      	movs	r3, #0
 8004f76:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004f78:	68fb      	ldr	r3, [r7, #12]
	}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	3714      	adds	r7, #20
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f84:	4770      	bx	lr

08004f86 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004f86:	b580      	push	{r7, lr}
 8004f88:	b086      	sub	sp, #24
 8004f8a:	af00      	add	r7, sp, #0
 8004f8c:	60f8      	str	r0, [r7, #12]
 8004f8e:	60b9      	str	r1, [r7, #8]
 8004f90:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004f92:	2300      	movs	r3, #0
 8004f94:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f9a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d10d      	bne.n	8004fc0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d14d      	bne.n	8005048 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	689b      	ldr	r3, [r3, #8]
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	f001 f85f 	bl	8006074 <xTaskPriorityDisinherit>
 8004fb6:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	609a      	str	r2, [r3, #8]
 8004fbe:	e043      	b.n	8005048 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d119      	bne.n	8004ffa <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	6858      	ldr	r0, [r3, #4]
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fce:	461a      	mov	r2, r3
 8004fd0:	68b9      	ldr	r1, [r7, #8]
 8004fd2:	f002 fa4e 	bl	8007472 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	685a      	ldr	r2, [r3, #4]
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fde:	441a      	add	r2, r3
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	685a      	ldr	r2, [r3, #4]
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	689b      	ldr	r3, [r3, #8]
 8004fec:	429a      	cmp	r2, r3
 8004fee:	d32b      	bcc.n	8005048 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681a      	ldr	r2, [r3, #0]
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	605a      	str	r2, [r3, #4]
 8004ff8:	e026      	b.n	8005048 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	68d8      	ldr	r0, [r3, #12]
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005002:	461a      	mov	r2, r3
 8005004:	68b9      	ldr	r1, [r7, #8]
 8005006:	f002 fa34 	bl	8007472 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	68da      	ldr	r2, [r3, #12]
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005012:	425b      	negs	r3, r3
 8005014:	441a      	add	r2, r3
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	68da      	ldr	r2, [r3, #12]
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	429a      	cmp	r2, r3
 8005024:	d207      	bcs.n	8005036 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	689a      	ldr	r2, [r3, #8]
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800502e:	425b      	negs	r3, r3
 8005030:	441a      	add	r2, r3
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2b02      	cmp	r3, #2
 800503a:	d105      	bne.n	8005048 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d002      	beq.n	8005048 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	3b01      	subs	r3, #1
 8005046:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	1c5a      	adds	r2, r3, #1
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005050:	697b      	ldr	r3, [r7, #20]
}
 8005052:	4618      	mov	r0, r3
 8005054:	3718      	adds	r7, #24
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}

0800505a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800505a:	b580      	push	{r7, lr}
 800505c:	b082      	sub	sp, #8
 800505e:	af00      	add	r7, sp, #0
 8005060:	6078      	str	r0, [r7, #4]
 8005062:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005068:	2b00      	cmp	r3, #0
 800506a:	d018      	beq.n	800509e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	68da      	ldr	r2, [r3, #12]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005074:	441a      	add	r2, r3
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	68da      	ldr	r2, [r3, #12]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	429a      	cmp	r2, r3
 8005084:	d303      	bcc.n	800508e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681a      	ldr	r2, [r3, #0]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	68d9      	ldr	r1, [r3, #12]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005096:	461a      	mov	r2, r3
 8005098:	6838      	ldr	r0, [r7, #0]
 800509a:	f002 f9ea 	bl	8007472 <memcpy>
	}
}
 800509e:	bf00      	nop
 80050a0:	3708      	adds	r7, #8
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}

080050a6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80050a6:	b580      	push	{r7, lr}
 80050a8:	b084      	sub	sp, #16
 80050aa:	af00      	add	r7, sp, #0
 80050ac:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80050ae:	f001 fdb1 	bl	8006c14 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80050b8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80050ba:	e011      	b.n	80050e0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d012      	beq.n	80050ea <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	3324      	adds	r3, #36	; 0x24
 80050c8:	4618      	mov	r0, r3
 80050ca:	f000 fd7b 	bl	8005bc4 <xTaskRemoveFromEventList>
 80050ce:	4603      	mov	r3, r0
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d001      	beq.n	80050d8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80050d4:	f000 fe52 	bl	8005d7c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80050d8:	7bfb      	ldrb	r3, [r7, #15]
 80050da:	3b01      	subs	r3, #1
 80050dc:	b2db      	uxtb	r3, r3
 80050de:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80050e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	dce9      	bgt.n	80050bc <prvUnlockQueue+0x16>
 80050e8:	e000      	b.n	80050ec <prvUnlockQueue+0x46>
					break;
 80050ea:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	22ff      	movs	r2, #255	; 0xff
 80050f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80050f4:	f001 fdbe 	bl	8006c74 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80050f8:	f001 fd8c 	bl	8006c14 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005102:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005104:	e011      	b.n	800512a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	691b      	ldr	r3, [r3, #16]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d012      	beq.n	8005134 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	3310      	adds	r3, #16
 8005112:	4618      	mov	r0, r3
 8005114:	f000 fd56 	bl	8005bc4 <xTaskRemoveFromEventList>
 8005118:	4603      	mov	r3, r0
 800511a:	2b00      	cmp	r3, #0
 800511c:	d001      	beq.n	8005122 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800511e:	f000 fe2d 	bl	8005d7c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005122:	7bbb      	ldrb	r3, [r7, #14]
 8005124:	3b01      	subs	r3, #1
 8005126:	b2db      	uxtb	r3, r3
 8005128:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800512a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800512e:	2b00      	cmp	r3, #0
 8005130:	dce9      	bgt.n	8005106 <prvUnlockQueue+0x60>
 8005132:	e000      	b.n	8005136 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005134:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	22ff      	movs	r2, #255	; 0xff
 800513a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800513e:	f001 fd99 	bl	8006c74 <vPortExitCritical>
}
 8005142:	bf00      	nop
 8005144:	3710      	adds	r7, #16
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}

0800514a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800514a:	b580      	push	{r7, lr}
 800514c:	b084      	sub	sp, #16
 800514e:	af00      	add	r7, sp, #0
 8005150:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005152:	f001 fd5f 	bl	8006c14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800515a:	2b00      	cmp	r3, #0
 800515c:	d102      	bne.n	8005164 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800515e:	2301      	movs	r3, #1
 8005160:	60fb      	str	r3, [r7, #12]
 8005162:	e001      	b.n	8005168 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005164:	2300      	movs	r3, #0
 8005166:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005168:	f001 fd84 	bl	8006c74 <vPortExitCritical>

	return xReturn;
 800516c:	68fb      	ldr	r3, [r7, #12]
}
 800516e:	4618      	mov	r0, r3
 8005170:	3710      	adds	r7, #16
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}

08005176 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005176:	b580      	push	{r7, lr}
 8005178:	b084      	sub	sp, #16
 800517a:	af00      	add	r7, sp, #0
 800517c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800517e:	f001 fd49 	bl	8006c14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800518a:	429a      	cmp	r2, r3
 800518c:	d102      	bne.n	8005194 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800518e:	2301      	movs	r3, #1
 8005190:	60fb      	str	r3, [r7, #12]
 8005192:	e001      	b.n	8005198 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005194:	2300      	movs	r3, #0
 8005196:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005198:	f001 fd6c 	bl	8006c74 <vPortExitCritical>

	return xReturn;
 800519c:	68fb      	ldr	r3, [r7, #12]
}
 800519e:	4618      	mov	r0, r3
 80051a0:	3710      	adds	r7, #16
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}
	...

080051a8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80051a8:	b480      	push	{r7}
 80051aa:	b085      	sub	sp, #20
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
 80051b0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80051b2:	2300      	movs	r3, #0
 80051b4:	60fb      	str	r3, [r7, #12]
 80051b6:	e014      	b.n	80051e2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80051b8:	4a0f      	ldr	r2, [pc, #60]	; (80051f8 <vQueueAddToRegistry+0x50>)
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d10b      	bne.n	80051dc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80051c4:	490c      	ldr	r1, [pc, #48]	; (80051f8 <vQueueAddToRegistry+0x50>)
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	683a      	ldr	r2, [r7, #0]
 80051ca:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80051ce:	4a0a      	ldr	r2, [pc, #40]	; (80051f8 <vQueueAddToRegistry+0x50>)
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	00db      	lsls	r3, r3, #3
 80051d4:	4413      	add	r3, r2
 80051d6:	687a      	ldr	r2, [r7, #4]
 80051d8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80051da:	e006      	b.n	80051ea <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	3301      	adds	r3, #1
 80051e0:	60fb      	str	r3, [r7, #12]
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	2b07      	cmp	r3, #7
 80051e6:	d9e7      	bls.n	80051b8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80051e8:	bf00      	nop
 80051ea:	bf00      	nop
 80051ec:	3714      	adds	r7, #20
 80051ee:	46bd      	mov	sp, r7
 80051f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f4:	4770      	bx	lr
 80051f6:	bf00      	nop
 80051f8:	20000a48 	.word	0x20000a48

080051fc <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80051fc:	b480      	push	{r7}
 80051fe:	b085      	sub	sp, #20
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005204:	2300      	movs	r3, #0
 8005206:	60fb      	str	r3, [r7, #12]
 8005208:	e016      	b.n	8005238 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800520a:	4a10      	ldr	r2, [pc, #64]	; (800524c <vQueueUnregisterQueue+0x50>)
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	00db      	lsls	r3, r3, #3
 8005210:	4413      	add	r3, r2
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	687a      	ldr	r2, [r7, #4]
 8005216:	429a      	cmp	r2, r3
 8005218:	d10b      	bne.n	8005232 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800521a:	4a0c      	ldr	r2, [pc, #48]	; (800524c <vQueueUnregisterQueue+0x50>)
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	2100      	movs	r1, #0
 8005220:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8005224:	4a09      	ldr	r2, [pc, #36]	; (800524c <vQueueUnregisterQueue+0x50>)
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	00db      	lsls	r3, r3, #3
 800522a:	4413      	add	r3, r2
 800522c:	2200      	movs	r2, #0
 800522e:	605a      	str	r2, [r3, #4]
				break;
 8005230:	e006      	b.n	8005240 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	3301      	adds	r3, #1
 8005236:	60fb      	str	r3, [r7, #12]
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2b07      	cmp	r3, #7
 800523c:	d9e5      	bls.n	800520a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800523e:	bf00      	nop
 8005240:	bf00      	nop
 8005242:	3714      	adds	r7, #20
 8005244:	46bd      	mov	sp, r7
 8005246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524a:	4770      	bx	lr
 800524c:	20000a48 	.word	0x20000a48

08005250 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005250:	b580      	push	{r7, lr}
 8005252:	b086      	sub	sp, #24
 8005254:	af00      	add	r7, sp, #0
 8005256:	60f8      	str	r0, [r7, #12]
 8005258:	60b9      	str	r1, [r7, #8]
 800525a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005260:	f001 fcd8 	bl	8006c14 <vPortEnterCritical>
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800526a:	b25b      	sxtb	r3, r3
 800526c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005270:	d103      	bne.n	800527a <vQueueWaitForMessageRestricted+0x2a>
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	2200      	movs	r2, #0
 8005276:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005280:	b25b      	sxtb	r3, r3
 8005282:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005286:	d103      	bne.n	8005290 <vQueueWaitForMessageRestricted+0x40>
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	2200      	movs	r2, #0
 800528c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005290:	f001 fcf0 	bl	8006c74 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005298:	2b00      	cmp	r3, #0
 800529a:	d106      	bne.n	80052aa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	3324      	adds	r3, #36	; 0x24
 80052a0:	687a      	ldr	r2, [r7, #4]
 80052a2:	68b9      	ldr	r1, [r7, #8]
 80052a4:	4618      	mov	r0, r3
 80052a6:	f000 fc61 	bl	8005b6c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80052aa:	6978      	ldr	r0, [r7, #20]
 80052ac:	f7ff fefb 	bl	80050a6 <prvUnlockQueue>
	}
 80052b0:	bf00      	nop
 80052b2:	3718      	adds	r7, #24
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bd80      	pop	{r7, pc}

080052b8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b08e      	sub	sp, #56	; 0x38
 80052bc:	af04      	add	r7, sp, #16
 80052be:	60f8      	str	r0, [r7, #12]
 80052c0:	60b9      	str	r1, [r7, #8]
 80052c2:	607a      	str	r2, [r7, #4]
 80052c4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80052c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d10a      	bne.n	80052e2 <xTaskCreateStatic+0x2a>
	__asm volatile
 80052cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052d0:	f383 8811 	msr	BASEPRI, r3
 80052d4:	f3bf 8f6f 	isb	sy
 80052d8:	f3bf 8f4f 	dsb	sy
 80052dc:	623b      	str	r3, [r7, #32]
}
 80052de:	bf00      	nop
 80052e0:	e7fe      	b.n	80052e0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80052e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d10a      	bne.n	80052fe <xTaskCreateStatic+0x46>
	__asm volatile
 80052e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ec:	f383 8811 	msr	BASEPRI, r3
 80052f0:	f3bf 8f6f 	isb	sy
 80052f4:	f3bf 8f4f 	dsb	sy
 80052f8:	61fb      	str	r3, [r7, #28]
}
 80052fa:	bf00      	nop
 80052fc:	e7fe      	b.n	80052fc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80052fe:	23bc      	movs	r3, #188	; 0xbc
 8005300:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005302:	693b      	ldr	r3, [r7, #16]
 8005304:	2bbc      	cmp	r3, #188	; 0xbc
 8005306:	d00a      	beq.n	800531e <xTaskCreateStatic+0x66>
	__asm volatile
 8005308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800530c:	f383 8811 	msr	BASEPRI, r3
 8005310:	f3bf 8f6f 	isb	sy
 8005314:	f3bf 8f4f 	dsb	sy
 8005318:	61bb      	str	r3, [r7, #24]
}
 800531a:	bf00      	nop
 800531c:	e7fe      	b.n	800531c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800531e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005322:	2b00      	cmp	r3, #0
 8005324:	d01e      	beq.n	8005364 <xTaskCreateStatic+0xac>
 8005326:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005328:	2b00      	cmp	r3, #0
 800532a:	d01b      	beq.n	8005364 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800532c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800532e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005332:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005334:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005338:	2202      	movs	r2, #2
 800533a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800533e:	2300      	movs	r3, #0
 8005340:	9303      	str	r3, [sp, #12]
 8005342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005344:	9302      	str	r3, [sp, #8]
 8005346:	f107 0314 	add.w	r3, r7, #20
 800534a:	9301      	str	r3, [sp, #4]
 800534c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800534e:	9300      	str	r3, [sp, #0]
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	687a      	ldr	r2, [r7, #4]
 8005354:	68b9      	ldr	r1, [r7, #8]
 8005356:	68f8      	ldr	r0, [r7, #12]
 8005358:	f000 f850 	bl	80053fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800535c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800535e:	f000 f8f3 	bl	8005548 <prvAddNewTaskToReadyList>
 8005362:	e001      	b.n	8005368 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005364:	2300      	movs	r3, #0
 8005366:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005368:	697b      	ldr	r3, [r7, #20]
	}
 800536a:	4618      	mov	r0, r3
 800536c:	3728      	adds	r7, #40	; 0x28
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}

08005372 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005372:	b580      	push	{r7, lr}
 8005374:	b08c      	sub	sp, #48	; 0x30
 8005376:	af04      	add	r7, sp, #16
 8005378:	60f8      	str	r0, [r7, #12]
 800537a:	60b9      	str	r1, [r7, #8]
 800537c:	603b      	str	r3, [r7, #0]
 800537e:	4613      	mov	r3, r2
 8005380:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005382:	88fb      	ldrh	r3, [r7, #6]
 8005384:	009b      	lsls	r3, r3, #2
 8005386:	4618      	mov	r0, r3
 8005388:	f001 fd66 	bl	8006e58 <pvPortMalloc>
 800538c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d00e      	beq.n	80053b2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005394:	20bc      	movs	r0, #188	; 0xbc
 8005396:	f001 fd5f 	bl	8006e58 <pvPortMalloc>
 800539a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800539c:	69fb      	ldr	r3, [r7, #28]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d003      	beq.n	80053aa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80053a2:	69fb      	ldr	r3, [r7, #28]
 80053a4:	697a      	ldr	r2, [r7, #20]
 80053a6:	631a      	str	r2, [r3, #48]	; 0x30
 80053a8:	e005      	b.n	80053b6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80053aa:	6978      	ldr	r0, [r7, #20]
 80053ac:	f001 fe20 	bl	8006ff0 <vPortFree>
 80053b0:	e001      	b.n	80053b6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80053b2:	2300      	movs	r3, #0
 80053b4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80053b6:	69fb      	ldr	r3, [r7, #28]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d017      	beq.n	80053ec <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80053bc:	69fb      	ldr	r3, [r7, #28]
 80053be:	2200      	movs	r2, #0
 80053c0:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80053c4:	88fa      	ldrh	r2, [r7, #6]
 80053c6:	2300      	movs	r3, #0
 80053c8:	9303      	str	r3, [sp, #12]
 80053ca:	69fb      	ldr	r3, [r7, #28]
 80053cc:	9302      	str	r3, [sp, #8]
 80053ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053d0:	9301      	str	r3, [sp, #4]
 80053d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053d4:	9300      	str	r3, [sp, #0]
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	68b9      	ldr	r1, [r7, #8]
 80053da:	68f8      	ldr	r0, [r7, #12]
 80053dc:	f000 f80e 	bl	80053fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80053e0:	69f8      	ldr	r0, [r7, #28]
 80053e2:	f000 f8b1 	bl	8005548 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80053e6:	2301      	movs	r3, #1
 80053e8:	61bb      	str	r3, [r7, #24]
 80053ea:	e002      	b.n	80053f2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80053ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80053f0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80053f2:	69bb      	ldr	r3, [r7, #24]
	}
 80053f4:	4618      	mov	r0, r3
 80053f6:	3720      	adds	r7, #32
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd80      	pop	{r7, pc}

080053fc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b088      	sub	sp, #32
 8005400:	af00      	add	r7, sp, #0
 8005402:	60f8      	str	r0, [r7, #12]
 8005404:	60b9      	str	r1, [r7, #8]
 8005406:	607a      	str	r2, [r7, #4]
 8005408:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800540a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800540c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	009b      	lsls	r3, r3, #2
 8005412:	461a      	mov	r2, r3
 8005414:	21a5      	movs	r1, #165	; 0xa5
 8005416:	f002 f83a 	bl	800748e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800541a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800541c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005424:	3b01      	subs	r3, #1
 8005426:	009b      	lsls	r3, r3, #2
 8005428:	4413      	add	r3, r2
 800542a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800542c:	69bb      	ldr	r3, [r7, #24]
 800542e:	f023 0307 	bic.w	r3, r3, #7
 8005432:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005434:	69bb      	ldr	r3, [r7, #24]
 8005436:	f003 0307 	and.w	r3, r3, #7
 800543a:	2b00      	cmp	r3, #0
 800543c:	d00a      	beq.n	8005454 <prvInitialiseNewTask+0x58>
	__asm volatile
 800543e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005442:	f383 8811 	msr	BASEPRI, r3
 8005446:	f3bf 8f6f 	isb	sy
 800544a:	f3bf 8f4f 	dsb	sy
 800544e:	617b      	str	r3, [r7, #20]
}
 8005450:	bf00      	nop
 8005452:	e7fe      	b.n	8005452 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d01f      	beq.n	800549a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800545a:	2300      	movs	r3, #0
 800545c:	61fb      	str	r3, [r7, #28]
 800545e:	e012      	b.n	8005486 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005460:	68ba      	ldr	r2, [r7, #8]
 8005462:	69fb      	ldr	r3, [r7, #28]
 8005464:	4413      	add	r3, r2
 8005466:	7819      	ldrb	r1, [r3, #0]
 8005468:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800546a:	69fb      	ldr	r3, [r7, #28]
 800546c:	4413      	add	r3, r2
 800546e:	3334      	adds	r3, #52	; 0x34
 8005470:	460a      	mov	r2, r1
 8005472:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005474:	68ba      	ldr	r2, [r7, #8]
 8005476:	69fb      	ldr	r3, [r7, #28]
 8005478:	4413      	add	r3, r2
 800547a:	781b      	ldrb	r3, [r3, #0]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d006      	beq.n	800548e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005480:	69fb      	ldr	r3, [r7, #28]
 8005482:	3301      	adds	r3, #1
 8005484:	61fb      	str	r3, [r7, #28]
 8005486:	69fb      	ldr	r3, [r7, #28]
 8005488:	2b0f      	cmp	r3, #15
 800548a:	d9e9      	bls.n	8005460 <prvInitialiseNewTask+0x64>
 800548c:	e000      	b.n	8005490 <prvInitialiseNewTask+0x94>
			{
				break;
 800548e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005492:	2200      	movs	r2, #0
 8005494:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005498:	e003      	b.n	80054a2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800549a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800549c:	2200      	movs	r2, #0
 800549e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80054a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054a4:	2b37      	cmp	r3, #55	; 0x37
 80054a6:	d901      	bls.n	80054ac <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80054a8:	2337      	movs	r3, #55	; 0x37
 80054aa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80054ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80054b0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80054b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80054b6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80054b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ba:	2200      	movs	r2, #0
 80054bc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80054be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054c0:	3304      	adds	r3, #4
 80054c2:	4618      	mov	r0, r3
 80054c4:	f7fe feac 	bl	8004220 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80054c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ca:	3318      	adds	r3, #24
 80054cc:	4618      	mov	r0, r3
 80054ce:	f7fe fea7 	bl	8004220 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80054d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054d6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80054d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054da:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80054de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054e0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80054e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054e6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80054e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ea:	2200      	movs	r2, #0
 80054ec:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80054f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054f2:	2200      	movs	r2, #0
 80054f4:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80054f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054fa:	3354      	adds	r3, #84	; 0x54
 80054fc:	2260      	movs	r2, #96	; 0x60
 80054fe:	2100      	movs	r1, #0
 8005500:	4618      	mov	r0, r3
 8005502:	f001 ffc4 	bl	800748e <memset>
 8005506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005508:	4a0c      	ldr	r2, [pc, #48]	; (800553c <prvInitialiseNewTask+0x140>)
 800550a:	659a      	str	r2, [r3, #88]	; 0x58
 800550c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800550e:	4a0c      	ldr	r2, [pc, #48]	; (8005540 <prvInitialiseNewTask+0x144>)
 8005510:	65da      	str	r2, [r3, #92]	; 0x5c
 8005512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005514:	4a0b      	ldr	r2, [pc, #44]	; (8005544 <prvInitialiseNewTask+0x148>)
 8005516:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005518:	683a      	ldr	r2, [r7, #0]
 800551a:	68f9      	ldr	r1, [r7, #12]
 800551c:	69b8      	ldr	r0, [r7, #24]
 800551e:	f001 fa4f 	bl	80069c0 <pxPortInitialiseStack>
 8005522:	4602      	mov	r2, r0
 8005524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005526:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800552a:	2b00      	cmp	r3, #0
 800552c:	d002      	beq.n	8005534 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800552e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005530:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005532:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005534:	bf00      	nop
 8005536:	3720      	adds	r7, #32
 8005538:	46bd      	mov	sp, r7
 800553a:	bd80      	pop	{r7, pc}
 800553c:	0800c0a8 	.word	0x0800c0a8
 8005540:	0800c0c8 	.word	0x0800c0c8
 8005544:	0800c088 	.word	0x0800c088

08005548 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b082      	sub	sp, #8
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005550:	f001 fb60 	bl	8006c14 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005554:	4b2d      	ldr	r3, [pc, #180]	; (800560c <prvAddNewTaskToReadyList+0xc4>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	3301      	adds	r3, #1
 800555a:	4a2c      	ldr	r2, [pc, #176]	; (800560c <prvAddNewTaskToReadyList+0xc4>)
 800555c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800555e:	4b2c      	ldr	r3, [pc, #176]	; (8005610 <prvAddNewTaskToReadyList+0xc8>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d109      	bne.n	800557a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005566:	4a2a      	ldr	r2, [pc, #168]	; (8005610 <prvAddNewTaskToReadyList+0xc8>)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800556c:	4b27      	ldr	r3, [pc, #156]	; (800560c <prvAddNewTaskToReadyList+0xc4>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	2b01      	cmp	r3, #1
 8005572:	d110      	bne.n	8005596 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005574:	f000 fc26 	bl	8005dc4 <prvInitialiseTaskLists>
 8005578:	e00d      	b.n	8005596 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800557a:	4b26      	ldr	r3, [pc, #152]	; (8005614 <prvAddNewTaskToReadyList+0xcc>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d109      	bne.n	8005596 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005582:	4b23      	ldr	r3, [pc, #140]	; (8005610 <prvAddNewTaskToReadyList+0xc8>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800558c:	429a      	cmp	r2, r3
 800558e:	d802      	bhi.n	8005596 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005590:	4a1f      	ldr	r2, [pc, #124]	; (8005610 <prvAddNewTaskToReadyList+0xc8>)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005596:	4b20      	ldr	r3, [pc, #128]	; (8005618 <prvAddNewTaskToReadyList+0xd0>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	3301      	adds	r3, #1
 800559c:	4a1e      	ldr	r2, [pc, #120]	; (8005618 <prvAddNewTaskToReadyList+0xd0>)
 800559e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80055a0:	4b1d      	ldr	r3, [pc, #116]	; (8005618 <prvAddNewTaskToReadyList+0xd0>)
 80055a2:	681a      	ldr	r2, [r3, #0]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055ac:	4b1b      	ldr	r3, [pc, #108]	; (800561c <prvAddNewTaskToReadyList+0xd4>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	429a      	cmp	r2, r3
 80055b2:	d903      	bls.n	80055bc <prvAddNewTaskToReadyList+0x74>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055b8:	4a18      	ldr	r2, [pc, #96]	; (800561c <prvAddNewTaskToReadyList+0xd4>)
 80055ba:	6013      	str	r3, [r2, #0]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055c0:	4613      	mov	r3, r2
 80055c2:	009b      	lsls	r3, r3, #2
 80055c4:	4413      	add	r3, r2
 80055c6:	009b      	lsls	r3, r3, #2
 80055c8:	4a15      	ldr	r2, [pc, #84]	; (8005620 <prvAddNewTaskToReadyList+0xd8>)
 80055ca:	441a      	add	r2, r3
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	3304      	adds	r3, #4
 80055d0:	4619      	mov	r1, r3
 80055d2:	4610      	mov	r0, r2
 80055d4:	f7fe fe31 	bl	800423a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80055d8:	f001 fb4c 	bl	8006c74 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80055dc:	4b0d      	ldr	r3, [pc, #52]	; (8005614 <prvAddNewTaskToReadyList+0xcc>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d00e      	beq.n	8005602 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80055e4:	4b0a      	ldr	r3, [pc, #40]	; (8005610 <prvAddNewTaskToReadyList+0xc8>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ee:	429a      	cmp	r2, r3
 80055f0:	d207      	bcs.n	8005602 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80055f2:	4b0c      	ldr	r3, [pc, #48]	; (8005624 <prvAddNewTaskToReadyList+0xdc>)
 80055f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055f8:	601a      	str	r2, [r3, #0]
 80055fa:	f3bf 8f4f 	dsb	sy
 80055fe:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005602:	bf00      	nop
 8005604:	3708      	adds	r7, #8
 8005606:	46bd      	mov	sp, r7
 8005608:	bd80      	pop	{r7, pc}
 800560a:	bf00      	nop
 800560c:	20000f5c 	.word	0x20000f5c
 8005610:	20000a88 	.word	0x20000a88
 8005614:	20000f68 	.word	0x20000f68
 8005618:	20000f78 	.word	0x20000f78
 800561c:	20000f64 	.word	0x20000f64
 8005620:	20000a8c 	.word	0x20000a8c
 8005624:	e000ed04 	.word	0xe000ed04

08005628 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005628:	b580      	push	{r7, lr}
 800562a:	b084      	sub	sp, #16
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005630:	2300      	movs	r3, #0
 8005632:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d017      	beq.n	800566a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800563a:	4b13      	ldr	r3, [pc, #76]	; (8005688 <vTaskDelay+0x60>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d00a      	beq.n	8005658 <vTaskDelay+0x30>
	__asm volatile
 8005642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005646:	f383 8811 	msr	BASEPRI, r3
 800564a:	f3bf 8f6f 	isb	sy
 800564e:	f3bf 8f4f 	dsb	sy
 8005652:	60bb      	str	r3, [r7, #8]
}
 8005654:	bf00      	nop
 8005656:	e7fe      	b.n	8005656 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005658:	f000 f88a 	bl	8005770 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800565c:	2100      	movs	r1, #0
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f000 fe0c 	bl	800627c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005664:	f000 f892 	bl	800578c <xTaskResumeAll>
 8005668:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d107      	bne.n	8005680 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005670:	4b06      	ldr	r3, [pc, #24]	; (800568c <vTaskDelay+0x64>)
 8005672:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005676:	601a      	str	r2, [r3, #0]
 8005678:	f3bf 8f4f 	dsb	sy
 800567c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005680:	bf00      	nop
 8005682:	3710      	adds	r7, #16
 8005684:	46bd      	mov	sp, r7
 8005686:	bd80      	pop	{r7, pc}
 8005688:	20000f84 	.word	0x20000f84
 800568c:	e000ed04 	.word	0xe000ed04

08005690 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b08a      	sub	sp, #40	; 0x28
 8005694:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005696:	2300      	movs	r3, #0
 8005698:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800569a:	2300      	movs	r3, #0
 800569c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800569e:	463a      	mov	r2, r7
 80056a0:	1d39      	adds	r1, r7, #4
 80056a2:	f107 0308 	add.w	r3, r7, #8
 80056a6:	4618      	mov	r0, r3
 80056a8:	f7fe fd66 	bl	8004178 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80056ac:	6839      	ldr	r1, [r7, #0]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	68ba      	ldr	r2, [r7, #8]
 80056b2:	9202      	str	r2, [sp, #8]
 80056b4:	9301      	str	r3, [sp, #4]
 80056b6:	2300      	movs	r3, #0
 80056b8:	9300      	str	r3, [sp, #0]
 80056ba:	2300      	movs	r3, #0
 80056bc:	460a      	mov	r2, r1
 80056be:	4924      	ldr	r1, [pc, #144]	; (8005750 <vTaskStartScheduler+0xc0>)
 80056c0:	4824      	ldr	r0, [pc, #144]	; (8005754 <vTaskStartScheduler+0xc4>)
 80056c2:	f7ff fdf9 	bl	80052b8 <xTaskCreateStatic>
 80056c6:	4603      	mov	r3, r0
 80056c8:	4a23      	ldr	r2, [pc, #140]	; (8005758 <vTaskStartScheduler+0xc8>)
 80056ca:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80056cc:	4b22      	ldr	r3, [pc, #136]	; (8005758 <vTaskStartScheduler+0xc8>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d002      	beq.n	80056da <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80056d4:	2301      	movs	r3, #1
 80056d6:	617b      	str	r3, [r7, #20]
 80056d8:	e001      	b.n	80056de <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80056da:	2300      	movs	r3, #0
 80056dc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	2b01      	cmp	r3, #1
 80056e2:	d102      	bne.n	80056ea <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80056e4:	f000 fe1e 	bl	8006324 <xTimerCreateTimerTask>
 80056e8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	2b01      	cmp	r3, #1
 80056ee:	d11b      	bne.n	8005728 <vTaskStartScheduler+0x98>
	__asm volatile
 80056f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056f4:	f383 8811 	msr	BASEPRI, r3
 80056f8:	f3bf 8f6f 	isb	sy
 80056fc:	f3bf 8f4f 	dsb	sy
 8005700:	613b      	str	r3, [r7, #16]
}
 8005702:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005704:	4b15      	ldr	r3, [pc, #84]	; (800575c <vTaskStartScheduler+0xcc>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	3354      	adds	r3, #84	; 0x54
 800570a:	4a15      	ldr	r2, [pc, #84]	; (8005760 <vTaskStartScheduler+0xd0>)
 800570c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800570e:	4b15      	ldr	r3, [pc, #84]	; (8005764 <vTaskStartScheduler+0xd4>)
 8005710:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005714:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005716:	4b14      	ldr	r3, [pc, #80]	; (8005768 <vTaskStartScheduler+0xd8>)
 8005718:	2201      	movs	r2, #1
 800571a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800571c:	4b13      	ldr	r3, [pc, #76]	; (800576c <vTaskStartScheduler+0xdc>)
 800571e:	2200      	movs	r2, #0
 8005720:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005722:	f001 f9d5 	bl	8006ad0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005726:	e00e      	b.n	8005746 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800572e:	d10a      	bne.n	8005746 <vTaskStartScheduler+0xb6>
	__asm volatile
 8005730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005734:	f383 8811 	msr	BASEPRI, r3
 8005738:	f3bf 8f6f 	isb	sy
 800573c:	f3bf 8f4f 	dsb	sy
 8005740:	60fb      	str	r3, [r7, #12]
}
 8005742:	bf00      	nop
 8005744:	e7fe      	b.n	8005744 <vTaskStartScheduler+0xb4>
}
 8005746:	bf00      	nop
 8005748:	3718      	adds	r7, #24
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}
 800574e:	bf00      	nop
 8005750:	0800bf84 	.word	0x0800bf84
 8005754:	08005d95 	.word	0x08005d95
 8005758:	20000f80 	.word	0x20000f80
 800575c:	20000a88 	.word	0x20000a88
 8005760:	20000010 	.word	0x20000010
 8005764:	20000f7c 	.word	0x20000f7c
 8005768:	20000f68 	.word	0x20000f68
 800576c:	20000f60 	.word	0x20000f60

08005770 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005770:	b480      	push	{r7}
 8005772:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005774:	4b04      	ldr	r3, [pc, #16]	; (8005788 <vTaskSuspendAll+0x18>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	3301      	adds	r3, #1
 800577a:	4a03      	ldr	r2, [pc, #12]	; (8005788 <vTaskSuspendAll+0x18>)
 800577c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800577e:	bf00      	nop
 8005780:	46bd      	mov	sp, r7
 8005782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005786:	4770      	bx	lr
 8005788:	20000f84 	.word	0x20000f84

0800578c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b084      	sub	sp, #16
 8005790:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005792:	2300      	movs	r3, #0
 8005794:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005796:	2300      	movs	r3, #0
 8005798:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800579a:	4b42      	ldr	r3, [pc, #264]	; (80058a4 <xTaskResumeAll+0x118>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d10a      	bne.n	80057b8 <xTaskResumeAll+0x2c>
	__asm volatile
 80057a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057a6:	f383 8811 	msr	BASEPRI, r3
 80057aa:	f3bf 8f6f 	isb	sy
 80057ae:	f3bf 8f4f 	dsb	sy
 80057b2:	603b      	str	r3, [r7, #0]
}
 80057b4:	bf00      	nop
 80057b6:	e7fe      	b.n	80057b6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80057b8:	f001 fa2c 	bl	8006c14 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80057bc:	4b39      	ldr	r3, [pc, #228]	; (80058a4 <xTaskResumeAll+0x118>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	3b01      	subs	r3, #1
 80057c2:	4a38      	ldr	r2, [pc, #224]	; (80058a4 <xTaskResumeAll+0x118>)
 80057c4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80057c6:	4b37      	ldr	r3, [pc, #220]	; (80058a4 <xTaskResumeAll+0x118>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d162      	bne.n	8005894 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80057ce:	4b36      	ldr	r3, [pc, #216]	; (80058a8 <xTaskResumeAll+0x11c>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d05e      	beq.n	8005894 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80057d6:	e02f      	b.n	8005838 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057d8:	4b34      	ldr	r3, [pc, #208]	; (80058ac <xTaskResumeAll+0x120>)
 80057da:	68db      	ldr	r3, [r3, #12]
 80057dc:	68db      	ldr	r3, [r3, #12]
 80057de:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	3318      	adds	r3, #24
 80057e4:	4618      	mov	r0, r3
 80057e6:	f7fe fd85 	bl	80042f4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	3304      	adds	r3, #4
 80057ee:	4618      	mov	r0, r3
 80057f0:	f7fe fd80 	bl	80042f4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057f8:	4b2d      	ldr	r3, [pc, #180]	; (80058b0 <xTaskResumeAll+0x124>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	429a      	cmp	r2, r3
 80057fe:	d903      	bls.n	8005808 <xTaskResumeAll+0x7c>
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005804:	4a2a      	ldr	r2, [pc, #168]	; (80058b0 <xTaskResumeAll+0x124>)
 8005806:	6013      	str	r3, [r2, #0]
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800580c:	4613      	mov	r3, r2
 800580e:	009b      	lsls	r3, r3, #2
 8005810:	4413      	add	r3, r2
 8005812:	009b      	lsls	r3, r3, #2
 8005814:	4a27      	ldr	r2, [pc, #156]	; (80058b4 <xTaskResumeAll+0x128>)
 8005816:	441a      	add	r2, r3
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	3304      	adds	r3, #4
 800581c:	4619      	mov	r1, r3
 800581e:	4610      	mov	r0, r2
 8005820:	f7fe fd0b 	bl	800423a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005828:	4b23      	ldr	r3, [pc, #140]	; (80058b8 <xTaskResumeAll+0x12c>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800582e:	429a      	cmp	r2, r3
 8005830:	d302      	bcc.n	8005838 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005832:	4b22      	ldr	r3, [pc, #136]	; (80058bc <xTaskResumeAll+0x130>)
 8005834:	2201      	movs	r2, #1
 8005836:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005838:	4b1c      	ldr	r3, [pc, #112]	; (80058ac <xTaskResumeAll+0x120>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d1cb      	bne.n	80057d8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d001      	beq.n	800584a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005846:	f000 fb5f 	bl	8005f08 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800584a:	4b1d      	ldr	r3, [pc, #116]	; (80058c0 <xTaskResumeAll+0x134>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d010      	beq.n	8005878 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005856:	f000 f847 	bl	80058e8 <xTaskIncrementTick>
 800585a:	4603      	mov	r3, r0
 800585c:	2b00      	cmp	r3, #0
 800585e:	d002      	beq.n	8005866 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005860:	4b16      	ldr	r3, [pc, #88]	; (80058bc <xTaskResumeAll+0x130>)
 8005862:	2201      	movs	r2, #1
 8005864:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	3b01      	subs	r3, #1
 800586a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d1f1      	bne.n	8005856 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005872:	4b13      	ldr	r3, [pc, #76]	; (80058c0 <xTaskResumeAll+0x134>)
 8005874:	2200      	movs	r2, #0
 8005876:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005878:	4b10      	ldr	r3, [pc, #64]	; (80058bc <xTaskResumeAll+0x130>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d009      	beq.n	8005894 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005880:	2301      	movs	r3, #1
 8005882:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005884:	4b0f      	ldr	r3, [pc, #60]	; (80058c4 <xTaskResumeAll+0x138>)
 8005886:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800588a:	601a      	str	r2, [r3, #0]
 800588c:	f3bf 8f4f 	dsb	sy
 8005890:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005894:	f001 f9ee 	bl	8006c74 <vPortExitCritical>

	return xAlreadyYielded;
 8005898:	68bb      	ldr	r3, [r7, #8]
}
 800589a:	4618      	mov	r0, r3
 800589c:	3710      	adds	r7, #16
 800589e:	46bd      	mov	sp, r7
 80058a0:	bd80      	pop	{r7, pc}
 80058a2:	bf00      	nop
 80058a4:	20000f84 	.word	0x20000f84
 80058a8:	20000f5c 	.word	0x20000f5c
 80058ac:	20000f1c 	.word	0x20000f1c
 80058b0:	20000f64 	.word	0x20000f64
 80058b4:	20000a8c 	.word	0x20000a8c
 80058b8:	20000a88 	.word	0x20000a88
 80058bc:	20000f70 	.word	0x20000f70
 80058c0:	20000f6c 	.word	0x20000f6c
 80058c4:	e000ed04 	.word	0xe000ed04

080058c8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80058c8:	b480      	push	{r7}
 80058ca:	b083      	sub	sp, #12
 80058cc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80058ce:	4b05      	ldr	r3, [pc, #20]	; (80058e4 <xTaskGetTickCount+0x1c>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80058d4:	687b      	ldr	r3, [r7, #4]
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	370c      	adds	r7, #12
 80058da:	46bd      	mov	sp, r7
 80058dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e0:	4770      	bx	lr
 80058e2:	bf00      	nop
 80058e4:	20000f60 	.word	0x20000f60

080058e8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b086      	sub	sp, #24
 80058ec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80058ee:	2300      	movs	r3, #0
 80058f0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80058f2:	4b4f      	ldr	r3, [pc, #316]	; (8005a30 <xTaskIncrementTick+0x148>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	f040 808f 	bne.w	8005a1a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80058fc:	4b4d      	ldr	r3, [pc, #308]	; (8005a34 <xTaskIncrementTick+0x14c>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	3301      	adds	r3, #1
 8005902:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005904:	4a4b      	ldr	r2, [pc, #300]	; (8005a34 <xTaskIncrementTick+0x14c>)
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d120      	bne.n	8005952 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005910:	4b49      	ldr	r3, [pc, #292]	; (8005a38 <xTaskIncrementTick+0x150>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d00a      	beq.n	8005930 <xTaskIncrementTick+0x48>
	__asm volatile
 800591a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800591e:	f383 8811 	msr	BASEPRI, r3
 8005922:	f3bf 8f6f 	isb	sy
 8005926:	f3bf 8f4f 	dsb	sy
 800592a:	603b      	str	r3, [r7, #0]
}
 800592c:	bf00      	nop
 800592e:	e7fe      	b.n	800592e <xTaskIncrementTick+0x46>
 8005930:	4b41      	ldr	r3, [pc, #260]	; (8005a38 <xTaskIncrementTick+0x150>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	60fb      	str	r3, [r7, #12]
 8005936:	4b41      	ldr	r3, [pc, #260]	; (8005a3c <xTaskIncrementTick+0x154>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a3f      	ldr	r2, [pc, #252]	; (8005a38 <xTaskIncrementTick+0x150>)
 800593c:	6013      	str	r3, [r2, #0]
 800593e:	4a3f      	ldr	r2, [pc, #252]	; (8005a3c <xTaskIncrementTick+0x154>)
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	6013      	str	r3, [r2, #0]
 8005944:	4b3e      	ldr	r3, [pc, #248]	; (8005a40 <xTaskIncrementTick+0x158>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	3301      	adds	r3, #1
 800594a:	4a3d      	ldr	r2, [pc, #244]	; (8005a40 <xTaskIncrementTick+0x158>)
 800594c:	6013      	str	r3, [r2, #0]
 800594e:	f000 fadb 	bl	8005f08 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005952:	4b3c      	ldr	r3, [pc, #240]	; (8005a44 <xTaskIncrementTick+0x15c>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	693a      	ldr	r2, [r7, #16]
 8005958:	429a      	cmp	r2, r3
 800595a:	d349      	bcc.n	80059f0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800595c:	4b36      	ldr	r3, [pc, #216]	; (8005a38 <xTaskIncrementTick+0x150>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d104      	bne.n	8005970 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005966:	4b37      	ldr	r3, [pc, #220]	; (8005a44 <xTaskIncrementTick+0x15c>)
 8005968:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800596c:	601a      	str	r2, [r3, #0]
					break;
 800596e:	e03f      	b.n	80059f0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005970:	4b31      	ldr	r3, [pc, #196]	; (8005a38 <xTaskIncrementTick+0x150>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	68db      	ldr	r3, [r3, #12]
 8005976:	68db      	ldr	r3, [r3, #12]
 8005978:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005980:	693a      	ldr	r2, [r7, #16]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	429a      	cmp	r2, r3
 8005986:	d203      	bcs.n	8005990 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005988:	4a2e      	ldr	r2, [pc, #184]	; (8005a44 <xTaskIncrementTick+0x15c>)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800598e:	e02f      	b.n	80059f0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	3304      	adds	r3, #4
 8005994:	4618      	mov	r0, r3
 8005996:	f7fe fcad 	bl	80042f4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d004      	beq.n	80059ac <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	3318      	adds	r3, #24
 80059a6:	4618      	mov	r0, r3
 80059a8:	f7fe fca4 	bl	80042f4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059b0:	4b25      	ldr	r3, [pc, #148]	; (8005a48 <xTaskIncrementTick+0x160>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	429a      	cmp	r2, r3
 80059b6:	d903      	bls.n	80059c0 <xTaskIncrementTick+0xd8>
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059bc:	4a22      	ldr	r2, [pc, #136]	; (8005a48 <xTaskIncrementTick+0x160>)
 80059be:	6013      	str	r3, [r2, #0]
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059c4:	4613      	mov	r3, r2
 80059c6:	009b      	lsls	r3, r3, #2
 80059c8:	4413      	add	r3, r2
 80059ca:	009b      	lsls	r3, r3, #2
 80059cc:	4a1f      	ldr	r2, [pc, #124]	; (8005a4c <xTaskIncrementTick+0x164>)
 80059ce:	441a      	add	r2, r3
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	3304      	adds	r3, #4
 80059d4:	4619      	mov	r1, r3
 80059d6:	4610      	mov	r0, r2
 80059d8:	f7fe fc2f 	bl	800423a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059e0:	4b1b      	ldr	r3, [pc, #108]	; (8005a50 <xTaskIncrementTick+0x168>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059e6:	429a      	cmp	r2, r3
 80059e8:	d3b8      	bcc.n	800595c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80059ea:	2301      	movs	r3, #1
 80059ec:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80059ee:	e7b5      	b.n	800595c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80059f0:	4b17      	ldr	r3, [pc, #92]	; (8005a50 <xTaskIncrementTick+0x168>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059f6:	4915      	ldr	r1, [pc, #84]	; (8005a4c <xTaskIncrementTick+0x164>)
 80059f8:	4613      	mov	r3, r2
 80059fa:	009b      	lsls	r3, r3, #2
 80059fc:	4413      	add	r3, r2
 80059fe:	009b      	lsls	r3, r3, #2
 8005a00:	440b      	add	r3, r1
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	2b01      	cmp	r3, #1
 8005a06:	d901      	bls.n	8005a0c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005a08:	2301      	movs	r3, #1
 8005a0a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005a0c:	4b11      	ldr	r3, [pc, #68]	; (8005a54 <xTaskIncrementTick+0x16c>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d007      	beq.n	8005a24 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005a14:	2301      	movs	r3, #1
 8005a16:	617b      	str	r3, [r7, #20]
 8005a18:	e004      	b.n	8005a24 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005a1a:	4b0f      	ldr	r3, [pc, #60]	; (8005a58 <xTaskIncrementTick+0x170>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	3301      	adds	r3, #1
 8005a20:	4a0d      	ldr	r2, [pc, #52]	; (8005a58 <xTaskIncrementTick+0x170>)
 8005a22:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005a24:	697b      	ldr	r3, [r7, #20]
}
 8005a26:	4618      	mov	r0, r3
 8005a28:	3718      	adds	r7, #24
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}
 8005a2e:	bf00      	nop
 8005a30:	20000f84 	.word	0x20000f84
 8005a34:	20000f60 	.word	0x20000f60
 8005a38:	20000f14 	.word	0x20000f14
 8005a3c:	20000f18 	.word	0x20000f18
 8005a40:	20000f74 	.word	0x20000f74
 8005a44:	20000f7c 	.word	0x20000f7c
 8005a48:	20000f64 	.word	0x20000f64
 8005a4c:	20000a8c 	.word	0x20000a8c
 8005a50:	20000a88 	.word	0x20000a88
 8005a54:	20000f70 	.word	0x20000f70
 8005a58:	20000f6c 	.word	0x20000f6c

08005a5c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b085      	sub	sp, #20
 8005a60:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005a62:	4b2a      	ldr	r3, [pc, #168]	; (8005b0c <vTaskSwitchContext+0xb0>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d003      	beq.n	8005a72 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005a6a:	4b29      	ldr	r3, [pc, #164]	; (8005b10 <vTaskSwitchContext+0xb4>)
 8005a6c:	2201      	movs	r2, #1
 8005a6e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005a70:	e046      	b.n	8005b00 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8005a72:	4b27      	ldr	r3, [pc, #156]	; (8005b10 <vTaskSwitchContext+0xb4>)
 8005a74:	2200      	movs	r2, #0
 8005a76:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a78:	4b26      	ldr	r3, [pc, #152]	; (8005b14 <vTaskSwitchContext+0xb8>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	60fb      	str	r3, [r7, #12]
 8005a7e:	e010      	b.n	8005aa2 <vTaskSwitchContext+0x46>
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d10a      	bne.n	8005a9c <vTaskSwitchContext+0x40>
	__asm volatile
 8005a86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a8a:	f383 8811 	msr	BASEPRI, r3
 8005a8e:	f3bf 8f6f 	isb	sy
 8005a92:	f3bf 8f4f 	dsb	sy
 8005a96:	607b      	str	r3, [r7, #4]
}
 8005a98:	bf00      	nop
 8005a9a:	e7fe      	b.n	8005a9a <vTaskSwitchContext+0x3e>
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	3b01      	subs	r3, #1
 8005aa0:	60fb      	str	r3, [r7, #12]
 8005aa2:	491d      	ldr	r1, [pc, #116]	; (8005b18 <vTaskSwitchContext+0xbc>)
 8005aa4:	68fa      	ldr	r2, [r7, #12]
 8005aa6:	4613      	mov	r3, r2
 8005aa8:	009b      	lsls	r3, r3, #2
 8005aaa:	4413      	add	r3, r2
 8005aac:	009b      	lsls	r3, r3, #2
 8005aae:	440b      	add	r3, r1
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d0e4      	beq.n	8005a80 <vTaskSwitchContext+0x24>
 8005ab6:	68fa      	ldr	r2, [r7, #12]
 8005ab8:	4613      	mov	r3, r2
 8005aba:	009b      	lsls	r3, r3, #2
 8005abc:	4413      	add	r3, r2
 8005abe:	009b      	lsls	r3, r3, #2
 8005ac0:	4a15      	ldr	r2, [pc, #84]	; (8005b18 <vTaskSwitchContext+0xbc>)
 8005ac2:	4413      	add	r3, r2
 8005ac4:	60bb      	str	r3, [r7, #8]
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	685a      	ldr	r2, [r3, #4]
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	605a      	str	r2, [r3, #4]
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	685a      	ldr	r2, [r3, #4]
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	3308      	adds	r3, #8
 8005ad8:	429a      	cmp	r2, r3
 8005ada:	d104      	bne.n	8005ae6 <vTaskSwitchContext+0x8a>
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	685a      	ldr	r2, [r3, #4]
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	605a      	str	r2, [r3, #4]
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	68db      	ldr	r3, [r3, #12]
 8005aec:	4a0b      	ldr	r2, [pc, #44]	; (8005b1c <vTaskSwitchContext+0xc0>)
 8005aee:	6013      	str	r3, [r2, #0]
 8005af0:	4a08      	ldr	r2, [pc, #32]	; (8005b14 <vTaskSwitchContext+0xb8>)
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005af6:	4b09      	ldr	r3, [pc, #36]	; (8005b1c <vTaskSwitchContext+0xc0>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	3354      	adds	r3, #84	; 0x54
 8005afc:	4a08      	ldr	r2, [pc, #32]	; (8005b20 <vTaskSwitchContext+0xc4>)
 8005afe:	6013      	str	r3, [r2, #0]
}
 8005b00:	bf00      	nop
 8005b02:	3714      	adds	r7, #20
 8005b04:	46bd      	mov	sp, r7
 8005b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0a:	4770      	bx	lr
 8005b0c:	20000f84 	.word	0x20000f84
 8005b10:	20000f70 	.word	0x20000f70
 8005b14:	20000f64 	.word	0x20000f64
 8005b18:	20000a8c 	.word	0x20000a8c
 8005b1c:	20000a88 	.word	0x20000a88
 8005b20:	20000010 	.word	0x20000010

08005b24 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b084      	sub	sp, #16
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
 8005b2c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d10a      	bne.n	8005b4a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b38:	f383 8811 	msr	BASEPRI, r3
 8005b3c:	f3bf 8f6f 	isb	sy
 8005b40:	f3bf 8f4f 	dsb	sy
 8005b44:	60fb      	str	r3, [r7, #12]
}
 8005b46:	bf00      	nop
 8005b48:	e7fe      	b.n	8005b48 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005b4a:	4b07      	ldr	r3, [pc, #28]	; (8005b68 <vTaskPlaceOnEventList+0x44>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	3318      	adds	r3, #24
 8005b50:	4619      	mov	r1, r3
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f7fe fb95 	bl	8004282 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005b58:	2101      	movs	r1, #1
 8005b5a:	6838      	ldr	r0, [r7, #0]
 8005b5c:	f000 fb8e 	bl	800627c <prvAddCurrentTaskToDelayedList>
}
 8005b60:	bf00      	nop
 8005b62:	3710      	adds	r7, #16
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bd80      	pop	{r7, pc}
 8005b68:	20000a88 	.word	0x20000a88

08005b6c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b086      	sub	sp, #24
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	60f8      	str	r0, [r7, #12]
 8005b74:	60b9      	str	r1, [r7, #8]
 8005b76:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d10a      	bne.n	8005b94 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b82:	f383 8811 	msr	BASEPRI, r3
 8005b86:	f3bf 8f6f 	isb	sy
 8005b8a:	f3bf 8f4f 	dsb	sy
 8005b8e:	617b      	str	r3, [r7, #20]
}
 8005b90:	bf00      	nop
 8005b92:	e7fe      	b.n	8005b92 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005b94:	4b0a      	ldr	r3, [pc, #40]	; (8005bc0 <vTaskPlaceOnEventListRestricted+0x54>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	3318      	adds	r3, #24
 8005b9a:	4619      	mov	r1, r3
 8005b9c:	68f8      	ldr	r0, [r7, #12]
 8005b9e:	f7fe fb4c 	bl	800423a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d002      	beq.n	8005bae <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005ba8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005bac:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005bae:	6879      	ldr	r1, [r7, #4]
 8005bb0:	68b8      	ldr	r0, [r7, #8]
 8005bb2:	f000 fb63 	bl	800627c <prvAddCurrentTaskToDelayedList>
	}
 8005bb6:	bf00      	nop
 8005bb8:	3718      	adds	r7, #24
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}
 8005bbe:	bf00      	nop
 8005bc0:	20000a88 	.word	0x20000a88

08005bc4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b086      	sub	sp, #24
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	68db      	ldr	r3, [r3, #12]
 8005bd0:	68db      	ldr	r3, [r3, #12]
 8005bd2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005bd4:	693b      	ldr	r3, [r7, #16]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d10a      	bne.n	8005bf0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bde:	f383 8811 	msr	BASEPRI, r3
 8005be2:	f3bf 8f6f 	isb	sy
 8005be6:	f3bf 8f4f 	dsb	sy
 8005bea:	60fb      	str	r3, [r7, #12]
}
 8005bec:	bf00      	nop
 8005bee:	e7fe      	b.n	8005bee <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	3318      	adds	r3, #24
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	f7fe fb7d 	bl	80042f4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005bfa:	4b1e      	ldr	r3, [pc, #120]	; (8005c74 <xTaskRemoveFromEventList+0xb0>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d11d      	bne.n	8005c3e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	3304      	adds	r3, #4
 8005c06:	4618      	mov	r0, r3
 8005c08:	f7fe fb74 	bl	80042f4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c10:	4b19      	ldr	r3, [pc, #100]	; (8005c78 <xTaskRemoveFromEventList+0xb4>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	429a      	cmp	r2, r3
 8005c16:	d903      	bls.n	8005c20 <xTaskRemoveFromEventList+0x5c>
 8005c18:	693b      	ldr	r3, [r7, #16]
 8005c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c1c:	4a16      	ldr	r2, [pc, #88]	; (8005c78 <xTaskRemoveFromEventList+0xb4>)
 8005c1e:	6013      	str	r3, [r2, #0]
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c24:	4613      	mov	r3, r2
 8005c26:	009b      	lsls	r3, r3, #2
 8005c28:	4413      	add	r3, r2
 8005c2a:	009b      	lsls	r3, r3, #2
 8005c2c:	4a13      	ldr	r2, [pc, #76]	; (8005c7c <xTaskRemoveFromEventList+0xb8>)
 8005c2e:	441a      	add	r2, r3
 8005c30:	693b      	ldr	r3, [r7, #16]
 8005c32:	3304      	adds	r3, #4
 8005c34:	4619      	mov	r1, r3
 8005c36:	4610      	mov	r0, r2
 8005c38:	f7fe faff 	bl	800423a <vListInsertEnd>
 8005c3c:	e005      	b.n	8005c4a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	3318      	adds	r3, #24
 8005c42:	4619      	mov	r1, r3
 8005c44:	480e      	ldr	r0, [pc, #56]	; (8005c80 <xTaskRemoveFromEventList+0xbc>)
 8005c46:	f7fe faf8 	bl	800423a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005c4a:	693b      	ldr	r3, [r7, #16]
 8005c4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c4e:	4b0d      	ldr	r3, [pc, #52]	; (8005c84 <xTaskRemoveFromEventList+0xc0>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c54:	429a      	cmp	r2, r3
 8005c56:	d905      	bls.n	8005c64 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005c58:	2301      	movs	r3, #1
 8005c5a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005c5c:	4b0a      	ldr	r3, [pc, #40]	; (8005c88 <xTaskRemoveFromEventList+0xc4>)
 8005c5e:	2201      	movs	r2, #1
 8005c60:	601a      	str	r2, [r3, #0]
 8005c62:	e001      	b.n	8005c68 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005c64:	2300      	movs	r3, #0
 8005c66:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005c68:	697b      	ldr	r3, [r7, #20]
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	3718      	adds	r7, #24
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}
 8005c72:	bf00      	nop
 8005c74:	20000f84 	.word	0x20000f84
 8005c78:	20000f64 	.word	0x20000f64
 8005c7c:	20000a8c 	.word	0x20000a8c
 8005c80:	20000f1c 	.word	0x20000f1c
 8005c84:	20000a88 	.word	0x20000a88
 8005c88:	20000f70 	.word	0x20000f70

08005c8c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b083      	sub	sp, #12
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005c94:	4b06      	ldr	r3, [pc, #24]	; (8005cb0 <vTaskInternalSetTimeOutState+0x24>)
 8005c96:	681a      	ldr	r2, [r3, #0]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005c9c:	4b05      	ldr	r3, [pc, #20]	; (8005cb4 <vTaskInternalSetTimeOutState+0x28>)
 8005c9e:	681a      	ldr	r2, [r3, #0]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	605a      	str	r2, [r3, #4]
}
 8005ca4:	bf00      	nop
 8005ca6:	370c      	adds	r7, #12
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cae:	4770      	bx	lr
 8005cb0:	20000f74 	.word	0x20000f74
 8005cb4:	20000f60 	.word	0x20000f60

08005cb8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b088      	sub	sp, #32
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
 8005cc0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d10a      	bne.n	8005cde <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ccc:	f383 8811 	msr	BASEPRI, r3
 8005cd0:	f3bf 8f6f 	isb	sy
 8005cd4:	f3bf 8f4f 	dsb	sy
 8005cd8:	613b      	str	r3, [r7, #16]
}
 8005cda:	bf00      	nop
 8005cdc:	e7fe      	b.n	8005cdc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d10a      	bne.n	8005cfa <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ce8:	f383 8811 	msr	BASEPRI, r3
 8005cec:	f3bf 8f6f 	isb	sy
 8005cf0:	f3bf 8f4f 	dsb	sy
 8005cf4:	60fb      	str	r3, [r7, #12]
}
 8005cf6:	bf00      	nop
 8005cf8:	e7fe      	b.n	8005cf8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005cfa:	f000 ff8b 	bl	8006c14 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005cfe:	4b1d      	ldr	r3, [pc, #116]	; (8005d74 <xTaskCheckForTimeOut+0xbc>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	69ba      	ldr	r2, [r7, #24]
 8005d0a:	1ad3      	subs	r3, r2, r3
 8005d0c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d16:	d102      	bne.n	8005d1e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005d18:	2300      	movs	r3, #0
 8005d1a:	61fb      	str	r3, [r7, #28]
 8005d1c:	e023      	b.n	8005d66 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681a      	ldr	r2, [r3, #0]
 8005d22:	4b15      	ldr	r3, [pc, #84]	; (8005d78 <xTaskCheckForTimeOut+0xc0>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	429a      	cmp	r2, r3
 8005d28:	d007      	beq.n	8005d3a <xTaskCheckForTimeOut+0x82>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	685b      	ldr	r3, [r3, #4]
 8005d2e:	69ba      	ldr	r2, [r7, #24]
 8005d30:	429a      	cmp	r2, r3
 8005d32:	d302      	bcc.n	8005d3a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005d34:	2301      	movs	r3, #1
 8005d36:	61fb      	str	r3, [r7, #28]
 8005d38:	e015      	b.n	8005d66 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	697a      	ldr	r2, [r7, #20]
 8005d40:	429a      	cmp	r2, r3
 8005d42:	d20b      	bcs.n	8005d5c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	681a      	ldr	r2, [r3, #0]
 8005d48:	697b      	ldr	r3, [r7, #20]
 8005d4a:	1ad2      	subs	r2, r2, r3
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005d50:	6878      	ldr	r0, [r7, #4]
 8005d52:	f7ff ff9b 	bl	8005c8c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005d56:	2300      	movs	r3, #0
 8005d58:	61fb      	str	r3, [r7, #28]
 8005d5a:	e004      	b.n	8005d66 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005d62:	2301      	movs	r3, #1
 8005d64:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005d66:	f000 ff85 	bl	8006c74 <vPortExitCritical>

	return xReturn;
 8005d6a:	69fb      	ldr	r3, [r7, #28]
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	3720      	adds	r7, #32
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd80      	pop	{r7, pc}
 8005d74:	20000f60 	.word	0x20000f60
 8005d78:	20000f74 	.word	0x20000f74

08005d7c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005d80:	4b03      	ldr	r3, [pc, #12]	; (8005d90 <vTaskMissedYield+0x14>)
 8005d82:	2201      	movs	r2, #1
 8005d84:	601a      	str	r2, [r3, #0]
}
 8005d86:	bf00      	nop
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8e:	4770      	bx	lr
 8005d90:	20000f70 	.word	0x20000f70

08005d94 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b082      	sub	sp, #8
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005d9c:	f000 f852 	bl	8005e44 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005da0:	4b06      	ldr	r3, [pc, #24]	; (8005dbc <prvIdleTask+0x28>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	2b01      	cmp	r3, #1
 8005da6:	d9f9      	bls.n	8005d9c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005da8:	4b05      	ldr	r3, [pc, #20]	; (8005dc0 <prvIdleTask+0x2c>)
 8005daa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005dae:	601a      	str	r2, [r3, #0]
 8005db0:	f3bf 8f4f 	dsb	sy
 8005db4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005db8:	e7f0      	b.n	8005d9c <prvIdleTask+0x8>
 8005dba:	bf00      	nop
 8005dbc:	20000a8c 	.word	0x20000a8c
 8005dc0:	e000ed04 	.word	0xe000ed04

08005dc4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b082      	sub	sp, #8
 8005dc8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005dca:	2300      	movs	r3, #0
 8005dcc:	607b      	str	r3, [r7, #4]
 8005dce:	e00c      	b.n	8005dea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005dd0:	687a      	ldr	r2, [r7, #4]
 8005dd2:	4613      	mov	r3, r2
 8005dd4:	009b      	lsls	r3, r3, #2
 8005dd6:	4413      	add	r3, r2
 8005dd8:	009b      	lsls	r3, r3, #2
 8005dda:	4a12      	ldr	r2, [pc, #72]	; (8005e24 <prvInitialiseTaskLists+0x60>)
 8005ddc:	4413      	add	r3, r2
 8005dde:	4618      	mov	r0, r3
 8005de0:	f7fe f9fe 	bl	80041e0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	3301      	adds	r3, #1
 8005de8:	607b      	str	r3, [r7, #4]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2b37      	cmp	r3, #55	; 0x37
 8005dee:	d9ef      	bls.n	8005dd0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005df0:	480d      	ldr	r0, [pc, #52]	; (8005e28 <prvInitialiseTaskLists+0x64>)
 8005df2:	f7fe f9f5 	bl	80041e0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005df6:	480d      	ldr	r0, [pc, #52]	; (8005e2c <prvInitialiseTaskLists+0x68>)
 8005df8:	f7fe f9f2 	bl	80041e0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005dfc:	480c      	ldr	r0, [pc, #48]	; (8005e30 <prvInitialiseTaskLists+0x6c>)
 8005dfe:	f7fe f9ef 	bl	80041e0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005e02:	480c      	ldr	r0, [pc, #48]	; (8005e34 <prvInitialiseTaskLists+0x70>)
 8005e04:	f7fe f9ec 	bl	80041e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005e08:	480b      	ldr	r0, [pc, #44]	; (8005e38 <prvInitialiseTaskLists+0x74>)
 8005e0a:	f7fe f9e9 	bl	80041e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005e0e:	4b0b      	ldr	r3, [pc, #44]	; (8005e3c <prvInitialiseTaskLists+0x78>)
 8005e10:	4a05      	ldr	r2, [pc, #20]	; (8005e28 <prvInitialiseTaskLists+0x64>)
 8005e12:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005e14:	4b0a      	ldr	r3, [pc, #40]	; (8005e40 <prvInitialiseTaskLists+0x7c>)
 8005e16:	4a05      	ldr	r2, [pc, #20]	; (8005e2c <prvInitialiseTaskLists+0x68>)
 8005e18:	601a      	str	r2, [r3, #0]
}
 8005e1a:	bf00      	nop
 8005e1c:	3708      	adds	r7, #8
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}
 8005e22:	bf00      	nop
 8005e24:	20000a8c 	.word	0x20000a8c
 8005e28:	20000eec 	.word	0x20000eec
 8005e2c:	20000f00 	.word	0x20000f00
 8005e30:	20000f1c 	.word	0x20000f1c
 8005e34:	20000f30 	.word	0x20000f30
 8005e38:	20000f48 	.word	0x20000f48
 8005e3c:	20000f14 	.word	0x20000f14
 8005e40:	20000f18 	.word	0x20000f18

08005e44 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b082      	sub	sp, #8
 8005e48:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005e4a:	e019      	b.n	8005e80 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005e4c:	f000 fee2 	bl	8006c14 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e50:	4b10      	ldr	r3, [pc, #64]	; (8005e94 <prvCheckTasksWaitingTermination+0x50>)
 8005e52:	68db      	ldr	r3, [r3, #12]
 8005e54:	68db      	ldr	r3, [r3, #12]
 8005e56:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	3304      	adds	r3, #4
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	f7fe fa49 	bl	80042f4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005e62:	4b0d      	ldr	r3, [pc, #52]	; (8005e98 <prvCheckTasksWaitingTermination+0x54>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	3b01      	subs	r3, #1
 8005e68:	4a0b      	ldr	r2, [pc, #44]	; (8005e98 <prvCheckTasksWaitingTermination+0x54>)
 8005e6a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005e6c:	4b0b      	ldr	r3, [pc, #44]	; (8005e9c <prvCheckTasksWaitingTermination+0x58>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	3b01      	subs	r3, #1
 8005e72:	4a0a      	ldr	r2, [pc, #40]	; (8005e9c <prvCheckTasksWaitingTermination+0x58>)
 8005e74:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005e76:	f000 fefd 	bl	8006c74 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f000 f810 	bl	8005ea0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005e80:	4b06      	ldr	r3, [pc, #24]	; (8005e9c <prvCheckTasksWaitingTermination+0x58>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d1e1      	bne.n	8005e4c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005e88:	bf00      	nop
 8005e8a:	bf00      	nop
 8005e8c:	3708      	adds	r7, #8
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd80      	pop	{r7, pc}
 8005e92:	bf00      	nop
 8005e94:	20000f30 	.word	0x20000f30
 8005e98:	20000f5c 	.word	0x20000f5c
 8005e9c:	20000f44 	.word	0x20000f44

08005ea0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b084      	sub	sp, #16
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	3354      	adds	r3, #84	; 0x54
 8005eac:	4618      	mov	r0, r3
 8005eae:	f002 fa7f 	bl	80083b0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d108      	bne.n	8005ece <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	f001 f895 	bl	8006ff0 <vPortFree>
				vPortFree( pxTCB );
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	f001 f892 	bl	8006ff0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005ecc:	e018      	b.n	8005f00 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005ed4:	2b01      	cmp	r3, #1
 8005ed6:	d103      	bne.n	8005ee0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005ed8:	6878      	ldr	r0, [r7, #4]
 8005eda:	f001 f889 	bl	8006ff0 <vPortFree>
	}
 8005ede:	e00f      	b.n	8005f00 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005ee6:	2b02      	cmp	r3, #2
 8005ee8:	d00a      	beq.n	8005f00 <prvDeleteTCB+0x60>
	__asm volatile
 8005eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eee:	f383 8811 	msr	BASEPRI, r3
 8005ef2:	f3bf 8f6f 	isb	sy
 8005ef6:	f3bf 8f4f 	dsb	sy
 8005efa:	60fb      	str	r3, [r7, #12]
}
 8005efc:	bf00      	nop
 8005efe:	e7fe      	b.n	8005efe <prvDeleteTCB+0x5e>
	}
 8005f00:	bf00      	nop
 8005f02:	3710      	adds	r7, #16
 8005f04:	46bd      	mov	sp, r7
 8005f06:	bd80      	pop	{r7, pc}

08005f08 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b083      	sub	sp, #12
 8005f0c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f0e:	4b0c      	ldr	r3, [pc, #48]	; (8005f40 <prvResetNextTaskUnblockTime+0x38>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d104      	bne.n	8005f22 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005f18:	4b0a      	ldr	r3, [pc, #40]	; (8005f44 <prvResetNextTaskUnblockTime+0x3c>)
 8005f1a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005f1e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005f20:	e008      	b.n	8005f34 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f22:	4b07      	ldr	r3, [pc, #28]	; (8005f40 <prvResetNextTaskUnblockTime+0x38>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	68db      	ldr	r3, [r3, #12]
 8005f28:	68db      	ldr	r3, [r3, #12]
 8005f2a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	685b      	ldr	r3, [r3, #4]
 8005f30:	4a04      	ldr	r2, [pc, #16]	; (8005f44 <prvResetNextTaskUnblockTime+0x3c>)
 8005f32:	6013      	str	r3, [r2, #0]
}
 8005f34:	bf00      	nop
 8005f36:	370c      	adds	r7, #12
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3e:	4770      	bx	lr
 8005f40:	20000f14 	.word	0x20000f14
 8005f44:	20000f7c 	.word	0x20000f7c

08005f48 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8005f48:	b480      	push	{r7}
 8005f4a:	b083      	sub	sp, #12
 8005f4c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8005f4e:	4b05      	ldr	r3, [pc, #20]	; (8005f64 <xTaskGetCurrentTaskHandle+0x1c>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	607b      	str	r3, [r7, #4]

		return xReturn;
 8005f54:	687b      	ldr	r3, [r7, #4]
	}
 8005f56:	4618      	mov	r0, r3
 8005f58:	370c      	adds	r7, #12
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f60:	4770      	bx	lr
 8005f62:	bf00      	nop
 8005f64:	20000a88 	.word	0x20000a88

08005f68 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005f68:	b480      	push	{r7}
 8005f6a:	b083      	sub	sp, #12
 8005f6c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005f6e:	4b0b      	ldr	r3, [pc, #44]	; (8005f9c <xTaskGetSchedulerState+0x34>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d102      	bne.n	8005f7c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005f76:	2301      	movs	r3, #1
 8005f78:	607b      	str	r3, [r7, #4]
 8005f7a:	e008      	b.n	8005f8e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f7c:	4b08      	ldr	r3, [pc, #32]	; (8005fa0 <xTaskGetSchedulerState+0x38>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d102      	bne.n	8005f8a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005f84:	2302      	movs	r3, #2
 8005f86:	607b      	str	r3, [r7, #4]
 8005f88:	e001      	b.n	8005f8e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005f8e:	687b      	ldr	r3, [r7, #4]
	}
 8005f90:	4618      	mov	r0, r3
 8005f92:	370c      	adds	r7, #12
 8005f94:	46bd      	mov	sp, r7
 8005f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9a:	4770      	bx	lr
 8005f9c:	20000f68 	.word	0x20000f68
 8005fa0:	20000f84 	.word	0x20000f84

08005fa4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b084      	sub	sp, #16
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d051      	beq.n	800605e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fbe:	4b2a      	ldr	r3, [pc, #168]	; (8006068 <xTaskPriorityInherit+0xc4>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fc4:	429a      	cmp	r2, r3
 8005fc6:	d241      	bcs.n	800604c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	699b      	ldr	r3, [r3, #24]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	db06      	blt.n	8005fde <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fd0:	4b25      	ldr	r3, [pc, #148]	; (8006068 <xTaskPriorityInherit+0xc4>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fd6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	6959      	ldr	r1, [r3, #20]
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fe6:	4613      	mov	r3, r2
 8005fe8:	009b      	lsls	r3, r3, #2
 8005fea:	4413      	add	r3, r2
 8005fec:	009b      	lsls	r3, r3, #2
 8005fee:	4a1f      	ldr	r2, [pc, #124]	; (800606c <xTaskPriorityInherit+0xc8>)
 8005ff0:	4413      	add	r3, r2
 8005ff2:	4299      	cmp	r1, r3
 8005ff4:	d122      	bne.n	800603c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	3304      	adds	r3, #4
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	f7fe f97a 	bl	80042f4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006000:	4b19      	ldr	r3, [pc, #100]	; (8006068 <xTaskPriorityInherit+0xc4>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800600e:	4b18      	ldr	r3, [pc, #96]	; (8006070 <xTaskPriorityInherit+0xcc>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	429a      	cmp	r2, r3
 8006014:	d903      	bls.n	800601e <xTaskPriorityInherit+0x7a>
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800601a:	4a15      	ldr	r2, [pc, #84]	; (8006070 <xTaskPriorityInherit+0xcc>)
 800601c:	6013      	str	r3, [r2, #0]
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006022:	4613      	mov	r3, r2
 8006024:	009b      	lsls	r3, r3, #2
 8006026:	4413      	add	r3, r2
 8006028:	009b      	lsls	r3, r3, #2
 800602a:	4a10      	ldr	r2, [pc, #64]	; (800606c <xTaskPriorityInherit+0xc8>)
 800602c:	441a      	add	r2, r3
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	3304      	adds	r3, #4
 8006032:	4619      	mov	r1, r3
 8006034:	4610      	mov	r0, r2
 8006036:	f7fe f900 	bl	800423a <vListInsertEnd>
 800603a:	e004      	b.n	8006046 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800603c:	4b0a      	ldr	r3, [pc, #40]	; (8006068 <xTaskPriorityInherit+0xc4>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006046:	2301      	movs	r3, #1
 8006048:	60fb      	str	r3, [r7, #12]
 800604a:	e008      	b.n	800605e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006050:	4b05      	ldr	r3, [pc, #20]	; (8006068 <xTaskPriorityInherit+0xc4>)
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006056:	429a      	cmp	r2, r3
 8006058:	d201      	bcs.n	800605e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800605a:	2301      	movs	r3, #1
 800605c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800605e:	68fb      	ldr	r3, [r7, #12]
	}
 8006060:	4618      	mov	r0, r3
 8006062:	3710      	adds	r7, #16
 8006064:	46bd      	mov	sp, r7
 8006066:	bd80      	pop	{r7, pc}
 8006068:	20000a88 	.word	0x20000a88
 800606c:	20000a8c 	.word	0x20000a8c
 8006070:	20000f64 	.word	0x20000f64

08006074 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006074:	b580      	push	{r7, lr}
 8006076:	b086      	sub	sp, #24
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006080:	2300      	movs	r3, #0
 8006082:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d056      	beq.n	8006138 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800608a:	4b2e      	ldr	r3, [pc, #184]	; (8006144 <xTaskPriorityDisinherit+0xd0>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	693a      	ldr	r2, [r7, #16]
 8006090:	429a      	cmp	r2, r3
 8006092:	d00a      	beq.n	80060aa <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006098:	f383 8811 	msr	BASEPRI, r3
 800609c:	f3bf 8f6f 	isb	sy
 80060a0:	f3bf 8f4f 	dsb	sy
 80060a4:	60fb      	str	r3, [r7, #12]
}
 80060a6:	bf00      	nop
 80060a8:	e7fe      	b.n	80060a8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d10a      	bne.n	80060c8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80060b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060b6:	f383 8811 	msr	BASEPRI, r3
 80060ba:	f3bf 8f6f 	isb	sy
 80060be:	f3bf 8f4f 	dsb	sy
 80060c2:	60bb      	str	r3, [r7, #8]
}
 80060c4:	bf00      	nop
 80060c6:	e7fe      	b.n	80060c6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80060c8:	693b      	ldr	r3, [r7, #16]
 80060ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060cc:	1e5a      	subs	r2, r3, #1
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060d6:	693b      	ldr	r3, [r7, #16]
 80060d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060da:	429a      	cmp	r2, r3
 80060dc:	d02c      	beq.n	8006138 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80060de:	693b      	ldr	r3, [r7, #16]
 80060e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d128      	bne.n	8006138 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80060e6:	693b      	ldr	r3, [r7, #16]
 80060e8:	3304      	adds	r3, #4
 80060ea:	4618      	mov	r0, r3
 80060ec:	f7fe f902 	bl	80042f4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060f8:	693b      	ldr	r3, [r7, #16]
 80060fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060fc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006100:	693b      	ldr	r3, [r7, #16]
 8006102:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006104:	693b      	ldr	r3, [r7, #16]
 8006106:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006108:	4b0f      	ldr	r3, [pc, #60]	; (8006148 <xTaskPriorityDisinherit+0xd4>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	429a      	cmp	r2, r3
 800610e:	d903      	bls.n	8006118 <xTaskPriorityDisinherit+0xa4>
 8006110:	693b      	ldr	r3, [r7, #16]
 8006112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006114:	4a0c      	ldr	r2, [pc, #48]	; (8006148 <xTaskPriorityDisinherit+0xd4>)
 8006116:	6013      	str	r3, [r2, #0]
 8006118:	693b      	ldr	r3, [r7, #16]
 800611a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800611c:	4613      	mov	r3, r2
 800611e:	009b      	lsls	r3, r3, #2
 8006120:	4413      	add	r3, r2
 8006122:	009b      	lsls	r3, r3, #2
 8006124:	4a09      	ldr	r2, [pc, #36]	; (800614c <xTaskPriorityDisinherit+0xd8>)
 8006126:	441a      	add	r2, r3
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	3304      	adds	r3, #4
 800612c:	4619      	mov	r1, r3
 800612e:	4610      	mov	r0, r2
 8006130:	f7fe f883 	bl	800423a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006134:	2301      	movs	r3, #1
 8006136:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006138:	697b      	ldr	r3, [r7, #20]
	}
 800613a:	4618      	mov	r0, r3
 800613c:	3718      	adds	r7, #24
 800613e:	46bd      	mov	sp, r7
 8006140:	bd80      	pop	{r7, pc}
 8006142:	bf00      	nop
 8006144:	20000a88 	.word	0x20000a88
 8006148:	20000f64 	.word	0x20000f64
 800614c:	20000a8c 	.word	0x20000a8c

08006150 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006150:	b580      	push	{r7, lr}
 8006152:	b088      	sub	sp, #32
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
 8006158:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800615e:	2301      	movs	r3, #1
 8006160:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d06a      	beq.n	800623e <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006168:	69bb      	ldr	r3, [r7, #24]
 800616a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800616c:	2b00      	cmp	r3, #0
 800616e:	d10a      	bne.n	8006186 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8006170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006174:	f383 8811 	msr	BASEPRI, r3
 8006178:	f3bf 8f6f 	isb	sy
 800617c:	f3bf 8f4f 	dsb	sy
 8006180:	60fb      	str	r3, [r7, #12]
}
 8006182:	bf00      	nop
 8006184:	e7fe      	b.n	8006184 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006186:	69bb      	ldr	r3, [r7, #24]
 8006188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800618a:	683a      	ldr	r2, [r7, #0]
 800618c:	429a      	cmp	r2, r3
 800618e:	d902      	bls.n	8006196 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	61fb      	str	r3, [r7, #28]
 8006194:	e002      	b.n	800619c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006196:	69bb      	ldr	r3, [r7, #24]
 8006198:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800619a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800619c:	69bb      	ldr	r3, [r7, #24]
 800619e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061a0:	69fa      	ldr	r2, [r7, #28]
 80061a2:	429a      	cmp	r2, r3
 80061a4:	d04b      	beq.n	800623e <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80061a6:	69bb      	ldr	r3, [r7, #24]
 80061a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061aa:	697a      	ldr	r2, [r7, #20]
 80061ac:	429a      	cmp	r2, r3
 80061ae:	d146      	bne.n	800623e <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80061b0:	4b25      	ldr	r3, [pc, #148]	; (8006248 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	69ba      	ldr	r2, [r7, #24]
 80061b6:	429a      	cmp	r2, r3
 80061b8:	d10a      	bne.n	80061d0 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80061ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061be:	f383 8811 	msr	BASEPRI, r3
 80061c2:	f3bf 8f6f 	isb	sy
 80061c6:	f3bf 8f4f 	dsb	sy
 80061ca:	60bb      	str	r3, [r7, #8]
}
 80061cc:	bf00      	nop
 80061ce:	e7fe      	b.n	80061ce <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80061d0:	69bb      	ldr	r3, [r7, #24]
 80061d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061d4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80061d6:	69bb      	ldr	r3, [r7, #24]
 80061d8:	69fa      	ldr	r2, [r7, #28]
 80061da:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80061dc:	69bb      	ldr	r3, [r7, #24]
 80061de:	699b      	ldr	r3, [r3, #24]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	db04      	blt.n	80061ee <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80061e4:	69fb      	ldr	r3, [r7, #28]
 80061e6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80061ea:	69bb      	ldr	r3, [r7, #24]
 80061ec:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80061ee:	69bb      	ldr	r3, [r7, #24]
 80061f0:	6959      	ldr	r1, [r3, #20]
 80061f2:	693a      	ldr	r2, [r7, #16]
 80061f4:	4613      	mov	r3, r2
 80061f6:	009b      	lsls	r3, r3, #2
 80061f8:	4413      	add	r3, r2
 80061fa:	009b      	lsls	r3, r3, #2
 80061fc:	4a13      	ldr	r2, [pc, #76]	; (800624c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80061fe:	4413      	add	r3, r2
 8006200:	4299      	cmp	r1, r3
 8006202:	d11c      	bne.n	800623e <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006204:	69bb      	ldr	r3, [r7, #24]
 8006206:	3304      	adds	r3, #4
 8006208:	4618      	mov	r0, r3
 800620a:	f7fe f873 	bl	80042f4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800620e:	69bb      	ldr	r3, [r7, #24]
 8006210:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006212:	4b0f      	ldr	r3, [pc, #60]	; (8006250 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	429a      	cmp	r2, r3
 8006218:	d903      	bls.n	8006222 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800621a:	69bb      	ldr	r3, [r7, #24]
 800621c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800621e:	4a0c      	ldr	r2, [pc, #48]	; (8006250 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8006220:	6013      	str	r3, [r2, #0]
 8006222:	69bb      	ldr	r3, [r7, #24]
 8006224:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006226:	4613      	mov	r3, r2
 8006228:	009b      	lsls	r3, r3, #2
 800622a:	4413      	add	r3, r2
 800622c:	009b      	lsls	r3, r3, #2
 800622e:	4a07      	ldr	r2, [pc, #28]	; (800624c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8006230:	441a      	add	r2, r3
 8006232:	69bb      	ldr	r3, [r7, #24]
 8006234:	3304      	adds	r3, #4
 8006236:	4619      	mov	r1, r3
 8006238:	4610      	mov	r0, r2
 800623a:	f7fd fffe 	bl	800423a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800623e:	bf00      	nop
 8006240:	3720      	adds	r7, #32
 8006242:	46bd      	mov	sp, r7
 8006244:	bd80      	pop	{r7, pc}
 8006246:	bf00      	nop
 8006248:	20000a88 	.word	0x20000a88
 800624c:	20000a8c 	.word	0x20000a8c
 8006250:	20000f64 	.word	0x20000f64

08006254 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8006254:	b480      	push	{r7}
 8006256:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006258:	4b07      	ldr	r3, [pc, #28]	; (8006278 <pvTaskIncrementMutexHeldCount+0x24>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d004      	beq.n	800626a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006260:	4b05      	ldr	r3, [pc, #20]	; (8006278 <pvTaskIncrementMutexHeldCount+0x24>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006266:	3201      	adds	r2, #1
 8006268:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800626a:	4b03      	ldr	r3, [pc, #12]	; (8006278 <pvTaskIncrementMutexHeldCount+0x24>)
 800626c:	681b      	ldr	r3, [r3, #0]
	}
 800626e:	4618      	mov	r0, r3
 8006270:	46bd      	mov	sp, r7
 8006272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006276:	4770      	bx	lr
 8006278:	20000a88 	.word	0x20000a88

0800627c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b084      	sub	sp, #16
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
 8006284:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006286:	4b21      	ldr	r3, [pc, #132]	; (800630c <prvAddCurrentTaskToDelayedList+0x90>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800628c:	4b20      	ldr	r3, [pc, #128]	; (8006310 <prvAddCurrentTaskToDelayedList+0x94>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	3304      	adds	r3, #4
 8006292:	4618      	mov	r0, r3
 8006294:	f7fe f82e 	bl	80042f4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800629e:	d10a      	bne.n	80062b6 <prvAddCurrentTaskToDelayedList+0x3a>
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d007      	beq.n	80062b6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80062a6:	4b1a      	ldr	r3, [pc, #104]	; (8006310 <prvAddCurrentTaskToDelayedList+0x94>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	3304      	adds	r3, #4
 80062ac:	4619      	mov	r1, r3
 80062ae:	4819      	ldr	r0, [pc, #100]	; (8006314 <prvAddCurrentTaskToDelayedList+0x98>)
 80062b0:	f7fd ffc3 	bl	800423a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80062b4:	e026      	b.n	8006304 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80062b6:	68fa      	ldr	r2, [r7, #12]
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	4413      	add	r3, r2
 80062bc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80062be:	4b14      	ldr	r3, [pc, #80]	; (8006310 <prvAddCurrentTaskToDelayedList+0x94>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	68ba      	ldr	r2, [r7, #8]
 80062c4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80062c6:	68ba      	ldr	r2, [r7, #8]
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	429a      	cmp	r2, r3
 80062cc:	d209      	bcs.n	80062e2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80062ce:	4b12      	ldr	r3, [pc, #72]	; (8006318 <prvAddCurrentTaskToDelayedList+0x9c>)
 80062d0:	681a      	ldr	r2, [r3, #0]
 80062d2:	4b0f      	ldr	r3, [pc, #60]	; (8006310 <prvAddCurrentTaskToDelayedList+0x94>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	3304      	adds	r3, #4
 80062d8:	4619      	mov	r1, r3
 80062da:	4610      	mov	r0, r2
 80062dc:	f7fd ffd1 	bl	8004282 <vListInsert>
}
 80062e0:	e010      	b.n	8006304 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80062e2:	4b0e      	ldr	r3, [pc, #56]	; (800631c <prvAddCurrentTaskToDelayedList+0xa0>)
 80062e4:	681a      	ldr	r2, [r3, #0]
 80062e6:	4b0a      	ldr	r3, [pc, #40]	; (8006310 <prvAddCurrentTaskToDelayedList+0x94>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	3304      	adds	r3, #4
 80062ec:	4619      	mov	r1, r3
 80062ee:	4610      	mov	r0, r2
 80062f0:	f7fd ffc7 	bl	8004282 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80062f4:	4b0a      	ldr	r3, [pc, #40]	; (8006320 <prvAddCurrentTaskToDelayedList+0xa4>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	68ba      	ldr	r2, [r7, #8]
 80062fa:	429a      	cmp	r2, r3
 80062fc:	d202      	bcs.n	8006304 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80062fe:	4a08      	ldr	r2, [pc, #32]	; (8006320 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	6013      	str	r3, [r2, #0]
}
 8006304:	bf00      	nop
 8006306:	3710      	adds	r7, #16
 8006308:	46bd      	mov	sp, r7
 800630a:	bd80      	pop	{r7, pc}
 800630c:	20000f60 	.word	0x20000f60
 8006310:	20000a88 	.word	0x20000a88
 8006314:	20000f48 	.word	0x20000f48
 8006318:	20000f18 	.word	0x20000f18
 800631c:	20000f14 	.word	0x20000f14
 8006320:	20000f7c 	.word	0x20000f7c

08006324 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b08a      	sub	sp, #40	; 0x28
 8006328:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800632a:	2300      	movs	r3, #0
 800632c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800632e:	f000 fb07 	bl	8006940 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006332:	4b1c      	ldr	r3, [pc, #112]	; (80063a4 <xTimerCreateTimerTask+0x80>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d021      	beq.n	800637e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800633a:	2300      	movs	r3, #0
 800633c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800633e:	2300      	movs	r3, #0
 8006340:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006342:	1d3a      	adds	r2, r7, #4
 8006344:	f107 0108 	add.w	r1, r7, #8
 8006348:	f107 030c 	add.w	r3, r7, #12
 800634c:	4618      	mov	r0, r3
 800634e:	f7fd ff2d 	bl	80041ac <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006352:	6879      	ldr	r1, [r7, #4]
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	68fa      	ldr	r2, [r7, #12]
 8006358:	9202      	str	r2, [sp, #8]
 800635a:	9301      	str	r3, [sp, #4]
 800635c:	2302      	movs	r3, #2
 800635e:	9300      	str	r3, [sp, #0]
 8006360:	2300      	movs	r3, #0
 8006362:	460a      	mov	r2, r1
 8006364:	4910      	ldr	r1, [pc, #64]	; (80063a8 <xTimerCreateTimerTask+0x84>)
 8006366:	4811      	ldr	r0, [pc, #68]	; (80063ac <xTimerCreateTimerTask+0x88>)
 8006368:	f7fe ffa6 	bl	80052b8 <xTaskCreateStatic>
 800636c:	4603      	mov	r3, r0
 800636e:	4a10      	ldr	r2, [pc, #64]	; (80063b0 <xTimerCreateTimerTask+0x8c>)
 8006370:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006372:	4b0f      	ldr	r3, [pc, #60]	; (80063b0 <xTimerCreateTimerTask+0x8c>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d001      	beq.n	800637e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800637a:	2301      	movs	r3, #1
 800637c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800637e:	697b      	ldr	r3, [r7, #20]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d10a      	bne.n	800639a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006388:	f383 8811 	msr	BASEPRI, r3
 800638c:	f3bf 8f6f 	isb	sy
 8006390:	f3bf 8f4f 	dsb	sy
 8006394:	613b      	str	r3, [r7, #16]
}
 8006396:	bf00      	nop
 8006398:	e7fe      	b.n	8006398 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800639a:	697b      	ldr	r3, [r7, #20]
}
 800639c:	4618      	mov	r0, r3
 800639e:	3718      	adds	r7, #24
 80063a0:	46bd      	mov	sp, r7
 80063a2:	bd80      	pop	{r7, pc}
 80063a4:	20000fb8 	.word	0x20000fb8
 80063a8:	0800bf8c 	.word	0x0800bf8c
 80063ac:	080064e9 	.word	0x080064e9
 80063b0:	20000fbc 	.word	0x20000fbc

080063b4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b08a      	sub	sp, #40	; 0x28
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	60f8      	str	r0, [r7, #12]
 80063bc:	60b9      	str	r1, [r7, #8]
 80063be:	607a      	str	r2, [r7, #4]
 80063c0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80063c2:	2300      	movs	r3, #0
 80063c4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d10a      	bne.n	80063e2 <xTimerGenericCommand+0x2e>
	__asm volatile
 80063cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063d0:	f383 8811 	msr	BASEPRI, r3
 80063d4:	f3bf 8f6f 	isb	sy
 80063d8:	f3bf 8f4f 	dsb	sy
 80063dc:	623b      	str	r3, [r7, #32]
}
 80063de:	bf00      	nop
 80063e0:	e7fe      	b.n	80063e0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80063e2:	4b1a      	ldr	r3, [pc, #104]	; (800644c <xTimerGenericCommand+0x98>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d02a      	beq.n	8006440 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	2b05      	cmp	r3, #5
 80063fa:	dc18      	bgt.n	800642e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80063fc:	f7ff fdb4 	bl	8005f68 <xTaskGetSchedulerState>
 8006400:	4603      	mov	r3, r0
 8006402:	2b02      	cmp	r3, #2
 8006404:	d109      	bne.n	800641a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006406:	4b11      	ldr	r3, [pc, #68]	; (800644c <xTimerGenericCommand+0x98>)
 8006408:	6818      	ldr	r0, [r3, #0]
 800640a:	f107 0110 	add.w	r1, r7, #16
 800640e:	2300      	movs	r3, #0
 8006410:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006412:	f7fe f9f7 	bl	8004804 <xQueueGenericSend>
 8006416:	6278      	str	r0, [r7, #36]	; 0x24
 8006418:	e012      	b.n	8006440 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800641a:	4b0c      	ldr	r3, [pc, #48]	; (800644c <xTimerGenericCommand+0x98>)
 800641c:	6818      	ldr	r0, [r3, #0]
 800641e:	f107 0110 	add.w	r1, r7, #16
 8006422:	2300      	movs	r3, #0
 8006424:	2200      	movs	r2, #0
 8006426:	f7fe f9ed 	bl	8004804 <xQueueGenericSend>
 800642a:	6278      	str	r0, [r7, #36]	; 0x24
 800642c:	e008      	b.n	8006440 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800642e:	4b07      	ldr	r3, [pc, #28]	; (800644c <xTimerGenericCommand+0x98>)
 8006430:	6818      	ldr	r0, [r3, #0]
 8006432:	f107 0110 	add.w	r1, r7, #16
 8006436:	2300      	movs	r3, #0
 8006438:	683a      	ldr	r2, [r7, #0]
 800643a:	f7fe fae1 	bl	8004a00 <xQueueGenericSendFromISR>
 800643e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006442:	4618      	mov	r0, r3
 8006444:	3728      	adds	r7, #40	; 0x28
 8006446:	46bd      	mov	sp, r7
 8006448:	bd80      	pop	{r7, pc}
 800644a:	bf00      	nop
 800644c:	20000fb8 	.word	0x20000fb8

08006450 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b088      	sub	sp, #32
 8006454:	af02      	add	r7, sp, #8
 8006456:	6078      	str	r0, [r7, #4]
 8006458:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800645a:	4b22      	ldr	r3, [pc, #136]	; (80064e4 <prvProcessExpiredTimer+0x94>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	68db      	ldr	r3, [r3, #12]
 8006460:	68db      	ldr	r3, [r3, #12]
 8006462:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	3304      	adds	r3, #4
 8006468:	4618      	mov	r0, r3
 800646a:	f7fd ff43 	bl	80042f4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800646e:	697b      	ldr	r3, [r7, #20]
 8006470:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006474:	f003 0304 	and.w	r3, r3, #4
 8006478:	2b00      	cmp	r3, #0
 800647a:	d022      	beq.n	80064c2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800647c:	697b      	ldr	r3, [r7, #20]
 800647e:	699a      	ldr	r2, [r3, #24]
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	18d1      	adds	r1, r2, r3
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	683a      	ldr	r2, [r7, #0]
 8006488:	6978      	ldr	r0, [r7, #20]
 800648a:	f000 f8d1 	bl	8006630 <prvInsertTimerInActiveList>
 800648e:	4603      	mov	r3, r0
 8006490:	2b00      	cmp	r3, #0
 8006492:	d01f      	beq.n	80064d4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006494:	2300      	movs	r3, #0
 8006496:	9300      	str	r3, [sp, #0]
 8006498:	2300      	movs	r3, #0
 800649a:	687a      	ldr	r2, [r7, #4]
 800649c:	2100      	movs	r1, #0
 800649e:	6978      	ldr	r0, [r7, #20]
 80064a0:	f7ff ff88 	bl	80063b4 <xTimerGenericCommand>
 80064a4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80064a6:	693b      	ldr	r3, [r7, #16]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d113      	bne.n	80064d4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80064ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064b0:	f383 8811 	msr	BASEPRI, r3
 80064b4:	f3bf 8f6f 	isb	sy
 80064b8:	f3bf 8f4f 	dsb	sy
 80064bc:	60fb      	str	r3, [r7, #12]
}
 80064be:	bf00      	nop
 80064c0:	e7fe      	b.n	80064c0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80064c8:	f023 0301 	bic.w	r3, r3, #1
 80064cc:	b2da      	uxtb	r2, r3
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80064d4:	697b      	ldr	r3, [r7, #20]
 80064d6:	6a1b      	ldr	r3, [r3, #32]
 80064d8:	6978      	ldr	r0, [r7, #20]
 80064da:	4798      	blx	r3
}
 80064dc:	bf00      	nop
 80064de:	3718      	adds	r7, #24
 80064e0:	46bd      	mov	sp, r7
 80064e2:	bd80      	pop	{r7, pc}
 80064e4:	20000fb0 	.word	0x20000fb0

080064e8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b084      	sub	sp, #16
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80064f0:	f107 0308 	add.w	r3, r7, #8
 80064f4:	4618      	mov	r0, r3
 80064f6:	f000 f857 	bl	80065a8 <prvGetNextExpireTime>
 80064fa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	4619      	mov	r1, r3
 8006500:	68f8      	ldr	r0, [r7, #12]
 8006502:	f000 f803 	bl	800650c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006506:	f000 f8d5 	bl	80066b4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800650a:	e7f1      	b.n	80064f0 <prvTimerTask+0x8>

0800650c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b084      	sub	sp, #16
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
 8006514:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006516:	f7ff f92b 	bl	8005770 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800651a:	f107 0308 	add.w	r3, r7, #8
 800651e:	4618      	mov	r0, r3
 8006520:	f000 f866 	bl	80065f0 <prvSampleTimeNow>
 8006524:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d130      	bne.n	800658e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d10a      	bne.n	8006548 <prvProcessTimerOrBlockTask+0x3c>
 8006532:	687a      	ldr	r2, [r7, #4]
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	429a      	cmp	r2, r3
 8006538:	d806      	bhi.n	8006548 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800653a:	f7ff f927 	bl	800578c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800653e:	68f9      	ldr	r1, [r7, #12]
 8006540:	6878      	ldr	r0, [r7, #4]
 8006542:	f7ff ff85 	bl	8006450 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006546:	e024      	b.n	8006592 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d008      	beq.n	8006560 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800654e:	4b13      	ldr	r3, [pc, #76]	; (800659c <prvProcessTimerOrBlockTask+0x90>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d101      	bne.n	800655c <prvProcessTimerOrBlockTask+0x50>
 8006558:	2301      	movs	r3, #1
 800655a:	e000      	b.n	800655e <prvProcessTimerOrBlockTask+0x52>
 800655c:	2300      	movs	r3, #0
 800655e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006560:	4b0f      	ldr	r3, [pc, #60]	; (80065a0 <prvProcessTimerOrBlockTask+0x94>)
 8006562:	6818      	ldr	r0, [r3, #0]
 8006564:	687a      	ldr	r2, [r7, #4]
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	1ad3      	subs	r3, r2, r3
 800656a:	683a      	ldr	r2, [r7, #0]
 800656c:	4619      	mov	r1, r3
 800656e:	f7fe fe6f 	bl	8005250 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006572:	f7ff f90b 	bl	800578c <xTaskResumeAll>
 8006576:	4603      	mov	r3, r0
 8006578:	2b00      	cmp	r3, #0
 800657a:	d10a      	bne.n	8006592 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800657c:	4b09      	ldr	r3, [pc, #36]	; (80065a4 <prvProcessTimerOrBlockTask+0x98>)
 800657e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006582:	601a      	str	r2, [r3, #0]
 8006584:	f3bf 8f4f 	dsb	sy
 8006588:	f3bf 8f6f 	isb	sy
}
 800658c:	e001      	b.n	8006592 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800658e:	f7ff f8fd 	bl	800578c <xTaskResumeAll>
}
 8006592:	bf00      	nop
 8006594:	3710      	adds	r7, #16
 8006596:	46bd      	mov	sp, r7
 8006598:	bd80      	pop	{r7, pc}
 800659a:	bf00      	nop
 800659c:	20000fb4 	.word	0x20000fb4
 80065a0:	20000fb8 	.word	0x20000fb8
 80065a4:	e000ed04 	.word	0xe000ed04

080065a8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80065a8:	b480      	push	{r7}
 80065aa:	b085      	sub	sp, #20
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80065b0:	4b0e      	ldr	r3, [pc, #56]	; (80065ec <prvGetNextExpireTime+0x44>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d101      	bne.n	80065be <prvGetNextExpireTime+0x16>
 80065ba:	2201      	movs	r2, #1
 80065bc:	e000      	b.n	80065c0 <prvGetNextExpireTime+0x18>
 80065be:	2200      	movs	r2, #0
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d105      	bne.n	80065d8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80065cc:	4b07      	ldr	r3, [pc, #28]	; (80065ec <prvGetNextExpireTime+0x44>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	68db      	ldr	r3, [r3, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	60fb      	str	r3, [r7, #12]
 80065d6:	e001      	b.n	80065dc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80065d8:	2300      	movs	r3, #0
 80065da:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80065dc:	68fb      	ldr	r3, [r7, #12]
}
 80065de:	4618      	mov	r0, r3
 80065e0:	3714      	adds	r7, #20
 80065e2:	46bd      	mov	sp, r7
 80065e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e8:	4770      	bx	lr
 80065ea:	bf00      	nop
 80065ec:	20000fb0 	.word	0x20000fb0

080065f0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b084      	sub	sp, #16
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80065f8:	f7ff f966 	bl	80058c8 <xTaskGetTickCount>
 80065fc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80065fe:	4b0b      	ldr	r3, [pc, #44]	; (800662c <prvSampleTimeNow+0x3c>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	68fa      	ldr	r2, [r7, #12]
 8006604:	429a      	cmp	r2, r3
 8006606:	d205      	bcs.n	8006614 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006608:	f000 f936 	bl	8006878 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2201      	movs	r2, #1
 8006610:	601a      	str	r2, [r3, #0]
 8006612:	e002      	b.n	800661a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2200      	movs	r2, #0
 8006618:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800661a:	4a04      	ldr	r2, [pc, #16]	; (800662c <prvSampleTimeNow+0x3c>)
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006620:	68fb      	ldr	r3, [r7, #12]
}
 8006622:	4618      	mov	r0, r3
 8006624:	3710      	adds	r7, #16
 8006626:	46bd      	mov	sp, r7
 8006628:	bd80      	pop	{r7, pc}
 800662a:	bf00      	nop
 800662c:	20000fc0 	.word	0x20000fc0

08006630 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b086      	sub	sp, #24
 8006634:	af00      	add	r7, sp, #0
 8006636:	60f8      	str	r0, [r7, #12]
 8006638:	60b9      	str	r1, [r7, #8]
 800663a:	607a      	str	r2, [r7, #4]
 800663c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800663e:	2300      	movs	r3, #0
 8006640:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	68ba      	ldr	r2, [r7, #8]
 8006646:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	68fa      	ldr	r2, [r7, #12]
 800664c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800664e:	68ba      	ldr	r2, [r7, #8]
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	429a      	cmp	r2, r3
 8006654:	d812      	bhi.n	800667c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006656:	687a      	ldr	r2, [r7, #4]
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	1ad2      	subs	r2, r2, r3
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	699b      	ldr	r3, [r3, #24]
 8006660:	429a      	cmp	r2, r3
 8006662:	d302      	bcc.n	800666a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006664:	2301      	movs	r3, #1
 8006666:	617b      	str	r3, [r7, #20]
 8006668:	e01b      	b.n	80066a2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800666a:	4b10      	ldr	r3, [pc, #64]	; (80066ac <prvInsertTimerInActiveList+0x7c>)
 800666c:	681a      	ldr	r2, [r3, #0]
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	3304      	adds	r3, #4
 8006672:	4619      	mov	r1, r3
 8006674:	4610      	mov	r0, r2
 8006676:	f7fd fe04 	bl	8004282 <vListInsert>
 800667a:	e012      	b.n	80066a2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800667c:	687a      	ldr	r2, [r7, #4]
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	429a      	cmp	r2, r3
 8006682:	d206      	bcs.n	8006692 <prvInsertTimerInActiveList+0x62>
 8006684:	68ba      	ldr	r2, [r7, #8]
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	429a      	cmp	r2, r3
 800668a:	d302      	bcc.n	8006692 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800668c:	2301      	movs	r3, #1
 800668e:	617b      	str	r3, [r7, #20]
 8006690:	e007      	b.n	80066a2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006692:	4b07      	ldr	r3, [pc, #28]	; (80066b0 <prvInsertTimerInActiveList+0x80>)
 8006694:	681a      	ldr	r2, [r3, #0]
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	3304      	adds	r3, #4
 800669a:	4619      	mov	r1, r3
 800669c:	4610      	mov	r0, r2
 800669e:	f7fd fdf0 	bl	8004282 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80066a2:	697b      	ldr	r3, [r7, #20]
}
 80066a4:	4618      	mov	r0, r3
 80066a6:	3718      	adds	r7, #24
 80066a8:	46bd      	mov	sp, r7
 80066aa:	bd80      	pop	{r7, pc}
 80066ac:	20000fb4 	.word	0x20000fb4
 80066b0:	20000fb0 	.word	0x20000fb0

080066b4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b08e      	sub	sp, #56	; 0x38
 80066b8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80066ba:	e0ca      	b.n	8006852 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	da18      	bge.n	80066f4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80066c2:	1d3b      	adds	r3, r7, #4
 80066c4:	3304      	adds	r3, #4
 80066c6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80066c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d10a      	bne.n	80066e4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80066ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066d2:	f383 8811 	msr	BASEPRI, r3
 80066d6:	f3bf 8f6f 	isb	sy
 80066da:	f3bf 8f4f 	dsb	sy
 80066de:	61fb      	str	r3, [r7, #28]
}
 80066e0:	bf00      	nop
 80066e2:	e7fe      	b.n	80066e2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80066e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80066ea:	6850      	ldr	r0, [r2, #4]
 80066ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80066ee:	6892      	ldr	r2, [r2, #8]
 80066f0:	4611      	mov	r1, r2
 80066f2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	f2c0 80aa 	blt.w	8006850 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006702:	695b      	ldr	r3, [r3, #20]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d004      	beq.n	8006712 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800670a:	3304      	adds	r3, #4
 800670c:	4618      	mov	r0, r3
 800670e:	f7fd fdf1 	bl	80042f4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006712:	463b      	mov	r3, r7
 8006714:	4618      	mov	r0, r3
 8006716:	f7ff ff6b 	bl	80065f0 <prvSampleTimeNow>
 800671a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2b09      	cmp	r3, #9
 8006720:	f200 8097 	bhi.w	8006852 <prvProcessReceivedCommands+0x19e>
 8006724:	a201      	add	r2, pc, #4	; (adr r2, 800672c <prvProcessReceivedCommands+0x78>)
 8006726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800672a:	bf00      	nop
 800672c:	08006755 	.word	0x08006755
 8006730:	08006755 	.word	0x08006755
 8006734:	08006755 	.word	0x08006755
 8006738:	080067c9 	.word	0x080067c9
 800673c:	080067dd 	.word	0x080067dd
 8006740:	08006827 	.word	0x08006827
 8006744:	08006755 	.word	0x08006755
 8006748:	08006755 	.word	0x08006755
 800674c:	080067c9 	.word	0x080067c9
 8006750:	080067dd 	.word	0x080067dd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006756:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800675a:	f043 0301 	orr.w	r3, r3, #1
 800675e:	b2da      	uxtb	r2, r3
 8006760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006762:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006766:	68ba      	ldr	r2, [r7, #8]
 8006768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800676a:	699b      	ldr	r3, [r3, #24]
 800676c:	18d1      	adds	r1, r2, r3
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006772:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006774:	f7ff ff5c 	bl	8006630 <prvInsertTimerInActiveList>
 8006778:	4603      	mov	r3, r0
 800677a:	2b00      	cmp	r3, #0
 800677c:	d069      	beq.n	8006852 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800677e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006780:	6a1b      	ldr	r3, [r3, #32]
 8006782:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006784:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006788:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800678c:	f003 0304 	and.w	r3, r3, #4
 8006790:	2b00      	cmp	r3, #0
 8006792:	d05e      	beq.n	8006852 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006794:	68ba      	ldr	r2, [r7, #8]
 8006796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006798:	699b      	ldr	r3, [r3, #24]
 800679a:	441a      	add	r2, r3
 800679c:	2300      	movs	r3, #0
 800679e:	9300      	str	r3, [sp, #0]
 80067a0:	2300      	movs	r3, #0
 80067a2:	2100      	movs	r1, #0
 80067a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80067a6:	f7ff fe05 	bl	80063b4 <xTimerGenericCommand>
 80067aa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80067ac:	6a3b      	ldr	r3, [r7, #32]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d14f      	bne.n	8006852 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80067b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067b6:	f383 8811 	msr	BASEPRI, r3
 80067ba:	f3bf 8f6f 	isb	sy
 80067be:	f3bf 8f4f 	dsb	sy
 80067c2:	61bb      	str	r3, [r7, #24]
}
 80067c4:	bf00      	nop
 80067c6:	e7fe      	b.n	80067c6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80067c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80067ce:	f023 0301 	bic.w	r3, r3, #1
 80067d2:	b2da      	uxtb	r2, r3
 80067d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80067da:	e03a      	b.n	8006852 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80067dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80067e2:	f043 0301 	orr.w	r3, r3, #1
 80067e6:	b2da      	uxtb	r2, r3
 80067e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80067ee:	68ba      	ldr	r2, [r7, #8]
 80067f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067f2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80067f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067f6:	699b      	ldr	r3, [r3, #24]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d10a      	bne.n	8006812 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80067fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006800:	f383 8811 	msr	BASEPRI, r3
 8006804:	f3bf 8f6f 	isb	sy
 8006808:	f3bf 8f4f 	dsb	sy
 800680c:	617b      	str	r3, [r7, #20]
}
 800680e:	bf00      	nop
 8006810:	e7fe      	b.n	8006810 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006814:	699a      	ldr	r2, [r3, #24]
 8006816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006818:	18d1      	adds	r1, r2, r3
 800681a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800681c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800681e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006820:	f7ff ff06 	bl	8006630 <prvInsertTimerInActiveList>
					break;
 8006824:	e015      	b.n	8006852 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006828:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800682c:	f003 0302 	and.w	r3, r3, #2
 8006830:	2b00      	cmp	r3, #0
 8006832:	d103      	bne.n	800683c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006834:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006836:	f000 fbdb 	bl	8006ff0 <vPortFree>
 800683a:	e00a      	b.n	8006852 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800683c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800683e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006842:	f023 0301 	bic.w	r3, r3, #1
 8006846:	b2da      	uxtb	r2, r3
 8006848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800684a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800684e:	e000      	b.n	8006852 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006850:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006852:	4b08      	ldr	r3, [pc, #32]	; (8006874 <prvProcessReceivedCommands+0x1c0>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	1d39      	adds	r1, r7, #4
 8006858:	2200      	movs	r2, #0
 800685a:	4618      	mov	r0, r3
 800685c:	f7fe f96c 	bl	8004b38 <xQueueReceive>
 8006860:	4603      	mov	r3, r0
 8006862:	2b00      	cmp	r3, #0
 8006864:	f47f af2a 	bne.w	80066bc <prvProcessReceivedCommands+0x8>
	}
}
 8006868:	bf00      	nop
 800686a:	bf00      	nop
 800686c:	3730      	adds	r7, #48	; 0x30
 800686e:	46bd      	mov	sp, r7
 8006870:	bd80      	pop	{r7, pc}
 8006872:	bf00      	nop
 8006874:	20000fb8 	.word	0x20000fb8

08006878 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b088      	sub	sp, #32
 800687c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800687e:	e048      	b.n	8006912 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006880:	4b2d      	ldr	r3, [pc, #180]	; (8006938 <prvSwitchTimerLists+0xc0>)
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	68db      	ldr	r3, [r3, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800688a:	4b2b      	ldr	r3, [pc, #172]	; (8006938 <prvSwitchTimerLists+0xc0>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	68db      	ldr	r3, [r3, #12]
 8006890:	68db      	ldr	r3, [r3, #12]
 8006892:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	3304      	adds	r3, #4
 8006898:	4618      	mov	r0, r3
 800689a:	f7fd fd2b 	bl	80042f4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	6a1b      	ldr	r3, [r3, #32]
 80068a2:	68f8      	ldr	r0, [r7, #12]
 80068a4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80068ac:	f003 0304 	and.w	r3, r3, #4
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d02e      	beq.n	8006912 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	699b      	ldr	r3, [r3, #24]
 80068b8:	693a      	ldr	r2, [r7, #16]
 80068ba:	4413      	add	r3, r2
 80068bc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80068be:	68ba      	ldr	r2, [r7, #8]
 80068c0:	693b      	ldr	r3, [r7, #16]
 80068c2:	429a      	cmp	r2, r3
 80068c4:	d90e      	bls.n	80068e4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	68ba      	ldr	r2, [r7, #8]
 80068ca:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	68fa      	ldr	r2, [r7, #12]
 80068d0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80068d2:	4b19      	ldr	r3, [pc, #100]	; (8006938 <prvSwitchTimerLists+0xc0>)
 80068d4:	681a      	ldr	r2, [r3, #0]
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	3304      	adds	r3, #4
 80068da:	4619      	mov	r1, r3
 80068dc:	4610      	mov	r0, r2
 80068de:	f7fd fcd0 	bl	8004282 <vListInsert>
 80068e2:	e016      	b.n	8006912 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80068e4:	2300      	movs	r3, #0
 80068e6:	9300      	str	r3, [sp, #0]
 80068e8:	2300      	movs	r3, #0
 80068ea:	693a      	ldr	r2, [r7, #16]
 80068ec:	2100      	movs	r1, #0
 80068ee:	68f8      	ldr	r0, [r7, #12]
 80068f0:	f7ff fd60 	bl	80063b4 <xTimerGenericCommand>
 80068f4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d10a      	bne.n	8006912 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80068fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006900:	f383 8811 	msr	BASEPRI, r3
 8006904:	f3bf 8f6f 	isb	sy
 8006908:	f3bf 8f4f 	dsb	sy
 800690c:	603b      	str	r3, [r7, #0]
}
 800690e:	bf00      	nop
 8006910:	e7fe      	b.n	8006910 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006912:	4b09      	ldr	r3, [pc, #36]	; (8006938 <prvSwitchTimerLists+0xc0>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d1b1      	bne.n	8006880 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800691c:	4b06      	ldr	r3, [pc, #24]	; (8006938 <prvSwitchTimerLists+0xc0>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006922:	4b06      	ldr	r3, [pc, #24]	; (800693c <prvSwitchTimerLists+0xc4>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4a04      	ldr	r2, [pc, #16]	; (8006938 <prvSwitchTimerLists+0xc0>)
 8006928:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800692a:	4a04      	ldr	r2, [pc, #16]	; (800693c <prvSwitchTimerLists+0xc4>)
 800692c:	697b      	ldr	r3, [r7, #20]
 800692e:	6013      	str	r3, [r2, #0]
}
 8006930:	bf00      	nop
 8006932:	3718      	adds	r7, #24
 8006934:	46bd      	mov	sp, r7
 8006936:	bd80      	pop	{r7, pc}
 8006938:	20000fb0 	.word	0x20000fb0
 800693c:	20000fb4 	.word	0x20000fb4

08006940 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b082      	sub	sp, #8
 8006944:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006946:	f000 f965 	bl	8006c14 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800694a:	4b15      	ldr	r3, [pc, #84]	; (80069a0 <prvCheckForValidListAndQueue+0x60>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d120      	bne.n	8006994 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006952:	4814      	ldr	r0, [pc, #80]	; (80069a4 <prvCheckForValidListAndQueue+0x64>)
 8006954:	f7fd fc44 	bl	80041e0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006958:	4813      	ldr	r0, [pc, #76]	; (80069a8 <prvCheckForValidListAndQueue+0x68>)
 800695a:	f7fd fc41 	bl	80041e0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800695e:	4b13      	ldr	r3, [pc, #76]	; (80069ac <prvCheckForValidListAndQueue+0x6c>)
 8006960:	4a10      	ldr	r2, [pc, #64]	; (80069a4 <prvCheckForValidListAndQueue+0x64>)
 8006962:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006964:	4b12      	ldr	r3, [pc, #72]	; (80069b0 <prvCheckForValidListAndQueue+0x70>)
 8006966:	4a10      	ldr	r2, [pc, #64]	; (80069a8 <prvCheckForValidListAndQueue+0x68>)
 8006968:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800696a:	2300      	movs	r3, #0
 800696c:	9300      	str	r3, [sp, #0]
 800696e:	4b11      	ldr	r3, [pc, #68]	; (80069b4 <prvCheckForValidListAndQueue+0x74>)
 8006970:	4a11      	ldr	r2, [pc, #68]	; (80069b8 <prvCheckForValidListAndQueue+0x78>)
 8006972:	2110      	movs	r1, #16
 8006974:	200a      	movs	r0, #10
 8006976:	f7fd fd4f 	bl	8004418 <xQueueGenericCreateStatic>
 800697a:	4603      	mov	r3, r0
 800697c:	4a08      	ldr	r2, [pc, #32]	; (80069a0 <prvCheckForValidListAndQueue+0x60>)
 800697e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006980:	4b07      	ldr	r3, [pc, #28]	; (80069a0 <prvCheckForValidListAndQueue+0x60>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d005      	beq.n	8006994 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006988:	4b05      	ldr	r3, [pc, #20]	; (80069a0 <prvCheckForValidListAndQueue+0x60>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	490b      	ldr	r1, [pc, #44]	; (80069bc <prvCheckForValidListAndQueue+0x7c>)
 800698e:	4618      	mov	r0, r3
 8006990:	f7fe fc0a 	bl	80051a8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006994:	f000 f96e 	bl	8006c74 <vPortExitCritical>
}
 8006998:	bf00      	nop
 800699a:	46bd      	mov	sp, r7
 800699c:	bd80      	pop	{r7, pc}
 800699e:	bf00      	nop
 80069a0:	20000fb8 	.word	0x20000fb8
 80069a4:	20000f88 	.word	0x20000f88
 80069a8:	20000f9c 	.word	0x20000f9c
 80069ac:	20000fb0 	.word	0x20000fb0
 80069b0:	20000fb4 	.word	0x20000fb4
 80069b4:	20001064 	.word	0x20001064
 80069b8:	20000fc4 	.word	0x20000fc4
 80069bc:	0800bf94 	.word	0x0800bf94

080069c0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80069c0:	b480      	push	{r7}
 80069c2:	b085      	sub	sp, #20
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	60f8      	str	r0, [r7, #12]
 80069c8:	60b9      	str	r1, [r7, #8]
 80069ca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	3b04      	subs	r3, #4
 80069d0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80069d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	3b04      	subs	r3, #4
 80069de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	f023 0201 	bic.w	r2, r3, #1
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	3b04      	subs	r3, #4
 80069ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80069f0:	4a0c      	ldr	r2, [pc, #48]	; (8006a24 <pxPortInitialiseStack+0x64>)
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	3b14      	subs	r3, #20
 80069fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80069fc:	687a      	ldr	r2, [r7, #4]
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	3b04      	subs	r3, #4
 8006a06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	f06f 0202 	mvn.w	r2, #2
 8006a0e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	3b20      	subs	r3, #32
 8006a14:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006a16:	68fb      	ldr	r3, [r7, #12]
}
 8006a18:	4618      	mov	r0, r3
 8006a1a:	3714      	adds	r7, #20
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a22:	4770      	bx	lr
 8006a24:	08006a29 	.word	0x08006a29

08006a28 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006a28:	b480      	push	{r7}
 8006a2a:	b085      	sub	sp, #20
 8006a2c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006a2e:	2300      	movs	r3, #0
 8006a30:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006a32:	4b12      	ldr	r3, [pc, #72]	; (8006a7c <prvTaskExitError+0x54>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a3a:	d00a      	beq.n	8006a52 <prvTaskExitError+0x2a>
	__asm volatile
 8006a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a40:	f383 8811 	msr	BASEPRI, r3
 8006a44:	f3bf 8f6f 	isb	sy
 8006a48:	f3bf 8f4f 	dsb	sy
 8006a4c:	60fb      	str	r3, [r7, #12]
}
 8006a4e:	bf00      	nop
 8006a50:	e7fe      	b.n	8006a50 <prvTaskExitError+0x28>
	__asm volatile
 8006a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a56:	f383 8811 	msr	BASEPRI, r3
 8006a5a:	f3bf 8f6f 	isb	sy
 8006a5e:	f3bf 8f4f 	dsb	sy
 8006a62:	60bb      	str	r3, [r7, #8]
}
 8006a64:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006a66:	bf00      	nop
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d0fc      	beq.n	8006a68 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006a6e:	bf00      	nop
 8006a70:	bf00      	nop
 8006a72:	3714      	adds	r7, #20
 8006a74:	46bd      	mov	sp, r7
 8006a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7a:	4770      	bx	lr
 8006a7c:	2000000c 	.word	0x2000000c

08006a80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006a80:	4b07      	ldr	r3, [pc, #28]	; (8006aa0 <pxCurrentTCBConst2>)
 8006a82:	6819      	ldr	r1, [r3, #0]
 8006a84:	6808      	ldr	r0, [r1, #0]
 8006a86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a8a:	f380 8809 	msr	PSP, r0
 8006a8e:	f3bf 8f6f 	isb	sy
 8006a92:	f04f 0000 	mov.w	r0, #0
 8006a96:	f380 8811 	msr	BASEPRI, r0
 8006a9a:	4770      	bx	lr
 8006a9c:	f3af 8000 	nop.w

08006aa0 <pxCurrentTCBConst2>:
 8006aa0:	20000a88 	.word	0x20000a88
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006aa4:	bf00      	nop
 8006aa6:	bf00      	nop

08006aa8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006aa8:	4808      	ldr	r0, [pc, #32]	; (8006acc <prvPortStartFirstTask+0x24>)
 8006aaa:	6800      	ldr	r0, [r0, #0]
 8006aac:	6800      	ldr	r0, [r0, #0]
 8006aae:	f380 8808 	msr	MSP, r0
 8006ab2:	f04f 0000 	mov.w	r0, #0
 8006ab6:	f380 8814 	msr	CONTROL, r0
 8006aba:	b662      	cpsie	i
 8006abc:	b661      	cpsie	f
 8006abe:	f3bf 8f4f 	dsb	sy
 8006ac2:	f3bf 8f6f 	isb	sy
 8006ac6:	df00      	svc	0
 8006ac8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006aca:	bf00      	nop
 8006acc:	e000ed08 	.word	0xe000ed08

08006ad0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b086      	sub	sp, #24
 8006ad4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006ad6:	4b46      	ldr	r3, [pc, #280]	; (8006bf0 <xPortStartScheduler+0x120>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	4a46      	ldr	r2, [pc, #280]	; (8006bf4 <xPortStartScheduler+0x124>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d10a      	bne.n	8006af6 <xPortStartScheduler+0x26>
	__asm volatile
 8006ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ae4:	f383 8811 	msr	BASEPRI, r3
 8006ae8:	f3bf 8f6f 	isb	sy
 8006aec:	f3bf 8f4f 	dsb	sy
 8006af0:	613b      	str	r3, [r7, #16]
}
 8006af2:	bf00      	nop
 8006af4:	e7fe      	b.n	8006af4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006af6:	4b3e      	ldr	r3, [pc, #248]	; (8006bf0 <xPortStartScheduler+0x120>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4a3f      	ldr	r2, [pc, #252]	; (8006bf8 <xPortStartScheduler+0x128>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d10a      	bne.n	8006b16 <xPortStartScheduler+0x46>
	__asm volatile
 8006b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b04:	f383 8811 	msr	BASEPRI, r3
 8006b08:	f3bf 8f6f 	isb	sy
 8006b0c:	f3bf 8f4f 	dsb	sy
 8006b10:	60fb      	str	r3, [r7, #12]
}
 8006b12:	bf00      	nop
 8006b14:	e7fe      	b.n	8006b14 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006b16:	4b39      	ldr	r3, [pc, #228]	; (8006bfc <xPortStartScheduler+0x12c>)
 8006b18:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006b1a:	697b      	ldr	r3, [r7, #20]
 8006b1c:	781b      	ldrb	r3, [r3, #0]
 8006b1e:	b2db      	uxtb	r3, r3
 8006b20:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006b22:	697b      	ldr	r3, [r7, #20]
 8006b24:	22ff      	movs	r2, #255	; 0xff
 8006b26:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006b28:	697b      	ldr	r3, [r7, #20]
 8006b2a:	781b      	ldrb	r3, [r3, #0]
 8006b2c:	b2db      	uxtb	r3, r3
 8006b2e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006b30:	78fb      	ldrb	r3, [r7, #3]
 8006b32:	b2db      	uxtb	r3, r3
 8006b34:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006b38:	b2da      	uxtb	r2, r3
 8006b3a:	4b31      	ldr	r3, [pc, #196]	; (8006c00 <xPortStartScheduler+0x130>)
 8006b3c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006b3e:	4b31      	ldr	r3, [pc, #196]	; (8006c04 <xPortStartScheduler+0x134>)
 8006b40:	2207      	movs	r2, #7
 8006b42:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006b44:	e009      	b.n	8006b5a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006b46:	4b2f      	ldr	r3, [pc, #188]	; (8006c04 <xPortStartScheduler+0x134>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	3b01      	subs	r3, #1
 8006b4c:	4a2d      	ldr	r2, [pc, #180]	; (8006c04 <xPortStartScheduler+0x134>)
 8006b4e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006b50:	78fb      	ldrb	r3, [r7, #3]
 8006b52:	b2db      	uxtb	r3, r3
 8006b54:	005b      	lsls	r3, r3, #1
 8006b56:	b2db      	uxtb	r3, r3
 8006b58:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006b5a:	78fb      	ldrb	r3, [r7, #3]
 8006b5c:	b2db      	uxtb	r3, r3
 8006b5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b62:	2b80      	cmp	r3, #128	; 0x80
 8006b64:	d0ef      	beq.n	8006b46 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006b66:	4b27      	ldr	r3, [pc, #156]	; (8006c04 <xPortStartScheduler+0x134>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f1c3 0307 	rsb	r3, r3, #7
 8006b6e:	2b04      	cmp	r3, #4
 8006b70:	d00a      	beq.n	8006b88 <xPortStartScheduler+0xb8>
	__asm volatile
 8006b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b76:	f383 8811 	msr	BASEPRI, r3
 8006b7a:	f3bf 8f6f 	isb	sy
 8006b7e:	f3bf 8f4f 	dsb	sy
 8006b82:	60bb      	str	r3, [r7, #8]
}
 8006b84:	bf00      	nop
 8006b86:	e7fe      	b.n	8006b86 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006b88:	4b1e      	ldr	r3, [pc, #120]	; (8006c04 <xPortStartScheduler+0x134>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	021b      	lsls	r3, r3, #8
 8006b8e:	4a1d      	ldr	r2, [pc, #116]	; (8006c04 <xPortStartScheduler+0x134>)
 8006b90:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006b92:	4b1c      	ldr	r3, [pc, #112]	; (8006c04 <xPortStartScheduler+0x134>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006b9a:	4a1a      	ldr	r2, [pc, #104]	; (8006c04 <xPortStartScheduler+0x134>)
 8006b9c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	b2da      	uxtb	r2, r3
 8006ba2:	697b      	ldr	r3, [r7, #20]
 8006ba4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006ba6:	4b18      	ldr	r3, [pc, #96]	; (8006c08 <xPortStartScheduler+0x138>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	4a17      	ldr	r2, [pc, #92]	; (8006c08 <xPortStartScheduler+0x138>)
 8006bac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006bb0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006bb2:	4b15      	ldr	r3, [pc, #84]	; (8006c08 <xPortStartScheduler+0x138>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	4a14      	ldr	r2, [pc, #80]	; (8006c08 <xPortStartScheduler+0x138>)
 8006bb8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006bbc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006bbe:	f000 f8dd 	bl	8006d7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006bc2:	4b12      	ldr	r3, [pc, #72]	; (8006c0c <xPortStartScheduler+0x13c>)
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006bc8:	f000 f8fc 	bl	8006dc4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006bcc:	4b10      	ldr	r3, [pc, #64]	; (8006c10 <xPortStartScheduler+0x140>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4a0f      	ldr	r2, [pc, #60]	; (8006c10 <xPortStartScheduler+0x140>)
 8006bd2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006bd6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006bd8:	f7ff ff66 	bl	8006aa8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006bdc:	f7fe ff3e 	bl	8005a5c <vTaskSwitchContext>
	prvTaskExitError();
 8006be0:	f7ff ff22 	bl	8006a28 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006be4:	2300      	movs	r3, #0
}
 8006be6:	4618      	mov	r0, r3
 8006be8:	3718      	adds	r7, #24
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bd80      	pop	{r7, pc}
 8006bee:	bf00      	nop
 8006bf0:	e000ed00 	.word	0xe000ed00
 8006bf4:	410fc271 	.word	0x410fc271
 8006bf8:	410fc270 	.word	0x410fc270
 8006bfc:	e000e400 	.word	0xe000e400
 8006c00:	200010b4 	.word	0x200010b4
 8006c04:	200010b8 	.word	0x200010b8
 8006c08:	e000ed20 	.word	0xe000ed20
 8006c0c:	2000000c 	.word	0x2000000c
 8006c10:	e000ef34 	.word	0xe000ef34

08006c14 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006c14:	b480      	push	{r7}
 8006c16:	b083      	sub	sp, #12
 8006c18:	af00      	add	r7, sp, #0
	__asm volatile
 8006c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c1e:	f383 8811 	msr	BASEPRI, r3
 8006c22:	f3bf 8f6f 	isb	sy
 8006c26:	f3bf 8f4f 	dsb	sy
 8006c2a:	607b      	str	r3, [r7, #4]
}
 8006c2c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006c2e:	4b0f      	ldr	r3, [pc, #60]	; (8006c6c <vPortEnterCritical+0x58>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	3301      	adds	r3, #1
 8006c34:	4a0d      	ldr	r2, [pc, #52]	; (8006c6c <vPortEnterCritical+0x58>)
 8006c36:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006c38:	4b0c      	ldr	r3, [pc, #48]	; (8006c6c <vPortEnterCritical+0x58>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	2b01      	cmp	r3, #1
 8006c3e:	d10f      	bne.n	8006c60 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006c40:	4b0b      	ldr	r3, [pc, #44]	; (8006c70 <vPortEnterCritical+0x5c>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	b2db      	uxtb	r3, r3
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d00a      	beq.n	8006c60 <vPortEnterCritical+0x4c>
	__asm volatile
 8006c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c4e:	f383 8811 	msr	BASEPRI, r3
 8006c52:	f3bf 8f6f 	isb	sy
 8006c56:	f3bf 8f4f 	dsb	sy
 8006c5a:	603b      	str	r3, [r7, #0]
}
 8006c5c:	bf00      	nop
 8006c5e:	e7fe      	b.n	8006c5e <vPortEnterCritical+0x4a>
	}
}
 8006c60:	bf00      	nop
 8006c62:	370c      	adds	r7, #12
 8006c64:	46bd      	mov	sp, r7
 8006c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6a:	4770      	bx	lr
 8006c6c:	2000000c 	.word	0x2000000c
 8006c70:	e000ed04 	.word	0xe000ed04

08006c74 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006c74:	b480      	push	{r7}
 8006c76:	b083      	sub	sp, #12
 8006c78:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006c7a:	4b12      	ldr	r3, [pc, #72]	; (8006cc4 <vPortExitCritical+0x50>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d10a      	bne.n	8006c98 <vPortExitCritical+0x24>
	__asm volatile
 8006c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c86:	f383 8811 	msr	BASEPRI, r3
 8006c8a:	f3bf 8f6f 	isb	sy
 8006c8e:	f3bf 8f4f 	dsb	sy
 8006c92:	607b      	str	r3, [r7, #4]
}
 8006c94:	bf00      	nop
 8006c96:	e7fe      	b.n	8006c96 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006c98:	4b0a      	ldr	r3, [pc, #40]	; (8006cc4 <vPortExitCritical+0x50>)
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	3b01      	subs	r3, #1
 8006c9e:	4a09      	ldr	r2, [pc, #36]	; (8006cc4 <vPortExitCritical+0x50>)
 8006ca0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006ca2:	4b08      	ldr	r3, [pc, #32]	; (8006cc4 <vPortExitCritical+0x50>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d105      	bne.n	8006cb6 <vPortExitCritical+0x42>
 8006caa:	2300      	movs	r3, #0
 8006cac:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	f383 8811 	msr	BASEPRI, r3
}
 8006cb4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006cb6:	bf00      	nop
 8006cb8:	370c      	adds	r7, #12
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc0:	4770      	bx	lr
 8006cc2:	bf00      	nop
 8006cc4:	2000000c 	.word	0x2000000c
	...

08006cd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006cd0:	f3ef 8009 	mrs	r0, PSP
 8006cd4:	f3bf 8f6f 	isb	sy
 8006cd8:	4b15      	ldr	r3, [pc, #84]	; (8006d30 <pxCurrentTCBConst>)
 8006cda:	681a      	ldr	r2, [r3, #0]
 8006cdc:	f01e 0f10 	tst.w	lr, #16
 8006ce0:	bf08      	it	eq
 8006ce2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006ce6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cea:	6010      	str	r0, [r2, #0]
 8006cec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006cf0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006cf4:	f380 8811 	msr	BASEPRI, r0
 8006cf8:	f3bf 8f4f 	dsb	sy
 8006cfc:	f3bf 8f6f 	isb	sy
 8006d00:	f7fe feac 	bl	8005a5c <vTaskSwitchContext>
 8006d04:	f04f 0000 	mov.w	r0, #0
 8006d08:	f380 8811 	msr	BASEPRI, r0
 8006d0c:	bc09      	pop	{r0, r3}
 8006d0e:	6819      	ldr	r1, [r3, #0]
 8006d10:	6808      	ldr	r0, [r1, #0]
 8006d12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d16:	f01e 0f10 	tst.w	lr, #16
 8006d1a:	bf08      	it	eq
 8006d1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006d20:	f380 8809 	msr	PSP, r0
 8006d24:	f3bf 8f6f 	isb	sy
 8006d28:	4770      	bx	lr
 8006d2a:	bf00      	nop
 8006d2c:	f3af 8000 	nop.w

08006d30 <pxCurrentTCBConst>:
 8006d30:	20000a88 	.word	0x20000a88
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006d34:	bf00      	nop
 8006d36:	bf00      	nop

08006d38 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b082      	sub	sp, #8
 8006d3c:	af00      	add	r7, sp, #0
	__asm volatile
 8006d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d42:	f383 8811 	msr	BASEPRI, r3
 8006d46:	f3bf 8f6f 	isb	sy
 8006d4a:	f3bf 8f4f 	dsb	sy
 8006d4e:	607b      	str	r3, [r7, #4]
}
 8006d50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006d52:	f7fe fdc9 	bl	80058e8 <xTaskIncrementTick>
 8006d56:	4603      	mov	r3, r0
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d003      	beq.n	8006d64 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006d5c:	4b06      	ldr	r3, [pc, #24]	; (8006d78 <xPortSysTickHandler+0x40>)
 8006d5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d62:	601a      	str	r2, [r3, #0]
 8006d64:	2300      	movs	r3, #0
 8006d66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	f383 8811 	msr	BASEPRI, r3
}
 8006d6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006d70:	bf00      	nop
 8006d72:	3708      	adds	r7, #8
 8006d74:	46bd      	mov	sp, r7
 8006d76:	bd80      	pop	{r7, pc}
 8006d78:	e000ed04 	.word	0xe000ed04

08006d7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006d80:	4b0b      	ldr	r3, [pc, #44]	; (8006db0 <vPortSetupTimerInterrupt+0x34>)
 8006d82:	2200      	movs	r2, #0
 8006d84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006d86:	4b0b      	ldr	r3, [pc, #44]	; (8006db4 <vPortSetupTimerInterrupt+0x38>)
 8006d88:	2200      	movs	r2, #0
 8006d8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006d8c:	4b0a      	ldr	r3, [pc, #40]	; (8006db8 <vPortSetupTimerInterrupt+0x3c>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4a0a      	ldr	r2, [pc, #40]	; (8006dbc <vPortSetupTimerInterrupt+0x40>)
 8006d92:	fba2 2303 	umull	r2, r3, r2, r3
 8006d96:	099b      	lsrs	r3, r3, #6
 8006d98:	4a09      	ldr	r2, [pc, #36]	; (8006dc0 <vPortSetupTimerInterrupt+0x44>)
 8006d9a:	3b01      	subs	r3, #1
 8006d9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006d9e:	4b04      	ldr	r3, [pc, #16]	; (8006db0 <vPortSetupTimerInterrupt+0x34>)
 8006da0:	2207      	movs	r2, #7
 8006da2:	601a      	str	r2, [r3, #0]
}
 8006da4:	bf00      	nop
 8006da6:	46bd      	mov	sp, r7
 8006da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dac:	4770      	bx	lr
 8006dae:	bf00      	nop
 8006db0:	e000e010 	.word	0xe000e010
 8006db4:	e000e018 	.word	0xe000e018
 8006db8:	20000000 	.word	0x20000000
 8006dbc:	10624dd3 	.word	0x10624dd3
 8006dc0:	e000e014 	.word	0xe000e014

08006dc4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006dc4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006dd4 <vPortEnableVFP+0x10>
 8006dc8:	6801      	ldr	r1, [r0, #0]
 8006dca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006dce:	6001      	str	r1, [r0, #0]
 8006dd0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006dd2:	bf00      	nop
 8006dd4:	e000ed88 	.word	0xe000ed88

08006dd8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006dd8:	b480      	push	{r7}
 8006dda:	b085      	sub	sp, #20
 8006ddc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006dde:	f3ef 8305 	mrs	r3, IPSR
 8006de2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	2b0f      	cmp	r3, #15
 8006de8:	d914      	bls.n	8006e14 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006dea:	4a17      	ldr	r2, [pc, #92]	; (8006e48 <vPortValidateInterruptPriority+0x70>)
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	4413      	add	r3, r2
 8006df0:	781b      	ldrb	r3, [r3, #0]
 8006df2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006df4:	4b15      	ldr	r3, [pc, #84]	; (8006e4c <vPortValidateInterruptPriority+0x74>)
 8006df6:	781b      	ldrb	r3, [r3, #0]
 8006df8:	7afa      	ldrb	r2, [r7, #11]
 8006dfa:	429a      	cmp	r2, r3
 8006dfc:	d20a      	bcs.n	8006e14 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e02:	f383 8811 	msr	BASEPRI, r3
 8006e06:	f3bf 8f6f 	isb	sy
 8006e0a:	f3bf 8f4f 	dsb	sy
 8006e0e:	607b      	str	r3, [r7, #4]
}
 8006e10:	bf00      	nop
 8006e12:	e7fe      	b.n	8006e12 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006e14:	4b0e      	ldr	r3, [pc, #56]	; (8006e50 <vPortValidateInterruptPriority+0x78>)
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006e1c:	4b0d      	ldr	r3, [pc, #52]	; (8006e54 <vPortValidateInterruptPriority+0x7c>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	429a      	cmp	r2, r3
 8006e22:	d90a      	bls.n	8006e3a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e28:	f383 8811 	msr	BASEPRI, r3
 8006e2c:	f3bf 8f6f 	isb	sy
 8006e30:	f3bf 8f4f 	dsb	sy
 8006e34:	603b      	str	r3, [r7, #0]
}
 8006e36:	bf00      	nop
 8006e38:	e7fe      	b.n	8006e38 <vPortValidateInterruptPriority+0x60>
	}
 8006e3a:	bf00      	nop
 8006e3c:	3714      	adds	r7, #20
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e44:	4770      	bx	lr
 8006e46:	bf00      	nop
 8006e48:	e000e3f0 	.word	0xe000e3f0
 8006e4c:	200010b4 	.word	0x200010b4
 8006e50:	e000ed0c 	.word	0xe000ed0c
 8006e54:	200010b8 	.word	0x200010b8

08006e58 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b08a      	sub	sp, #40	; 0x28
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006e60:	2300      	movs	r3, #0
 8006e62:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006e64:	f7fe fc84 	bl	8005770 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006e68:	4b5b      	ldr	r3, [pc, #364]	; (8006fd8 <pvPortMalloc+0x180>)
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d101      	bne.n	8006e74 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006e70:	f000 f920 	bl	80070b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006e74:	4b59      	ldr	r3, [pc, #356]	; (8006fdc <pvPortMalloc+0x184>)
 8006e76:	681a      	ldr	r2, [r3, #0]
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	4013      	ands	r3, r2
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	f040 8093 	bne.w	8006fa8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d01d      	beq.n	8006ec4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006e88:	2208      	movs	r2, #8
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	4413      	add	r3, r2
 8006e8e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f003 0307 	and.w	r3, r3, #7
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d014      	beq.n	8006ec4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f023 0307 	bic.w	r3, r3, #7
 8006ea0:	3308      	adds	r3, #8
 8006ea2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	f003 0307 	and.w	r3, r3, #7
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d00a      	beq.n	8006ec4 <pvPortMalloc+0x6c>
	__asm volatile
 8006eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eb2:	f383 8811 	msr	BASEPRI, r3
 8006eb6:	f3bf 8f6f 	isb	sy
 8006eba:	f3bf 8f4f 	dsb	sy
 8006ebe:	617b      	str	r3, [r7, #20]
}
 8006ec0:	bf00      	nop
 8006ec2:	e7fe      	b.n	8006ec2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d06e      	beq.n	8006fa8 <pvPortMalloc+0x150>
 8006eca:	4b45      	ldr	r3, [pc, #276]	; (8006fe0 <pvPortMalloc+0x188>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	687a      	ldr	r2, [r7, #4]
 8006ed0:	429a      	cmp	r2, r3
 8006ed2:	d869      	bhi.n	8006fa8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006ed4:	4b43      	ldr	r3, [pc, #268]	; (8006fe4 <pvPortMalloc+0x18c>)
 8006ed6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006ed8:	4b42      	ldr	r3, [pc, #264]	; (8006fe4 <pvPortMalloc+0x18c>)
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006ede:	e004      	b.n	8006eea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eec:	685b      	ldr	r3, [r3, #4]
 8006eee:	687a      	ldr	r2, [r7, #4]
 8006ef0:	429a      	cmp	r2, r3
 8006ef2:	d903      	bls.n	8006efc <pvPortMalloc+0xa4>
 8006ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d1f1      	bne.n	8006ee0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006efc:	4b36      	ldr	r3, [pc, #216]	; (8006fd8 <pvPortMalloc+0x180>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f02:	429a      	cmp	r2, r3
 8006f04:	d050      	beq.n	8006fa8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006f06:	6a3b      	ldr	r3, [r7, #32]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	2208      	movs	r2, #8
 8006f0c:	4413      	add	r3, r2
 8006f0e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f12:	681a      	ldr	r2, [r3, #0]
 8006f14:	6a3b      	ldr	r3, [r7, #32]
 8006f16:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f1a:	685a      	ldr	r2, [r3, #4]
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	1ad2      	subs	r2, r2, r3
 8006f20:	2308      	movs	r3, #8
 8006f22:	005b      	lsls	r3, r3, #1
 8006f24:	429a      	cmp	r2, r3
 8006f26:	d91f      	bls.n	8006f68 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006f28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	4413      	add	r3, r2
 8006f2e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006f30:	69bb      	ldr	r3, [r7, #24]
 8006f32:	f003 0307 	and.w	r3, r3, #7
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d00a      	beq.n	8006f50 <pvPortMalloc+0xf8>
	__asm volatile
 8006f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f3e:	f383 8811 	msr	BASEPRI, r3
 8006f42:	f3bf 8f6f 	isb	sy
 8006f46:	f3bf 8f4f 	dsb	sy
 8006f4a:	613b      	str	r3, [r7, #16]
}
 8006f4c:	bf00      	nop
 8006f4e:	e7fe      	b.n	8006f4e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f52:	685a      	ldr	r2, [r3, #4]
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	1ad2      	subs	r2, r2, r3
 8006f58:	69bb      	ldr	r3, [r7, #24]
 8006f5a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f5e:	687a      	ldr	r2, [r7, #4]
 8006f60:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006f62:	69b8      	ldr	r0, [r7, #24]
 8006f64:	f000 f908 	bl	8007178 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006f68:	4b1d      	ldr	r3, [pc, #116]	; (8006fe0 <pvPortMalloc+0x188>)
 8006f6a:	681a      	ldr	r2, [r3, #0]
 8006f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f6e:	685b      	ldr	r3, [r3, #4]
 8006f70:	1ad3      	subs	r3, r2, r3
 8006f72:	4a1b      	ldr	r2, [pc, #108]	; (8006fe0 <pvPortMalloc+0x188>)
 8006f74:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006f76:	4b1a      	ldr	r3, [pc, #104]	; (8006fe0 <pvPortMalloc+0x188>)
 8006f78:	681a      	ldr	r2, [r3, #0]
 8006f7a:	4b1b      	ldr	r3, [pc, #108]	; (8006fe8 <pvPortMalloc+0x190>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	429a      	cmp	r2, r3
 8006f80:	d203      	bcs.n	8006f8a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006f82:	4b17      	ldr	r3, [pc, #92]	; (8006fe0 <pvPortMalloc+0x188>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	4a18      	ldr	r2, [pc, #96]	; (8006fe8 <pvPortMalloc+0x190>)
 8006f88:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f8c:	685a      	ldr	r2, [r3, #4]
 8006f8e:	4b13      	ldr	r3, [pc, #76]	; (8006fdc <pvPortMalloc+0x184>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	431a      	orrs	r2, r3
 8006f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f96:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006f9e:	4b13      	ldr	r3, [pc, #76]	; (8006fec <pvPortMalloc+0x194>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	3301      	adds	r3, #1
 8006fa4:	4a11      	ldr	r2, [pc, #68]	; (8006fec <pvPortMalloc+0x194>)
 8006fa6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006fa8:	f7fe fbf0 	bl	800578c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006fac:	69fb      	ldr	r3, [r7, #28]
 8006fae:	f003 0307 	and.w	r3, r3, #7
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d00a      	beq.n	8006fcc <pvPortMalloc+0x174>
	__asm volatile
 8006fb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fba:	f383 8811 	msr	BASEPRI, r3
 8006fbe:	f3bf 8f6f 	isb	sy
 8006fc2:	f3bf 8f4f 	dsb	sy
 8006fc6:	60fb      	str	r3, [r7, #12]
}
 8006fc8:	bf00      	nop
 8006fca:	e7fe      	b.n	8006fca <pvPortMalloc+0x172>
	return pvReturn;
 8006fcc:	69fb      	ldr	r3, [r7, #28]
}
 8006fce:	4618      	mov	r0, r3
 8006fd0:	3728      	adds	r7, #40	; 0x28
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd80      	pop	{r7, pc}
 8006fd6:	bf00      	nop
 8006fd8:	20004cc4 	.word	0x20004cc4
 8006fdc:	20004cd8 	.word	0x20004cd8
 8006fe0:	20004cc8 	.word	0x20004cc8
 8006fe4:	20004cbc 	.word	0x20004cbc
 8006fe8:	20004ccc 	.word	0x20004ccc
 8006fec:	20004cd0 	.word	0x20004cd0

08006ff0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b086      	sub	sp, #24
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d04d      	beq.n	800709e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007002:	2308      	movs	r3, #8
 8007004:	425b      	negs	r3, r3
 8007006:	697a      	ldr	r2, [r7, #20]
 8007008:	4413      	add	r3, r2
 800700a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800700c:	697b      	ldr	r3, [r7, #20]
 800700e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007010:	693b      	ldr	r3, [r7, #16]
 8007012:	685a      	ldr	r2, [r3, #4]
 8007014:	4b24      	ldr	r3, [pc, #144]	; (80070a8 <vPortFree+0xb8>)
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4013      	ands	r3, r2
 800701a:	2b00      	cmp	r3, #0
 800701c:	d10a      	bne.n	8007034 <vPortFree+0x44>
	__asm volatile
 800701e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007022:	f383 8811 	msr	BASEPRI, r3
 8007026:	f3bf 8f6f 	isb	sy
 800702a:	f3bf 8f4f 	dsb	sy
 800702e:	60fb      	str	r3, [r7, #12]
}
 8007030:	bf00      	nop
 8007032:	e7fe      	b.n	8007032 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007034:	693b      	ldr	r3, [r7, #16]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d00a      	beq.n	8007052 <vPortFree+0x62>
	__asm volatile
 800703c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007040:	f383 8811 	msr	BASEPRI, r3
 8007044:	f3bf 8f6f 	isb	sy
 8007048:	f3bf 8f4f 	dsb	sy
 800704c:	60bb      	str	r3, [r7, #8]
}
 800704e:	bf00      	nop
 8007050:	e7fe      	b.n	8007050 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007052:	693b      	ldr	r3, [r7, #16]
 8007054:	685a      	ldr	r2, [r3, #4]
 8007056:	4b14      	ldr	r3, [pc, #80]	; (80070a8 <vPortFree+0xb8>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	4013      	ands	r3, r2
 800705c:	2b00      	cmp	r3, #0
 800705e:	d01e      	beq.n	800709e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007060:	693b      	ldr	r3, [r7, #16]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d11a      	bne.n	800709e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007068:	693b      	ldr	r3, [r7, #16]
 800706a:	685a      	ldr	r2, [r3, #4]
 800706c:	4b0e      	ldr	r3, [pc, #56]	; (80070a8 <vPortFree+0xb8>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	43db      	mvns	r3, r3
 8007072:	401a      	ands	r2, r3
 8007074:	693b      	ldr	r3, [r7, #16]
 8007076:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007078:	f7fe fb7a 	bl	8005770 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800707c:	693b      	ldr	r3, [r7, #16]
 800707e:	685a      	ldr	r2, [r3, #4]
 8007080:	4b0a      	ldr	r3, [pc, #40]	; (80070ac <vPortFree+0xbc>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4413      	add	r3, r2
 8007086:	4a09      	ldr	r2, [pc, #36]	; (80070ac <vPortFree+0xbc>)
 8007088:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800708a:	6938      	ldr	r0, [r7, #16]
 800708c:	f000 f874 	bl	8007178 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007090:	4b07      	ldr	r3, [pc, #28]	; (80070b0 <vPortFree+0xc0>)
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	3301      	adds	r3, #1
 8007096:	4a06      	ldr	r2, [pc, #24]	; (80070b0 <vPortFree+0xc0>)
 8007098:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800709a:	f7fe fb77 	bl	800578c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800709e:	bf00      	nop
 80070a0:	3718      	adds	r7, #24
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}
 80070a6:	bf00      	nop
 80070a8:	20004cd8 	.word	0x20004cd8
 80070ac:	20004cc8 	.word	0x20004cc8
 80070b0:	20004cd4 	.word	0x20004cd4

080070b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80070b4:	b480      	push	{r7}
 80070b6:	b085      	sub	sp, #20
 80070b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80070ba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80070be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80070c0:	4b27      	ldr	r3, [pc, #156]	; (8007160 <prvHeapInit+0xac>)
 80070c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	f003 0307 	and.w	r3, r3, #7
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d00c      	beq.n	80070e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	3307      	adds	r3, #7
 80070d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	f023 0307 	bic.w	r3, r3, #7
 80070da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80070dc:	68ba      	ldr	r2, [r7, #8]
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	1ad3      	subs	r3, r2, r3
 80070e2:	4a1f      	ldr	r2, [pc, #124]	; (8007160 <prvHeapInit+0xac>)
 80070e4:	4413      	add	r3, r2
 80070e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80070ec:	4a1d      	ldr	r2, [pc, #116]	; (8007164 <prvHeapInit+0xb0>)
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80070f2:	4b1c      	ldr	r3, [pc, #112]	; (8007164 <prvHeapInit+0xb0>)
 80070f4:	2200      	movs	r2, #0
 80070f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	68ba      	ldr	r2, [r7, #8]
 80070fc:	4413      	add	r3, r2
 80070fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007100:	2208      	movs	r2, #8
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	1a9b      	subs	r3, r3, r2
 8007106:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	f023 0307 	bic.w	r3, r3, #7
 800710e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	4a15      	ldr	r2, [pc, #84]	; (8007168 <prvHeapInit+0xb4>)
 8007114:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007116:	4b14      	ldr	r3, [pc, #80]	; (8007168 <prvHeapInit+0xb4>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	2200      	movs	r2, #0
 800711c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800711e:	4b12      	ldr	r3, [pc, #72]	; (8007168 <prvHeapInit+0xb4>)
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	2200      	movs	r2, #0
 8007124:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	68fa      	ldr	r2, [r7, #12]
 800712e:	1ad2      	subs	r2, r2, r3
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007134:	4b0c      	ldr	r3, [pc, #48]	; (8007168 <prvHeapInit+0xb4>)
 8007136:	681a      	ldr	r2, [r3, #0]
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	685b      	ldr	r3, [r3, #4]
 8007140:	4a0a      	ldr	r2, [pc, #40]	; (800716c <prvHeapInit+0xb8>)
 8007142:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	685b      	ldr	r3, [r3, #4]
 8007148:	4a09      	ldr	r2, [pc, #36]	; (8007170 <prvHeapInit+0xbc>)
 800714a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800714c:	4b09      	ldr	r3, [pc, #36]	; (8007174 <prvHeapInit+0xc0>)
 800714e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007152:	601a      	str	r2, [r3, #0]
}
 8007154:	bf00      	nop
 8007156:	3714      	adds	r7, #20
 8007158:	46bd      	mov	sp, r7
 800715a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715e:	4770      	bx	lr
 8007160:	200010bc 	.word	0x200010bc
 8007164:	20004cbc 	.word	0x20004cbc
 8007168:	20004cc4 	.word	0x20004cc4
 800716c:	20004ccc 	.word	0x20004ccc
 8007170:	20004cc8 	.word	0x20004cc8
 8007174:	20004cd8 	.word	0x20004cd8

08007178 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007178:	b480      	push	{r7}
 800717a:	b085      	sub	sp, #20
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007180:	4b28      	ldr	r3, [pc, #160]	; (8007224 <prvInsertBlockIntoFreeList+0xac>)
 8007182:	60fb      	str	r3, [r7, #12]
 8007184:	e002      	b.n	800718c <prvInsertBlockIntoFreeList+0x14>
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	60fb      	str	r3, [r7, #12]
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	687a      	ldr	r2, [r7, #4]
 8007192:	429a      	cmp	r2, r3
 8007194:	d8f7      	bhi.n	8007186 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	685b      	ldr	r3, [r3, #4]
 800719e:	68ba      	ldr	r2, [r7, #8]
 80071a0:	4413      	add	r3, r2
 80071a2:	687a      	ldr	r2, [r7, #4]
 80071a4:	429a      	cmp	r2, r3
 80071a6:	d108      	bne.n	80071ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	685a      	ldr	r2, [r3, #4]
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	685b      	ldr	r3, [r3, #4]
 80071b0:	441a      	add	r2, r3
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	685b      	ldr	r3, [r3, #4]
 80071c2:	68ba      	ldr	r2, [r7, #8]
 80071c4:	441a      	add	r2, r3
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	429a      	cmp	r2, r3
 80071cc:	d118      	bne.n	8007200 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681a      	ldr	r2, [r3, #0]
 80071d2:	4b15      	ldr	r3, [pc, #84]	; (8007228 <prvInsertBlockIntoFreeList+0xb0>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	429a      	cmp	r2, r3
 80071d8:	d00d      	beq.n	80071f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	685a      	ldr	r2, [r3, #4]
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	685b      	ldr	r3, [r3, #4]
 80071e4:	441a      	add	r2, r3
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	681a      	ldr	r2, [r3, #0]
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	601a      	str	r2, [r3, #0]
 80071f4:	e008      	b.n	8007208 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80071f6:	4b0c      	ldr	r3, [pc, #48]	; (8007228 <prvInsertBlockIntoFreeList+0xb0>)
 80071f8:	681a      	ldr	r2, [r3, #0]
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	601a      	str	r2, [r3, #0]
 80071fe:	e003      	b.n	8007208 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681a      	ldr	r2, [r3, #0]
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007208:	68fa      	ldr	r2, [r7, #12]
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	429a      	cmp	r2, r3
 800720e:	d002      	beq.n	8007216 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	687a      	ldr	r2, [r7, #4]
 8007214:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007216:	bf00      	nop
 8007218:	3714      	adds	r7, #20
 800721a:	46bd      	mov	sp, r7
 800721c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007220:	4770      	bx	lr
 8007222:	bf00      	nop
 8007224:	20004cbc 	.word	0x20004cbc
 8007228:	20004cc4 	.word	0x20004cc4

0800722c <__errno>:
 800722c:	4b01      	ldr	r3, [pc, #4]	; (8007234 <__errno+0x8>)
 800722e:	6818      	ldr	r0, [r3, #0]
 8007230:	4770      	bx	lr
 8007232:	bf00      	nop
 8007234:	20000010 	.word	0x20000010

08007238 <std>:
 8007238:	2300      	movs	r3, #0
 800723a:	b510      	push	{r4, lr}
 800723c:	4604      	mov	r4, r0
 800723e:	e9c0 3300 	strd	r3, r3, [r0]
 8007242:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007246:	6083      	str	r3, [r0, #8]
 8007248:	8181      	strh	r1, [r0, #12]
 800724a:	6643      	str	r3, [r0, #100]	; 0x64
 800724c:	81c2      	strh	r2, [r0, #14]
 800724e:	6183      	str	r3, [r0, #24]
 8007250:	4619      	mov	r1, r3
 8007252:	2208      	movs	r2, #8
 8007254:	305c      	adds	r0, #92	; 0x5c
 8007256:	f000 f91a 	bl	800748e <memset>
 800725a:	4b05      	ldr	r3, [pc, #20]	; (8007270 <std+0x38>)
 800725c:	6263      	str	r3, [r4, #36]	; 0x24
 800725e:	4b05      	ldr	r3, [pc, #20]	; (8007274 <std+0x3c>)
 8007260:	62a3      	str	r3, [r4, #40]	; 0x28
 8007262:	4b05      	ldr	r3, [pc, #20]	; (8007278 <std+0x40>)
 8007264:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007266:	4b05      	ldr	r3, [pc, #20]	; (800727c <std+0x44>)
 8007268:	6224      	str	r4, [r4, #32]
 800726a:	6323      	str	r3, [r4, #48]	; 0x30
 800726c:	bd10      	pop	{r4, pc}
 800726e:	bf00      	nop
 8007270:	080084d5 	.word	0x080084d5
 8007274:	080084f7 	.word	0x080084f7
 8007278:	0800852f 	.word	0x0800852f
 800727c:	08008553 	.word	0x08008553

08007280 <_cleanup_r>:
 8007280:	4901      	ldr	r1, [pc, #4]	; (8007288 <_cleanup_r+0x8>)
 8007282:	f000 b8af 	b.w	80073e4 <_fwalk_reent>
 8007286:	bf00      	nop
 8007288:	0800a139 	.word	0x0800a139

0800728c <__sfmoreglue>:
 800728c:	b570      	push	{r4, r5, r6, lr}
 800728e:	2268      	movs	r2, #104	; 0x68
 8007290:	1e4d      	subs	r5, r1, #1
 8007292:	4355      	muls	r5, r2
 8007294:	460e      	mov	r6, r1
 8007296:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800729a:	f000 f921 	bl	80074e0 <_malloc_r>
 800729e:	4604      	mov	r4, r0
 80072a0:	b140      	cbz	r0, 80072b4 <__sfmoreglue+0x28>
 80072a2:	2100      	movs	r1, #0
 80072a4:	e9c0 1600 	strd	r1, r6, [r0]
 80072a8:	300c      	adds	r0, #12
 80072aa:	60a0      	str	r0, [r4, #8]
 80072ac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80072b0:	f000 f8ed 	bl	800748e <memset>
 80072b4:	4620      	mov	r0, r4
 80072b6:	bd70      	pop	{r4, r5, r6, pc}

080072b8 <__sfp_lock_acquire>:
 80072b8:	4801      	ldr	r0, [pc, #4]	; (80072c0 <__sfp_lock_acquire+0x8>)
 80072ba:	f000 b8d8 	b.w	800746e <__retarget_lock_acquire_recursive>
 80072be:	bf00      	nop
 80072c0:	20004cdd 	.word	0x20004cdd

080072c4 <__sfp_lock_release>:
 80072c4:	4801      	ldr	r0, [pc, #4]	; (80072cc <__sfp_lock_release+0x8>)
 80072c6:	f000 b8d3 	b.w	8007470 <__retarget_lock_release_recursive>
 80072ca:	bf00      	nop
 80072cc:	20004cdd 	.word	0x20004cdd

080072d0 <__sinit_lock_acquire>:
 80072d0:	4801      	ldr	r0, [pc, #4]	; (80072d8 <__sinit_lock_acquire+0x8>)
 80072d2:	f000 b8cc 	b.w	800746e <__retarget_lock_acquire_recursive>
 80072d6:	bf00      	nop
 80072d8:	20004cde 	.word	0x20004cde

080072dc <__sinit_lock_release>:
 80072dc:	4801      	ldr	r0, [pc, #4]	; (80072e4 <__sinit_lock_release+0x8>)
 80072de:	f000 b8c7 	b.w	8007470 <__retarget_lock_release_recursive>
 80072e2:	bf00      	nop
 80072e4:	20004cde 	.word	0x20004cde

080072e8 <__sinit>:
 80072e8:	b510      	push	{r4, lr}
 80072ea:	4604      	mov	r4, r0
 80072ec:	f7ff fff0 	bl	80072d0 <__sinit_lock_acquire>
 80072f0:	69a3      	ldr	r3, [r4, #24]
 80072f2:	b11b      	cbz	r3, 80072fc <__sinit+0x14>
 80072f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80072f8:	f7ff bff0 	b.w	80072dc <__sinit_lock_release>
 80072fc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007300:	6523      	str	r3, [r4, #80]	; 0x50
 8007302:	4b13      	ldr	r3, [pc, #76]	; (8007350 <__sinit+0x68>)
 8007304:	4a13      	ldr	r2, [pc, #76]	; (8007354 <__sinit+0x6c>)
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	62a2      	str	r2, [r4, #40]	; 0x28
 800730a:	42a3      	cmp	r3, r4
 800730c:	bf04      	itt	eq
 800730e:	2301      	moveq	r3, #1
 8007310:	61a3      	streq	r3, [r4, #24]
 8007312:	4620      	mov	r0, r4
 8007314:	f000 f820 	bl	8007358 <__sfp>
 8007318:	6060      	str	r0, [r4, #4]
 800731a:	4620      	mov	r0, r4
 800731c:	f000 f81c 	bl	8007358 <__sfp>
 8007320:	60a0      	str	r0, [r4, #8]
 8007322:	4620      	mov	r0, r4
 8007324:	f000 f818 	bl	8007358 <__sfp>
 8007328:	2200      	movs	r2, #0
 800732a:	60e0      	str	r0, [r4, #12]
 800732c:	2104      	movs	r1, #4
 800732e:	6860      	ldr	r0, [r4, #4]
 8007330:	f7ff ff82 	bl	8007238 <std>
 8007334:	68a0      	ldr	r0, [r4, #8]
 8007336:	2201      	movs	r2, #1
 8007338:	2109      	movs	r1, #9
 800733a:	f7ff ff7d 	bl	8007238 <std>
 800733e:	68e0      	ldr	r0, [r4, #12]
 8007340:	2202      	movs	r2, #2
 8007342:	2112      	movs	r1, #18
 8007344:	f7ff ff78 	bl	8007238 <std>
 8007348:	2301      	movs	r3, #1
 800734a:	61a3      	str	r3, [r4, #24]
 800734c:	e7d2      	b.n	80072f4 <__sinit+0xc>
 800734e:	bf00      	nop
 8007350:	0800c0e8 	.word	0x0800c0e8
 8007354:	08007281 	.word	0x08007281

08007358 <__sfp>:
 8007358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800735a:	4607      	mov	r7, r0
 800735c:	f7ff ffac 	bl	80072b8 <__sfp_lock_acquire>
 8007360:	4b1e      	ldr	r3, [pc, #120]	; (80073dc <__sfp+0x84>)
 8007362:	681e      	ldr	r6, [r3, #0]
 8007364:	69b3      	ldr	r3, [r6, #24]
 8007366:	b913      	cbnz	r3, 800736e <__sfp+0x16>
 8007368:	4630      	mov	r0, r6
 800736a:	f7ff ffbd 	bl	80072e8 <__sinit>
 800736e:	3648      	adds	r6, #72	; 0x48
 8007370:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007374:	3b01      	subs	r3, #1
 8007376:	d503      	bpl.n	8007380 <__sfp+0x28>
 8007378:	6833      	ldr	r3, [r6, #0]
 800737a:	b30b      	cbz	r3, 80073c0 <__sfp+0x68>
 800737c:	6836      	ldr	r6, [r6, #0]
 800737e:	e7f7      	b.n	8007370 <__sfp+0x18>
 8007380:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007384:	b9d5      	cbnz	r5, 80073bc <__sfp+0x64>
 8007386:	4b16      	ldr	r3, [pc, #88]	; (80073e0 <__sfp+0x88>)
 8007388:	60e3      	str	r3, [r4, #12]
 800738a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800738e:	6665      	str	r5, [r4, #100]	; 0x64
 8007390:	f000 f86c 	bl	800746c <__retarget_lock_init_recursive>
 8007394:	f7ff ff96 	bl	80072c4 <__sfp_lock_release>
 8007398:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800739c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80073a0:	6025      	str	r5, [r4, #0]
 80073a2:	61a5      	str	r5, [r4, #24]
 80073a4:	2208      	movs	r2, #8
 80073a6:	4629      	mov	r1, r5
 80073a8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80073ac:	f000 f86f 	bl	800748e <memset>
 80073b0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80073b4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80073b8:	4620      	mov	r0, r4
 80073ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80073bc:	3468      	adds	r4, #104	; 0x68
 80073be:	e7d9      	b.n	8007374 <__sfp+0x1c>
 80073c0:	2104      	movs	r1, #4
 80073c2:	4638      	mov	r0, r7
 80073c4:	f7ff ff62 	bl	800728c <__sfmoreglue>
 80073c8:	4604      	mov	r4, r0
 80073ca:	6030      	str	r0, [r6, #0]
 80073cc:	2800      	cmp	r0, #0
 80073ce:	d1d5      	bne.n	800737c <__sfp+0x24>
 80073d0:	f7ff ff78 	bl	80072c4 <__sfp_lock_release>
 80073d4:	230c      	movs	r3, #12
 80073d6:	603b      	str	r3, [r7, #0]
 80073d8:	e7ee      	b.n	80073b8 <__sfp+0x60>
 80073da:	bf00      	nop
 80073dc:	0800c0e8 	.word	0x0800c0e8
 80073e0:	ffff0001 	.word	0xffff0001

080073e4 <_fwalk_reent>:
 80073e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073e8:	4606      	mov	r6, r0
 80073ea:	4688      	mov	r8, r1
 80073ec:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80073f0:	2700      	movs	r7, #0
 80073f2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80073f6:	f1b9 0901 	subs.w	r9, r9, #1
 80073fa:	d505      	bpl.n	8007408 <_fwalk_reent+0x24>
 80073fc:	6824      	ldr	r4, [r4, #0]
 80073fe:	2c00      	cmp	r4, #0
 8007400:	d1f7      	bne.n	80073f2 <_fwalk_reent+0xe>
 8007402:	4638      	mov	r0, r7
 8007404:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007408:	89ab      	ldrh	r3, [r5, #12]
 800740a:	2b01      	cmp	r3, #1
 800740c:	d907      	bls.n	800741e <_fwalk_reent+0x3a>
 800740e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007412:	3301      	adds	r3, #1
 8007414:	d003      	beq.n	800741e <_fwalk_reent+0x3a>
 8007416:	4629      	mov	r1, r5
 8007418:	4630      	mov	r0, r6
 800741a:	47c0      	blx	r8
 800741c:	4307      	orrs	r7, r0
 800741e:	3568      	adds	r5, #104	; 0x68
 8007420:	e7e9      	b.n	80073f6 <_fwalk_reent+0x12>
	...

08007424 <__libc_init_array>:
 8007424:	b570      	push	{r4, r5, r6, lr}
 8007426:	4d0d      	ldr	r5, [pc, #52]	; (800745c <__libc_init_array+0x38>)
 8007428:	4c0d      	ldr	r4, [pc, #52]	; (8007460 <__libc_init_array+0x3c>)
 800742a:	1b64      	subs	r4, r4, r5
 800742c:	10a4      	asrs	r4, r4, #2
 800742e:	2600      	movs	r6, #0
 8007430:	42a6      	cmp	r6, r4
 8007432:	d109      	bne.n	8007448 <__libc_init_array+0x24>
 8007434:	4d0b      	ldr	r5, [pc, #44]	; (8007464 <__libc_init_array+0x40>)
 8007436:	4c0c      	ldr	r4, [pc, #48]	; (8007468 <__libc_init_array+0x44>)
 8007438:	f004 fd52 	bl	800bee0 <_init>
 800743c:	1b64      	subs	r4, r4, r5
 800743e:	10a4      	asrs	r4, r4, #2
 8007440:	2600      	movs	r6, #0
 8007442:	42a6      	cmp	r6, r4
 8007444:	d105      	bne.n	8007452 <__libc_init_array+0x2e>
 8007446:	bd70      	pop	{r4, r5, r6, pc}
 8007448:	f855 3b04 	ldr.w	r3, [r5], #4
 800744c:	4798      	blx	r3
 800744e:	3601      	adds	r6, #1
 8007450:	e7ee      	b.n	8007430 <__libc_init_array+0xc>
 8007452:	f855 3b04 	ldr.w	r3, [r5], #4
 8007456:	4798      	blx	r3
 8007458:	3601      	adds	r6, #1
 800745a:	e7f2      	b.n	8007442 <__libc_init_array+0x1e>
 800745c:	0800c590 	.word	0x0800c590
 8007460:	0800c590 	.word	0x0800c590
 8007464:	0800c590 	.word	0x0800c590
 8007468:	0800c594 	.word	0x0800c594

0800746c <__retarget_lock_init_recursive>:
 800746c:	4770      	bx	lr

0800746e <__retarget_lock_acquire_recursive>:
 800746e:	4770      	bx	lr

08007470 <__retarget_lock_release_recursive>:
 8007470:	4770      	bx	lr

08007472 <memcpy>:
 8007472:	440a      	add	r2, r1
 8007474:	4291      	cmp	r1, r2
 8007476:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800747a:	d100      	bne.n	800747e <memcpy+0xc>
 800747c:	4770      	bx	lr
 800747e:	b510      	push	{r4, lr}
 8007480:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007484:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007488:	4291      	cmp	r1, r2
 800748a:	d1f9      	bne.n	8007480 <memcpy+0xe>
 800748c:	bd10      	pop	{r4, pc}

0800748e <memset>:
 800748e:	4402      	add	r2, r0
 8007490:	4603      	mov	r3, r0
 8007492:	4293      	cmp	r3, r2
 8007494:	d100      	bne.n	8007498 <memset+0xa>
 8007496:	4770      	bx	lr
 8007498:	f803 1b01 	strb.w	r1, [r3], #1
 800749c:	e7f9      	b.n	8007492 <memset+0x4>
	...

080074a0 <sbrk_aligned>:
 80074a0:	b570      	push	{r4, r5, r6, lr}
 80074a2:	4e0e      	ldr	r6, [pc, #56]	; (80074dc <sbrk_aligned+0x3c>)
 80074a4:	460c      	mov	r4, r1
 80074a6:	6831      	ldr	r1, [r6, #0]
 80074a8:	4605      	mov	r5, r0
 80074aa:	b911      	cbnz	r1, 80074b2 <sbrk_aligned+0x12>
 80074ac:	f000 ffdc 	bl	8008468 <_sbrk_r>
 80074b0:	6030      	str	r0, [r6, #0]
 80074b2:	4621      	mov	r1, r4
 80074b4:	4628      	mov	r0, r5
 80074b6:	f000 ffd7 	bl	8008468 <_sbrk_r>
 80074ba:	1c43      	adds	r3, r0, #1
 80074bc:	d00a      	beq.n	80074d4 <sbrk_aligned+0x34>
 80074be:	1cc4      	adds	r4, r0, #3
 80074c0:	f024 0403 	bic.w	r4, r4, #3
 80074c4:	42a0      	cmp	r0, r4
 80074c6:	d007      	beq.n	80074d8 <sbrk_aligned+0x38>
 80074c8:	1a21      	subs	r1, r4, r0
 80074ca:	4628      	mov	r0, r5
 80074cc:	f000 ffcc 	bl	8008468 <_sbrk_r>
 80074d0:	3001      	adds	r0, #1
 80074d2:	d101      	bne.n	80074d8 <sbrk_aligned+0x38>
 80074d4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80074d8:	4620      	mov	r0, r4
 80074da:	bd70      	pop	{r4, r5, r6, pc}
 80074dc:	20004ce4 	.word	0x20004ce4

080074e0 <_malloc_r>:
 80074e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074e4:	1ccd      	adds	r5, r1, #3
 80074e6:	f025 0503 	bic.w	r5, r5, #3
 80074ea:	3508      	adds	r5, #8
 80074ec:	2d0c      	cmp	r5, #12
 80074ee:	bf38      	it	cc
 80074f0:	250c      	movcc	r5, #12
 80074f2:	2d00      	cmp	r5, #0
 80074f4:	4607      	mov	r7, r0
 80074f6:	db01      	blt.n	80074fc <_malloc_r+0x1c>
 80074f8:	42a9      	cmp	r1, r5
 80074fa:	d905      	bls.n	8007508 <_malloc_r+0x28>
 80074fc:	230c      	movs	r3, #12
 80074fe:	603b      	str	r3, [r7, #0]
 8007500:	2600      	movs	r6, #0
 8007502:	4630      	mov	r0, r6
 8007504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007508:	4e2e      	ldr	r6, [pc, #184]	; (80075c4 <_malloc_r+0xe4>)
 800750a:	f003 fa03 	bl	800a914 <__malloc_lock>
 800750e:	6833      	ldr	r3, [r6, #0]
 8007510:	461c      	mov	r4, r3
 8007512:	bb34      	cbnz	r4, 8007562 <_malloc_r+0x82>
 8007514:	4629      	mov	r1, r5
 8007516:	4638      	mov	r0, r7
 8007518:	f7ff ffc2 	bl	80074a0 <sbrk_aligned>
 800751c:	1c43      	adds	r3, r0, #1
 800751e:	4604      	mov	r4, r0
 8007520:	d14d      	bne.n	80075be <_malloc_r+0xde>
 8007522:	6834      	ldr	r4, [r6, #0]
 8007524:	4626      	mov	r6, r4
 8007526:	2e00      	cmp	r6, #0
 8007528:	d140      	bne.n	80075ac <_malloc_r+0xcc>
 800752a:	6823      	ldr	r3, [r4, #0]
 800752c:	4631      	mov	r1, r6
 800752e:	4638      	mov	r0, r7
 8007530:	eb04 0803 	add.w	r8, r4, r3
 8007534:	f000 ff98 	bl	8008468 <_sbrk_r>
 8007538:	4580      	cmp	r8, r0
 800753a:	d13a      	bne.n	80075b2 <_malloc_r+0xd2>
 800753c:	6821      	ldr	r1, [r4, #0]
 800753e:	3503      	adds	r5, #3
 8007540:	1a6d      	subs	r5, r5, r1
 8007542:	f025 0503 	bic.w	r5, r5, #3
 8007546:	3508      	adds	r5, #8
 8007548:	2d0c      	cmp	r5, #12
 800754a:	bf38      	it	cc
 800754c:	250c      	movcc	r5, #12
 800754e:	4629      	mov	r1, r5
 8007550:	4638      	mov	r0, r7
 8007552:	f7ff ffa5 	bl	80074a0 <sbrk_aligned>
 8007556:	3001      	adds	r0, #1
 8007558:	d02b      	beq.n	80075b2 <_malloc_r+0xd2>
 800755a:	6823      	ldr	r3, [r4, #0]
 800755c:	442b      	add	r3, r5
 800755e:	6023      	str	r3, [r4, #0]
 8007560:	e00e      	b.n	8007580 <_malloc_r+0xa0>
 8007562:	6822      	ldr	r2, [r4, #0]
 8007564:	1b52      	subs	r2, r2, r5
 8007566:	d41e      	bmi.n	80075a6 <_malloc_r+0xc6>
 8007568:	2a0b      	cmp	r2, #11
 800756a:	d916      	bls.n	800759a <_malloc_r+0xba>
 800756c:	1961      	adds	r1, r4, r5
 800756e:	42a3      	cmp	r3, r4
 8007570:	6025      	str	r5, [r4, #0]
 8007572:	bf18      	it	ne
 8007574:	6059      	strne	r1, [r3, #4]
 8007576:	6863      	ldr	r3, [r4, #4]
 8007578:	bf08      	it	eq
 800757a:	6031      	streq	r1, [r6, #0]
 800757c:	5162      	str	r2, [r4, r5]
 800757e:	604b      	str	r3, [r1, #4]
 8007580:	4638      	mov	r0, r7
 8007582:	f104 060b 	add.w	r6, r4, #11
 8007586:	f003 f9cb 	bl	800a920 <__malloc_unlock>
 800758a:	f026 0607 	bic.w	r6, r6, #7
 800758e:	1d23      	adds	r3, r4, #4
 8007590:	1af2      	subs	r2, r6, r3
 8007592:	d0b6      	beq.n	8007502 <_malloc_r+0x22>
 8007594:	1b9b      	subs	r3, r3, r6
 8007596:	50a3      	str	r3, [r4, r2]
 8007598:	e7b3      	b.n	8007502 <_malloc_r+0x22>
 800759a:	6862      	ldr	r2, [r4, #4]
 800759c:	42a3      	cmp	r3, r4
 800759e:	bf0c      	ite	eq
 80075a0:	6032      	streq	r2, [r6, #0]
 80075a2:	605a      	strne	r2, [r3, #4]
 80075a4:	e7ec      	b.n	8007580 <_malloc_r+0xa0>
 80075a6:	4623      	mov	r3, r4
 80075a8:	6864      	ldr	r4, [r4, #4]
 80075aa:	e7b2      	b.n	8007512 <_malloc_r+0x32>
 80075ac:	4634      	mov	r4, r6
 80075ae:	6876      	ldr	r6, [r6, #4]
 80075b0:	e7b9      	b.n	8007526 <_malloc_r+0x46>
 80075b2:	230c      	movs	r3, #12
 80075b4:	603b      	str	r3, [r7, #0]
 80075b6:	4638      	mov	r0, r7
 80075b8:	f003 f9b2 	bl	800a920 <__malloc_unlock>
 80075bc:	e7a1      	b.n	8007502 <_malloc_r+0x22>
 80075be:	6025      	str	r5, [r4, #0]
 80075c0:	e7de      	b.n	8007580 <_malloc_r+0xa0>
 80075c2:	bf00      	nop
 80075c4:	20004ce0 	.word	0x20004ce0

080075c8 <__cvt>:
 80075c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80075cc:	ec55 4b10 	vmov	r4, r5, d0
 80075d0:	2d00      	cmp	r5, #0
 80075d2:	460e      	mov	r6, r1
 80075d4:	4619      	mov	r1, r3
 80075d6:	462b      	mov	r3, r5
 80075d8:	bfbb      	ittet	lt
 80075da:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80075de:	461d      	movlt	r5, r3
 80075e0:	2300      	movge	r3, #0
 80075e2:	232d      	movlt	r3, #45	; 0x2d
 80075e4:	700b      	strb	r3, [r1, #0]
 80075e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80075e8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80075ec:	4691      	mov	r9, r2
 80075ee:	f023 0820 	bic.w	r8, r3, #32
 80075f2:	bfbc      	itt	lt
 80075f4:	4622      	movlt	r2, r4
 80075f6:	4614      	movlt	r4, r2
 80075f8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80075fc:	d005      	beq.n	800760a <__cvt+0x42>
 80075fe:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007602:	d100      	bne.n	8007606 <__cvt+0x3e>
 8007604:	3601      	adds	r6, #1
 8007606:	2102      	movs	r1, #2
 8007608:	e000      	b.n	800760c <__cvt+0x44>
 800760a:	2103      	movs	r1, #3
 800760c:	ab03      	add	r3, sp, #12
 800760e:	9301      	str	r3, [sp, #4]
 8007610:	ab02      	add	r3, sp, #8
 8007612:	9300      	str	r3, [sp, #0]
 8007614:	ec45 4b10 	vmov	d0, r4, r5
 8007618:	4653      	mov	r3, sl
 800761a:	4632      	mov	r2, r6
 800761c:	f001 ff18 	bl	8009450 <_dtoa_r>
 8007620:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007624:	4607      	mov	r7, r0
 8007626:	d102      	bne.n	800762e <__cvt+0x66>
 8007628:	f019 0f01 	tst.w	r9, #1
 800762c:	d022      	beq.n	8007674 <__cvt+0xac>
 800762e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007632:	eb07 0906 	add.w	r9, r7, r6
 8007636:	d110      	bne.n	800765a <__cvt+0x92>
 8007638:	783b      	ldrb	r3, [r7, #0]
 800763a:	2b30      	cmp	r3, #48	; 0x30
 800763c:	d10a      	bne.n	8007654 <__cvt+0x8c>
 800763e:	2200      	movs	r2, #0
 8007640:	2300      	movs	r3, #0
 8007642:	4620      	mov	r0, r4
 8007644:	4629      	mov	r1, r5
 8007646:	f7f9 fa5f 	bl	8000b08 <__aeabi_dcmpeq>
 800764a:	b918      	cbnz	r0, 8007654 <__cvt+0x8c>
 800764c:	f1c6 0601 	rsb	r6, r6, #1
 8007650:	f8ca 6000 	str.w	r6, [sl]
 8007654:	f8da 3000 	ldr.w	r3, [sl]
 8007658:	4499      	add	r9, r3
 800765a:	2200      	movs	r2, #0
 800765c:	2300      	movs	r3, #0
 800765e:	4620      	mov	r0, r4
 8007660:	4629      	mov	r1, r5
 8007662:	f7f9 fa51 	bl	8000b08 <__aeabi_dcmpeq>
 8007666:	b108      	cbz	r0, 800766c <__cvt+0xa4>
 8007668:	f8cd 900c 	str.w	r9, [sp, #12]
 800766c:	2230      	movs	r2, #48	; 0x30
 800766e:	9b03      	ldr	r3, [sp, #12]
 8007670:	454b      	cmp	r3, r9
 8007672:	d307      	bcc.n	8007684 <__cvt+0xbc>
 8007674:	9b03      	ldr	r3, [sp, #12]
 8007676:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007678:	1bdb      	subs	r3, r3, r7
 800767a:	4638      	mov	r0, r7
 800767c:	6013      	str	r3, [r2, #0]
 800767e:	b004      	add	sp, #16
 8007680:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007684:	1c59      	adds	r1, r3, #1
 8007686:	9103      	str	r1, [sp, #12]
 8007688:	701a      	strb	r2, [r3, #0]
 800768a:	e7f0      	b.n	800766e <__cvt+0xa6>

0800768c <__exponent>:
 800768c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800768e:	4603      	mov	r3, r0
 8007690:	2900      	cmp	r1, #0
 8007692:	bfb8      	it	lt
 8007694:	4249      	neglt	r1, r1
 8007696:	f803 2b02 	strb.w	r2, [r3], #2
 800769a:	bfb4      	ite	lt
 800769c:	222d      	movlt	r2, #45	; 0x2d
 800769e:	222b      	movge	r2, #43	; 0x2b
 80076a0:	2909      	cmp	r1, #9
 80076a2:	7042      	strb	r2, [r0, #1]
 80076a4:	dd2a      	ble.n	80076fc <__exponent+0x70>
 80076a6:	f10d 0407 	add.w	r4, sp, #7
 80076aa:	46a4      	mov	ip, r4
 80076ac:	270a      	movs	r7, #10
 80076ae:	46a6      	mov	lr, r4
 80076b0:	460a      	mov	r2, r1
 80076b2:	fb91 f6f7 	sdiv	r6, r1, r7
 80076b6:	fb07 1516 	mls	r5, r7, r6, r1
 80076ba:	3530      	adds	r5, #48	; 0x30
 80076bc:	2a63      	cmp	r2, #99	; 0x63
 80076be:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80076c2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80076c6:	4631      	mov	r1, r6
 80076c8:	dcf1      	bgt.n	80076ae <__exponent+0x22>
 80076ca:	3130      	adds	r1, #48	; 0x30
 80076cc:	f1ae 0502 	sub.w	r5, lr, #2
 80076d0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80076d4:	1c44      	adds	r4, r0, #1
 80076d6:	4629      	mov	r1, r5
 80076d8:	4561      	cmp	r1, ip
 80076da:	d30a      	bcc.n	80076f2 <__exponent+0x66>
 80076dc:	f10d 0209 	add.w	r2, sp, #9
 80076e0:	eba2 020e 	sub.w	r2, r2, lr
 80076e4:	4565      	cmp	r5, ip
 80076e6:	bf88      	it	hi
 80076e8:	2200      	movhi	r2, #0
 80076ea:	4413      	add	r3, r2
 80076ec:	1a18      	subs	r0, r3, r0
 80076ee:	b003      	add	sp, #12
 80076f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80076f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80076f6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80076fa:	e7ed      	b.n	80076d8 <__exponent+0x4c>
 80076fc:	2330      	movs	r3, #48	; 0x30
 80076fe:	3130      	adds	r1, #48	; 0x30
 8007700:	7083      	strb	r3, [r0, #2]
 8007702:	70c1      	strb	r1, [r0, #3]
 8007704:	1d03      	adds	r3, r0, #4
 8007706:	e7f1      	b.n	80076ec <__exponent+0x60>

08007708 <_printf_float>:
 8007708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800770c:	ed2d 8b02 	vpush	{d8}
 8007710:	b08d      	sub	sp, #52	; 0x34
 8007712:	460c      	mov	r4, r1
 8007714:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007718:	4616      	mov	r6, r2
 800771a:	461f      	mov	r7, r3
 800771c:	4605      	mov	r5, r0
 800771e:	f003 f8c9 	bl	800a8b4 <_localeconv_r>
 8007722:	f8d0 a000 	ldr.w	sl, [r0]
 8007726:	4650      	mov	r0, sl
 8007728:	f7f8 fd72 	bl	8000210 <strlen>
 800772c:	2300      	movs	r3, #0
 800772e:	930a      	str	r3, [sp, #40]	; 0x28
 8007730:	6823      	ldr	r3, [r4, #0]
 8007732:	9305      	str	r3, [sp, #20]
 8007734:	f8d8 3000 	ldr.w	r3, [r8]
 8007738:	f894 b018 	ldrb.w	fp, [r4, #24]
 800773c:	3307      	adds	r3, #7
 800773e:	f023 0307 	bic.w	r3, r3, #7
 8007742:	f103 0208 	add.w	r2, r3, #8
 8007746:	f8c8 2000 	str.w	r2, [r8]
 800774a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800774e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007752:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007756:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800775a:	9307      	str	r3, [sp, #28]
 800775c:	f8cd 8018 	str.w	r8, [sp, #24]
 8007760:	ee08 0a10 	vmov	s16, r0
 8007764:	4b9f      	ldr	r3, [pc, #636]	; (80079e4 <_printf_float+0x2dc>)
 8007766:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800776a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800776e:	f7f9 f9fd 	bl	8000b6c <__aeabi_dcmpun>
 8007772:	bb88      	cbnz	r0, 80077d8 <_printf_float+0xd0>
 8007774:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007778:	4b9a      	ldr	r3, [pc, #616]	; (80079e4 <_printf_float+0x2dc>)
 800777a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800777e:	f7f9 f9d7 	bl	8000b30 <__aeabi_dcmple>
 8007782:	bb48      	cbnz	r0, 80077d8 <_printf_float+0xd0>
 8007784:	2200      	movs	r2, #0
 8007786:	2300      	movs	r3, #0
 8007788:	4640      	mov	r0, r8
 800778a:	4649      	mov	r1, r9
 800778c:	f7f9 f9c6 	bl	8000b1c <__aeabi_dcmplt>
 8007790:	b110      	cbz	r0, 8007798 <_printf_float+0x90>
 8007792:	232d      	movs	r3, #45	; 0x2d
 8007794:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007798:	4b93      	ldr	r3, [pc, #588]	; (80079e8 <_printf_float+0x2e0>)
 800779a:	4894      	ldr	r0, [pc, #592]	; (80079ec <_printf_float+0x2e4>)
 800779c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80077a0:	bf94      	ite	ls
 80077a2:	4698      	movls	r8, r3
 80077a4:	4680      	movhi	r8, r0
 80077a6:	2303      	movs	r3, #3
 80077a8:	6123      	str	r3, [r4, #16]
 80077aa:	9b05      	ldr	r3, [sp, #20]
 80077ac:	f023 0204 	bic.w	r2, r3, #4
 80077b0:	6022      	str	r2, [r4, #0]
 80077b2:	f04f 0900 	mov.w	r9, #0
 80077b6:	9700      	str	r7, [sp, #0]
 80077b8:	4633      	mov	r3, r6
 80077ba:	aa0b      	add	r2, sp, #44	; 0x2c
 80077bc:	4621      	mov	r1, r4
 80077be:	4628      	mov	r0, r5
 80077c0:	f000 f9d8 	bl	8007b74 <_printf_common>
 80077c4:	3001      	adds	r0, #1
 80077c6:	f040 8090 	bne.w	80078ea <_printf_float+0x1e2>
 80077ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80077ce:	b00d      	add	sp, #52	; 0x34
 80077d0:	ecbd 8b02 	vpop	{d8}
 80077d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077d8:	4642      	mov	r2, r8
 80077da:	464b      	mov	r3, r9
 80077dc:	4640      	mov	r0, r8
 80077de:	4649      	mov	r1, r9
 80077e0:	f7f9 f9c4 	bl	8000b6c <__aeabi_dcmpun>
 80077e4:	b140      	cbz	r0, 80077f8 <_printf_float+0xf0>
 80077e6:	464b      	mov	r3, r9
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	bfbc      	itt	lt
 80077ec:	232d      	movlt	r3, #45	; 0x2d
 80077ee:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80077f2:	487f      	ldr	r0, [pc, #508]	; (80079f0 <_printf_float+0x2e8>)
 80077f4:	4b7f      	ldr	r3, [pc, #508]	; (80079f4 <_printf_float+0x2ec>)
 80077f6:	e7d1      	b.n	800779c <_printf_float+0x94>
 80077f8:	6863      	ldr	r3, [r4, #4]
 80077fa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80077fe:	9206      	str	r2, [sp, #24]
 8007800:	1c5a      	adds	r2, r3, #1
 8007802:	d13f      	bne.n	8007884 <_printf_float+0x17c>
 8007804:	2306      	movs	r3, #6
 8007806:	6063      	str	r3, [r4, #4]
 8007808:	9b05      	ldr	r3, [sp, #20]
 800780a:	6861      	ldr	r1, [r4, #4]
 800780c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007810:	2300      	movs	r3, #0
 8007812:	9303      	str	r3, [sp, #12]
 8007814:	ab0a      	add	r3, sp, #40	; 0x28
 8007816:	e9cd b301 	strd	fp, r3, [sp, #4]
 800781a:	ab09      	add	r3, sp, #36	; 0x24
 800781c:	ec49 8b10 	vmov	d0, r8, r9
 8007820:	9300      	str	r3, [sp, #0]
 8007822:	6022      	str	r2, [r4, #0]
 8007824:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007828:	4628      	mov	r0, r5
 800782a:	f7ff fecd 	bl	80075c8 <__cvt>
 800782e:	9b06      	ldr	r3, [sp, #24]
 8007830:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007832:	2b47      	cmp	r3, #71	; 0x47
 8007834:	4680      	mov	r8, r0
 8007836:	d108      	bne.n	800784a <_printf_float+0x142>
 8007838:	1cc8      	adds	r0, r1, #3
 800783a:	db02      	blt.n	8007842 <_printf_float+0x13a>
 800783c:	6863      	ldr	r3, [r4, #4]
 800783e:	4299      	cmp	r1, r3
 8007840:	dd41      	ble.n	80078c6 <_printf_float+0x1be>
 8007842:	f1ab 0b02 	sub.w	fp, fp, #2
 8007846:	fa5f fb8b 	uxtb.w	fp, fp
 800784a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800784e:	d820      	bhi.n	8007892 <_printf_float+0x18a>
 8007850:	3901      	subs	r1, #1
 8007852:	465a      	mov	r2, fp
 8007854:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007858:	9109      	str	r1, [sp, #36]	; 0x24
 800785a:	f7ff ff17 	bl	800768c <__exponent>
 800785e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007860:	1813      	adds	r3, r2, r0
 8007862:	2a01      	cmp	r2, #1
 8007864:	4681      	mov	r9, r0
 8007866:	6123      	str	r3, [r4, #16]
 8007868:	dc02      	bgt.n	8007870 <_printf_float+0x168>
 800786a:	6822      	ldr	r2, [r4, #0]
 800786c:	07d2      	lsls	r2, r2, #31
 800786e:	d501      	bpl.n	8007874 <_printf_float+0x16c>
 8007870:	3301      	adds	r3, #1
 8007872:	6123      	str	r3, [r4, #16]
 8007874:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007878:	2b00      	cmp	r3, #0
 800787a:	d09c      	beq.n	80077b6 <_printf_float+0xae>
 800787c:	232d      	movs	r3, #45	; 0x2d
 800787e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007882:	e798      	b.n	80077b6 <_printf_float+0xae>
 8007884:	9a06      	ldr	r2, [sp, #24]
 8007886:	2a47      	cmp	r2, #71	; 0x47
 8007888:	d1be      	bne.n	8007808 <_printf_float+0x100>
 800788a:	2b00      	cmp	r3, #0
 800788c:	d1bc      	bne.n	8007808 <_printf_float+0x100>
 800788e:	2301      	movs	r3, #1
 8007890:	e7b9      	b.n	8007806 <_printf_float+0xfe>
 8007892:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007896:	d118      	bne.n	80078ca <_printf_float+0x1c2>
 8007898:	2900      	cmp	r1, #0
 800789a:	6863      	ldr	r3, [r4, #4]
 800789c:	dd0b      	ble.n	80078b6 <_printf_float+0x1ae>
 800789e:	6121      	str	r1, [r4, #16]
 80078a0:	b913      	cbnz	r3, 80078a8 <_printf_float+0x1a0>
 80078a2:	6822      	ldr	r2, [r4, #0]
 80078a4:	07d0      	lsls	r0, r2, #31
 80078a6:	d502      	bpl.n	80078ae <_printf_float+0x1a6>
 80078a8:	3301      	adds	r3, #1
 80078aa:	440b      	add	r3, r1
 80078ac:	6123      	str	r3, [r4, #16]
 80078ae:	65a1      	str	r1, [r4, #88]	; 0x58
 80078b0:	f04f 0900 	mov.w	r9, #0
 80078b4:	e7de      	b.n	8007874 <_printf_float+0x16c>
 80078b6:	b913      	cbnz	r3, 80078be <_printf_float+0x1b6>
 80078b8:	6822      	ldr	r2, [r4, #0]
 80078ba:	07d2      	lsls	r2, r2, #31
 80078bc:	d501      	bpl.n	80078c2 <_printf_float+0x1ba>
 80078be:	3302      	adds	r3, #2
 80078c0:	e7f4      	b.n	80078ac <_printf_float+0x1a4>
 80078c2:	2301      	movs	r3, #1
 80078c4:	e7f2      	b.n	80078ac <_printf_float+0x1a4>
 80078c6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80078ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078cc:	4299      	cmp	r1, r3
 80078ce:	db05      	blt.n	80078dc <_printf_float+0x1d4>
 80078d0:	6823      	ldr	r3, [r4, #0]
 80078d2:	6121      	str	r1, [r4, #16]
 80078d4:	07d8      	lsls	r0, r3, #31
 80078d6:	d5ea      	bpl.n	80078ae <_printf_float+0x1a6>
 80078d8:	1c4b      	adds	r3, r1, #1
 80078da:	e7e7      	b.n	80078ac <_printf_float+0x1a4>
 80078dc:	2900      	cmp	r1, #0
 80078de:	bfd4      	ite	le
 80078e0:	f1c1 0202 	rsble	r2, r1, #2
 80078e4:	2201      	movgt	r2, #1
 80078e6:	4413      	add	r3, r2
 80078e8:	e7e0      	b.n	80078ac <_printf_float+0x1a4>
 80078ea:	6823      	ldr	r3, [r4, #0]
 80078ec:	055a      	lsls	r2, r3, #21
 80078ee:	d407      	bmi.n	8007900 <_printf_float+0x1f8>
 80078f0:	6923      	ldr	r3, [r4, #16]
 80078f2:	4642      	mov	r2, r8
 80078f4:	4631      	mov	r1, r6
 80078f6:	4628      	mov	r0, r5
 80078f8:	47b8      	blx	r7
 80078fa:	3001      	adds	r0, #1
 80078fc:	d12c      	bne.n	8007958 <_printf_float+0x250>
 80078fe:	e764      	b.n	80077ca <_printf_float+0xc2>
 8007900:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007904:	f240 80e0 	bls.w	8007ac8 <_printf_float+0x3c0>
 8007908:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800790c:	2200      	movs	r2, #0
 800790e:	2300      	movs	r3, #0
 8007910:	f7f9 f8fa 	bl	8000b08 <__aeabi_dcmpeq>
 8007914:	2800      	cmp	r0, #0
 8007916:	d034      	beq.n	8007982 <_printf_float+0x27a>
 8007918:	4a37      	ldr	r2, [pc, #220]	; (80079f8 <_printf_float+0x2f0>)
 800791a:	2301      	movs	r3, #1
 800791c:	4631      	mov	r1, r6
 800791e:	4628      	mov	r0, r5
 8007920:	47b8      	blx	r7
 8007922:	3001      	adds	r0, #1
 8007924:	f43f af51 	beq.w	80077ca <_printf_float+0xc2>
 8007928:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800792c:	429a      	cmp	r2, r3
 800792e:	db02      	blt.n	8007936 <_printf_float+0x22e>
 8007930:	6823      	ldr	r3, [r4, #0]
 8007932:	07d8      	lsls	r0, r3, #31
 8007934:	d510      	bpl.n	8007958 <_printf_float+0x250>
 8007936:	ee18 3a10 	vmov	r3, s16
 800793a:	4652      	mov	r2, sl
 800793c:	4631      	mov	r1, r6
 800793e:	4628      	mov	r0, r5
 8007940:	47b8      	blx	r7
 8007942:	3001      	adds	r0, #1
 8007944:	f43f af41 	beq.w	80077ca <_printf_float+0xc2>
 8007948:	f04f 0800 	mov.w	r8, #0
 800794c:	f104 091a 	add.w	r9, r4, #26
 8007950:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007952:	3b01      	subs	r3, #1
 8007954:	4543      	cmp	r3, r8
 8007956:	dc09      	bgt.n	800796c <_printf_float+0x264>
 8007958:	6823      	ldr	r3, [r4, #0]
 800795a:	079b      	lsls	r3, r3, #30
 800795c:	f100 8105 	bmi.w	8007b6a <_printf_float+0x462>
 8007960:	68e0      	ldr	r0, [r4, #12]
 8007962:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007964:	4298      	cmp	r0, r3
 8007966:	bfb8      	it	lt
 8007968:	4618      	movlt	r0, r3
 800796a:	e730      	b.n	80077ce <_printf_float+0xc6>
 800796c:	2301      	movs	r3, #1
 800796e:	464a      	mov	r2, r9
 8007970:	4631      	mov	r1, r6
 8007972:	4628      	mov	r0, r5
 8007974:	47b8      	blx	r7
 8007976:	3001      	adds	r0, #1
 8007978:	f43f af27 	beq.w	80077ca <_printf_float+0xc2>
 800797c:	f108 0801 	add.w	r8, r8, #1
 8007980:	e7e6      	b.n	8007950 <_printf_float+0x248>
 8007982:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007984:	2b00      	cmp	r3, #0
 8007986:	dc39      	bgt.n	80079fc <_printf_float+0x2f4>
 8007988:	4a1b      	ldr	r2, [pc, #108]	; (80079f8 <_printf_float+0x2f0>)
 800798a:	2301      	movs	r3, #1
 800798c:	4631      	mov	r1, r6
 800798e:	4628      	mov	r0, r5
 8007990:	47b8      	blx	r7
 8007992:	3001      	adds	r0, #1
 8007994:	f43f af19 	beq.w	80077ca <_printf_float+0xc2>
 8007998:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800799c:	4313      	orrs	r3, r2
 800799e:	d102      	bne.n	80079a6 <_printf_float+0x29e>
 80079a0:	6823      	ldr	r3, [r4, #0]
 80079a2:	07d9      	lsls	r1, r3, #31
 80079a4:	d5d8      	bpl.n	8007958 <_printf_float+0x250>
 80079a6:	ee18 3a10 	vmov	r3, s16
 80079aa:	4652      	mov	r2, sl
 80079ac:	4631      	mov	r1, r6
 80079ae:	4628      	mov	r0, r5
 80079b0:	47b8      	blx	r7
 80079b2:	3001      	adds	r0, #1
 80079b4:	f43f af09 	beq.w	80077ca <_printf_float+0xc2>
 80079b8:	f04f 0900 	mov.w	r9, #0
 80079bc:	f104 0a1a 	add.w	sl, r4, #26
 80079c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079c2:	425b      	negs	r3, r3
 80079c4:	454b      	cmp	r3, r9
 80079c6:	dc01      	bgt.n	80079cc <_printf_float+0x2c4>
 80079c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079ca:	e792      	b.n	80078f2 <_printf_float+0x1ea>
 80079cc:	2301      	movs	r3, #1
 80079ce:	4652      	mov	r2, sl
 80079d0:	4631      	mov	r1, r6
 80079d2:	4628      	mov	r0, r5
 80079d4:	47b8      	blx	r7
 80079d6:	3001      	adds	r0, #1
 80079d8:	f43f aef7 	beq.w	80077ca <_printf_float+0xc2>
 80079dc:	f109 0901 	add.w	r9, r9, #1
 80079e0:	e7ee      	b.n	80079c0 <_printf_float+0x2b8>
 80079e2:	bf00      	nop
 80079e4:	7fefffff 	.word	0x7fefffff
 80079e8:	0800c0ec 	.word	0x0800c0ec
 80079ec:	0800c0f0 	.word	0x0800c0f0
 80079f0:	0800c0f8 	.word	0x0800c0f8
 80079f4:	0800c0f4 	.word	0x0800c0f4
 80079f8:	0800c0fc 	.word	0x0800c0fc
 80079fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80079fe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007a00:	429a      	cmp	r2, r3
 8007a02:	bfa8      	it	ge
 8007a04:	461a      	movge	r2, r3
 8007a06:	2a00      	cmp	r2, #0
 8007a08:	4691      	mov	r9, r2
 8007a0a:	dc37      	bgt.n	8007a7c <_printf_float+0x374>
 8007a0c:	f04f 0b00 	mov.w	fp, #0
 8007a10:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007a14:	f104 021a 	add.w	r2, r4, #26
 8007a18:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007a1a:	9305      	str	r3, [sp, #20]
 8007a1c:	eba3 0309 	sub.w	r3, r3, r9
 8007a20:	455b      	cmp	r3, fp
 8007a22:	dc33      	bgt.n	8007a8c <_printf_float+0x384>
 8007a24:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007a28:	429a      	cmp	r2, r3
 8007a2a:	db3b      	blt.n	8007aa4 <_printf_float+0x39c>
 8007a2c:	6823      	ldr	r3, [r4, #0]
 8007a2e:	07da      	lsls	r2, r3, #31
 8007a30:	d438      	bmi.n	8007aa4 <_printf_float+0x39c>
 8007a32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a34:	9a05      	ldr	r2, [sp, #20]
 8007a36:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007a38:	1a9a      	subs	r2, r3, r2
 8007a3a:	eba3 0901 	sub.w	r9, r3, r1
 8007a3e:	4591      	cmp	r9, r2
 8007a40:	bfa8      	it	ge
 8007a42:	4691      	movge	r9, r2
 8007a44:	f1b9 0f00 	cmp.w	r9, #0
 8007a48:	dc35      	bgt.n	8007ab6 <_printf_float+0x3ae>
 8007a4a:	f04f 0800 	mov.w	r8, #0
 8007a4e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007a52:	f104 0a1a 	add.w	sl, r4, #26
 8007a56:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007a5a:	1a9b      	subs	r3, r3, r2
 8007a5c:	eba3 0309 	sub.w	r3, r3, r9
 8007a60:	4543      	cmp	r3, r8
 8007a62:	f77f af79 	ble.w	8007958 <_printf_float+0x250>
 8007a66:	2301      	movs	r3, #1
 8007a68:	4652      	mov	r2, sl
 8007a6a:	4631      	mov	r1, r6
 8007a6c:	4628      	mov	r0, r5
 8007a6e:	47b8      	blx	r7
 8007a70:	3001      	adds	r0, #1
 8007a72:	f43f aeaa 	beq.w	80077ca <_printf_float+0xc2>
 8007a76:	f108 0801 	add.w	r8, r8, #1
 8007a7a:	e7ec      	b.n	8007a56 <_printf_float+0x34e>
 8007a7c:	4613      	mov	r3, r2
 8007a7e:	4631      	mov	r1, r6
 8007a80:	4642      	mov	r2, r8
 8007a82:	4628      	mov	r0, r5
 8007a84:	47b8      	blx	r7
 8007a86:	3001      	adds	r0, #1
 8007a88:	d1c0      	bne.n	8007a0c <_printf_float+0x304>
 8007a8a:	e69e      	b.n	80077ca <_printf_float+0xc2>
 8007a8c:	2301      	movs	r3, #1
 8007a8e:	4631      	mov	r1, r6
 8007a90:	4628      	mov	r0, r5
 8007a92:	9205      	str	r2, [sp, #20]
 8007a94:	47b8      	blx	r7
 8007a96:	3001      	adds	r0, #1
 8007a98:	f43f ae97 	beq.w	80077ca <_printf_float+0xc2>
 8007a9c:	9a05      	ldr	r2, [sp, #20]
 8007a9e:	f10b 0b01 	add.w	fp, fp, #1
 8007aa2:	e7b9      	b.n	8007a18 <_printf_float+0x310>
 8007aa4:	ee18 3a10 	vmov	r3, s16
 8007aa8:	4652      	mov	r2, sl
 8007aaa:	4631      	mov	r1, r6
 8007aac:	4628      	mov	r0, r5
 8007aae:	47b8      	blx	r7
 8007ab0:	3001      	adds	r0, #1
 8007ab2:	d1be      	bne.n	8007a32 <_printf_float+0x32a>
 8007ab4:	e689      	b.n	80077ca <_printf_float+0xc2>
 8007ab6:	9a05      	ldr	r2, [sp, #20]
 8007ab8:	464b      	mov	r3, r9
 8007aba:	4442      	add	r2, r8
 8007abc:	4631      	mov	r1, r6
 8007abe:	4628      	mov	r0, r5
 8007ac0:	47b8      	blx	r7
 8007ac2:	3001      	adds	r0, #1
 8007ac4:	d1c1      	bne.n	8007a4a <_printf_float+0x342>
 8007ac6:	e680      	b.n	80077ca <_printf_float+0xc2>
 8007ac8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007aca:	2a01      	cmp	r2, #1
 8007acc:	dc01      	bgt.n	8007ad2 <_printf_float+0x3ca>
 8007ace:	07db      	lsls	r3, r3, #31
 8007ad0:	d538      	bpl.n	8007b44 <_printf_float+0x43c>
 8007ad2:	2301      	movs	r3, #1
 8007ad4:	4642      	mov	r2, r8
 8007ad6:	4631      	mov	r1, r6
 8007ad8:	4628      	mov	r0, r5
 8007ada:	47b8      	blx	r7
 8007adc:	3001      	adds	r0, #1
 8007ade:	f43f ae74 	beq.w	80077ca <_printf_float+0xc2>
 8007ae2:	ee18 3a10 	vmov	r3, s16
 8007ae6:	4652      	mov	r2, sl
 8007ae8:	4631      	mov	r1, r6
 8007aea:	4628      	mov	r0, r5
 8007aec:	47b8      	blx	r7
 8007aee:	3001      	adds	r0, #1
 8007af0:	f43f ae6b 	beq.w	80077ca <_printf_float+0xc2>
 8007af4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007af8:	2200      	movs	r2, #0
 8007afa:	2300      	movs	r3, #0
 8007afc:	f7f9 f804 	bl	8000b08 <__aeabi_dcmpeq>
 8007b00:	b9d8      	cbnz	r0, 8007b3a <_printf_float+0x432>
 8007b02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b04:	f108 0201 	add.w	r2, r8, #1
 8007b08:	3b01      	subs	r3, #1
 8007b0a:	4631      	mov	r1, r6
 8007b0c:	4628      	mov	r0, r5
 8007b0e:	47b8      	blx	r7
 8007b10:	3001      	adds	r0, #1
 8007b12:	d10e      	bne.n	8007b32 <_printf_float+0x42a>
 8007b14:	e659      	b.n	80077ca <_printf_float+0xc2>
 8007b16:	2301      	movs	r3, #1
 8007b18:	4652      	mov	r2, sl
 8007b1a:	4631      	mov	r1, r6
 8007b1c:	4628      	mov	r0, r5
 8007b1e:	47b8      	blx	r7
 8007b20:	3001      	adds	r0, #1
 8007b22:	f43f ae52 	beq.w	80077ca <_printf_float+0xc2>
 8007b26:	f108 0801 	add.w	r8, r8, #1
 8007b2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b2c:	3b01      	subs	r3, #1
 8007b2e:	4543      	cmp	r3, r8
 8007b30:	dcf1      	bgt.n	8007b16 <_printf_float+0x40e>
 8007b32:	464b      	mov	r3, r9
 8007b34:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007b38:	e6dc      	b.n	80078f4 <_printf_float+0x1ec>
 8007b3a:	f04f 0800 	mov.w	r8, #0
 8007b3e:	f104 0a1a 	add.w	sl, r4, #26
 8007b42:	e7f2      	b.n	8007b2a <_printf_float+0x422>
 8007b44:	2301      	movs	r3, #1
 8007b46:	4642      	mov	r2, r8
 8007b48:	e7df      	b.n	8007b0a <_printf_float+0x402>
 8007b4a:	2301      	movs	r3, #1
 8007b4c:	464a      	mov	r2, r9
 8007b4e:	4631      	mov	r1, r6
 8007b50:	4628      	mov	r0, r5
 8007b52:	47b8      	blx	r7
 8007b54:	3001      	adds	r0, #1
 8007b56:	f43f ae38 	beq.w	80077ca <_printf_float+0xc2>
 8007b5a:	f108 0801 	add.w	r8, r8, #1
 8007b5e:	68e3      	ldr	r3, [r4, #12]
 8007b60:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007b62:	1a5b      	subs	r3, r3, r1
 8007b64:	4543      	cmp	r3, r8
 8007b66:	dcf0      	bgt.n	8007b4a <_printf_float+0x442>
 8007b68:	e6fa      	b.n	8007960 <_printf_float+0x258>
 8007b6a:	f04f 0800 	mov.w	r8, #0
 8007b6e:	f104 0919 	add.w	r9, r4, #25
 8007b72:	e7f4      	b.n	8007b5e <_printf_float+0x456>

08007b74 <_printf_common>:
 8007b74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b78:	4616      	mov	r6, r2
 8007b7a:	4699      	mov	r9, r3
 8007b7c:	688a      	ldr	r2, [r1, #8]
 8007b7e:	690b      	ldr	r3, [r1, #16]
 8007b80:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007b84:	4293      	cmp	r3, r2
 8007b86:	bfb8      	it	lt
 8007b88:	4613      	movlt	r3, r2
 8007b8a:	6033      	str	r3, [r6, #0]
 8007b8c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007b90:	4607      	mov	r7, r0
 8007b92:	460c      	mov	r4, r1
 8007b94:	b10a      	cbz	r2, 8007b9a <_printf_common+0x26>
 8007b96:	3301      	adds	r3, #1
 8007b98:	6033      	str	r3, [r6, #0]
 8007b9a:	6823      	ldr	r3, [r4, #0]
 8007b9c:	0699      	lsls	r1, r3, #26
 8007b9e:	bf42      	ittt	mi
 8007ba0:	6833      	ldrmi	r3, [r6, #0]
 8007ba2:	3302      	addmi	r3, #2
 8007ba4:	6033      	strmi	r3, [r6, #0]
 8007ba6:	6825      	ldr	r5, [r4, #0]
 8007ba8:	f015 0506 	ands.w	r5, r5, #6
 8007bac:	d106      	bne.n	8007bbc <_printf_common+0x48>
 8007bae:	f104 0a19 	add.w	sl, r4, #25
 8007bb2:	68e3      	ldr	r3, [r4, #12]
 8007bb4:	6832      	ldr	r2, [r6, #0]
 8007bb6:	1a9b      	subs	r3, r3, r2
 8007bb8:	42ab      	cmp	r3, r5
 8007bba:	dc26      	bgt.n	8007c0a <_printf_common+0x96>
 8007bbc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007bc0:	1e13      	subs	r3, r2, #0
 8007bc2:	6822      	ldr	r2, [r4, #0]
 8007bc4:	bf18      	it	ne
 8007bc6:	2301      	movne	r3, #1
 8007bc8:	0692      	lsls	r2, r2, #26
 8007bca:	d42b      	bmi.n	8007c24 <_printf_common+0xb0>
 8007bcc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007bd0:	4649      	mov	r1, r9
 8007bd2:	4638      	mov	r0, r7
 8007bd4:	47c0      	blx	r8
 8007bd6:	3001      	adds	r0, #1
 8007bd8:	d01e      	beq.n	8007c18 <_printf_common+0xa4>
 8007bda:	6823      	ldr	r3, [r4, #0]
 8007bdc:	68e5      	ldr	r5, [r4, #12]
 8007bde:	6832      	ldr	r2, [r6, #0]
 8007be0:	f003 0306 	and.w	r3, r3, #6
 8007be4:	2b04      	cmp	r3, #4
 8007be6:	bf08      	it	eq
 8007be8:	1aad      	subeq	r5, r5, r2
 8007bea:	68a3      	ldr	r3, [r4, #8]
 8007bec:	6922      	ldr	r2, [r4, #16]
 8007bee:	bf0c      	ite	eq
 8007bf0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007bf4:	2500      	movne	r5, #0
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	bfc4      	itt	gt
 8007bfa:	1a9b      	subgt	r3, r3, r2
 8007bfc:	18ed      	addgt	r5, r5, r3
 8007bfe:	2600      	movs	r6, #0
 8007c00:	341a      	adds	r4, #26
 8007c02:	42b5      	cmp	r5, r6
 8007c04:	d11a      	bne.n	8007c3c <_printf_common+0xc8>
 8007c06:	2000      	movs	r0, #0
 8007c08:	e008      	b.n	8007c1c <_printf_common+0xa8>
 8007c0a:	2301      	movs	r3, #1
 8007c0c:	4652      	mov	r2, sl
 8007c0e:	4649      	mov	r1, r9
 8007c10:	4638      	mov	r0, r7
 8007c12:	47c0      	blx	r8
 8007c14:	3001      	adds	r0, #1
 8007c16:	d103      	bne.n	8007c20 <_printf_common+0xac>
 8007c18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007c1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c20:	3501      	adds	r5, #1
 8007c22:	e7c6      	b.n	8007bb2 <_printf_common+0x3e>
 8007c24:	18e1      	adds	r1, r4, r3
 8007c26:	1c5a      	adds	r2, r3, #1
 8007c28:	2030      	movs	r0, #48	; 0x30
 8007c2a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007c2e:	4422      	add	r2, r4
 8007c30:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007c34:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007c38:	3302      	adds	r3, #2
 8007c3a:	e7c7      	b.n	8007bcc <_printf_common+0x58>
 8007c3c:	2301      	movs	r3, #1
 8007c3e:	4622      	mov	r2, r4
 8007c40:	4649      	mov	r1, r9
 8007c42:	4638      	mov	r0, r7
 8007c44:	47c0      	blx	r8
 8007c46:	3001      	adds	r0, #1
 8007c48:	d0e6      	beq.n	8007c18 <_printf_common+0xa4>
 8007c4a:	3601      	adds	r6, #1
 8007c4c:	e7d9      	b.n	8007c02 <_printf_common+0x8e>
	...

08007c50 <_printf_i>:
 8007c50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007c54:	7e0f      	ldrb	r7, [r1, #24]
 8007c56:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007c58:	2f78      	cmp	r7, #120	; 0x78
 8007c5a:	4691      	mov	r9, r2
 8007c5c:	4680      	mov	r8, r0
 8007c5e:	460c      	mov	r4, r1
 8007c60:	469a      	mov	sl, r3
 8007c62:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007c66:	d807      	bhi.n	8007c78 <_printf_i+0x28>
 8007c68:	2f62      	cmp	r7, #98	; 0x62
 8007c6a:	d80a      	bhi.n	8007c82 <_printf_i+0x32>
 8007c6c:	2f00      	cmp	r7, #0
 8007c6e:	f000 80d8 	beq.w	8007e22 <_printf_i+0x1d2>
 8007c72:	2f58      	cmp	r7, #88	; 0x58
 8007c74:	f000 80a3 	beq.w	8007dbe <_printf_i+0x16e>
 8007c78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007c7c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007c80:	e03a      	b.n	8007cf8 <_printf_i+0xa8>
 8007c82:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007c86:	2b15      	cmp	r3, #21
 8007c88:	d8f6      	bhi.n	8007c78 <_printf_i+0x28>
 8007c8a:	a101      	add	r1, pc, #4	; (adr r1, 8007c90 <_printf_i+0x40>)
 8007c8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007c90:	08007ce9 	.word	0x08007ce9
 8007c94:	08007cfd 	.word	0x08007cfd
 8007c98:	08007c79 	.word	0x08007c79
 8007c9c:	08007c79 	.word	0x08007c79
 8007ca0:	08007c79 	.word	0x08007c79
 8007ca4:	08007c79 	.word	0x08007c79
 8007ca8:	08007cfd 	.word	0x08007cfd
 8007cac:	08007c79 	.word	0x08007c79
 8007cb0:	08007c79 	.word	0x08007c79
 8007cb4:	08007c79 	.word	0x08007c79
 8007cb8:	08007c79 	.word	0x08007c79
 8007cbc:	08007e09 	.word	0x08007e09
 8007cc0:	08007d2d 	.word	0x08007d2d
 8007cc4:	08007deb 	.word	0x08007deb
 8007cc8:	08007c79 	.word	0x08007c79
 8007ccc:	08007c79 	.word	0x08007c79
 8007cd0:	08007e2b 	.word	0x08007e2b
 8007cd4:	08007c79 	.word	0x08007c79
 8007cd8:	08007d2d 	.word	0x08007d2d
 8007cdc:	08007c79 	.word	0x08007c79
 8007ce0:	08007c79 	.word	0x08007c79
 8007ce4:	08007df3 	.word	0x08007df3
 8007ce8:	682b      	ldr	r3, [r5, #0]
 8007cea:	1d1a      	adds	r2, r3, #4
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	602a      	str	r2, [r5, #0]
 8007cf0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007cf4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007cf8:	2301      	movs	r3, #1
 8007cfa:	e0a3      	b.n	8007e44 <_printf_i+0x1f4>
 8007cfc:	6820      	ldr	r0, [r4, #0]
 8007cfe:	6829      	ldr	r1, [r5, #0]
 8007d00:	0606      	lsls	r6, r0, #24
 8007d02:	f101 0304 	add.w	r3, r1, #4
 8007d06:	d50a      	bpl.n	8007d1e <_printf_i+0xce>
 8007d08:	680e      	ldr	r6, [r1, #0]
 8007d0a:	602b      	str	r3, [r5, #0]
 8007d0c:	2e00      	cmp	r6, #0
 8007d0e:	da03      	bge.n	8007d18 <_printf_i+0xc8>
 8007d10:	232d      	movs	r3, #45	; 0x2d
 8007d12:	4276      	negs	r6, r6
 8007d14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d18:	485e      	ldr	r0, [pc, #376]	; (8007e94 <_printf_i+0x244>)
 8007d1a:	230a      	movs	r3, #10
 8007d1c:	e019      	b.n	8007d52 <_printf_i+0x102>
 8007d1e:	680e      	ldr	r6, [r1, #0]
 8007d20:	602b      	str	r3, [r5, #0]
 8007d22:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007d26:	bf18      	it	ne
 8007d28:	b236      	sxthne	r6, r6
 8007d2a:	e7ef      	b.n	8007d0c <_printf_i+0xbc>
 8007d2c:	682b      	ldr	r3, [r5, #0]
 8007d2e:	6820      	ldr	r0, [r4, #0]
 8007d30:	1d19      	adds	r1, r3, #4
 8007d32:	6029      	str	r1, [r5, #0]
 8007d34:	0601      	lsls	r1, r0, #24
 8007d36:	d501      	bpl.n	8007d3c <_printf_i+0xec>
 8007d38:	681e      	ldr	r6, [r3, #0]
 8007d3a:	e002      	b.n	8007d42 <_printf_i+0xf2>
 8007d3c:	0646      	lsls	r6, r0, #25
 8007d3e:	d5fb      	bpl.n	8007d38 <_printf_i+0xe8>
 8007d40:	881e      	ldrh	r6, [r3, #0]
 8007d42:	4854      	ldr	r0, [pc, #336]	; (8007e94 <_printf_i+0x244>)
 8007d44:	2f6f      	cmp	r7, #111	; 0x6f
 8007d46:	bf0c      	ite	eq
 8007d48:	2308      	moveq	r3, #8
 8007d4a:	230a      	movne	r3, #10
 8007d4c:	2100      	movs	r1, #0
 8007d4e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007d52:	6865      	ldr	r5, [r4, #4]
 8007d54:	60a5      	str	r5, [r4, #8]
 8007d56:	2d00      	cmp	r5, #0
 8007d58:	bfa2      	ittt	ge
 8007d5a:	6821      	ldrge	r1, [r4, #0]
 8007d5c:	f021 0104 	bicge.w	r1, r1, #4
 8007d60:	6021      	strge	r1, [r4, #0]
 8007d62:	b90e      	cbnz	r6, 8007d68 <_printf_i+0x118>
 8007d64:	2d00      	cmp	r5, #0
 8007d66:	d04d      	beq.n	8007e04 <_printf_i+0x1b4>
 8007d68:	4615      	mov	r5, r2
 8007d6a:	fbb6 f1f3 	udiv	r1, r6, r3
 8007d6e:	fb03 6711 	mls	r7, r3, r1, r6
 8007d72:	5dc7      	ldrb	r7, [r0, r7]
 8007d74:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007d78:	4637      	mov	r7, r6
 8007d7a:	42bb      	cmp	r3, r7
 8007d7c:	460e      	mov	r6, r1
 8007d7e:	d9f4      	bls.n	8007d6a <_printf_i+0x11a>
 8007d80:	2b08      	cmp	r3, #8
 8007d82:	d10b      	bne.n	8007d9c <_printf_i+0x14c>
 8007d84:	6823      	ldr	r3, [r4, #0]
 8007d86:	07de      	lsls	r6, r3, #31
 8007d88:	d508      	bpl.n	8007d9c <_printf_i+0x14c>
 8007d8a:	6923      	ldr	r3, [r4, #16]
 8007d8c:	6861      	ldr	r1, [r4, #4]
 8007d8e:	4299      	cmp	r1, r3
 8007d90:	bfde      	ittt	le
 8007d92:	2330      	movle	r3, #48	; 0x30
 8007d94:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007d98:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007d9c:	1b52      	subs	r2, r2, r5
 8007d9e:	6122      	str	r2, [r4, #16]
 8007da0:	f8cd a000 	str.w	sl, [sp]
 8007da4:	464b      	mov	r3, r9
 8007da6:	aa03      	add	r2, sp, #12
 8007da8:	4621      	mov	r1, r4
 8007daa:	4640      	mov	r0, r8
 8007dac:	f7ff fee2 	bl	8007b74 <_printf_common>
 8007db0:	3001      	adds	r0, #1
 8007db2:	d14c      	bne.n	8007e4e <_printf_i+0x1fe>
 8007db4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007db8:	b004      	add	sp, #16
 8007dba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007dbe:	4835      	ldr	r0, [pc, #212]	; (8007e94 <_printf_i+0x244>)
 8007dc0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007dc4:	6829      	ldr	r1, [r5, #0]
 8007dc6:	6823      	ldr	r3, [r4, #0]
 8007dc8:	f851 6b04 	ldr.w	r6, [r1], #4
 8007dcc:	6029      	str	r1, [r5, #0]
 8007dce:	061d      	lsls	r5, r3, #24
 8007dd0:	d514      	bpl.n	8007dfc <_printf_i+0x1ac>
 8007dd2:	07df      	lsls	r7, r3, #31
 8007dd4:	bf44      	itt	mi
 8007dd6:	f043 0320 	orrmi.w	r3, r3, #32
 8007dda:	6023      	strmi	r3, [r4, #0]
 8007ddc:	b91e      	cbnz	r6, 8007de6 <_printf_i+0x196>
 8007dde:	6823      	ldr	r3, [r4, #0]
 8007de0:	f023 0320 	bic.w	r3, r3, #32
 8007de4:	6023      	str	r3, [r4, #0]
 8007de6:	2310      	movs	r3, #16
 8007de8:	e7b0      	b.n	8007d4c <_printf_i+0xfc>
 8007dea:	6823      	ldr	r3, [r4, #0]
 8007dec:	f043 0320 	orr.w	r3, r3, #32
 8007df0:	6023      	str	r3, [r4, #0]
 8007df2:	2378      	movs	r3, #120	; 0x78
 8007df4:	4828      	ldr	r0, [pc, #160]	; (8007e98 <_printf_i+0x248>)
 8007df6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007dfa:	e7e3      	b.n	8007dc4 <_printf_i+0x174>
 8007dfc:	0659      	lsls	r1, r3, #25
 8007dfe:	bf48      	it	mi
 8007e00:	b2b6      	uxthmi	r6, r6
 8007e02:	e7e6      	b.n	8007dd2 <_printf_i+0x182>
 8007e04:	4615      	mov	r5, r2
 8007e06:	e7bb      	b.n	8007d80 <_printf_i+0x130>
 8007e08:	682b      	ldr	r3, [r5, #0]
 8007e0a:	6826      	ldr	r6, [r4, #0]
 8007e0c:	6961      	ldr	r1, [r4, #20]
 8007e0e:	1d18      	adds	r0, r3, #4
 8007e10:	6028      	str	r0, [r5, #0]
 8007e12:	0635      	lsls	r5, r6, #24
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	d501      	bpl.n	8007e1c <_printf_i+0x1cc>
 8007e18:	6019      	str	r1, [r3, #0]
 8007e1a:	e002      	b.n	8007e22 <_printf_i+0x1d2>
 8007e1c:	0670      	lsls	r0, r6, #25
 8007e1e:	d5fb      	bpl.n	8007e18 <_printf_i+0x1c8>
 8007e20:	8019      	strh	r1, [r3, #0]
 8007e22:	2300      	movs	r3, #0
 8007e24:	6123      	str	r3, [r4, #16]
 8007e26:	4615      	mov	r5, r2
 8007e28:	e7ba      	b.n	8007da0 <_printf_i+0x150>
 8007e2a:	682b      	ldr	r3, [r5, #0]
 8007e2c:	1d1a      	adds	r2, r3, #4
 8007e2e:	602a      	str	r2, [r5, #0]
 8007e30:	681d      	ldr	r5, [r3, #0]
 8007e32:	6862      	ldr	r2, [r4, #4]
 8007e34:	2100      	movs	r1, #0
 8007e36:	4628      	mov	r0, r5
 8007e38:	f7f8 f9f2 	bl	8000220 <memchr>
 8007e3c:	b108      	cbz	r0, 8007e42 <_printf_i+0x1f2>
 8007e3e:	1b40      	subs	r0, r0, r5
 8007e40:	6060      	str	r0, [r4, #4]
 8007e42:	6863      	ldr	r3, [r4, #4]
 8007e44:	6123      	str	r3, [r4, #16]
 8007e46:	2300      	movs	r3, #0
 8007e48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e4c:	e7a8      	b.n	8007da0 <_printf_i+0x150>
 8007e4e:	6923      	ldr	r3, [r4, #16]
 8007e50:	462a      	mov	r2, r5
 8007e52:	4649      	mov	r1, r9
 8007e54:	4640      	mov	r0, r8
 8007e56:	47d0      	blx	sl
 8007e58:	3001      	adds	r0, #1
 8007e5a:	d0ab      	beq.n	8007db4 <_printf_i+0x164>
 8007e5c:	6823      	ldr	r3, [r4, #0]
 8007e5e:	079b      	lsls	r3, r3, #30
 8007e60:	d413      	bmi.n	8007e8a <_printf_i+0x23a>
 8007e62:	68e0      	ldr	r0, [r4, #12]
 8007e64:	9b03      	ldr	r3, [sp, #12]
 8007e66:	4298      	cmp	r0, r3
 8007e68:	bfb8      	it	lt
 8007e6a:	4618      	movlt	r0, r3
 8007e6c:	e7a4      	b.n	8007db8 <_printf_i+0x168>
 8007e6e:	2301      	movs	r3, #1
 8007e70:	4632      	mov	r2, r6
 8007e72:	4649      	mov	r1, r9
 8007e74:	4640      	mov	r0, r8
 8007e76:	47d0      	blx	sl
 8007e78:	3001      	adds	r0, #1
 8007e7a:	d09b      	beq.n	8007db4 <_printf_i+0x164>
 8007e7c:	3501      	adds	r5, #1
 8007e7e:	68e3      	ldr	r3, [r4, #12]
 8007e80:	9903      	ldr	r1, [sp, #12]
 8007e82:	1a5b      	subs	r3, r3, r1
 8007e84:	42ab      	cmp	r3, r5
 8007e86:	dcf2      	bgt.n	8007e6e <_printf_i+0x21e>
 8007e88:	e7eb      	b.n	8007e62 <_printf_i+0x212>
 8007e8a:	2500      	movs	r5, #0
 8007e8c:	f104 0619 	add.w	r6, r4, #25
 8007e90:	e7f5      	b.n	8007e7e <_printf_i+0x22e>
 8007e92:	bf00      	nop
 8007e94:	0800c0fe 	.word	0x0800c0fe
 8007e98:	0800c10f 	.word	0x0800c10f

08007e9c <_scanf_float>:
 8007e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ea0:	b087      	sub	sp, #28
 8007ea2:	4617      	mov	r7, r2
 8007ea4:	9303      	str	r3, [sp, #12]
 8007ea6:	688b      	ldr	r3, [r1, #8]
 8007ea8:	1e5a      	subs	r2, r3, #1
 8007eaa:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007eae:	bf83      	ittte	hi
 8007eb0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007eb4:	195b      	addhi	r3, r3, r5
 8007eb6:	9302      	strhi	r3, [sp, #8]
 8007eb8:	2300      	movls	r3, #0
 8007eba:	bf86      	itte	hi
 8007ebc:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007ec0:	608b      	strhi	r3, [r1, #8]
 8007ec2:	9302      	strls	r3, [sp, #8]
 8007ec4:	680b      	ldr	r3, [r1, #0]
 8007ec6:	468b      	mov	fp, r1
 8007ec8:	2500      	movs	r5, #0
 8007eca:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8007ece:	f84b 3b1c 	str.w	r3, [fp], #28
 8007ed2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007ed6:	4680      	mov	r8, r0
 8007ed8:	460c      	mov	r4, r1
 8007eda:	465e      	mov	r6, fp
 8007edc:	46aa      	mov	sl, r5
 8007ede:	46a9      	mov	r9, r5
 8007ee0:	9501      	str	r5, [sp, #4]
 8007ee2:	68a2      	ldr	r2, [r4, #8]
 8007ee4:	b152      	cbz	r2, 8007efc <_scanf_float+0x60>
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	781b      	ldrb	r3, [r3, #0]
 8007eea:	2b4e      	cmp	r3, #78	; 0x4e
 8007eec:	d864      	bhi.n	8007fb8 <_scanf_float+0x11c>
 8007eee:	2b40      	cmp	r3, #64	; 0x40
 8007ef0:	d83c      	bhi.n	8007f6c <_scanf_float+0xd0>
 8007ef2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8007ef6:	b2c8      	uxtb	r0, r1
 8007ef8:	280e      	cmp	r0, #14
 8007efa:	d93a      	bls.n	8007f72 <_scanf_float+0xd6>
 8007efc:	f1b9 0f00 	cmp.w	r9, #0
 8007f00:	d003      	beq.n	8007f0a <_scanf_float+0x6e>
 8007f02:	6823      	ldr	r3, [r4, #0]
 8007f04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007f08:	6023      	str	r3, [r4, #0]
 8007f0a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8007f0e:	f1ba 0f01 	cmp.w	sl, #1
 8007f12:	f200 8113 	bhi.w	800813c <_scanf_float+0x2a0>
 8007f16:	455e      	cmp	r6, fp
 8007f18:	f200 8105 	bhi.w	8008126 <_scanf_float+0x28a>
 8007f1c:	2501      	movs	r5, #1
 8007f1e:	4628      	mov	r0, r5
 8007f20:	b007      	add	sp, #28
 8007f22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f26:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8007f2a:	2a0d      	cmp	r2, #13
 8007f2c:	d8e6      	bhi.n	8007efc <_scanf_float+0x60>
 8007f2e:	a101      	add	r1, pc, #4	; (adr r1, 8007f34 <_scanf_float+0x98>)
 8007f30:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007f34:	08008073 	.word	0x08008073
 8007f38:	08007efd 	.word	0x08007efd
 8007f3c:	08007efd 	.word	0x08007efd
 8007f40:	08007efd 	.word	0x08007efd
 8007f44:	080080d3 	.word	0x080080d3
 8007f48:	080080ab 	.word	0x080080ab
 8007f4c:	08007efd 	.word	0x08007efd
 8007f50:	08007efd 	.word	0x08007efd
 8007f54:	08008081 	.word	0x08008081
 8007f58:	08007efd 	.word	0x08007efd
 8007f5c:	08007efd 	.word	0x08007efd
 8007f60:	08007efd 	.word	0x08007efd
 8007f64:	08007efd 	.word	0x08007efd
 8007f68:	08008039 	.word	0x08008039
 8007f6c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8007f70:	e7db      	b.n	8007f2a <_scanf_float+0x8e>
 8007f72:	290e      	cmp	r1, #14
 8007f74:	d8c2      	bhi.n	8007efc <_scanf_float+0x60>
 8007f76:	a001      	add	r0, pc, #4	; (adr r0, 8007f7c <_scanf_float+0xe0>)
 8007f78:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007f7c:	0800802b 	.word	0x0800802b
 8007f80:	08007efd 	.word	0x08007efd
 8007f84:	0800802b 	.word	0x0800802b
 8007f88:	080080bf 	.word	0x080080bf
 8007f8c:	08007efd 	.word	0x08007efd
 8007f90:	08007fd9 	.word	0x08007fd9
 8007f94:	08008015 	.word	0x08008015
 8007f98:	08008015 	.word	0x08008015
 8007f9c:	08008015 	.word	0x08008015
 8007fa0:	08008015 	.word	0x08008015
 8007fa4:	08008015 	.word	0x08008015
 8007fa8:	08008015 	.word	0x08008015
 8007fac:	08008015 	.word	0x08008015
 8007fb0:	08008015 	.word	0x08008015
 8007fb4:	08008015 	.word	0x08008015
 8007fb8:	2b6e      	cmp	r3, #110	; 0x6e
 8007fba:	d809      	bhi.n	8007fd0 <_scanf_float+0x134>
 8007fbc:	2b60      	cmp	r3, #96	; 0x60
 8007fbe:	d8b2      	bhi.n	8007f26 <_scanf_float+0x8a>
 8007fc0:	2b54      	cmp	r3, #84	; 0x54
 8007fc2:	d077      	beq.n	80080b4 <_scanf_float+0x218>
 8007fc4:	2b59      	cmp	r3, #89	; 0x59
 8007fc6:	d199      	bne.n	8007efc <_scanf_float+0x60>
 8007fc8:	2d07      	cmp	r5, #7
 8007fca:	d197      	bne.n	8007efc <_scanf_float+0x60>
 8007fcc:	2508      	movs	r5, #8
 8007fce:	e029      	b.n	8008024 <_scanf_float+0x188>
 8007fd0:	2b74      	cmp	r3, #116	; 0x74
 8007fd2:	d06f      	beq.n	80080b4 <_scanf_float+0x218>
 8007fd4:	2b79      	cmp	r3, #121	; 0x79
 8007fd6:	e7f6      	b.n	8007fc6 <_scanf_float+0x12a>
 8007fd8:	6821      	ldr	r1, [r4, #0]
 8007fda:	05c8      	lsls	r0, r1, #23
 8007fdc:	d51a      	bpl.n	8008014 <_scanf_float+0x178>
 8007fde:	9b02      	ldr	r3, [sp, #8]
 8007fe0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007fe4:	6021      	str	r1, [r4, #0]
 8007fe6:	f109 0901 	add.w	r9, r9, #1
 8007fea:	b11b      	cbz	r3, 8007ff4 <_scanf_float+0x158>
 8007fec:	3b01      	subs	r3, #1
 8007fee:	3201      	adds	r2, #1
 8007ff0:	9302      	str	r3, [sp, #8]
 8007ff2:	60a2      	str	r2, [r4, #8]
 8007ff4:	68a3      	ldr	r3, [r4, #8]
 8007ff6:	3b01      	subs	r3, #1
 8007ff8:	60a3      	str	r3, [r4, #8]
 8007ffa:	6923      	ldr	r3, [r4, #16]
 8007ffc:	3301      	adds	r3, #1
 8007ffe:	6123      	str	r3, [r4, #16]
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	3b01      	subs	r3, #1
 8008004:	2b00      	cmp	r3, #0
 8008006:	607b      	str	r3, [r7, #4]
 8008008:	f340 8084 	ble.w	8008114 <_scanf_float+0x278>
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	3301      	adds	r3, #1
 8008010:	603b      	str	r3, [r7, #0]
 8008012:	e766      	b.n	8007ee2 <_scanf_float+0x46>
 8008014:	eb1a 0f05 	cmn.w	sl, r5
 8008018:	f47f af70 	bne.w	8007efc <_scanf_float+0x60>
 800801c:	6822      	ldr	r2, [r4, #0]
 800801e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8008022:	6022      	str	r2, [r4, #0]
 8008024:	f806 3b01 	strb.w	r3, [r6], #1
 8008028:	e7e4      	b.n	8007ff4 <_scanf_float+0x158>
 800802a:	6822      	ldr	r2, [r4, #0]
 800802c:	0610      	lsls	r0, r2, #24
 800802e:	f57f af65 	bpl.w	8007efc <_scanf_float+0x60>
 8008032:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008036:	e7f4      	b.n	8008022 <_scanf_float+0x186>
 8008038:	f1ba 0f00 	cmp.w	sl, #0
 800803c:	d10e      	bne.n	800805c <_scanf_float+0x1c0>
 800803e:	f1b9 0f00 	cmp.w	r9, #0
 8008042:	d10e      	bne.n	8008062 <_scanf_float+0x1c6>
 8008044:	6822      	ldr	r2, [r4, #0]
 8008046:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800804a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800804e:	d108      	bne.n	8008062 <_scanf_float+0x1c6>
 8008050:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008054:	6022      	str	r2, [r4, #0]
 8008056:	f04f 0a01 	mov.w	sl, #1
 800805a:	e7e3      	b.n	8008024 <_scanf_float+0x188>
 800805c:	f1ba 0f02 	cmp.w	sl, #2
 8008060:	d055      	beq.n	800810e <_scanf_float+0x272>
 8008062:	2d01      	cmp	r5, #1
 8008064:	d002      	beq.n	800806c <_scanf_float+0x1d0>
 8008066:	2d04      	cmp	r5, #4
 8008068:	f47f af48 	bne.w	8007efc <_scanf_float+0x60>
 800806c:	3501      	adds	r5, #1
 800806e:	b2ed      	uxtb	r5, r5
 8008070:	e7d8      	b.n	8008024 <_scanf_float+0x188>
 8008072:	f1ba 0f01 	cmp.w	sl, #1
 8008076:	f47f af41 	bne.w	8007efc <_scanf_float+0x60>
 800807a:	f04f 0a02 	mov.w	sl, #2
 800807e:	e7d1      	b.n	8008024 <_scanf_float+0x188>
 8008080:	b97d      	cbnz	r5, 80080a2 <_scanf_float+0x206>
 8008082:	f1b9 0f00 	cmp.w	r9, #0
 8008086:	f47f af3c 	bne.w	8007f02 <_scanf_float+0x66>
 800808a:	6822      	ldr	r2, [r4, #0]
 800808c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008090:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008094:	f47f af39 	bne.w	8007f0a <_scanf_float+0x6e>
 8008098:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800809c:	6022      	str	r2, [r4, #0]
 800809e:	2501      	movs	r5, #1
 80080a0:	e7c0      	b.n	8008024 <_scanf_float+0x188>
 80080a2:	2d03      	cmp	r5, #3
 80080a4:	d0e2      	beq.n	800806c <_scanf_float+0x1d0>
 80080a6:	2d05      	cmp	r5, #5
 80080a8:	e7de      	b.n	8008068 <_scanf_float+0x1cc>
 80080aa:	2d02      	cmp	r5, #2
 80080ac:	f47f af26 	bne.w	8007efc <_scanf_float+0x60>
 80080b0:	2503      	movs	r5, #3
 80080b2:	e7b7      	b.n	8008024 <_scanf_float+0x188>
 80080b4:	2d06      	cmp	r5, #6
 80080b6:	f47f af21 	bne.w	8007efc <_scanf_float+0x60>
 80080ba:	2507      	movs	r5, #7
 80080bc:	e7b2      	b.n	8008024 <_scanf_float+0x188>
 80080be:	6822      	ldr	r2, [r4, #0]
 80080c0:	0591      	lsls	r1, r2, #22
 80080c2:	f57f af1b 	bpl.w	8007efc <_scanf_float+0x60>
 80080c6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80080ca:	6022      	str	r2, [r4, #0]
 80080cc:	f8cd 9004 	str.w	r9, [sp, #4]
 80080d0:	e7a8      	b.n	8008024 <_scanf_float+0x188>
 80080d2:	6822      	ldr	r2, [r4, #0]
 80080d4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80080d8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80080dc:	d006      	beq.n	80080ec <_scanf_float+0x250>
 80080de:	0550      	lsls	r0, r2, #21
 80080e0:	f57f af0c 	bpl.w	8007efc <_scanf_float+0x60>
 80080e4:	f1b9 0f00 	cmp.w	r9, #0
 80080e8:	f43f af0f 	beq.w	8007f0a <_scanf_float+0x6e>
 80080ec:	0591      	lsls	r1, r2, #22
 80080ee:	bf58      	it	pl
 80080f0:	9901      	ldrpl	r1, [sp, #4]
 80080f2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80080f6:	bf58      	it	pl
 80080f8:	eba9 0101 	subpl.w	r1, r9, r1
 80080fc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008100:	bf58      	it	pl
 8008102:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008106:	6022      	str	r2, [r4, #0]
 8008108:	f04f 0900 	mov.w	r9, #0
 800810c:	e78a      	b.n	8008024 <_scanf_float+0x188>
 800810e:	f04f 0a03 	mov.w	sl, #3
 8008112:	e787      	b.n	8008024 <_scanf_float+0x188>
 8008114:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008118:	4639      	mov	r1, r7
 800811a:	4640      	mov	r0, r8
 800811c:	4798      	blx	r3
 800811e:	2800      	cmp	r0, #0
 8008120:	f43f aedf 	beq.w	8007ee2 <_scanf_float+0x46>
 8008124:	e6ea      	b.n	8007efc <_scanf_float+0x60>
 8008126:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800812a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800812e:	463a      	mov	r2, r7
 8008130:	4640      	mov	r0, r8
 8008132:	4798      	blx	r3
 8008134:	6923      	ldr	r3, [r4, #16]
 8008136:	3b01      	subs	r3, #1
 8008138:	6123      	str	r3, [r4, #16]
 800813a:	e6ec      	b.n	8007f16 <_scanf_float+0x7a>
 800813c:	1e6b      	subs	r3, r5, #1
 800813e:	2b06      	cmp	r3, #6
 8008140:	d825      	bhi.n	800818e <_scanf_float+0x2f2>
 8008142:	2d02      	cmp	r5, #2
 8008144:	d836      	bhi.n	80081b4 <_scanf_float+0x318>
 8008146:	455e      	cmp	r6, fp
 8008148:	f67f aee8 	bls.w	8007f1c <_scanf_float+0x80>
 800814c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008150:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008154:	463a      	mov	r2, r7
 8008156:	4640      	mov	r0, r8
 8008158:	4798      	blx	r3
 800815a:	6923      	ldr	r3, [r4, #16]
 800815c:	3b01      	subs	r3, #1
 800815e:	6123      	str	r3, [r4, #16]
 8008160:	e7f1      	b.n	8008146 <_scanf_float+0x2aa>
 8008162:	9802      	ldr	r0, [sp, #8]
 8008164:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008168:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800816c:	9002      	str	r0, [sp, #8]
 800816e:	463a      	mov	r2, r7
 8008170:	4640      	mov	r0, r8
 8008172:	4798      	blx	r3
 8008174:	6923      	ldr	r3, [r4, #16]
 8008176:	3b01      	subs	r3, #1
 8008178:	6123      	str	r3, [r4, #16]
 800817a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800817e:	fa5f fa8a 	uxtb.w	sl, sl
 8008182:	f1ba 0f02 	cmp.w	sl, #2
 8008186:	d1ec      	bne.n	8008162 <_scanf_float+0x2c6>
 8008188:	3d03      	subs	r5, #3
 800818a:	b2ed      	uxtb	r5, r5
 800818c:	1b76      	subs	r6, r6, r5
 800818e:	6823      	ldr	r3, [r4, #0]
 8008190:	05da      	lsls	r2, r3, #23
 8008192:	d52f      	bpl.n	80081f4 <_scanf_float+0x358>
 8008194:	055b      	lsls	r3, r3, #21
 8008196:	d510      	bpl.n	80081ba <_scanf_float+0x31e>
 8008198:	455e      	cmp	r6, fp
 800819a:	f67f aebf 	bls.w	8007f1c <_scanf_float+0x80>
 800819e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80081a2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80081a6:	463a      	mov	r2, r7
 80081a8:	4640      	mov	r0, r8
 80081aa:	4798      	blx	r3
 80081ac:	6923      	ldr	r3, [r4, #16]
 80081ae:	3b01      	subs	r3, #1
 80081b0:	6123      	str	r3, [r4, #16]
 80081b2:	e7f1      	b.n	8008198 <_scanf_float+0x2fc>
 80081b4:	46aa      	mov	sl, r5
 80081b6:	9602      	str	r6, [sp, #8]
 80081b8:	e7df      	b.n	800817a <_scanf_float+0x2de>
 80081ba:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80081be:	6923      	ldr	r3, [r4, #16]
 80081c0:	2965      	cmp	r1, #101	; 0x65
 80081c2:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80081c6:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 80081ca:	6123      	str	r3, [r4, #16]
 80081cc:	d00c      	beq.n	80081e8 <_scanf_float+0x34c>
 80081ce:	2945      	cmp	r1, #69	; 0x45
 80081d0:	d00a      	beq.n	80081e8 <_scanf_float+0x34c>
 80081d2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80081d6:	463a      	mov	r2, r7
 80081d8:	4640      	mov	r0, r8
 80081da:	4798      	blx	r3
 80081dc:	6923      	ldr	r3, [r4, #16]
 80081de:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80081e2:	3b01      	subs	r3, #1
 80081e4:	1eb5      	subs	r5, r6, #2
 80081e6:	6123      	str	r3, [r4, #16]
 80081e8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80081ec:	463a      	mov	r2, r7
 80081ee:	4640      	mov	r0, r8
 80081f0:	4798      	blx	r3
 80081f2:	462e      	mov	r6, r5
 80081f4:	6825      	ldr	r5, [r4, #0]
 80081f6:	f015 0510 	ands.w	r5, r5, #16
 80081fa:	d159      	bne.n	80082b0 <_scanf_float+0x414>
 80081fc:	7035      	strb	r5, [r6, #0]
 80081fe:	6823      	ldr	r3, [r4, #0]
 8008200:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008204:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008208:	d11b      	bne.n	8008242 <_scanf_float+0x3a6>
 800820a:	9b01      	ldr	r3, [sp, #4]
 800820c:	454b      	cmp	r3, r9
 800820e:	eba3 0209 	sub.w	r2, r3, r9
 8008212:	d123      	bne.n	800825c <_scanf_float+0x3c0>
 8008214:	2200      	movs	r2, #0
 8008216:	4659      	mov	r1, fp
 8008218:	4640      	mov	r0, r8
 800821a:	f000 ffc3 	bl	80091a4 <_strtod_r>
 800821e:	6822      	ldr	r2, [r4, #0]
 8008220:	9b03      	ldr	r3, [sp, #12]
 8008222:	f012 0f02 	tst.w	r2, #2
 8008226:	ec57 6b10 	vmov	r6, r7, d0
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	d021      	beq.n	8008272 <_scanf_float+0x3d6>
 800822e:	9903      	ldr	r1, [sp, #12]
 8008230:	1d1a      	adds	r2, r3, #4
 8008232:	600a      	str	r2, [r1, #0]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	e9c3 6700 	strd	r6, r7, [r3]
 800823a:	68e3      	ldr	r3, [r4, #12]
 800823c:	3301      	adds	r3, #1
 800823e:	60e3      	str	r3, [r4, #12]
 8008240:	e66d      	b.n	8007f1e <_scanf_float+0x82>
 8008242:	9b04      	ldr	r3, [sp, #16]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d0e5      	beq.n	8008214 <_scanf_float+0x378>
 8008248:	9905      	ldr	r1, [sp, #20]
 800824a:	230a      	movs	r3, #10
 800824c:	462a      	mov	r2, r5
 800824e:	3101      	adds	r1, #1
 8008250:	4640      	mov	r0, r8
 8008252:	f001 f82f 	bl	80092b4 <_strtol_r>
 8008256:	9b04      	ldr	r3, [sp, #16]
 8008258:	9e05      	ldr	r6, [sp, #20]
 800825a:	1ac2      	subs	r2, r0, r3
 800825c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8008260:	429e      	cmp	r6, r3
 8008262:	bf28      	it	cs
 8008264:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8008268:	4912      	ldr	r1, [pc, #72]	; (80082b4 <_scanf_float+0x418>)
 800826a:	4630      	mov	r0, r6
 800826c:	f000 f912 	bl	8008494 <siprintf>
 8008270:	e7d0      	b.n	8008214 <_scanf_float+0x378>
 8008272:	9903      	ldr	r1, [sp, #12]
 8008274:	f012 0f04 	tst.w	r2, #4
 8008278:	f103 0204 	add.w	r2, r3, #4
 800827c:	600a      	str	r2, [r1, #0]
 800827e:	d1d9      	bne.n	8008234 <_scanf_float+0x398>
 8008280:	f8d3 8000 	ldr.w	r8, [r3]
 8008284:	ee10 2a10 	vmov	r2, s0
 8008288:	ee10 0a10 	vmov	r0, s0
 800828c:	463b      	mov	r3, r7
 800828e:	4639      	mov	r1, r7
 8008290:	f7f8 fc6c 	bl	8000b6c <__aeabi_dcmpun>
 8008294:	b128      	cbz	r0, 80082a2 <_scanf_float+0x406>
 8008296:	4808      	ldr	r0, [pc, #32]	; (80082b8 <_scanf_float+0x41c>)
 8008298:	f000 f8f6 	bl	8008488 <nanf>
 800829c:	ed88 0a00 	vstr	s0, [r8]
 80082a0:	e7cb      	b.n	800823a <_scanf_float+0x39e>
 80082a2:	4630      	mov	r0, r6
 80082a4:	4639      	mov	r1, r7
 80082a6:	f7f8 fcbf 	bl	8000c28 <__aeabi_d2f>
 80082aa:	f8c8 0000 	str.w	r0, [r8]
 80082ae:	e7c4      	b.n	800823a <_scanf_float+0x39e>
 80082b0:	2500      	movs	r5, #0
 80082b2:	e634      	b.n	8007f1e <_scanf_float+0x82>
 80082b4:	0800c120 	.word	0x0800c120
 80082b8:	0800c223 	.word	0x0800c223

080082bc <srand>:
 80082bc:	b538      	push	{r3, r4, r5, lr}
 80082be:	4b10      	ldr	r3, [pc, #64]	; (8008300 <srand+0x44>)
 80082c0:	681d      	ldr	r5, [r3, #0]
 80082c2:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80082c4:	4604      	mov	r4, r0
 80082c6:	b9b3      	cbnz	r3, 80082f6 <srand+0x3a>
 80082c8:	2018      	movs	r0, #24
 80082ca:	f002 fb09 	bl	800a8e0 <malloc>
 80082ce:	4602      	mov	r2, r0
 80082d0:	63a8      	str	r0, [r5, #56]	; 0x38
 80082d2:	b920      	cbnz	r0, 80082de <srand+0x22>
 80082d4:	4b0b      	ldr	r3, [pc, #44]	; (8008304 <srand+0x48>)
 80082d6:	480c      	ldr	r0, [pc, #48]	; (8008308 <srand+0x4c>)
 80082d8:	2142      	movs	r1, #66	; 0x42
 80082da:	f000 ffff 	bl	80092dc <__assert_func>
 80082de:	490b      	ldr	r1, [pc, #44]	; (800830c <srand+0x50>)
 80082e0:	4b0b      	ldr	r3, [pc, #44]	; (8008310 <srand+0x54>)
 80082e2:	e9c0 1300 	strd	r1, r3, [r0]
 80082e6:	4b0b      	ldr	r3, [pc, #44]	; (8008314 <srand+0x58>)
 80082e8:	6083      	str	r3, [r0, #8]
 80082ea:	230b      	movs	r3, #11
 80082ec:	8183      	strh	r3, [r0, #12]
 80082ee:	2100      	movs	r1, #0
 80082f0:	2001      	movs	r0, #1
 80082f2:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80082f6:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80082f8:	2200      	movs	r2, #0
 80082fa:	611c      	str	r4, [r3, #16]
 80082fc:	615a      	str	r2, [r3, #20]
 80082fe:	bd38      	pop	{r3, r4, r5, pc}
 8008300:	20000010 	.word	0x20000010
 8008304:	0800c125 	.word	0x0800c125
 8008308:	0800c13c 	.word	0x0800c13c
 800830c:	abcd330e 	.word	0xabcd330e
 8008310:	e66d1234 	.word	0xe66d1234
 8008314:	0005deec 	.word	0x0005deec

08008318 <rand>:
 8008318:	4b16      	ldr	r3, [pc, #88]	; (8008374 <rand+0x5c>)
 800831a:	b510      	push	{r4, lr}
 800831c:	681c      	ldr	r4, [r3, #0]
 800831e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008320:	b9b3      	cbnz	r3, 8008350 <rand+0x38>
 8008322:	2018      	movs	r0, #24
 8008324:	f002 fadc 	bl	800a8e0 <malloc>
 8008328:	63a0      	str	r0, [r4, #56]	; 0x38
 800832a:	b928      	cbnz	r0, 8008338 <rand+0x20>
 800832c:	4602      	mov	r2, r0
 800832e:	4b12      	ldr	r3, [pc, #72]	; (8008378 <rand+0x60>)
 8008330:	4812      	ldr	r0, [pc, #72]	; (800837c <rand+0x64>)
 8008332:	214e      	movs	r1, #78	; 0x4e
 8008334:	f000 ffd2 	bl	80092dc <__assert_func>
 8008338:	4a11      	ldr	r2, [pc, #68]	; (8008380 <rand+0x68>)
 800833a:	4b12      	ldr	r3, [pc, #72]	; (8008384 <rand+0x6c>)
 800833c:	e9c0 2300 	strd	r2, r3, [r0]
 8008340:	4b11      	ldr	r3, [pc, #68]	; (8008388 <rand+0x70>)
 8008342:	6083      	str	r3, [r0, #8]
 8008344:	230b      	movs	r3, #11
 8008346:	8183      	strh	r3, [r0, #12]
 8008348:	2201      	movs	r2, #1
 800834a:	2300      	movs	r3, #0
 800834c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8008350:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8008352:	4a0e      	ldr	r2, [pc, #56]	; (800838c <rand+0x74>)
 8008354:	6920      	ldr	r0, [r4, #16]
 8008356:	6963      	ldr	r3, [r4, #20]
 8008358:	490d      	ldr	r1, [pc, #52]	; (8008390 <rand+0x78>)
 800835a:	4342      	muls	r2, r0
 800835c:	fb01 2203 	mla	r2, r1, r3, r2
 8008360:	fba0 0101 	umull	r0, r1, r0, r1
 8008364:	1c43      	adds	r3, r0, #1
 8008366:	eb42 0001 	adc.w	r0, r2, r1
 800836a:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800836e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8008372:	bd10      	pop	{r4, pc}
 8008374:	20000010 	.word	0x20000010
 8008378:	0800c125 	.word	0x0800c125
 800837c:	0800c13c 	.word	0x0800c13c
 8008380:	abcd330e 	.word	0xabcd330e
 8008384:	e66d1234 	.word	0xe66d1234
 8008388:	0005deec 	.word	0x0005deec
 800838c:	5851f42d 	.word	0x5851f42d
 8008390:	4c957f2d 	.word	0x4c957f2d

08008394 <cleanup_glue>:
 8008394:	b538      	push	{r3, r4, r5, lr}
 8008396:	460c      	mov	r4, r1
 8008398:	6809      	ldr	r1, [r1, #0]
 800839a:	4605      	mov	r5, r0
 800839c:	b109      	cbz	r1, 80083a2 <cleanup_glue+0xe>
 800839e:	f7ff fff9 	bl	8008394 <cleanup_glue>
 80083a2:	4621      	mov	r1, r4
 80083a4:	4628      	mov	r0, r5
 80083a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80083aa:	f002 bf97 	b.w	800b2dc <_free_r>
	...

080083b0 <_reclaim_reent>:
 80083b0:	4b2c      	ldr	r3, [pc, #176]	; (8008464 <_reclaim_reent+0xb4>)
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	4283      	cmp	r3, r0
 80083b6:	b570      	push	{r4, r5, r6, lr}
 80083b8:	4604      	mov	r4, r0
 80083ba:	d051      	beq.n	8008460 <_reclaim_reent+0xb0>
 80083bc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80083be:	b143      	cbz	r3, 80083d2 <_reclaim_reent+0x22>
 80083c0:	68db      	ldr	r3, [r3, #12]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d14a      	bne.n	800845c <_reclaim_reent+0xac>
 80083c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80083c8:	6819      	ldr	r1, [r3, #0]
 80083ca:	b111      	cbz	r1, 80083d2 <_reclaim_reent+0x22>
 80083cc:	4620      	mov	r0, r4
 80083ce:	f002 ff85 	bl	800b2dc <_free_r>
 80083d2:	6961      	ldr	r1, [r4, #20]
 80083d4:	b111      	cbz	r1, 80083dc <_reclaim_reent+0x2c>
 80083d6:	4620      	mov	r0, r4
 80083d8:	f002 ff80 	bl	800b2dc <_free_r>
 80083dc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80083de:	b111      	cbz	r1, 80083e6 <_reclaim_reent+0x36>
 80083e0:	4620      	mov	r0, r4
 80083e2:	f002 ff7b 	bl	800b2dc <_free_r>
 80083e6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80083e8:	b111      	cbz	r1, 80083f0 <_reclaim_reent+0x40>
 80083ea:	4620      	mov	r0, r4
 80083ec:	f002 ff76 	bl	800b2dc <_free_r>
 80083f0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80083f2:	b111      	cbz	r1, 80083fa <_reclaim_reent+0x4a>
 80083f4:	4620      	mov	r0, r4
 80083f6:	f002 ff71 	bl	800b2dc <_free_r>
 80083fa:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80083fc:	b111      	cbz	r1, 8008404 <_reclaim_reent+0x54>
 80083fe:	4620      	mov	r0, r4
 8008400:	f002 ff6c 	bl	800b2dc <_free_r>
 8008404:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8008406:	b111      	cbz	r1, 800840e <_reclaim_reent+0x5e>
 8008408:	4620      	mov	r0, r4
 800840a:	f002 ff67 	bl	800b2dc <_free_r>
 800840e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008410:	b111      	cbz	r1, 8008418 <_reclaim_reent+0x68>
 8008412:	4620      	mov	r0, r4
 8008414:	f002 ff62 	bl	800b2dc <_free_r>
 8008418:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800841a:	b111      	cbz	r1, 8008422 <_reclaim_reent+0x72>
 800841c:	4620      	mov	r0, r4
 800841e:	f002 ff5d 	bl	800b2dc <_free_r>
 8008422:	69a3      	ldr	r3, [r4, #24]
 8008424:	b1e3      	cbz	r3, 8008460 <_reclaim_reent+0xb0>
 8008426:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008428:	4620      	mov	r0, r4
 800842a:	4798      	blx	r3
 800842c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800842e:	b1b9      	cbz	r1, 8008460 <_reclaim_reent+0xb0>
 8008430:	4620      	mov	r0, r4
 8008432:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008436:	f7ff bfad 	b.w	8008394 <cleanup_glue>
 800843a:	5949      	ldr	r1, [r1, r5]
 800843c:	b941      	cbnz	r1, 8008450 <_reclaim_reent+0xa0>
 800843e:	3504      	adds	r5, #4
 8008440:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008442:	2d80      	cmp	r5, #128	; 0x80
 8008444:	68d9      	ldr	r1, [r3, #12]
 8008446:	d1f8      	bne.n	800843a <_reclaim_reent+0x8a>
 8008448:	4620      	mov	r0, r4
 800844a:	f002 ff47 	bl	800b2dc <_free_r>
 800844e:	e7ba      	b.n	80083c6 <_reclaim_reent+0x16>
 8008450:	680e      	ldr	r6, [r1, #0]
 8008452:	4620      	mov	r0, r4
 8008454:	f002 ff42 	bl	800b2dc <_free_r>
 8008458:	4631      	mov	r1, r6
 800845a:	e7ef      	b.n	800843c <_reclaim_reent+0x8c>
 800845c:	2500      	movs	r5, #0
 800845e:	e7ef      	b.n	8008440 <_reclaim_reent+0x90>
 8008460:	bd70      	pop	{r4, r5, r6, pc}
 8008462:	bf00      	nop
 8008464:	20000010 	.word	0x20000010

08008468 <_sbrk_r>:
 8008468:	b538      	push	{r3, r4, r5, lr}
 800846a:	4d06      	ldr	r5, [pc, #24]	; (8008484 <_sbrk_r+0x1c>)
 800846c:	2300      	movs	r3, #0
 800846e:	4604      	mov	r4, r0
 8008470:	4608      	mov	r0, r1
 8008472:	602b      	str	r3, [r5, #0]
 8008474:	f7f9 fab8 	bl	80019e8 <_sbrk>
 8008478:	1c43      	adds	r3, r0, #1
 800847a:	d102      	bne.n	8008482 <_sbrk_r+0x1a>
 800847c:	682b      	ldr	r3, [r5, #0]
 800847e:	b103      	cbz	r3, 8008482 <_sbrk_r+0x1a>
 8008480:	6023      	str	r3, [r4, #0]
 8008482:	bd38      	pop	{r3, r4, r5, pc}
 8008484:	20004ce8 	.word	0x20004ce8

08008488 <nanf>:
 8008488:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008490 <nanf+0x8>
 800848c:	4770      	bx	lr
 800848e:	bf00      	nop
 8008490:	7fc00000 	.word	0x7fc00000

08008494 <siprintf>:
 8008494:	b40e      	push	{r1, r2, r3}
 8008496:	b500      	push	{lr}
 8008498:	b09c      	sub	sp, #112	; 0x70
 800849a:	ab1d      	add	r3, sp, #116	; 0x74
 800849c:	9002      	str	r0, [sp, #8]
 800849e:	9006      	str	r0, [sp, #24]
 80084a0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80084a4:	4809      	ldr	r0, [pc, #36]	; (80084cc <siprintf+0x38>)
 80084a6:	9107      	str	r1, [sp, #28]
 80084a8:	9104      	str	r1, [sp, #16]
 80084aa:	4909      	ldr	r1, [pc, #36]	; (80084d0 <siprintf+0x3c>)
 80084ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80084b0:	9105      	str	r1, [sp, #20]
 80084b2:	6800      	ldr	r0, [r0, #0]
 80084b4:	9301      	str	r3, [sp, #4]
 80084b6:	a902      	add	r1, sp, #8
 80084b8:	f002 ffb8 	bl	800b42c <_svfiprintf_r>
 80084bc:	9b02      	ldr	r3, [sp, #8]
 80084be:	2200      	movs	r2, #0
 80084c0:	701a      	strb	r2, [r3, #0]
 80084c2:	b01c      	add	sp, #112	; 0x70
 80084c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80084c8:	b003      	add	sp, #12
 80084ca:	4770      	bx	lr
 80084cc:	20000010 	.word	0x20000010
 80084d0:	ffff0208 	.word	0xffff0208

080084d4 <__sread>:
 80084d4:	b510      	push	{r4, lr}
 80084d6:	460c      	mov	r4, r1
 80084d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084dc:	f003 fa00 	bl	800b8e0 <_read_r>
 80084e0:	2800      	cmp	r0, #0
 80084e2:	bfab      	itete	ge
 80084e4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80084e6:	89a3      	ldrhlt	r3, [r4, #12]
 80084e8:	181b      	addge	r3, r3, r0
 80084ea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80084ee:	bfac      	ite	ge
 80084f0:	6563      	strge	r3, [r4, #84]	; 0x54
 80084f2:	81a3      	strhlt	r3, [r4, #12]
 80084f4:	bd10      	pop	{r4, pc}

080084f6 <__swrite>:
 80084f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084fa:	461f      	mov	r7, r3
 80084fc:	898b      	ldrh	r3, [r1, #12]
 80084fe:	05db      	lsls	r3, r3, #23
 8008500:	4605      	mov	r5, r0
 8008502:	460c      	mov	r4, r1
 8008504:	4616      	mov	r6, r2
 8008506:	d505      	bpl.n	8008514 <__swrite+0x1e>
 8008508:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800850c:	2302      	movs	r3, #2
 800850e:	2200      	movs	r2, #0
 8008510:	f002 f9d4 	bl	800a8bc <_lseek_r>
 8008514:	89a3      	ldrh	r3, [r4, #12]
 8008516:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800851a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800851e:	81a3      	strh	r3, [r4, #12]
 8008520:	4632      	mov	r2, r6
 8008522:	463b      	mov	r3, r7
 8008524:	4628      	mov	r0, r5
 8008526:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800852a:	f000 bec5 	b.w	80092b8 <_write_r>

0800852e <__sseek>:
 800852e:	b510      	push	{r4, lr}
 8008530:	460c      	mov	r4, r1
 8008532:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008536:	f002 f9c1 	bl	800a8bc <_lseek_r>
 800853a:	1c43      	adds	r3, r0, #1
 800853c:	89a3      	ldrh	r3, [r4, #12]
 800853e:	bf15      	itete	ne
 8008540:	6560      	strne	r0, [r4, #84]	; 0x54
 8008542:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008546:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800854a:	81a3      	strheq	r3, [r4, #12]
 800854c:	bf18      	it	ne
 800854e:	81a3      	strhne	r3, [r4, #12]
 8008550:	bd10      	pop	{r4, pc}

08008552 <__sclose>:
 8008552:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008556:	f000 bedf 	b.w	8009318 <_close_r>

0800855a <sulp>:
 800855a:	b570      	push	{r4, r5, r6, lr}
 800855c:	4604      	mov	r4, r0
 800855e:	460d      	mov	r5, r1
 8008560:	ec45 4b10 	vmov	d0, r4, r5
 8008564:	4616      	mov	r6, r2
 8008566:	f002 fd53 	bl	800b010 <__ulp>
 800856a:	ec51 0b10 	vmov	r0, r1, d0
 800856e:	b17e      	cbz	r6, 8008590 <sulp+0x36>
 8008570:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008574:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008578:	2b00      	cmp	r3, #0
 800857a:	dd09      	ble.n	8008590 <sulp+0x36>
 800857c:	051b      	lsls	r3, r3, #20
 800857e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008582:	2400      	movs	r4, #0
 8008584:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008588:	4622      	mov	r2, r4
 800858a:	462b      	mov	r3, r5
 800858c:	f7f8 f854 	bl	8000638 <__aeabi_dmul>
 8008590:	bd70      	pop	{r4, r5, r6, pc}
 8008592:	0000      	movs	r0, r0
 8008594:	0000      	movs	r0, r0
	...

08008598 <_strtod_l>:
 8008598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800859c:	ed2d 8b02 	vpush	{d8}
 80085a0:	b09d      	sub	sp, #116	; 0x74
 80085a2:	461f      	mov	r7, r3
 80085a4:	2300      	movs	r3, #0
 80085a6:	9318      	str	r3, [sp, #96]	; 0x60
 80085a8:	4ba2      	ldr	r3, [pc, #648]	; (8008834 <_strtod_l+0x29c>)
 80085aa:	9213      	str	r2, [sp, #76]	; 0x4c
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	9305      	str	r3, [sp, #20]
 80085b0:	4604      	mov	r4, r0
 80085b2:	4618      	mov	r0, r3
 80085b4:	4688      	mov	r8, r1
 80085b6:	f7f7 fe2b 	bl	8000210 <strlen>
 80085ba:	f04f 0a00 	mov.w	sl, #0
 80085be:	4605      	mov	r5, r0
 80085c0:	f04f 0b00 	mov.w	fp, #0
 80085c4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80085c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80085ca:	781a      	ldrb	r2, [r3, #0]
 80085cc:	2a2b      	cmp	r2, #43	; 0x2b
 80085ce:	d04e      	beq.n	800866e <_strtod_l+0xd6>
 80085d0:	d83b      	bhi.n	800864a <_strtod_l+0xb2>
 80085d2:	2a0d      	cmp	r2, #13
 80085d4:	d834      	bhi.n	8008640 <_strtod_l+0xa8>
 80085d6:	2a08      	cmp	r2, #8
 80085d8:	d834      	bhi.n	8008644 <_strtod_l+0xac>
 80085da:	2a00      	cmp	r2, #0
 80085dc:	d03e      	beq.n	800865c <_strtod_l+0xc4>
 80085de:	2300      	movs	r3, #0
 80085e0:	930a      	str	r3, [sp, #40]	; 0x28
 80085e2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80085e4:	7833      	ldrb	r3, [r6, #0]
 80085e6:	2b30      	cmp	r3, #48	; 0x30
 80085e8:	f040 80b0 	bne.w	800874c <_strtod_l+0x1b4>
 80085ec:	7873      	ldrb	r3, [r6, #1]
 80085ee:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80085f2:	2b58      	cmp	r3, #88	; 0x58
 80085f4:	d168      	bne.n	80086c8 <_strtod_l+0x130>
 80085f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085f8:	9301      	str	r3, [sp, #4]
 80085fa:	ab18      	add	r3, sp, #96	; 0x60
 80085fc:	9702      	str	r7, [sp, #8]
 80085fe:	9300      	str	r3, [sp, #0]
 8008600:	4a8d      	ldr	r2, [pc, #564]	; (8008838 <_strtod_l+0x2a0>)
 8008602:	ab19      	add	r3, sp, #100	; 0x64
 8008604:	a917      	add	r1, sp, #92	; 0x5c
 8008606:	4620      	mov	r0, r4
 8008608:	f001 fe4c 	bl	800a2a4 <__gethex>
 800860c:	f010 0707 	ands.w	r7, r0, #7
 8008610:	4605      	mov	r5, r0
 8008612:	d005      	beq.n	8008620 <_strtod_l+0x88>
 8008614:	2f06      	cmp	r7, #6
 8008616:	d12c      	bne.n	8008672 <_strtod_l+0xda>
 8008618:	3601      	adds	r6, #1
 800861a:	2300      	movs	r3, #0
 800861c:	9617      	str	r6, [sp, #92]	; 0x5c
 800861e:	930a      	str	r3, [sp, #40]	; 0x28
 8008620:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008622:	2b00      	cmp	r3, #0
 8008624:	f040 8590 	bne.w	8009148 <_strtod_l+0xbb0>
 8008628:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800862a:	b1eb      	cbz	r3, 8008668 <_strtod_l+0xd0>
 800862c:	4652      	mov	r2, sl
 800862e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008632:	ec43 2b10 	vmov	d0, r2, r3
 8008636:	b01d      	add	sp, #116	; 0x74
 8008638:	ecbd 8b02 	vpop	{d8}
 800863c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008640:	2a20      	cmp	r2, #32
 8008642:	d1cc      	bne.n	80085de <_strtod_l+0x46>
 8008644:	3301      	adds	r3, #1
 8008646:	9317      	str	r3, [sp, #92]	; 0x5c
 8008648:	e7be      	b.n	80085c8 <_strtod_l+0x30>
 800864a:	2a2d      	cmp	r2, #45	; 0x2d
 800864c:	d1c7      	bne.n	80085de <_strtod_l+0x46>
 800864e:	2201      	movs	r2, #1
 8008650:	920a      	str	r2, [sp, #40]	; 0x28
 8008652:	1c5a      	adds	r2, r3, #1
 8008654:	9217      	str	r2, [sp, #92]	; 0x5c
 8008656:	785b      	ldrb	r3, [r3, #1]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d1c2      	bne.n	80085e2 <_strtod_l+0x4a>
 800865c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800865e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008662:	2b00      	cmp	r3, #0
 8008664:	f040 856e 	bne.w	8009144 <_strtod_l+0xbac>
 8008668:	4652      	mov	r2, sl
 800866a:	465b      	mov	r3, fp
 800866c:	e7e1      	b.n	8008632 <_strtod_l+0x9a>
 800866e:	2200      	movs	r2, #0
 8008670:	e7ee      	b.n	8008650 <_strtod_l+0xb8>
 8008672:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008674:	b13a      	cbz	r2, 8008686 <_strtod_l+0xee>
 8008676:	2135      	movs	r1, #53	; 0x35
 8008678:	a81a      	add	r0, sp, #104	; 0x68
 800867a:	f002 fdd4 	bl	800b226 <__copybits>
 800867e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008680:	4620      	mov	r0, r4
 8008682:	f002 f993 	bl	800a9ac <_Bfree>
 8008686:	3f01      	subs	r7, #1
 8008688:	2f04      	cmp	r7, #4
 800868a:	d806      	bhi.n	800869a <_strtod_l+0x102>
 800868c:	e8df f007 	tbb	[pc, r7]
 8008690:	1714030a 	.word	0x1714030a
 8008694:	0a          	.byte	0x0a
 8008695:	00          	.byte	0x00
 8008696:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800869a:	0728      	lsls	r0, r5, #28
 800869c:	d5c0      	bpl.n	8008620 <_strtod_l+0x88>
 800869e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80086a2:	e7bd      	b.n	8008620 <_strtod_l+0x88>
 80086a4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 80086a8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80086aa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80086ae:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80086b2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80086b6:	e7f0      	b.n	800869a <_strtod_l+0x102>
 80086b8:	f8df b180 	ldr.w	fp, [pc, #384]	; 800883c <_strtod_l+0x2a4>
 80086bc:	e7ed      	b.n	800869a <_strtod_l+0x102>
 80086be:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80086c2:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80086c6:	e7e8      	b.n	800869a <_strtod_l+0x102>
 80086c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80086ca:	1c5a      	adds	r2, r3, #1
 80086cc:	9217      	str	r2, [sp, #92]	; 0x5c
 80086ce:	785b      	ldrb	r3, [r3, #1]
 80086d0:	2b30      	cmp	r3, #48	; 0x30
 80086d2:	d0f9      	beq.n	80086c8 <_strtod_l+0x130>
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d0a3      	beq.n	8008620 <_strtod_l+0x88>
 80086d8:	2301      	movs	r3, #1
 80086da:	f04f 0900 	mov.w	r9, #0
 80086de:	9304      	str	r3, [sp, #16]
 80086e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80086e2:	9308      	str	r3, [sp, #32]
 80086e4:	f8cd 901c 	str.w	r9, [sp, #28]
 80086e8:	464f      	mov	r7, r9
 80086ea:	220a      	movs	r2, #10
 80086ec:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80086ee:	7806      	ldrb	r6, [r0, #0]
 80086f0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80086f4:	b2d9      	uxtb	r1, r3
 80086f6:	2909      	cmp	r1, #9
 80086f8:	d92a      	bls.n	8008750 <_strtod_l+0x1b8>
 80086fa:	9905      	ldr	r1, [sp, #20]
 80086fc:	462a      	mov	r2, r5
 80086fe:	f003 f90b 	bl	800b918 <strncmp>
 8008702:	b398      	cbz	r0, 800876c <_strtod_l+0x1d4>
 8008704:	2000      	movs	r0, #0
 8008706:	4632      	mov	r2, r6
 8008708:	463d      	mov	r5, r7
 800870a:	9005      	str	r0, [sp, #20]
 800870c:	4603      	mov	r3, r0
 800870e:	2a65      	cmp	r2, #101	; 0x65
 8008710:	d001      	beq.n	8008716 <_strtod_l+0x17e>
 8008712:	2a45      	cmp	r2, #69	; 0x45
 8008714:	d118      	bne.n	8008748 <_strtod_l+0x1b0>
 8008716:	b91d      	cbnz	r5, 8008720 <_strtod_l+0x188>
 8008718:	9a04      	ldr	r2, [sp, #16]
 800871a:	4302      	orrs	r2, r0
 800871c:	d09e      	beq.n	800865c <_strtod_l+0xc4>
 800871e:	2500      	movs	r5, #0
 8008720:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8008724:	f108 0201 	add.w	r2, r8, #1
 8008728:	9217      	str	r2, [sp, #92]	; 0x5c
 800872a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800872e:	2a2b      	cmp	r2, #43	; 0x2b
 8008730:	d075      	beq.n	800881e <_strtod_l+0x286>
 8008732:	2a2d      	cmp	r2, #45	; 0x2d
 8008734:	d07b      	beq.n	800882e <_strtod_l+0x296>
 8008736:	f04f 0c00 	mov.w	ip, #0
 800873a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800873e:	2909      	cmp	r1, #9
 8008740:	f240 8082 	bls.w	8008848 <_strtod_l+0x2b0>
 8008744:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008748:	2600      	movs	r6, #0
 800874a:	e09d      	b.n	8008888 <_strtod_l+0x2f0>
 800874c:	2300      	movs	r3, #0
 800874e:	e7c4      	b.n	80086da <_strtod_l+0x142>
 8008750:	2f08      	cmp	r7, #8
 8008752:	bfd8      	it	le
 8008754:	9907      	ldrle	r1, [sp, #28]
 8008756:	f100 0001 	add.w	r0, r0, #1
 800875a:	bfda      	itte	le
 800875c:	fb02 3301 	mlale	r3, r2, r1, r3
 8008760:	9307      	strle	r3, [sp, #28]
 8008762:	fb02 3909 	mlagt	r9, r2, r9, r3
 8008766:	3701      	adds	r7, #1
 8008768:	9017      	str	r0, [sp, #92]	; 0x5c
 800876a:	e7bf      	b.n	80086ec <_strtod_l+0x154>
 800876c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800876e:	195a      	adds	r2, r3, r5
 8008770:	9217      	str	r2, [sp, #92]	; 0x5c
 8008772:	5d5a      	ldrb	r2, [r3, r5]
 8008774:	2f00      	cmp	r7, #0
 8008776:	d037      	beq.n	80087e8 <_strtod_l+0x250>
 8008778:	9005      	str	r0, [sp, #20]
 800877a:	463d      	mov	r5, r7
 800877c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8008780:	2b09      	cmp	r3, #9
 8008782:	d912      	bls.n	80087aa <_strtod_l+0x212>
 8008784:	2301      	movs	r3, #1
 8008786:	e7c2      	b.n	800870e <_strtod_l+0x176>
 8008788:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800878a:	1c5a      	adds	r2, r3, #1
 800878c:	9217      	str	r2, [sp, #92]	; 0x5c
 800878e:	785a      	ldrb	r2, [r3, #1]
 8008790:	3001      	adds	r0, #1
 8008792:	2a30      	cmp	r2, #48	; 0x30
 8008794:	d0f8      	beq.n	8008788 <_strtod_l+0x1f0>
 8008796:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800879a:	2b08      	cmp	r3, #8
 800879c:	f200 84d9 	bhi.w	8009152 <_strtod_l+0xbba>
 80087a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80087a2:	9005      	str	r0, [sp, #20]
 80087a4:	2000      	movs	r0, #0
 80087a6:	9308      	str	r3, [sp, #32]
 80087a8:	4605      	mov	r5, r0
 80087aa:	3a30      	subs	r2, #48	; 0x30
 80087ac:	f100 0301 	add.w	r3, r0, #1
 80087b0:	d014      	beq.n	80087dc <_strtod_l+0x244>
 80087b2:	9905      	ldr	r1, [sp, #20]
 80087b4:	4419      	add	r1, r3
 80087b6:	9105      	str	r1, [sp, #20]
 80087b8:	462b      	mov	r3, r5
 80087ba:	eb00 0e05 	add.w	lr, r0, r5
 80087be:	210a      	movs	r1, #10
 80087c0:	4573      	cmp	r3, lr
 80087c2:	d113      	bne.n	80087ec <_strtod_l+0x254>
 80087c4:	182b      	adds	r3, r5, r0
 80087c6:	2b08      	cmp	r3, #8
 80087c8:	f105 0501 	add.w	r5, r5, #1
 80087cc:	4405      	add	r5, r0
 80087ce:	dc1c      	bgt.n	800880a <_strtod_l+0x272>
 80087d0:	9907      	ldr	r1, [sp, #28]
 80087d2:	230a      	movs	r3, #10
 80087d4:	fb03 2301 	mla	r3, r3, r1, r2
 80087d8:	9307      	str	r3, [sp, #28]
 80087da:	2300      	movs	r3, #0
 80087dc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80087de:	1c51      	adds	r1, r2, #1
 80087e0:	9117      	str	r1, [sp, #92]	; 0x5c
 80087e2:	7852      	ldrb	r2, [r2, #1]
 80087e4:	4618      	mov	r0, r3
 80087e6:	e7c9      	b.n	800877c <_strtod_l+0x1e4>
 80087e8:	4638      	mov	r0, r7
 80087ea:	e7d2      	b.n	8008792 <_strtod_l+0x1fa>
 80087ec:	2b08      	cmp	r3, #8
 80087ee:	dc04      	bgt.n	80087fa <_strtod_l+0x262>
 80087f0:	9e07      	ldr	r6, [sp, #28]
 80087f2:	434e      	muls	r6, r1
 80087f4:	9607      	str	r6, [sp, #28]
 80087f6:	3301      	adds	r3, #1
 80087f8:	e7e2      	b.n	80087c0 <_strtod_l+0x228>
 80087fa:	f103 0c01 	add.w	ip, r3, #1
 80087fe:	f1bc 0f10 	cmp.w	ip, #16
 8008802:	bfd8      	it	le
 8008804:	fb01 f909 	mulle.w	r9, r1, r9
 8008808:	e7f5      	b.n	80087f6 <_strtod_l+0x25e>
 800880a:	2d10      	cmp	r5, #16
 800880c:	bfdc      	itt	le
 800880e:	230a      	movle	r3, #10
 8008810:	fb03 2909 	mlale	r9, r3, r9, r2
 8008814:	e7e1      	b.n	80087da <_strtod_l+0x242>
 8008816:	2300      	movs	r3, #0
 8008818:	9305      	str	r3, [sp, #20]
 800881a:	2301      	movs	r3, #1
 800881c:	e77c      	b.n	8008718 <_strtod_l+0x180>
 800881e:	f04f 0c00 	mov.w	ip, #0
 8008822:	f108 0202 	add.w	r2, r8, #2
 8008826:	9217      	str	r2, [sp, #92]	; 0x5c
 8008828:	f898 2002 	ldrb.w	r2, [r8, #2]
 800882c:	e785      	b.n	800873a <_strtod_l+0x1a2>
 800882e:	f04f 0c01 	mov.w	ip, #1
 8008832:	e7f6      	b.n	8008822 <_strtod_l+0x28a>
 8008834:	0800c404 	.word	0x0800c404
 8008838:	0800c198 	.word	0x0800c198
 800883c:	7ff00000 	.word	0x7ff00000
 8008840:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008842:	1c51      	adds	r1, r2, #1
 8008844:	9117      	str	r1, [sp, #92]	; 0x5c
 8008846:	7852      	ldrb	r2, [r2, #1]
 8008848:	2a30      	cmp	r2, #48	; 0x30
 800884a:	d0f9      	beq.n	8008840 <_strtod_l+0x2a8>
 800884c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8008850:	2908      	cmp	r1, #8
 8008852:	f63f af79 	bhi.w	8008748 <_strtod_l+0x1b0>
 8008856:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800885a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800885c:	9206      	str	r2, [sp, #24]
 800885e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008860:	1c51      	adds	r1, r2, #1
 8008862:	9117      	str	r1, [sp, #92]	; 0x5c
 8008864:	7852      	ldrb	r2, [r2, #1]
 8008866:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800886a:	2e09      	cmp	r6, #9
 800886c:	d937      	bls.n	80088de <_strtod_l+0x346>
 800886e:	9e06      	ldr	r6, [sp, #24]
 8008870:	1b89      	subs	r1, r1, r6
 8008872:	2908      	cmp	r1, #8
 8008874:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8008878:	dc02      	bgt.n	8008880 <_strtod_l+0x2e8>
 800887a:	4576      	cmp	r6, lr
 800887c:	bfa8      	it	ge
 800887e:	4676      	movge	r6, lr
 8008880:	f1bc 0f00 	cmp.w	ip, #0
 8008884:	d000      	beq.n	8008888 <_strtod_l+0x2f0>
 8008886:	4276      	negs	r6, r6
 8008888:	2d00      	cmp	r5, #0
 800888a:	d14d      	bne.n	8008928 <_strtod_l+0x390>
 800888c:	9904      	ldr	r1, [sp, #16]
 800888e:	4301      	orrs	r1, r0
 8008890:	f47f aec6 	bne.w	8008620 <_strtod_l+0x88>
 8008894:	2b00      	cmp	r3, #0
 8008896:	f47f aee1 	bne.w	800865c <_strtod_l+0xc4>
 800889a:	2a69      	cmp	r2, #105	; 0x69
 800889c:	d027      	beq.n	80088ee <_strtod_l+0x356>
 800889e:	dc24      	bgt.n	80088ea <_strtod_l+0x352>
 80088a0:	2a49      	cmp	r2, #73	; 0x49
 80088a2:	d024      	beq.n	80088ee <_strtod_l+0x356>
 80088a4:	2a4e      	cmp	r2, #78	; 0x4e
 80088a6:	f47f aed9 	bne.w	800865c <_strtod_l+0xc4>
 80088aa:	499f      	ldr	r1, [pc, #636]	; (8008b28 <_strtod_l+0x590>)
 80088ac:	a817      	add	r0, sp, #92	; 0x5c
 80088ae:	f001 ff51 	bl	800a754 <__match>
 80088b2:	2800      	cmp	r0, #0
 80088b4:	f43f aed2 	beq.w	800865c <_strtod_l+0xc4>
 80088b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80088ba:	781b      	ldrb	r3, [r3, #0]
 80088bc:	2b28      	cmp	r3, #40	; 0x28
 80088be:	d12d      	bne.n	800891c <_strtod_l+0x384>
 80088c0:	499a      	ldr	r1, [pc, #616]	; (8008b2c <_strtod_l+0x594>)
 80088c2:	aa1a      	add	r2, sp, #104	; 0x68
 80088c4:	a817      	add	r0, sp, #92	; 0x5c
 80088c6:	f001 ff59 	bl	800a77c <__hexnan>
 80088ca:	2805      	cmp	r0, #5
 80088cc:	d126      	bne.n	800891c <_strtod_l+0x384>
 80088ce:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80088d0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80088d4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80088d8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80088dc:	e6a0      	b.n	8008620 <_strtod_l+0x88>
 80088de:	210a      	movs	r1, #10
 80088e0:	fb01 2e0e 	mla	lr, r1, lr, r2
 80088e4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80088e8:	e7b9      	b.n	800885e <_strtod_l+0x2c6>
 80088ea:	2a6e      	cmp	r2, #110	; 0x6e
 80088ec:	e7db      	b.n	80088a6 <_strtod_l+0x30e>
 80088ee:	4990      	ldr	r1, [pc, #576]	; (8008b30 <_strtod_l+0x598>)
 80088f0:	a817      	add	r0, sp, #92	; 0x5c
 80088f2:	f001 ff2f 	bl	800a754 <__match>
 80088f6:	2800      	cmp	r0, #0
 80088f8:	f43f aeb0 	beq.w	800865c <_strtod_l+0xc4>
 80088fc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80088fe:	498d      	ldr	r1, [pc, #564]	; (8008b34 <_strtod_l+0x59c>)
 8008900:	3b01      	subs	r3, #1
 8008902:	a817      	add	r0, sp, #92	; 0x5c
 8008904:	9317      	str	r3, [sp, #92]	; 0x5c
 8008906:	f001 ff25 	bl	800a754 <__match>
 800890a:	b910      	cbnz	r0, 8008912 <_strtod_l+0x37a>
 800890c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800890e:	3301      	adds	r3, #1
 8008910:	9317      	str	r3, [sp, #92]	; 0x5c
 8008912:	f8df b230 	ldr.w	fp, [pc, #560]	; 8008b44 <_strtod_l+0x5ac>
 8008916:	f04f 0a00 	mov.w	sl, #0
 800891a:	e681      	b.n	8008620 <_strtod_l+0x88>
 800891c:	4886      	ldr	r0, [pc, #536]	; (8008b38 <_strtod_l+0x5a0>)
 800891e:	f002 fff3 	bl	800b908 <nan>
 8008922:	ec5b ab10 	vmov	sl, fp, d0
 8008926:	e67b      	b.n	8008620 <_strtod_l+0x88>
 8008928:	9b05      	ldr	r3, [sp, #20]
 800892a:	9807      	ldr	r0, [sp, #28]
 800892c:	1af3      	subs	r3, r6, r3
 800892e:	2f00      	cmp	r7, #0
 8008930:	bf08      	it	eq
 8008932:	462f      	moveq	r7, r5
 8008934:	2d10      	cmp	r5, #16
 8008936:	9306      	str	r3, [sp, #24]
 8008938:	46a8      	mov	r8, r5
 800893a:	bfa8      	it	ge
 800893c:	f04f 0810 	movge.w	r8, #16
 8008940:	f7f7 fe00 	bl	8000544 <__aeabi_ui2d>
 8008944:	2d09      	cmp	r5, #9
 8008946:	4682      	mov	sl, r0
 8008948:	468b      	mov	fp, r1
 800894a:	dd13      	ble.n	8008974 <_strtod_l+0x3dc>
 800894c:	4b7b      	ldr	r3, [pc, #492]	; (8008b3c <_strtod_l+0x5a4>)
 800894e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8008952:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008956:	f7f7 fe6f 	bl	8000638 <__aeabi_dmul>
 800895a:	4682      	mov	sl, r0
 800895c:	4648      	mov	r0, r9
 800895e:	468b      	mov	fp, r1
 8008960:	f7f7 fdf0 	bl	8000544 <__aeabi_ui2d>
 8008964:	4602      	mov	r2, r0
 8008966:	460b      	mov	r3, r1
 8008968:	4650      	mov	r0, sl
 800896a:	4659      	mov	r1, fp
 800896c:	f7f7 fcae 	bl	80002cc <__adddf3>
 8008970:	4682      	mov	sl, r0
 8008972:	468b      	mov	fp, r1
 8008974:	2d0f      	cmp	r5, #15
 8008976:	dc38      	bgt.n	80089ea <_strtod_l+0x452>
 8008978:	9b06      	ldr	r3, [sp, #24]
 800897a:	2b00      	cmp	r3, #0
 800897c:	f43f ae50 	beq.w	8008620 <_strtod_l+0x88>
 8008980:	dd24      	ble.n	80089cc <_strtod_l+0x434>
 8008982:	2b16      	cmp	r3, #22
 8008984:	dc0b      	bgt.n	800899e <_strtod_l+0x406>
 8008986:	496d      	ldr	r1, [pc, #436]	; (8008b3c <_strtod_l+0x5a4>)
 8008988:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800898c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008990:	4652      	mov	r2, sl
 8008992:	465b      	mov	r3, fp
 8008994:	f7f7 fe50 	bl	8000638 <__aeabi_dmul>
 8008998:	4682      	mov	sl, r0
 800899a:	468b      	mov	fp, r1
 800899c:	e640      	b.n	8008620 <_strtod_l+0x88>
 800899e:	9a06      	ldr	r2, [sp, #24]
 80089a0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80089a4:	4293      	cmp	r3, r2
 80089a6:	db20      	blt.n	80089ea <_strtod_l+0x452>
 80089a8:	4c64      	ldr	r4, [pc, #400]	; (8008b3c <_strtod_l+0x5a4>)
 80089aa:	f1c5 050f 	rsb	r5, r5, #15
 80089ae:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80089b2:	4652      	mov	r2, sl
 80089b4:	465b      	mov	r3, fp
 80089b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80089ba:	f7f7 fe3d 	bl	8000638 <__aeabi_dmul>
 80089be:	9b06      	ldr	r3, [sp, #24]
 80089c0:	1b5d      	subs	r5, r3, r5
 80089c2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80089c6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80089ca:	e7e3      	b.n	8008994 <_strtod_l+0x3fc>
 80089cc:	9b06      	ldr	r3, [sp, #24]
 80089ce:	3316      	adds	r3, #22
 80089d0:	db0b      	blt.n	80089ea <_strtod_l+0x452>
 80089d2:	9b05      	ldr	r3, [sp, #20]
 80089d4:	1b9e      	subs	r6, r3, r6
 80089d6:	4b59      	ldr	r3, [pc, #356]	; (8008b3c <_strtod_l+0x5a4>)
 80089d8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80089dc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80089e0:	4650      	mov	r0, sl
 80089e2:	4659      	mov	r1, fp
 80089e4:	f7f7 ff52 	bl	800088c <__aeabi_ddiv>
 80089e8:	e7d6      	b.n	8008998 <_strtod_l+0x400>
 80089ea:	9b06      	ldr	r3, [sp, #24]
 80089ec:	eba5 0808 	sub.w	r8, r5, r8
 80089f0:	4498      	add	r8, r3
 80089f2:	f1b8 0f00 	cmp.w	r8, #0
 80089f6:	dd74      	ble.n	8008ae2 <_strtod_l+0x54a>
 80089f8:	f018 030f 	ands.w	r3, r8, #15
 80089fc:	d00a      	beq.n	8008a14 <_strtod_l+0x47c>
 80089fe:	494f      	ldr	r1, [pc, #316]	; (8008b3c <_strtod_l+0x5a4>)
 8008a00:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008a04:	4652      	mov	r2, sl
 8008a06:	465b      	mov	r3, fp
 8008a08:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008a0c:	f7f7 fe14 	bl	8000638 <__aeabi_dmul>
 8008a10:	4682      	mov	sl, r0
 8008a12:	468b      	mov	fp, r1
 8008a14:	f038 080f 	bics.w	r8, r8, #15
 8008a18:	d04f      	beq.n	8008aba <_strtod_l+0x522>
 8008a1a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8008a1e:	dd22      	ble.n	8008a66 <_strtod_l+0x4ce>
 8008a20:	2500      	movs	r5, #0
 8008a22:	462e      	mov	r6, r5
 8008a24:	9507      	str	r5, [sp, #28]
 8008a26:	9505      	str	r5, [sp, #20]
 8008a28:	2322      	movs	r3, #34	; 0x22
 8008a2a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8008b44 <_strtod_l+0x5ac>
 8008a2e:	6023      	str	r3, [r4, #0]
 8008a30:	f04f 0a00 	mov.w	sl, #0
 8008a34:	9b07      	ldr	r3, [sp, #28]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	f43f adf2 	beq.w	8008620 <_strtod_l+0x88>
 8008a3c:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008a3e:	4620      	mov	r0, r4
 8008a40:	f001 ffb4 	bl	800a9ac <_Bfree>
 8008a44:	9905      	ldr	r1, [sp, #20]
 8008a46:	4620      	mov	r0, r4
 8008a48:	f001 ffb0 	bl	800a9ac <_Bfree>
 8008a4c:	4631      	mov	r1, r6
 8008a4e:	4620      	mov	r0, r4
 8008a50:	f001 ffac 	bl	800a9ac <_Bfree>
 8008a54:	9907      	ldr	r1, [sp, #28]
 8008a56:	4620      	mov	r0, r4
 8008a58:	f001 ffa8 	bl	800a9ac <_Bfree>
 8008a5c:	4629      	mov	r1, r5
 8008a5e:	4620      	mov	r0, r4
 8008a60:	f001 ffa4 	bl	800a9ac <_Bfree>
 8008a64:	e5dc      	b.n	8008620 <_strtod_l+0x88>
 8008a66:	4b36      	ldr	r3, [pc, #216]	; (8008b40 <_strtod_l+0x5a8>)
 8008a68:	9304      	str	r3, [sp, #16]
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8008a70:	4650      	mov	r0, sl
 8008a72:	4659      	mov	r1, fp
 8008a74:	4699      	mov	r9, r3
 8008a76:	f1b8 0f01 	cmp.w	r8, #1
 8008a7a:	dc21      	bgt.n	8008ac0 <_strtod_l+0x528>
 8008a7c:	b10b      	cbz	r3, 8008a82 <_strtod_l+0x4ea>
 8008a7e:	4682      	mov	sl, r0
 8008a80:	468b      	mov	fp, r1
 8008a82:	4b2f      	ldr	r3, [pc, #188]	; (8008b40 <_strtod_l+0x5a8>)
 8008a84:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8008a88:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8008a8c:	4652      	mov	r2, sl
 8008a8e:	465b      	mov	r3, fp
 8008a90:	e9d9 0100 	ldrd	r0, r1, [r9]
 8008a94:	f7f7 fdd0 	bl	8000638 <__aeabi_dmul>
 8008a98:	4b2a      	ldr	r3, [pc, #168]	; (8008b44 <_strtod_l+0x5ac>)
 8008a9a:	460a      	mov	r2, r1
 8008a9c:	400b      	ands	r3, r1
 8008a9e:	492a      	ldr	r1, [pc, #168]	; (8008b48 <_strtod_l+0x5b0>)
 8008aa0:	428b      	cmp	r3, r1
 8008aa2:	4682      	mov	sl, r0
 8008aa4:	d8bc      	bhi.n	8008a20 <_strtod_l+0x488>
 8008aa6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008aaa:	428b      	cmp	r3, r1
 8008aac:	bf86      	itte	hi
 8008aae:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8008b4c <_strtod_l+0x5b4>
 8008ab2:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 8008ab6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8008aba:	2300      	movs	r3, #0
 8008abc:	9304      	str	r3, [sp, #16]
 8008abe:	e084      	b.n	8008bca <_strtod_l+0x632>
 8008ac0:	f018 0f01 	tst.w	r8, #1
 8008ac4:	d005      	beq.n	8008ad2 <_strtod_l+0x53a>
 8008ac6:	9b04      	ldr	r3, [sp, #16]
 8008ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008acc:	f7f7 fdb4 	bl	8000638 <__aeabi_dmul>
 8008ad0:	2301      	movs	r3, #1
 8008ad2:	9a04      	ldr	r2, [sp, #16]
 8008ad4:	3208      	adds	r2, #8
 8008ad6:	f109 0901 	add.w	r9, r9, #1
 8008ada:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008ade:	9204      	str	r2, [sp, #16]
 8008ae0:	e7c9      	b.n	8008a76 <_strtod_l+0x4de>
 8008ae2:	d0ea      	beq.n	8008aba <_strtod_l+0x522>
 8008ae4:	f1c8 0800 	rsb	r8, r8, #0
 8008ae8:	f018 020f 	ands.w	r2, r8, #15
 8008aec:	d00a      	beq.n	8008b04 <_strtod_l+0x56c>
 8008aee:	4b13      	ldr	r3, [pc, #76]	; (8008b3c <_strtod_l+0x5a4>)
 8008af0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008af4:	4650      	mov	r0, sl
 8008af6:	4659      	mov	r1, fp
 8008af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008afc:	f7f7 fec6 	bl	800088c <__aeabi_ddiv>
 8008b00:	4682      	mov	sl, r0
 8008b02:	468b      	mov	fp, r1
 8008b04:	ea5f 1828 	movs.w	r8, r8, asr #4
 8008b08:	d0d7      	beq.n	8008aba <_strtod_l+0x522>
 8008b0a:	f1b8 0f1f 	cmp.w	r8, #31
 8008b0e:	dd1f      	ble.n	8008b50 <_strtod_l+0x5b8>
 8008b10:	2500      	movs	r5, #0
 8008b12:	462e      	mov	r6, r5
 8008b14:	9507      	str	r5, [sp, #28]
 8008b16:	9505      	str	r5, [sp, #20]
 8008b18:	2322      	movs	r3, #34	; 0x22
 8008b1a:	f04f 0a00 	mov.w	sl, #0
 8008b1e:	f04f 0b00 	mov.w	fp, #0
 8008b22:	6023      	str	r3, [r4, #0]
 8008b24:	e786      	b.n	8008a34 <_strtod_l+0x49c>
 8008b26:	bf00      	nop
 8008b28:	0800c0f9 	.word	0x0800c0f9
 8008b2c:	0800c1ac 	.word	0x0800c1ac
 8008b30:	0800c0f1 	.word	0x0800c0f1
 8008b34:	0800c328 	.word	0x0800c328
 8008b38:	0800c223 	.word	0x0800c223
 8008b3c:	0800c4a0 	.word	0x0800c4a0
 8008b40:	0800c478 	.word	0x0800c478
 8008b44:	7ff00000 	.word	0x7ff00000
 8008b48:	7ca00000 	.word	0x7ca00000
 8008b4c:	7fefffff 	.word	0x7fefffff
 8008b50:	f018 0310 	ands.w	r3, r8, #16
 8008b54:	bf18      	it	ne
 8008b56:	236a      	movne	r3, #106	; 0x6a
 8008b58:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8008f08 <_strtod_l+0x970>
 8008b5c:	9304      	str	r3, [sp, #16]
 8008b5e:	4650      	mov	r0, sl
 8008b60:	4659      	mov	r1, fp
 8008b62:	2300      	movs	r3, #0
 8008b64:	f018 0f01 	tst.w	r8, #1
 8008b68:	d004      	beq.n	8008b74 <_strtod_l+0x5dc>
 8008b6a:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008b6e:	f7f7 fd63 	bl	8000638 <__aeabi_dmul>
 8008b72:	2301      	movs	r3, #1
 8008b74:	ea5f 0868 	movs.w	r8, r8, asr #1
 8008b78:	f109 0908 	add.w	r9, r9, #8
 8008b7c:	d1f2      	bne.n	8008b64 <_strtod_l+0x5cc>
 8008b7e:	b10b      	cbz	r3, 8008b84 <_strtod_l+0x5ec>
 8008b80:	4682      	mov	sl, r0
 8008b82:	468b      	mov	fp, r1
 8008b84:	9b04      	ldr	r3, [sp, #16]
 8008b86:	b1c3      	cbz	r3, 8008bba <_strtod_l+0x622>
 8008b88:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8008b8c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	4659      	mov	r1, fp
 8008b94:	dd11      	ble.n	8008bba <_strtod_l+0x622>
 8008b96:	2b1f      	cmp	r3, #31
 8008b98:	f340 8124 	ble.w	8008de4 <_strtod_l+0x84c>
 8008b9c:	2b34      	cmp	r3, #52	; 0x34
 8008b9e:	bfde      	ittt	le
 8008ba0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8008ba4:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 8008ba8:	fa03 f202 	lslle.w	r2, r3, r2
 8008bac:	f04f 0a00 	mov.w	sl, #0
 8008bb0:	bfcc      	ite	gt
 8008bb2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8008bb6:	ea02 0b01 	andle.w	fp, r2, r1
 8008bba:	2200      	movs	r2, #0
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	4650      	mov	r0, sl
 8008bc0:	4659      	mov	r1, fp
 8008bc2:	f7f7 ffa1 	bl	8000b08 <__aeabi_dcmpeq>
 8008bc6:	2800      	cmp	r0, #0
 8008bc8:	d1a2      	bne.n	8008b10 <_strtod_l+0x578>
 8008bca:	9b07      	ldr	r3, [sp, #28]
 8008bcc:	9300      	str	r3, [sp, #0]
 8008bce:	9908      	ldr	r1, [sp, #32]
 8008bd0:	462b      	mov	r3, r5
 8008bd2:	463a      	mov	r2, r7
 8008bd4:	4620      	mov	r0, r4
 8008bd6:	f001 ff51 	bl	800aa7c <__s2b>
 8008bda:	9007      	str	r0, [sp, #28]
 8008bdc:	2800      	cmp	r0, #0
 8008bde:	f43f af1f 	beq.w	8008a20 <_strtod_l+0x488>
 8008be2:	9b05      	ldr	r3, [sp, #20]
 8008be4:	1b9e      	subs	r6, r3, r6
 8008be6:	9b06      	ldr	r3, [sp, #24]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	bfb4      	ite	lt
 8008bec:	4633      	movlt	r3, r6
 8008bee:	2300      	movge	r3, #0
 8008bf0:	930c      	str	r3, [sp, #48]	; 0x30
 8008bf2:	9b06      	ldr	r3, [sp, #24]
 8008bf4:	2500      	movs	r5, #0
 8008bf6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008bfa:	9312      	str	r3, [sp, #72]	; 0x48
 8008bfc:	462e      	mov	r6, r5
 8008bfe:	9b07      	ldr	r3, [sp, #28]
 8008c00:	4620      	mov	r0, r4
 8008c02:	6859      	ldr	r1, [r3, #4]
 8008c04:	f001 fe92 	bl	800a92c <_Balloc>
 8008c08:	9005      	str	r0, [sp, #20]
 8008c0a:	2800      	cmp	r0, #0
 8008c0c:	f43f af0c 	beq.w	8008a28 <_strtod_l+0x490>
 8008c10:	9b07      	ldr	r3, [sp, #28]
 8008c12:	691a      	ldr	r2, [r3, #16]
 8008c14:	3202      	adds	r2, #2
 8008c16:	f103 010c 	add.w	r1, r3, #12
 8008c1a:	0092      	lsls	r2, r2, #2
 8008c1c:	300c      	adds	r0, #12
 8008c1e:	f7fe fc28 	bl	8007472 <memcpy>
 8008c22:	ec4b ab10 	vmov	d0, sl, fp
 8008c26:	aa1a      	add	r2, sp, #104	; 0x68
 8008c28:	a919      	add	r1, sp, #100	; 0x64
 8008c2a:	4620      	mov	r0, r4
 8008c2c:	f002 fa6c 	bl	800b108 <__d2b>
 8008c30:	ec4b ab18 	vmov	d8, sl, fp
 8008c34:	9018      	str	r0, [sp, #96]	; 0x60
 8008c36:	2800      	cmp	r0, #0
 8008c38:	f43f aef6 	beq.w	8008a28 <_strtod_l+0x490>
 8008c3c:	2101      	movs	r1, #1
 8008c3e:	4620      	mov	r0, r4
 8008c40:	f001 ffb6 	bl	800abb0 <__i2b>
 8008c44:	4606      	mov	r6, r0
 8008c46:	2800      	cmp	r0, #0
 8008c48:	f43f aeee 	beq.w	8008a28 <_strtod_l+0x490>
 8008c4c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008c4e:	9904      	ldr	r1, [sp, #16]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	bfab      	itete	ge
 8008c54:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8008c56:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8008c58:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8008c5a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8008c5e:	bfac      	ite	ge
 8008c60:	eb03 0902 	addge.w	r9, r3, r2
 8008c64:	1ad7      	sublt	r7, r2, r3
 8008c66:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008c68:	eba3 0801 	sub.w	r8, r3, r1
 8008c6c:	4490      	add	r8, r2
 8008c6e:	4ba1      	ldr	r3, [pc, #644]	; (8008ef4 <_strtod_l+0x95c>)
 8008c70:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8008c74:	4598      	cmp	r8, r3
 8008c76:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008c7a:	f280 80c7 	bge.w	8008e0c <_strtod_l+0x874>
 8008c7e:	eba3 0308 	sub.w	r3, r3, r8
 8008c82:	2b1f      	cmp	r3, #31
 8008c84:	eba2 0203 	sub.w	r2, r2, r3
 8008c88:	f04f 0101 	mov.w	r1, #1
 8008c8c:	f300 80b1 	bgt.w	8008df2 <_strtod_l+0x85a>
 8008c90:	fa01 f303 	lsl.w	r3, r1, r3
 8008c94:	930d      	str	r3, [sp, #52]	; 0x34
 8008c96:	2300      	movs	r3, #0
 8008c98:	9308      	str	r3, [sp, #32]
 8008c9a:	eb09 0802 	add.w	r8, r9, r2
 8008c9e:	9b04      	ldr	r3, [sp, #16]
 8008ca0:	45c1      	cmp	r9, r8
 8008ca2:	4417      	add	r7, r2
 8008ca4:	441f      	add	r7, r3
 8008ca6:	464b      	mov	r3, r9
 8008ca8:	bfa8      	it	ge
 8008caa:	4643      	movge	r3, r8
 8008cac:	42bb      	cmp	r3, r7
 8008cae:	bfa8      	it	ge
 8008cb0:	463b      	movge	r3, r7
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	bfc2      	ittt	gt
 8008cb6:	eba8 0803 	subgt.w	r8, r8, r3
 8008cba:	1aff      	subgt	r7, r7, r3
 8008cbc:	eba9 0903 	subgt.w	r9, r9, r3
 8008cc0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	dd17      	ble.n	8008cf6 <_strtod_l+0x75e>
 8008cc6:	4631      	mov	r1, r6
 8008cc8:	461a      	mov	r2, r3
 8008cca:	4620      	mov	r0, r4
 8008ccc:	f002 f830 	bl	800ad30 <__pow5mult>
 8008cd0:	4606      	mov	r6, r0
 8008cd2:	2800      	cmp	r0, #0
 8008cd4:	f43f aea8 	beq.w	8008a28 <_strtod_l+0x490>
 8008cd8:	4601      	mov	r1, r0
 8008cda:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008cdc:	4620      	mov	r0, r4
 8008cde:	f001 ff7d 	bl	800abdc <__multiply>
 8008ce2:	900b      	str	r0, [sp, #44]	; 0x2c
 8008ce4:	2800      	cmp	r0, #0
 8008ce6:	f43f ae9f 	beq.w	8008a28 <_strtod_l+0x490>
 8008cea:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008cec:	4620      	mov	r0, r4
 8008cee:	f001 fe5d 	bl	800a9ac <_Bfree>
 8008cf2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008cf4:	9318      	str	r3, [sp, #96]	; 0x60
 8008cf6:	f1b8 0f00 	cmp.w	r8, #0
 8008cfa:	f300 808c 	bgt.w	8008e16 <_strtod_l+0x87e>
 8008cfe:	9b06      	ldr	r3, [sp, #24]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	dd08      	ble.n	8008d16 <_strtod_l+0x77e>
 8008d04:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008d06:	9905      	ldr	r1, [sp, #20]
 8008d08:	4620      	mov	r0, r4
 8008d0a:	f002 f811 	bl	800ad30 <__pow5mult>
 8008d0e:	9005      	str	r0, [sp, #20]
 8008d10:	2800      	cmp	r0, #0
 8008d12:	f43f ae89 	beq.w	8008a28 <_strtod_l+0x490>
 8008d16:	2f00      	cmp	r7, #0
 8008d18:	dd08      	ble.n	8008d2c <_strtod_l+0x794>
 8008d1a:	9905      	ldr	r1, [sp, #20]
 8008d1c:	463a      	mov	r2, r7
 8008d1e:	4620      	mov	r0, r4
 8008d20:	f002 f860 	bl	800ade4 <__lshift>
 8008d24:	9005      	str	r0, [sp, #20]
 8008d26:	2800      	cmp	r0, #0
 8008d28:	f43f ae7e 	beq.w	8008a28 <_strtod_l+0x490>
 8008d2c:	f1b9 0f00 	cmp.w	r9, #0
 8008d30:	dd08      	ble.n	8008d44 <_strtod_l+0x7ac>
 8008d32:	4631      	mov	r1, r6
 8008d34:	464a      	mov	r2, r9
 8008d36:	4620      	mov	r0, r4
 8008d38:	f002 f854 	bl	800ade4 <__lshift>
 8008d3c:	4606      	mov	r6, r0
 8008d3e:	2800      	cmp	r0, #0
 8008d40:	f43f ae72 	beq.w	8008a28 <_strtod_l+0x490>
 8008d44:	9a05      	ldr	r2, [sp, #20]
 8008d46:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008d48:	4620      	mov	r0, r4
 8008d4a:	f002 f8d7 	bl	800aefc <__mdiff>
 8008d4e:	4605      	mov	r5, r0
 8008d50:	2800      	cmp	r0, #0
 8008d52:	f43f ae69 	beq.w	8008a28 <_strtod_l+0x490>
 8008d56:	68c3      	ldr	r3, [r0, #12]
 8008d58:	930b      	str	r3, [sp, #44]	; 0x2c
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	60c3      	str	r3, [r0, #12]
 8008d5e:	4631      	mov	r1, r6
 8008d60:	f002 f8b0 	bl	800aec4 <__mcmp>
 8008d64:	2800      	cmp	r0, #0
 8008d66:	da60      	bge.n	8008e2a <_strtod_l+0x892>
 8008d68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d6a:	ea53 030a 	orrs.w	r3, r3, sl
 8008d6e:	f040 8082 	bne.w	8008e76 <_strtod_l+0x8de>
 8008d72:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d17d      	bne.n	8008e76 <_strtod_l+0x8de>
 8008d7a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008d7e:	0d1b      	lsrs	r3, r3, #20
 8008d80:	051b      	lsls	r3, r3, #20
 8008d82:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008d86:	d976      	bls.n	8008e76 <_strtod_l+0x8de>
 8008d88:	696b      	ldr	r3, [r5, #20]
 8008d8a:	b913      	cbnz	r3, 8008d92 <_strtod_l+0x7fa>
 8008d8c:	692b      	ldr	r3, [r5, #16]
 8008d8e:	2b01      	cmp	r3, #1
 8008d90:	dd71      	ble.n	8008e76 <_strtod_l+0x8de>
 8008d92:	4629      	mov	r1, r5
 8008d94:	2201      	movs	r2, #1
 8008d96:	4620      	mov	r0, r4
 8008d98:	f002 f824 	bl	800ade4 <__lshift>
 8008d9c:	4631      	mov	r1, r6
 8008d9e:	4605      	mov	r5, r0
 8008da0:	f002 f890 	bl	800aec4 <__mcmp>
 8008da4:	2800      	cmp	r0, #0
 8008da6:	dd66      	ble.n	8008e76 <_strtod_l+0x8de>
 8008da8:	9904      	ldr	r1, [sp, #16]
 8008daa:	4a53      	ldr	r2, [pc, #332]	; (8008ef8 <_strtod_l+0x960>)
 8008dac:	465b      	mov	r3, fp
 8008dae:	2900      	cmp	r1, #0
 8008db0:	f000 8081 	beq.w	8008eb6 <_strtod_l+0x91e>
 8008db4:	ea02 010b 	and.w	r1, r2, fp
 8008db8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008dbc:	dc7b      	bgt.n	8008eb6 <_strtod_l+0x91e>
 8008dbe:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008dc2:	f77f aea9 	ble.w	8008b18 <_strtod_l+0x580>
 8008dc6:	4b4d      	ldr	r3, [pc, #308]	; (8008efc <_strtod_l+0x964>)
 8008dc8:	4650      	mov	r0, sl
 8008dca:	4659      	mov	r1, fp
 8008dcc:	2200      	movs	r2, #0
 8008dce:	f7f7 fc33 	bl	8000638 <__aeabi_dmul>
 8008dd2:	460b      	mov	r3, r1
 8008dd4:	4303      	orrs	r3, r0
 8008dd6:	bf08      	it	eq
 8008dd8:	2322      	moveq	r3, #34	; 0x22
 8008dda:	4682      	mov	sl, r0
 8008ddc:	468b      	mov	fp, r1
 8008dde:	bf08      	it	eq
 8008de0:	6023      	streq	r3, [r4, #0]
 8008de2:	e62b      	b.n	8008a3c <_strtod_l+0x4a4>
 8008de4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008de8:	fa02 f303 	lsl.w	r3, r2, r3
 8008dec:	ea03 0a0a 	and.w	sl, r3, sl
 8008df0:	e6e3      	b.n	8008bba <_strtod_l+0x622>
 8008df2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8008df6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8008dfa:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8008dfe:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8008e02:	fa01 f308 	lsl.w	r3, r1, r8
 8008e06:	9308      	str	r3, [sp, #32]
 8008e08:	910d      	str	r1, [sp, #52]	; 0x34
 8008e0a:	e746      	b.n	8008c9a <_strtod_l+0x702>
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	9308      	str	r3, [sp, #32]
 8008e10:	2301      	movs	r3, #1
 8008e12:	930d      	str	r3, [sp, #52]	; 0x34
 8008e14:	e741      	b.n	8008c9a <_strtod_l+0x702>
 8008e16:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008e18:	4642      	mov	r2, r8
 8008e1a:	4620      	mov	r0, r4
 8008e1c:	f001 ffe2 	bl	800ade4 <__lshift>
 8008e20:	9018      	str	r0, [sp, #96]	; 0x60
 8008e22:	2800      	cmp	r0, #0
 8008e24:	f47f af6b 	bne.w	8008cfe <_strtod_l+0x766>
 8008e28:	e5fe      	b.n	8008a28 <_strtod_l+0x490>
 8008e2a:	465f      	mov	r7, fp
 8008e2c:	d16e      	bne.n	8008f0c <_strtod_l+0x974>
 8008e2e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008e30:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008e34:	b342      	cbz	r2, 8008e88 <_strtod_l+0x8f0>
 8008e36:	4a32      	ldr	r2, [pc, #200]	; (8008f00 <_strtod_l+0x968>)
 8008e38:	4293      	cmp	r3, r2
 8008e3a:	d128      	bne.n	8008e8e <_strtod_l+0x8f6>
 8008e3c:	9b04      	ldr	r3, [sp, #16]
 8008e3e:	4651      	mov	r1, sl
 8008e40:	b1eb      	cbz	r3, 8008e7e <_strtod_l+0x8e6>
 8008e42:	4b2d      	ldr	r3, [pc, #180]	; (8008ef8 <_strtod_l+0x960>)
 8008e44:	403b      	ands	r3, r7
 8008e46:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008e4a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008e4e:	d819      	bhi.n	8008e84 <_strtod_l+0x8ec>
 8008e50:	0d1b      	lsrs	r3, r3, #20
 8008e52:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008e56:	fa02 f303 	lsl.w	r3, r2, r3
 8008e5a:	4299      	cmp	r1, r3
 8008e5c:	d117      	bne.n	8008e8e <_strtod_l+0x8f6>
 8008e5e:	4b29      	ldr	r3, [pc, #164]	; (8008f04 <_strtod_l+0x96c>)
 8008e60:	429f      	cmp	r7, r3
 8008e62:	d102      	bne.n	8008e6a <_strtod_l+0x8d2>
 8008e64:	3101      	adds	r1, #1
 8008e66:	f43f addf 	beq.w	8008a28 <_strtod_l+0x490>
 8008e6a:	4b23      	ldr	r3, [pc, #140]	; (8008ef8 <_strtod_l+0x960>)
 8008e6c:	403b      	ands	r3, r7
 8008e6e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8008e72:	f04f 0a00 	mov.w	sl, #0
 8008e76:	9b04      	ldr	r3, [sp, #16]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d1a4      	bne.n	8008dc6 <_strtod_l+0x82e>
 8008e7c:	e5de      	b.n	8008a3c <_strtod_l+0x4a4>
 8008e7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008e82:	e7ea      	b.n	8008e5a <_strtod_l+0x8c2>
 8008e84:	4613      	mov	r3, r2
 8008e86:	e7e8      	b.n	8008e5a <_strtod_l+0x8c2>
 8008e88:	ea53 030a 	orrs.w	r3, r3, sl
 8008e8c:	d08c      	beq.n	8008da8 <_strtod_l+0x810>
 8008e8e:	9b08      	ldr	r3, [sp, #32]
 8008e90:	b1db      	cbz	r3, 8008eca <_strtod_l+0x932>
 8008e92:	423b      	tst	r3, r7
 8008e94:	d0ef      	beq.n	8008e76 <_strtod_l+0x8de>
 8008e96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008e98:	9a04      	ldr	r2, [sp, #16]
 8008e9a:	4650      	mov	r0, sl
 8008e9c:	4659      	mov	r1, fp
 8008e9e:	b1c3      	cbz	r3, 8008ed2 <_strtod_l+0x93a>
 8008ea0:	f7ff fb5b 	bl	800855a <sulp>
 8008ea4:	4602      	mov	r2, r0
 8008ea6:	460b      	mov	r3, r1
 8008ea8:	ec51 0b18 	vmov	r0, r1, d8
 8008eac:	f7f7 fa0e 	bl	80002cc <__adddf3>
 8008eb0:	4682      	mov	sl, r0
 8008eb2:	468b      	mov	fp, r1
 8008eb4:	e7df      	b.n	8008e76 <_strtod_l+0x8de>
 8008eb6:	4013      	ands	r3, r2
 8008eb8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008ebc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008ec0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008ec4:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8008ec8:	e7d5      	b.n	8008e76 <_strtod_l+0x8de>
 8008eca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008ecc:	ea13 0f0a 	tst.w	r3, sl
 8008ed0:	e7e0      	b.n	8008e94 <_strtod_l+0x8fc>
 8008ed2:	f7ff fb42 	bl	800855a <sulp>
 8008ed6:	4602      	mov	r2, r0
 8008ed8:	460b      	mov	r3, r1
 8008eda:	ec51 0b18 	vmov	r0, r1, d8
 8008ede:	f7f7 f9f3 	bl	80002c8 <__aeabi_dsub>
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	4682      	mov	sl, r0
 8008ee8:	468b      	mov	fp, r1
 8008eea:	f7f7 fe0d 	bl	8000b08 <__aeabi_dcmpeq>
 8008eee:	2800      	cmp	r0, #0
 8008ef0:	d0c1      	beq.n	8008e76 <_strtod_l+0x8de>
 8008ef2:	e611      	b.n	8008b18 <_strtod_l+0x580>
 8008ef4:	fffffc02 	.word	0xfffffc02
 8008ef8:	7ff00000 	.word	0x7ff00000
 8008efc:	39500000 	.word	0x39500000
 8008f00:	000fffff 	.word	0x000fffff
 8008f04:	7fefffff 	.word	0x7fefffff
 8008f08:	0800c1c0 	.word	0x0800c1c0
 8008f0c:	4631      	mov	r1, r6
 8008f0e:	4628      	mov	r0, r5
 8008f10:	f002 f956 	bl	800b1c0 <__ratio>
 8008f14:	ec59 8b10 	vmov	r8, r9, d0
 8008f18:	ee10 0a10 	vmov	r0, s0
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008f22:	4649      	mov	r1, r9
 8008f24:	f7f7 fe04 	bl	8000b30 <__aeabi_dcmple>
 8008f28:	2800      	cmp	r0, #0
 8008f2a:	d07a      	beq.n	8009022 <_strtod_l+0xa8a>
 8008f2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d04a      	beq.n	8008fc8 <_strtod_l+0xa30>
 8008f32:	4b95      	ldr	r3, [pc, #596]	; (8009188 <_strtod_l+0xbf0>)
 8008f34:	2200      	movs	r2, #0
 8008f36:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008f3a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8009188 <_strtod_l+0xbf0>
 8008f3e:	f04f 0800 	mov.w	r8, #0
 8008f42:	4b92      	ldr	r3, [pc, #584]	; (800918c <_strtod_l+0xbf4>)
 8008f44:	403b      	ands	r3, r7
 8008f46:	930d      	str	r3, [sp, #52]	; 0x34
 8008f48:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008f4a:	4b91      	ldr	r3, [pc, #580]	; (8009190 <_strtod_l+0xbf8>)
 8008f4c:	429a      	cmp	r2, r3
 8008f4e:	f040 80b0 	bne.w	80090b2 <_strtod_l+0xb1a>
 8008f52:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008f56:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8008f5a:	ec4b ab10 	vmov	d0, sl, fp
 8008f5e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008f62:	f002 f855 	bl	800b010 <__ulp>
 8008f66:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008f6a:	ec53 2b10 	vmov	r2, r3, d0
 8008f6e:	f7f7 fb63 	bl	8000638 <__aeabi_dmul>
 8008f72:	4652      	mov	r2, sl
 8008f74:	465b      	mov	r3, fp
 8008f76:	f7f7 f9a9 	bl	80002cc <__adddf3>
 8008f7a:	460b      	mov	r3, r1
 8008f7c:	4983      	ldr	r1, [pc, #524]	; (800918c <_strtod_l+0xbf4>)
 8008f7e:	4a85      	ldr	r2, [pc, #532]	; (8009194 <_strtod_l+0xbfc>)
 8008f80:	4019      	ands	r1, r3
 8008f82:	4291      	cmp	r1, r2
 8008f84:	4682      	mov	sl, r0
 8008f86:	d960      	bls.n	800904a <_strtod_l+0xab2>
 8008f88:	ee18 3a90 	vmov	r3, s17
 8008f8c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8008f90:	4293      	cmp	r3, r2
 8008f92:	d104      	bne.n	8008f9e <_strtod_l+0xa06>
 8008f94:	ee18 3a10 	vmov	r3, s16
 8008f98:	3301      	adds	r3, #1
 8008f9a:	f43f ad45 	beq.w	8008a28 <_strtod_l+0x490>
 8008f9e:	f8df b200 	ldr.w	fp, [pc, #512]	; 80091a0 <_strtod_l+0xc08>
 8008fa2:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8008fa6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008fa8:	4620      	mov	r0, r4
 8008faa:	f001 fcff 	bl	800a9ac <_Bfree>
 8008fae:	9905      	ldr	r1, [sp, #20]
 8008fb0:	4620      	mov	r0, r4
 8008fb2:	f001 fcfb 	bl	800a9ac <_Bfree>
 8008fb6:	4631      	mov	r1, r6
 8008fb8:	4620      	mov	r0, r4
 8008fba:	f001 fcf7 	bl	800a9ac <_Bfree>
 8008fbe:	4629      	mov	r1, r5
 8008fc0:	4620      	mov	r0, r4
 8008fc2:	f001 fcf3 	bl	800a9ac <_Bfree>
 8008fc6:	e61a      	b.n	8008bfe <_strtod_l+0x666>
 8008fc8:	f1ba 0f00 	cmp.w	sl, #0
 8008fcc:	d11b      	bne.n	8009006 <_strtod_l+0xa6e>
 8008fce:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008fd2:	b9f3      	cbnz	r3, 8009012 <_strtod_l+0xa7a>
 8008fd4:	4b6c      	ldr	r3, [pc, #432]	; (8009188 <_strtod_l+0xbf0>)
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	4640      	mov	r0, r8
 8008fda:	4649      	mov	r1, r9
 8008fdc:	f7f7 fd9e 	bl	8000b1c <__aeabi_dcmplt>
 8008fe0:	b9d0      	cbnz	r0, 8009018 <_strtod_l+0xa80>
 8008fe2:	4640      	mov	r0, r8
 8008fe4:	4649      	mov	r1, r9
 8008fe6:	4b6c      	ldr	r3, [pc, #432]	; (8009198 <_strtod_l+0xc00>)
 8008fe8:	2200      	movs	r2, #0
 8008fea:	f7f7 fb25 	bl	8000638 <__aeabi_dmul>
 8008fee:	4680      	mov	r8, r0
 8008ff0:	4689      	mov	r9, r1
 8008ff2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008ff6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8008ffa:	9315      	str	r3, [sp, #84]	; 0x54
 8008ffc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009000:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009004:	e79d      	b.n	8008f42 <_strtod_l+0x9aa>
 8009006:	f1ba 0f01 	cmp.w	sl, #1
 800900a:	d102      	bne.n	8009012 <_strtod_l+0xa7a>
 800900c:	2f00      	cmp	r7, #0
 800900e:	f43f ad83 	beq.w	8008b18 <_strtod_l+0x580>
 8009012:	4b62      	ldr	r3, [pc, #392]	; (800919c <_strtod_l+0xc04>)
 8009014:	2200      	movs	r2, #0
 8009016:	e78e      	b.n	8008f36 <_strtod_l+0x99e>
 8009018:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8009198 <_strtod_l+0xc00>
 800901c:	f04f 0800 	mov.w	r8, #0
 8009020:	e7e7      	b.n	8008ff2 <_strtod_l+0xa5a>
 8009022:	4b5d      	ldr	r3, [pc, #372]	; (8009198 <_strtod_l+0xc00>)
 8009024:	4640      	mov	r0, r8
 8009026:	4649      	mov	r1, r9
 8009028:	2200      	movs	r2, #0
 800902a:	f7f7 fb05 	bl	8000638 <__aeabi_dmul>
 800902e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009030:	4680      	mov	r8, r0
 8009032:	4689      	mov	r9, r1
 8009034:	b933      	cbnz	r3, 8009044 <_strtod_l+0xaac>
 8009036:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800903a:	900e      	str	r0, [sp, #56]	; 0x38
 800903c:	930f      	str	r3, [sp, #60]	; 0x3c
 800903e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8009042:	e7dd      	b.n	8009000 <_strtod_l+0xa68>
 8009044:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8009048:	e7f9      	b.n	800903e <_strtod_l+0xaa6>
 800904a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800904e:	9b04      	ldr	r3, [sp, #16]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d1a8      	bne.n	8008fa6 <_strtod_l+0xa0e>
 8009054:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009058:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800905a:	0d1b      	lsrs	r3, r3, #20
 800905c:	051b      	lsls	r3, r3, #20
 800905e:	429a      	cmp	r2, r3
 8009060:	d1a1      	bne.n	8008fa6 <_strtod_l+0xa0e>
 8009062:	4640      	mov	r0, r8
 8009064:	4649      	mov	r1, r9
 8009066:	f7f7 fe47 	bl	8000cf8 <__aeabi_d2lz>
 800906a:	f7f7 fab7 	bl	80005dc <__aeabi_l2d>
 800906e:	4602      	mov	r2, r0
 8009070:	460b      	mov	r3, r1
 8009072:	4640      	mov	r0, r8
 8009074:	4649      	mov	r1, r9
 8009076:	f7f7 f927 	bl	80002c8 <__aeabi_dsub>
 800907a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800907c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009080:	ea43 030a 	orr.w	r3, r3, sl
 8009084:	4313      	orrs	r3, r2
 8009086:	4680      	mov	r8, r0
 8009088:	4689      	mov	r9, r1
 800908a:	d055      	beq.n	8009138 <_strtod_l+0xba0>
 800908c:	a336      	add	r3, pc, #216	; (adr r3, 8009168 <_strtod_l+0xbd0>)
 800908e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009092:	f7f7 fd43 	bl	8000b1c <__aeabi_dcmplt>
 8009096:	2800      	cmp	r0, #0
 8009098:	f47f acd0 	bne.w	8008a3c <_strtod_l+0x4a4>
 800909c:	a334      	add	r3, pc, #208	; (adr r3, 8009170 <_strtod_l+0xbd8>)
 800909e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090a2:	4640      	mov	r0, r8
 80090a4:	4649      	mov	r1, r9
 80090a6:	f7f7 fd57 	bl	8000b58 <__aeabi_dcmpgt>
 80090aa:	2800      	cmp	r0, #0
 80090ac:	f43f af7b 	beq.w	8008fa6 <_strtod_l+0xa0e>
 80090b0:	e4c4      	b.n	8008a3c <_strtod_l+0x4a4>
 80090b2:	9b04      	ldr	r3, [sp, #16]
 80090b4:	b333      	cbz	r3, 8009104 <_strtod_l+0xb6c>
 80090b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80090b8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80090bc:	d822      	bhi.n	8009104 <_strtod_l+0xb6c>
 80090be:	a32e      	add	r3, pc, #184	; (adr r3, 8009178 <_strtod_l+0xbe0>)
 80090c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090c4:	4640      	mov	r0, r8
 80090c6:	4649      	mov	r1, r9
 80090c8:	f7f7 fd32 	bl	8000b30 <__aeabi_dcmple>
 80090cc:	b1a0      	cbz	r0, 80090f8 <_strtod_l+0xb60>
 80090ce:	4649      	mov	r1, r9
 80090d0:	4640      	mov	r0, r8
 80090d2:	f7f7 fd89 	bl	8000be8 <__aeabi_d2uiz>
 80090d6:	2801      	cmp	r0, #1
 80090d8:	bf38      	it	cc
 80090da:	2001      	movcc	r0, #1
 80090dc:	f7f7 fa32 	bl	8000544 <__aeabi_ui2d>
 80090e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80090e2:	4680      	mov	r8, r0
 80090e4:	4689      	mov	r9, r1
 80090e6:	bb23      	cbnz	r3, 8009132 <_strtod_l+0xb9a>
 80090e8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80090ec:	9010      	str	r0, [sp, #64]	; 0x40
 80090ee:	9311      	str	r3, [sp, #68]	; 0x44
 80090f0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80090f4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80090f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090fa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80090fc:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8009100:	1a9b      	subs	r3, r3, r2
 8009102:	9309      	str	r3, [sp, #36]	; 0x24
 8009104:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009108:	eeb0 0a48 	vmov.f32	s0, s16
 800910c:	eef0 0a68 	vmov.f32	s1, s17
 8009110:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009114:	f001 ff7c 	bl	800b010 <__ulp>
 8009118:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800911c:	ec53 2b10 	vmov	r2, r3, d0
 8009120:	f7f7 fa8a 	bl	8000638 <__aeabi_dmul>
 8009124:	ec53 2b18 	vmov	r2, r3, d8
 8009128:	f7f7 f8d0 	bl	80002cc <__adddf3>
 800912c:	4682      	mov	sl, r0
 800912e:	468b      	mov	fp, r1
 8009130:	e78d      	b.n	800904e <_strtod_l+0xab6>
 8009132:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8009136:	e7db      	b.n	80090f0 <_strtod_l+0xb58>
 8009138:	a311      	add	r3, pc, #68	; (adr r3, 8009180 <_strtod_l+0xbe8>)
 800913a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800913e:	f7f7 fced 	bl	8000b1c <__aeabi_dcmplt>
 8009142:	e7b2      	b.n	80090aa <_strtod_l+0xb12>
 8009144:	2300      	movs	r3, #0
 8009146:	930a      	str	r3, [sp, #40]	; 0x28
 8009148:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800914a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800914c:	6013      	str	r3, [r2, #0]
 800914e:	f7ff ba6b 	b.w	8008628 <_strtod_l+0x90>
 8009152:	2a65      	cmp	r2, #101	; 0x65
 8009154:	f43f ab5f 	beq.w	8008816 <_strtod_l+0x27e>
 8009158:	2a45      	cmp	r2, #69	; 0x45
 800915a:	f43f ab5c 	beq.w	8008816 <_strtod_l+0x27e>
 800915e:	2301      	movs	r3, #1
 8009160:	f7ff bb94 	b.w	800888c <_strtod_l+0x2f4>
 8009164:	f3af 8000 	nop.w
 8009168:	94a03595 	.word	0x94a03595
 800916c:	3fdfffff 	.word	0x3fdfffff
 8009170:	35afe535 	.word	0x35afe535
 8009174:	3fe00000 	.word	0x3fe00000
 8009178:	ffc00000 	.word	0xffc00000
 800917c:	41dfffff 	.word	0x41dfffff
 8009180:	94a03595 	.word	0x94a03595
 8009184:	3fcfffff 	.word	0x3fcfffff
 8009188:	3ff00000 	.word	0x3ff00000
 800918c:	7ff00000 	.word	0x7ff00000
 8009190:	7fe00000 	.word	0x7fe00000
 8009194:	7c9fffff 	.word	0x7c9fffff
 8009198:	3fe00000 	.word	0x3fe00000
 800919c:	bff00000 	.word	0xbff00000
 80091a0:	7fefffff 	.word	0x7fefffff

080091a4 <_strtod_r>:
 80091a4:	4b01      	ldr	r3, [pc, #4]	; (80091ac <_strtod_r+0x8>)
 80091a6:	f7ff b9f7 	b.w	8008598 <_strtod_l>
 80091aa:	bf00      	nop
 80091ac:	20000078 	.word	0x20000078

080091b0 <_strtol_l.constprop.0>:
 80091b0:	2b01      	cmp	r3, #1
 80091b2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091b6:	d001      	beq.n	80091bc <_strtol_l.constprop.0+0xc>
 80091b8:	2b24      	cmp	r3, #36	; 0x24
 80091ba:	d906      	bls.n	80091ca <_strtol_l.constprop.0+0x1a>
 80091bc:	f7fe f836 	bl	800722c <__errno>
 80091c0:	2316      	movs	r3, #22
 80091c2:	6003      	str	r3, [r0, #0]
 80091c4:	2000      	movs	r0, #0
 80091c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091ca:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80092b0 <_strtol_l.constprop.0+0x100>
 80091ce:	460d      	mov	r5, r1
 80091d0:	462e      	mov	r6, r5
 80091d2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80091d6:	f814 700c 	ldrb.w	r7, [r4, ip]
 80091da:	f017 0708 	ands.w	r7, r7, #8
 80091de:	d1f7      	bne.n	80091d0 <_strtol_l.constprop.0+0x20>
 80091e0:	2c2d      	cmp	r4, #45	; 0x2d
 80091e2:	d132      	bne.n	800924a <_strtol_l.constprop.0+0x9a>
 80091e4:	782c      	ldrb	r4, [r5, #0]
 80091e6:	2701      	movs	r7, #1
 80091e8:	1cb5      	adds	r5, r6, #2
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d05b      	beq.n	80092a6 <_strtol_l.constprop.0+0xf6>
 80091ee:	2b10      	cmp	r3, #16
 80091f0:	d109      	bne.n	8009206 <_strtol_l.constprop.0+0x56>
 80091f2:	2c30      	cmp	r4, #48	; 0x30
 80091f4:	d107      	bne.n	8009206 <_strtol_l.constprop.0+0x56>
 80091f6:	782c      	ldrb	r4, [r5, #0]
 80091f8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80091fc:	2c58      	cmp	r4, #88	; 0x58
 80091fe:	d14d      	bne.n	800929c <_strtol_l.constprop.0+0xec>
 8009200:	786c      	ldrb	r4, [r5, #1]
 8009202:	2310      	movs	r3, #16
 8009204:	3502      	adds	r5, #2
 8009206:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800920a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800920e:	f04f 0c00 	mov.w	ip, #0
 8009212:	fbb8 f9f3 	udiv	r9, r8, r3
 8009216:	4666      	mov	r6, ip
 8009218:	fb03 8a19 	mls	sl, r3, r9, r8
 800921c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8009220:	f1be 0f09 	cmp.w	lr, #9
 8009224:	d816      	bhi.n	8009254 <_strtol_l.constprop.0+0xa4>
 8009226:	4674      	mov	r4, lr
 8009228:	42a3      	cmp	r3, r4
 800922a:	dd24      	ble.n	8009276 <_strtol_l.constprop.0+0xc6>
 800922c:	f1bc 0f00 	cmp.w	ip, #0
 8009230:	db1e      	blt.n	8009270 <_strtol_l.constprop.0+0xc0>
 8009232:	45b1      	cmp	r9, r6
 8009234:	d31c      	bcc.n	8009270 <_strtol_l.constprop.0+0xc0>
 8009236:	d101      	bne.n	800923c <_strtol_l.constprop.0+0x8c>
 8009238:	45a2      	cmp	sl, r4
 800923a:	db19      	blt.n	8009270 <_strtol_l.constprop.0+0xc0>
 800923c:	fb06 4603 	mla	r6, r6, r3, r4
 8009240:	f04f 0c01 	mov.w	ip, #1
 8009244:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009248:	e7e8      	b.n	800921c <_strtol_l.constprop.0+0x6c>
 800924a:	2c2b      	cmp	r4, #43	; 0x2b
 800924c:	bf04      	itt	eq
 800924e:	782c      	ldrbeq	r4, [r5, #0]
 8009250:	1cb5      	addeq	r5, r6, #2
 8009252:	e7ca      	b.n	80091ea <_strtol_l.constprop.0+0x3a>
 8009254:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8009258:	f1be 0f19 	cmp.w	lr, #25
 800925c:	d801      	bhi.n	8009262 <_strtol_l.constprop.0+0xb2>
 800925e:	3c37      	subs	r4, #55	; 0x37
 8009260:	e7e2      	b.n	8009228 <_strtol_l.constprop.0+0x78>
 8009262:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8009266:	f1be 0f19 	cmp.w	lr, #25
 800926a:	d804      	bhi.n	8009276 <_strtol_l.constprop.0+0xc6>
 800926c:	3c57      	subs	r4, #87	; 0x57
 800926e:	e7db      	b.n	8009228 <_strtol_l.constprop.0+0x78>
 8009270:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8009274:	e7e6      	b.n	8009244 <_strtol_l.constprop.0+0x94>
 8009276:	f1bc 0f00 	cmp.w	ip, #0
 800927a:	da05      	bge.n	8009288 <_strtol_l.constprop.0+0xd8>
 800927c:	2322      	movs	r3, #34	; 0x22
 800927e:	6003      	str	r3, [r0, #0]
 8009280:	4646      	mov	r6, r8
 8009282:	b942      	cbnz	r2, 8009296 <_strtol_l.constprop.0+0xe6>
 8009284:	4630      	mov	r0, r6
 8009286:	e79e      	b.n	80091c6 <_strtol_l.constprop.0+0x16>
 8009288:	b107      	cbz	r7, 800928c <_strtol_l.constprop.0+0xdc>
 800928a:	4276      	negs	r6, r6
 800928c:	2a00      	cmp	r2, #0
 800928e:	d0f9      	beq.n	8009284 <_strtol_l.constprop.0+0xd4>
 8009290:	f1bc 0f00 	cmp.w	ip, #0
 8009294:	d000      	beq.n	8009298 <_strtol_l.constprop.0+0xe8>
 8009296:	1e69      	subs	r1, r5, #1
 8009298:	6011      	str	r1, [r2, #0]
 800929a:	e7f3      	b.n	8009284 <_strtol_l.constprop.0+0xd4>
 800929c:	2430      	movs	r4, #48	; 0x30
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d1b1      	bne.n	8009206 <_strtol_l.constprop.0+0x56>
 80092a2:	2308      	movs	r3, #8
 80092a4:	e7af      	b.n	8009206 <_strtol_l.constprop.0+0x56>
 80092a6:	2c30      	cmp	r4, #48	; 0x30
 80092a8:	d0a5      	beq.n	80091f6 <_strtol_l.constprop.0+0x46>
 80092aa:	230a      	movs	r3, #10
 80092ac:	e7ab      	b.n	8009206 <_strtol_l.constprop.0+0x56>
 80092ae:	bf00      	nop
 80092b0:	0800c225 	.word	0x0800c225

080092b4 <_strtol_r>:
 80092b4:	f7ff bf7c 	b.w	80091b0 <_strtol_l.constprop.0>

080092b8 <_write_r>:
 80092b8:	b538      	push	{r3, r4, r5, lr}
 80092ba:	4d07      	ldr	r5, [pc, #28]	; (80092d8 <_write_r+0x20>)
 80092bc:	4604      	mov	r4, r0
 80092be:	4608      	mov	r0, r1
 80092c0:	4611      	mov	r1, r2
 80092c2:	2200      	movs	r2, #0
 80092c4:	602a      	str	r2, [r5, #0]
 80092c6:	461a      	mov	r2, r3
 80092c8:	f7f8 fb3d 	bl	8001946 <_write>
 80092cc:	1c43      	adds	r3, r0, #1
 80092ce:	d102      	bne.n	80092d6 <_write_r+0x1e>
 80092d0:	682b      	ldr	r3, [r5, #0]
 80092d2:	b103      	cbz	r3, 80092d6 <_write_r+0x1e>
 80092d4:	6023      	str	r3, [r4, #0]
 80092d6:	bd38      	pop	{r3, r4, r5, pc}
 80092d8:	20004ce8 	.word	0x20004ce8

080092dc <__assert_func>:
 80092dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80092de:	4614      	mov	r4, r2
 80092e0:	461a      	mov	r2, r3
 80092e2:	4b09      	ldr	r3, [pc, #36]	; (8009308 <__assert_func+0x2c>)
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	4605      	mov	r5, r0
 80092e8:	68d8      	ldr	r0, [r3, #12]
 80092ea:	b14c      	cbz	r4, 8009300 <__assert_func+0x24>
 80092ec:	4b07      	ldr	r3, [pc, #28]	; (800930c <__assert_func+0x30>)
 80092ee:	9100      	str	r1, [sp, #0]
 80092f0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80092f4:	4906      	ldr	r1, [pc, #24]	; (8009310 <__assert_func+0x34>)
 80092f6:	462b      	mov	r3, r5
 80092f8:	f000 ff5a 	bl	800a1b0 <fiprintf>
 80092fc:	f002 fbee 	bl	800badc <abort>
 8009300:	4b04      	ldr	r3, [pc, #16]	; (8009314 <__assert_func+0x38>)
 8009302:	461c      	mov	r4, r3
 8009304:	e7f3      	b.n	80092ee <__assert_func+0x12>
 8009306:	bf00      	nop
 8009308:	20000010 	.word	0x20000010
 800930c:	0800c1e8 	.word	0x0800c1e8
 8009310:	0800c1f5 	.word	0x0800c1f5
 8009314:	0800c223 	.word	0x0800c223

08009318 <_close_r>:
 8009318:	b538      	push	{r3, r4, r5, lr}
 800931a:	4d06      	ldr	r5, [pc, #24]	; (8009334 <_close_r+0x1c>)
 800931c:	2300      	movs	r3, #0
 800931e:	4604      	mov	r4, r0
 8009320:	4608      	mov	r0, r1
 8009322:	602b      	str	r3, [r5, #0]
 8009324:	f7f8 fb2b 	bl	800197e <_close>
 8009328:	1c43      	adds	r3, r0, #1
 800932a:	d102      	bne.n	8009332 <_close_r+0x1a>
 800932c:	682b      	ldr	r3, [r5, #0]
 800932e:	b103      	cbz	r3, 8009332 <_close_r+0x1a>
 8009330:	6023      	str	r3, [r4, #0]
 8009332:	bd38      	pop	{r3, r4, r5, pc}
 8009334:	20004ce8 	.word	0x20004ce8

08009338 <quorem>:
 8009338:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800933c:	6903      	ldr	r3, [r0, #16]
 800933e:	690c      	ldr	r4, [r1, #16]
 8009340:	42a3      	cmp	r3, r4
 8009342:	4607      	mov	r7, r0
 8009344:	f2c0 8081 	blt.w	800944a <quorem+0x112>
 8009348:	3c01      	subs	r4, #1
 800934a:	f101 0814 	add.w	r8, r1, #20
 800934e:	f100 0514 	add.w	r5, r0, #20
 8009352:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009356:	9301      	str	r3, [sp, #4]
 8009358:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800935c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009360:	3301      	adds	r3, #1
 8009362:	429a      	cmp	r2, r3
 8009364:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009368:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800936c:	fbb2 f6f3 	udiv	r6, r2, r3
 8009370:	d331      	bcc.n	80093d6 <quorem+0x9e>
 8009372:	f04f 0e00 	mov.w	lr, #0
 8009376:	4640      	mov	r0, r8
 8009378:	46ac      	mov	ip, r5
 800937a:	46f2      	mov	sl, lr
 800937c:	f850 2b04 	ldr.w	r2, [r0], #4
 8009380:	b293      	uxth	r3, r2
 8009382:	fb06 e303 	mla	r3, r6, r3, lr
 8009386:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800938a:	b29b      	uxth	r3, r3
 800938c:	ebaa 0303 	sub.w	r3, sl, r3
 8009390:	f8dc a000 	ldr.w	sl, [ip]
 8009394:	0c12      	lsrs	r2, r2, #16
 8009396:	fa13 f38a 	uxtah	r3, r3, sl
 800939a:	fb06 e202 	mla	r2, r6, r2, lr
 800939e:	9300      	str	r3, [sp, #0]
 80093a0:	9b00      	ldr	r3, [sp, #0]
 80093a2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80093a6:	b292      	uxth	r2, r2
 80093a8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80093ac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80093b0:	f8bd 3000 	ldrh.w	r3, [sp]
 80093b4:	4581      	cmp	r9, r0
 80093b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80093ba:	f84c 3b04 	str.w	r3, [ip], #4
 80093be:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80093c2:	d2db      	bcs.n	800937c <quorem+0x44>
 80093c4:	f855 300b 	ldr.w	r3, [r5, fp]
 80093c8:	b92b      	cbnz	r3, 80093d6 <quorem+0x9e>
 80093ca:	9b01      	ldr	r3, [sp, #4]
 80093cc:	3b04      	subs	r3, #4
 80093ce:	429d      	cmp	r5, r3
 80093d0:	461a      	mov	r2, r3
 80093d2:	d32e      	bcc.n	8009432 <quorem+0xfa>
 80093d4:	613c      	str	r4, [r7, #16]
 80093d6:	4638      	mov	r0, r7
 80093d8:	f001 fd74 	bl	800aec4 <__mcmp>
 80093dc:	2800      	cmp	r0, #0
 80093de:	db24      	blt.n	800942a <quorem+0xf2>
 80093e0:	3601      	adds	r6, #1
 80093e2:	4628      	mov	r0, r5
 80093e4:	f04f 0c00 	mov.w	ip, #0
 80093e8:	f858 2b04 	ldr.w	r2, [r8], #4
 80093ec:	f8d0 e000 	ldr.w	lr, [r0]
 80093f0:	b293      	uxth	r3, r2
 80093f2:	ebac 0303 	sub.w	r3, ip, r3
 80093f6:	0c12      	lsrs	r2, r2, #16
 80093f8:	fa13 f38e 	uxtah	r3, r3, lr
 80093fc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009400:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009404:	b29b      	uxth	r3, r3
 8009406:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800940a:	45c1      	cmp	r9, r8
 800940c:	f840 3b04 	str.w	r3, [r0], #4
 8009410:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009414:	d2e8      	bcs.n	80093e8 <quorem+0xb0>
 8009416:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800941a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800941e:	b922      	cbnz	r2, 800942a <quorem+0xf2>
 8009420:	3b04      	subs	r3, #4
 8009422:	429d      	cmp	r5, r3
 8009424:	461a      	mov	r2, r3
 8009426:	d30a      	bcc.n	800943e <quorem+0x106>
 8009428:	613c      	str	r4, [r7, #16]
 800942a:	4630      	mov	r0, r6
 800942c:	b003      	add	sp, #12
 800942e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009432:	6812      	ldr	r2, [r2, #0]
 8009434:	3b04      	subs	r3, #4
 8009436:	2a00      	cmp	r2, #0
 8009438:	d1cc      	bne.n	80093d4 <quorem+0x9c>
 800943a:	3c01      	subs	r4, #1
 800943c:	e7c7      	b.n	80093ce <quorem+0x96>
 800943e:	6812      	ldr	r2, [r2, #0]
 8009440:	3b04      	subs	r3, #4
 8009442:	2a00      	cmp	r2, #0
 8009444:	d1f0      	bne.n	8009428 <quorem+0xf0>
 8009446:	3c01      	subs	r4, #1
 8009448:	e7eb      	b.n	8009422 <quorem+0xea>
 800944a:	2000      	movs	r0, #0
 800944c:	e7ee      	b.n	800942c <quorem+0xf4>
	...

08009450 <_dtoa_r>:
 8009450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009454:	ed2d 8b04 	vpush	{d8-d9}
 8009458:	ec57 6b10 	vmov	r6, r7, d0
 800945c:	b093      	sub	sp, #76	; 0x4c
 800945e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009460:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009464:	9106      	str	r1, [sp, #24]
 8009466:	ee10 aa10 	vmov	sl, s0
 800946a:	4604      	mov	r4, r0
 800946c:	9209      	str	r2, [sp, #36]	; 0x24
 800946e:	930c      	str	r3, [sp, #48]	; 0x30
 8009470:	46bb      	mov	fp, r7
 8009472:	b975      	cbnz	r5, 8009492 <_dtoa_r+0x42>
 8009474:	2010      	movs	r0, #16
 8009476:	f001 fa33 	bl	800a8e0 <malloc>
 800947a:	4602      	mov	r2, r0
 800947c:	6260      	str	r0, [r4, #36]	; 0x24
 800947e:	b920      	cbnz	r0, 800948a <_dtoa_r+0x3a>
 8009480:	4ba7      	ldr	r3, [pc, #668]	; (8009720 <_dtoa_r+0x2d0>)
 8009482:	21ea      	movs	r1, #234	; 0xea
 8009484:	48a7      	ldr	r0, [pc, #668]	; (8009724 <_dtoa_r+0x2d4>)
 8009486:	f7ff ff29 	bl	80092dc <__assert_func>
 800948a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800948e:	6005      	str	r5, [r0, #0]
 8009490:	60c5      	str	r5, [r0, #12]
 8009492:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009494:	6819      	ldr	r1, [r3, #0]
 8009496:	b151      	cbz	r1, 80094ae <_dtoa_r+0x5e>
 8009498:	685a      	ldr	r2, [r3, #4]
 800949a:	604a      	str	r2, [r1, #4]
 800949c:	2301      	movs	r3, #1
 800949e:	4093      	lsls	r3, r2
 80094a0:	608b      	str	r3, [r1, #8]
 80094a2:	4620      	mov	r0, r4
 80094a4:	f001 fa82 	bl	800a9ac <_Bfree>
 80094a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80094aa:	2200      	movs	r2, #0
 80094ac:	601a      	str	r2, [r3, #0]
 80094ae:	1e3b      	subs	r3, r7, #0
 80094b0:	bfaa      	itet	ge
 80094b2:	2300      	movge	r3, #0
 80094b4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80094b8:	f8c8 3000 	strge.w	r3, [r8]
 80094bc:	4b9a      	ldr	r3, [pc, #616]	; (8009728 <_dtoa_r+0x2d8>)
 80094be:	bfbc      	itt	lt
 80094c0:	2201      	movlt	r2, #1
 80094c2:	f8c8 2000 	strlt.w	r2, [r8]
 80094c6:	ea33 030b 	bics.w	r3, r3, fp
 80094ca:	d11b      	bne.n	8009504 <_dtoa_r+0xb4>
 80094cc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80094ce:	f242 730f 	movw	r3, #9999	; 0x270f
 80094d2:	6013      	str	r3, [r2, #0]
 80094d4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80094d8:	4333      	orrs	r3, r6
 80094da:	f000 8592 	beq.w	800a002 <_dtoa_r+0xbb2>
 80094de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80094e0:	b963      	cbnz	r3, 80094fc <_dtoa_r+0xac>
 80094e2:	4b92      	ldr	r3, [pc, #584]	; (800972c <_dtoa_r+0x2dc>)
 80094e4:	e022      	b.n	800952c <_dtoa_r+0xdc>
 80094e6:	4b92      	ldr	r3, [pc, #584]	; (8009730 <_dtoa_r+0x2e0>)
 80094e8:	9301      	str	r3, [sp, #4]
 80094ea:	3308      	adds	r3, #8
 80094ec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80094ee:	6013      	str	r3, [r2, #0]
 80094f0:	9801      	ldr	r0, [sp, #4]
 80094f2:	b013      	add	sp, #76	; 0x4c
 80094f4:	ecbd 8b04 	vpop	{d8-d9}
 80094f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094fc:	4b8b      	ldr	r3, [pc, #556]	; (800972c <_dtoa_r+0x2dc>)
 80094fe:	9301      	str	r3, [sp, #4]
 8009500:	3303      	adds	r3, #3
 8009502:	e7f3      	b.n	80094ec <_dtoa_r+0x9c>
 8009504:	2200      	movs	r2, #0
 8009506:	2300      	movs	r3, #0
 8009508:	4650      	mov	r0, sl
 800950a:	4659      	mov	r1, fp
 800950c:	f7f7 fafc 	bl	8000b08 <__aeabi_dcmpeq>
 8009510:	ec4b ab19 	vmov	d9, sl, fp
 8009514:	4680      	mov	r8, r0
 8009516:	b158      	cbz	r0, 8009530 <_dtoa_r+0xe0>
 8009518:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800951a:	2301      	movs	r3, #1
 800951c:	6013      	str	r3, [r2, #0]
 800951e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009520:	2b00      	cmp	r3, #0
 8009522:	f000 856b 	beq.w	8009ffc <_dtoa_r+0xbac>
 8009526:	4883      	ldr	r0, [pc, #524]	; (8009734 <_dtoa_r+0x2e4>)
 8009528:	6018      	str	r0, [r3, #0]
 800952a:	1e43      	subs	r3, r0, #1
 800952c:	9301      	str	r3, [sp, #4]
 800952e:	e7df      	b.n	80094f0 <_dtoa_r+0xa0>
 8009530:	ec4b ab10 	vmov	d0, sl, fp
 8009534:	aa10      	add	r2, sp, #64	; 0x40
 8009536:	a911      	add	r1, sp, #68	; 0x44
 8009538:	4620      	mov	r0, r4
 800953a:	f001 fde5 	bl	800b108 <__d2b>
 800953e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8009542:	ee08 0a10 	vmov	s16, r0
 8009546:	2d00      	cmp	r5, #0
 8009548:	f000 8084 	beq.w	8009654 <_dtoa_r+0x204>
 800954c:	ee19 3a90 	vmov	r3, s19
 8009550:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009554:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009558:	4656      	mov	r6, sl
 800955a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800955e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009562:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8009566:	4b74      	ldr	r3, [pc, #464]	; (8009738 <_dtoa_r+0x2e8>)
 8009568:	2200      	movs	r2, #0
 800956a:	4630      	mov	r0, r6
 800956c:	4639      	mov	r1, r7
 800956e:	f7f6 feab 	bl	80002c8 <__aeabi_dsub>
 8009572:	a365      	add	r3, pc, #404	; (adr r3, 8009708 <_dtoa_r+0x2b8>)
 8009574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009578:	f7f7 f85e 	bl	8000638 <__aeabi_dmul>
 800957c:	a364      	add	r3, pc, #400	; (adr r3, 8009710 <_dtoa_r+0x2c0>)
 800957e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009582:	f7f6 fea3 	bl	80002cc <__adddf3>
 8009586:	4606      	mov	r6, r0
 8009588:	4628      	mov	r0, r5
 800958a:	460f      	mov	r7, r1
 800958c:	f7f6 ffea 	bl	8000564 <__aeabi_i2d>
 8009590:	a361      	add	r3, pc, #388	; (adr r3, 8009718 <_dtoa_r+0x2c8>)
 8009592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009596:	f7f7 f84f 	bl	8000638 <__aeabi_dmul>
 800959a:	4602      	mov	r2, r0
 800959c:	460b      	mov	r3, r1
 800959e:	4630      	mov	r0, r6
 80095a0:	4639      	mov	r1, r7
 80095a2:	f7f6 fe93 	bl	80002cc <__adddf3>
 80095a6:	4606      	mov	r6, r0
 80095a8:	460f      	mov	r7, r1
 80095aa:	f7f7 faf5 	bl	8000b98 <__aeabi_d2iz>
 80095ae:	2200      	movs	r2, #0
 80095b0:	9000      	str	r0, [sp, #0]
 80095b2:	2300      	movs	r3, #0
 80095b4:	4630      	mov	r0, r6
 80095b6:	4639      	mov	r1, r7
 80095b8:	f7f7 fab0 	bl	8000b1c <__aeabi_dcmplt>
 80095bc:	b150      	cbz	r0, 80095d4 <_dtoa_r+0x184>
 80095be:	9800      	ldr	r0, [sp, #0]
 80095c0:	f7f6 ffd0 	bl	8000564 <__aeabi_i2d>
 80095c4:	4632      	mov	r2, r6
 80095c6:	463b      	mov	r3, r7
 80095c8:	f7f7 fa9e 	bl	8000b08 <__aeabi_dcmpeq>
 80095cc:	b910      	cbnz	r0, 80095d4 <_dtoa_r+0x184>
 80095ce:	9b00      	ldr	r3, [sp, #0]
 80095d0:	3b01      	subs	r3, #1
 80095d2:	9300      	str	r3, [sp, #0]
 80095d4:	9b00      	ldr	r3, [sp, #0]
 80095d6:	2b16      	cmp	r3, #22
 80095d8:	d85a      	bhi.n	8009690 <_dtoa_r+0x240>
 80095da:	9a00      	ldr	r2, [sp, #0]
 80095dc:	4b57      	ldr	r3, [pc, #348]	; (800973c <_dtoa_r+0x2ec>)
 80095de:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80095e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095e6:	ec51 0b19 	vmov	r0, r1, d9
 80095ea:	f7f7 fa97 	bl	8000b1c <__aeabi_dcmplt>
 80095ee:	2800      	cmp	r0, #0
 80095f0:	d050      	beq.n	8009694 <_dtoa_r+0x244>
 80095f2:	9b00      	ldr	r3, [sp, #0]
 80095f4:	3b01      	subs	r3, #1
 80095f6:	9300      	str	r3, [sp, #0]
 80095f8:	2300      	movs	r3, #0
 80095fa:	930b      	str	r3, [sp, #44]	; 0x2c
 80095fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80095fe:	1b5d      	subs	r5, r3, r5
 8009600:	1e6b      	subs	r3, r5, #1
 8009602:	9305      	str	r3, [sp, #20]
 8009604:	bf45      	ittet	mi
 8009606:	f1c5 0301 	rsbmi	r3, r5, #1
 800960a:	9304      	strmi	r3, [sp, #16]
 800960c:	2300      	movpl	r3, #0
 800960e:	2300      	movmi	r3, #0
 8009610:	bf4c      	ite	mi
 8009612:	9305      	strmi	r3, [sp, #20]
 8009614:	9304      	strpl	r3, [sp, #16]
 8009616:	9b00      	ldr	r3, [sp, #0]
 8009618:	2b00      	cmp	r3, #0
 800961a:	db3d      	blt.n	8009698 <_dtoa_r+0x248>
 800961c:	9b05      	ldr	r3, [sp, #20]
 800961e:	9a00      	ldr	r2, [sp, #0]
 8009620:	920a      	str	r2, [sp, #40]	; 0x28
 8009622:	4413      	add	r3, r2
 8009624:	9305      	str	r3, [sp, #20]
 8009626:	2300      	movs	r3, #0
 8009628:	9307      	str	r3, [sp, #28]
 800962a:	9b06      	ldr	r3, [sp, #24]
 800962c:	2b09      	cmp	r3, #9
 800962e:	f200 8089 	bhi.w	8009744 <_dtoa_r+0x2f4>
 8009632:	2b05      	cmp	r3, #5
 8009634:	bfc4      	itt	gt
 8009636:	3b04      	subgt	r3, #4
 8009638:	9306      	strgt	r3, [sp, #24]
 800963a:	9b06      	ldr	r3, [sp, #24]
 800963c:	f1a3 0302 	sub.w	r3, r3, #2
 8009640:	bfcc      	ite	gt
 8009642:	2500      	movgt	r5, #0
 8009644:	2501      	movle	r5, #1
 8009646:	2b03      	cmp	r3, #3
 8009648:	f200 8087 	bhi.w	800975a <_dtoa_r+0x30a>
 800964c:	e8df f003 	tbb	[pc, r3]
 8009650:	59383a2d 	.word	0x59383a2d
 8009654:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009658:	441d      	add	r5, r3
 800965a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800965e:	2b20      	cmp	r3, #32
 8009660:	bfc1      	itttt	gt
 8009662:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009666:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800966a:	fa0b f303 	lslgt.w	r3, fp, r3
 800966e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009672:	bfda      	itte	le
 8009674:	f1c3 0320 	rsble	r3, r3, #32
 8009678:	fa06 f003 	lslle.w	r0, r6, r3
 800967c:	4318      	orrgt	r0, r3
 800967e:	f7f6 ff61 	bl	8000544 <__aeabi_ui2d>
 8009682:	2301      	movs	r3, #1
 8009684:	4606      	mov	r6, r0
 8009686:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800968a:	3d01      	subs	r5, #1
 800968c:	930e      	str	r3, [sp, #56]	; 0x38
 800968e:	e76a      	b.n	8009566 <_dtoa_r+0x116>
 8009690:	2301      	movs	r3, #1
 8009692:	e7b2      	b.n	80095fa <_dtoa_r+0x1aa>
 8009694:	900b      	str	r0, [sp, #44]	; 0x2c
 8009696:	e7b1      	b.n	80095fc <_dtoa_r+0x1ac>
 8009698:	9b04      	ldr	r3, [sp, #16]
 800969a:	9a00      	ldr	r2, [sp, #0]
 800969c:	1a9b      	subs	r3, r3, r2
 800969e:	9304      	str	r3, [sp, #16]
 80096a0:	4253      	negs	r3, r2
 80096a2:	9307      	str	r3, [sp, #28]
 80096a4:	2300      	movs	r3, #0
 80096a6:	930a      	str	r3, [sp, #40]	; 0x28
 80096a8:	e7bf      	b.n	800962a <_dtoa_r+0x1da>
 80096aa:	2300      	movs	r3, #0
 80096ac:	9308      	str	r3, [sp, #32]
 80096ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	dc55      	bgt.n	8009760 <_dtoa_r+0x310>
 80096b4:	2301      	movs	r3, #1
 80096b6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80096ba:	461a      	mov	r2, r3
 80096bc:	9209      	str	r2, [sp, #36]	; 0x24
 80096be:	e00c      	b.n	80096da <_dtoa_r+0x28a>
 80096c0:	2301      	movs	r3, #1
 80096c2:	e7f3      	b.n	80096ac <_dtoa_r+0x25c>
 80096c4:	2300      	movs	r3, #0
 80096c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80096c8:	9308      	str	r3, [sp, #32]
 80096ca:	9b00      	ldr	r3, [sp, #0]
 80096cc:	4413      	add	r3, r2
 80096ce:	9302      	str	r3, [sp, #8]
 80096d0:	3301      	adds	r3, #1
 80096d2:	2b01      	cmp	r3, #1
 80096d4:	9303      	str	r3, [sp, #12]
 80096d6:	bfb8      	it	lt
 80096d8:	2301      	movlt	r3, #1
 80096da:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80096dc:	2200      	movs	r2, #0
 80096de:	6042      	str	r2, [r0, #4]
 80096e0:	2204      	movs	r2, #4
 80096e2:	f102 0614 	add.w	r6, r2, #20
 80096e6:	429e      	cmp	r6, r3
 80096e8:	6841      	ldr	r1, [r0, #4]
 80096ea:	d93d      	bls.n	8009768 <_dtoa_r+0x318>
 80096ec:	4620      	mov	r0, r4
 80096ee:	f001 f91d 	bl	800a92c <_Balloc>
 80096f2:	9001      	str	r0, [sp, #4]
 80096f4:	2800      	cmp	r0, #0
 80096f6:	d13b      	bne.n	8009770 <_dtoa_r+0x320>
 80096f8:	4b11      	ldr	r3, [pc, #68]	; (8009740 <_dtoa_r+0x2f0>)
 80096fa:	4602      	mov	r2, r0
 80096fc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009700:	e6c0      	b.n	8009484 <_dtoa_r+0x34>
 8009702:	2301      	movs	r3, #1
 8009704:	e7df      	b.n	80096c6 <_dtoa_r+0x276>
 8009706:	bf00      	nop
 8009708:	636f4361 	.word	0x636f4361
 800970c:	3fd287a7 	.word	0x3fd287a7
 8009710:	8b60c8b3 	.word	0x8b60c8b3
 8009714:	3fc68a28 	.word	0x3fc68a28
 8009718:	509f79fb 	.word	0x509f79fb
 800971c:	3fd34413 	.word	0x3fd34413
 8009720:	0800c125 	.word	0x0800c125
 8009724:	0800c332 	.word	0x0800c332
 8009728:	7ff00000 	.word	0x7ff00000
 800972c:	0800c32e 	.word	0x0800c32e
 8009730:	0800c325 	.word	0x0800c325
 8009734:	0800c0fd 	.word	0x0800c0fd
 8009738:	3ff80000 	.word	0x3ff80000
 800973c:	0800c4a0 	.word	0x0800c4a0
 8009740:	0800c38d 	.word	0x0800c38d
 8009744:	2501      	movs	r5, #1
 8009746:	2300      	movs	r3, #0
 8009748:	9306      	str	r3, [sp, #24]
 800974a:	9508      	str	r5, [sp, #32]
 800974c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009750:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009754:	2200      	movs	r2, #0
 8009756:	2312      	movs	r3, #18
 8009758:	e7b0      	b.n	80096bc <_dtoa_r+0x26c>
 800975a:	2301      	movs	r3, #1
 800975c:	9308      	str	r3, [sp, #32]
 800975e:	e7f5      	b.n	800974c <_dtoa_r+0x2fc>
 8009760:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009762:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009766:	e7b8      	b.n	80096da <_dtoa_r+0x28a>
 8009768:	3101      	adds	r1, #1
 800976a:	6041      	str	r1, [r0, #4]
 800976c:	0052      	lsls	r2, r2, #1
 800976e:	e7b8      	b.n	80096e2 <_dtoa_r+0x292>
 8009770:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009772:	9a01      	ldr	r2, [sp, #4]
 8009774:	601a      	str	r2, [r3, #0]
 8009776:	9b03      	ldr	r3, [sp, #12]
 8009778:	2b0e      	cmp	r3, #14
 800977a:	f200 809d 	bhi.w	80098b8 <_dtoa_r+0x468>
 800977e:	2d00      	cmp	r5, #0
 8009780:	f000 809a 	beq.w	80098b8 <_dtoa_r+0x468>
 8009784:	9b00      	ldr	r3, [sp, #0]
 8009786:	2b00      	cmp	r3, #0
 8009788:	dd32      	ble.n	80097f0 <_dtoa_r+0x3a0>
 800978a:	4ab7      	ldr	r2, [pc, #732]	; (8009a68 <_dtoa_r+0x618>)
 800978c:	f003 030f 	and.w	r3, r3, #15
 8009790:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009794:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009798:	9b00      	ldr	r3, [sp, #0]
 800979a:	05d8      	lsls	r0, r3, #23
 800979c:	ea4f 1723 	mov.w	r7, r3, asr #4
 80097a0:	d516      	bpl.n	80097d0 <_dtoa_r+0x380>
 80097a2:	4bb2      	ldr	r3, [pc, #712]	; (8009a6c <_dtoa_r+0x61c>)
 80097a4:	ec51 0b19 	vmov	r0, r1, d9
 80097a8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80097ac:	f7f7 f86e 	bl	800088c <__aeabi_ddiv>
 80097b0:	f007 070f 	and.w	r7, r7, #15
 80097b4:	4682      	mov	sl, r0
 80097b6:	468b      	mov	fp, r1
 80097b8:	2503      	movs	r5, #3
 80097ba:	4eac      	ldr	r6, [pc, #688]	; (8009a6c <_dtoa_r+0x61c>)
 80097bc:	b957      	cbnz	r7, 80097d4 <_dtoa_r+0x384>
 80097be:	4642      	mov	r2, r8
 80097c0:	464b      	mov	r3, r9
 80097c2:	4650      	mov	r0, sl
 80097c4:	4659      	mov	r1, fp
 80097c6:	f7f7 f861 	bl	800088c <__aeabi_ddiv>
 80097ca:	4682      	mov	sl, r0
 80097cc:	468b      	mov	fp, r1
 80097ce:	e028      	b.n	8009822 <_dtoa_r+0x3d2>
 80097d0:	2502      	movs	r5, #2
 80097d2:	e7f2      	b.n	80097ba <_dtoa_r+0x36a>
 80097d4:	07f9      	lsls	r1, r7, #31
 80097d6:	d508      	bpl.n	80097ea <_dtoa_r+0x39a>
 80097d8:	4640      	mov	r0, r8
 80097da:	4649      	mov	r1, r9
 80097dc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80097e0:	f7f6 ff2a 	bl	8000638 <__aeabi_dmul>
 80097e4:	3501      	adds	r5, #1
 80097e6:	4680      	mov	r8, r0
 80097e8:	4689      	mov	r9, r1
 80097ea:	107f      	asrs	r7, r7, #1
 80097ec:	3608      	adds	r6, #8
 80097ee:	e7e5      	b.n	80097bc <_dtoa_r+0x36c>
 80097f0:	f000 809b 	beq.w	800992a <_dtoa_r+0x4da>
 80097f4:	9b00      	ldr	r3, [sp, #0]
 80097f6:	4f9d      	ldr	r7, [pc, #628]	; (8009a6c <_dtoa_r+0x61c>)
 80097f8:	425e      	negs	r6, r3
 80097fa:	4b9b      	ldr	r3, [pc, #620]	; (8009a68 <_dtoa_r+0x618>)
 80097fc:	f006 020f 	and.w	r2, r6, #15
 8009800:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009808:	ec51 0b19 	vmov	r0, r1, d9
 800980c:	f7f6 ff14 	bl	8000638 <__aeabi_dmul>
 8009810:	1136      	asrs	r6, r6, #4
 8009812:	4682      	mov	sl, r0
 8009814:	468b      	mov	fp, r1
 8009816:	2300      	movs	r3, #0
 8009818:	2502      	movs	r5, #2
 800981a:	2e00      	cmp	r6, #0
 800981c:	d17a      	bne.n	8009914 <_dtoa_r+0x4c4>
 800981e:	2b00      	cmp	r3, #0
 8009820:	d1d3      	bne.n	80097ca <_dtoa_r+0x37a>
 8009822:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009824:	2b00      	cmp	r3, #0
 8009826:	f000 8082 	beq.w	800992e <_dtoa_r+0x4de>
 800982a:	4b91      	ldr	r3, [pc, #580]	; (8009a70 <_dtoa_r+0x620>)
 800982c:	2200      	movs	r2, #0
 800982e:	4650      	mov	r0, sl
 8009830:	4659      	mov	r1, fp
 8009832:	f7f7 f973 	bl	8000b1c <__aeabi_dcmplt>
 8009836:	2800      	cmp	r0, #0
 8009838:	d079      	beq.n	800992e <_dtoa_r+0x4de>
 800983a:	9b03      	ldr	r3, [sp, #12]
 800983c:	2b00      	cmp	r3, #0
 800983e:	d076      	beq.n	800992e <_dtoa_r+0x4de>
 8009840:	9b02      	ldr	r3, [sp, #8]
 8009842:	2b00      	cmp	r3, #0
 8009844:	dd36      	ble.n	80098b4 <_dtoa_r+0x464>
 8009846:	9b00      	ldr	r3, [sp, #0]
 8009848:	4650      	mov	r0, sl
 800984a:	4659      	mov	r1, fp
 800984c:	1e5f      	subs	r7, r3, #1
 800984e:	2200      	movs	r2, #0
 8009850:	4b88      	ldr	r3, [pc, #544]	; (8009a74 <_dtoa_r+0x624>)
 8009852:	f7f6 fef1 	bl	8000638 <__aeabi_dmul>
 8009856:	9e02      	ldr	r6, [sp, #8]
 8009858:	4682      	mov	sl, r0
 800985a:	468b      	mov	fp, r1
 800985c:	3501      	adds	r5, #1
 800985e:	4628      	mov	r0, r5
 8009860:	f7f6 fe80 	bl	8000564 <__aeabi_i2d>
 8009864:	4652      	mov	r2, sl
 8009866:	465b      	mov	r3, fp
 8009868:	f7f6 fee6 	bl	8000638 <__aeabi_dmul>
 800986c:	4b82      	ldr	r3, [pc, #520]	; (8009a78 <_dtoa_r+0x628>)
 800986e:	2200      	movs	r2, #0
 8009870:	f7f6 fd2c 	bl	80002cc <__adddf3>
 8009874:	46d0      	mov	r8, sl
 8009876:	46d9      	mov	r9, fp
 8009878:	4682      	mov	sl, r0
 800987a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800987e:	2e00      	cmp	r6, #0
 8009880:	d158      	bne.n	8009934 <_dtoa_r+0x4e4>
 8009882:	4b7e      	ldr	r3, [pc, #504]	; (8009a7c <_dtoa_r+0x62c>)
 8009884:	2200      	movs	r2, #0
 8009886:	4640      	mov	r0, r8
 8009888:	4649      	mov	r1, r9
 800988a:	f7f6 fd1d 	bl	80002c8 <__aeabi_dsub>
 800988e:	4652      	mov	r2, sl
 8009890:	465b      	mov	r3, fp
 8009892:	4680      	mov	r8, r0
 8009894:	4689      	mov	r9, r1
 8009896:	f7f7 f95f 	bl	8000b58 <__aeabi_dcmpgt>
 800989a:	2800      	cmp	r0, #0
 800989c:	f040 8295 	bne.w	8009dca <_dtoa_r+0x97a>
 80098a0:	4652      	mov	r2, sl
 80098a2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80098a6:	4640      	mov	r0, r8
 80098a8:	4649      	mov	r1, r9
 80098aa:	f7f7 f937 	bl	8000b1c <__aeabi_dcmplt>
 80098ae:	2800      	cmp	r0, #0
 80098b0:	f040 8289 	bne.w	8009dc6 <_dtoa_r+0x976>
 80098b4:	ec5b ab19 	vmov	sl, fp, d9
 80098b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	f2c0 8148 	blt.w	8009b50 <_dtoa_r+0x700>
 80098c0:	9a00      	ldr	r2, [sp, #0]
 80098c2:	2a0e      	cmp	r2, #14
 80098c4:	f300 8144 	bgt.w	8009b50 <_dtoa_r+0x700>
 80098c8:	4b67      	ldr	r3, [pc, #412]	; (8009a68 <_dtoa_r+0x618>)
 80098ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80098ce:	e9d3 8900 	ldrd	r8, r9, [r3]
 80098d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	f280 80d5 	bge.w	8009a84 <_dtoa_r+0x634>
 80098da:	9b03      	ldr	r3, [sp, #12]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	f300 80d1 	bgt.w	8009a84 <_dtoa_r+0x634>
 80098e2:	f040 826f 	bne.w	8009dc4 <_dtoa_r+0x974>
 80098e6:	4b65      	ldr	r3, [pc, #404]	; (8009a7c <_dtoa_r+0x62c>)
 80098e8:	2200      	movs	r2, #0
 80098ea:	4640      	mov	r0, r8
 80098ec:	4649      	mov	r1, r9
 80098ee:	f7f6 fea3 	bl	8000638 <__aeabi_dmul>
 80098f2:	4652      	mov	r2, sl
 80098f4:	465b      	mov	r3, fp
 80098f6:	f7f7 f925 	bl	8000b44 <__aeabi_dcmpge>
 80098fa:	9e03      	ldr	r6, [sp, #12]
 80098fc:	4637      	mov	r7, r6
 80098fe:	2800      	cmp	r0, #0
 8009900:	f040 8245 	bne.w	8009d8e <_dtoa_r+0x93e>
 8009904:	9d01      	ldr	r5, [sp, #4]
 8009906:	2331      	movs	r3, #49	; 0x31
 8009908:	f805 3b01 	strb.w	r3, [r5], #1
 800990c:	9b00      	ldr	r3, [sp, #0]
 800990e:	3301      	adds	r3, #1
 8009910:	9300      	str	r3, [sp, #0]
 8009912:	e240      	b.n	8009d96 <_dtoa_r+0x946>
 8009914:	07f2      	lsls	r2, r6, #31
 8009916:	d505      	bpl.n	8009924 <_dtoa_r+0x4d4>
 8009918:	e9d7 2300 	ldrd	r2, r3, [r7]
 800991c:	f7f6 fe8c 	bl	8000638 <__aeabi_dmul>
 8009920:	3501      	adds	r5, #1
 8009922:	2301      	movs	r3, #1
 8009924:	1076      	asrs	r6, r6, #1
 8009926:	3708      	adds	r7, #8
 8009928:	e777      	b.n	800981a <_dtoa_r+0x3ca>
 800992a:	2502      	movs	r5, #2
 800992c:	e779      	b.n	8009822 <_dtoa_r+0x3d2>
 800992e:	9f00      	ldr	r7, [sp, #0]
 8009930:	9e03      	ldr	r6, [sp, #12]
 8009932:	e794      	b.n	800985e <_dtoa_r+0x40e>
 8009934:	9901      	ldr	r1, [sp, #4]
 8009936:	4b4c      	ldr	r3, [pc, #304]	; (8009a68 <_dtoa_r+0x618>)
 8009938:	4431      	add	r1, r6
 800993a:	910d      	str	r1, [sp, #52]	; 0x34
 800993c:	9908      	ldr	r1, [sp, #32]
 800993e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009942:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009946:	2900      	cmp	r1, #0
 8009948:	d043      	beq.n	80099d2 <_dtoa_r+0x582>
 800994a:	494d      	ldr	r1, [pc, #308]	; (8009a80 <_dtoa_r+0x630>)
 800994c:	2000      	movs	r0, #0
 800994e:	f7f6 ff9d 	bl	800088c <__aeabi_ddiv>
 8009952:	4652      	mov	r2, sl
 8009954:	465b      	mov	r3, fp
 8009956:	f7f6 fcb7 	bl	80002c8 <__aeabi_dsub>
 800995a:	9d01      	ldr	r5, [sp, #4]
 800995c:	4682      	mov	sl, r0
 800995e:	468b      	mov	fp, r1
 8009960:	4649      	mov	r1, r9
 8009962:	4640      	mov	r0, r8
 8009964:	f7f7 f918 	bl	8000b98 <__aeabi_d2iz>
 8009968:	4606      	mov	r6, r0
 800996a:	f7f6 fdfb 	bl	8000564 <__aeabi_i2d>
 800996e:	4602      	mov	r2, r0
 8009970:	460b      	mov	r3, r1
 8009972:	4640      	mov	r0, r8
 8009974:	4649      	mov	r1, r9
 8009976:	f7f6 fca7 	bl	80002c8 <__aeabi_dsub>
 800997a:	3630      	adds	r6, #48	; 0x30
 800997c:	f805 6b01 	strb.w	r6, [r5], #1
 8009980:	4652      	mov	r2, sl
 8009982:	465b      	mov	r3, fp
 8009984:	4680      	mov	r8, r0
 8009986:	4689      	mov	r9, r1
 8009988:	f7f7 f8c8 	bl	8000b1c <__aeabi_dcmplt>
 800998c:	2800      	cmp	r0, #0
 800998e:	d163      	bne.n	8009a58 <_dtoa_r+0x608>
 8009990:	4642      	mov	r2, r8
 8009992:	464b      	mov	r3, r9
 8009994:	4936      	ldr	r1, [pc, #216]	; (8009a70 <_dtoa_r+0x620>)
 8009996:	2000      	movs	r0, #0
 8009998:	f7f6 fc96 	bl	80002c8 <__aeabi_dsub>
 800999c:	4652      	mov	r2, sl
 800999e:	465b      	mov	r3, fp
 80099a0:	f7f7 f8bc 	bl	8000b1c <__aeabi_dcmplt>
 80099a4:	2800      	cmp	r0, #0
 80099a6:	f040 80b5 	bne.w	8009b14 <_dtoa_r+0x6c4>
 80099aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80099ac:	429d      	cmp	r5, r3
 80099ae:	d081      	beq.n	80098b4 <_dtoa_r+0x464>
 80099b0:	4b30      	ldr	r3, [pc, #192]	; (8009a74 <_dtoa_r+0x624>)
 80099b2:	2200      	movs	r2, #0
 80099b4:	4650      	mov	r0, sl
 80099b6:	4659      	mov	r1, fp
 80099b8:	f7f6 fe3e 	bl	8000638 <__aeabi_dmul>
 80099bc:	4b2d      	ldr	r3, [pc, #180]	; (8009a74 <_dtoa_r+0x624>)
 80099be:	4682      	mov	sl, r0
 80099c0:	468b      	mov	fp, r1
 80099c2:	4640      	mov	r0, r8
 80099c4:	4649      	mov	r1, r9
 80099c6:	2200      	movs	r2, #0
 80099c8:	f7f6 fe36 	bl	8000638 <__aeabi_dmul>
 80099cc:	4680      	mov	r8, r0
 80099ce:	4689      	mov	r9, r1
 80099d0:	e7c6      	b.n	8009960 <_dtoa_r+0x510>
 80099d2:	4650      	mov	r0, sl
 80099d4:	4659      	mov	r1, fp
 80099d6:	f7f6 fe2f 	bl	8000638 <__aeabi_dmul>
 80099da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80099dc:	9d01      	ldr	r5, [sp, #4]
 80099de:	930f      	str	r3, [sp, #60]	; 0x3c
 80099e0:	4682      	mov	sl, r0
 80099e2:	468b      	mov	fp, r1
 80099e4:	4649      	mov	r1, r9
 80099e6:	4640      	mov	r0, r8
 80099e8:	f7f7 f8d6 	bl	8000b98 <__aeabi_d2iz>
 80099ec:	4606      	mov	r6, r0
 80099ee:	f7f6 fdb9 	bl	8000564 <__aeabi_i2d>
 80099f2:	3630      	adds	r6, #48	; 0x30
 80099f4:	4602      	mov	r2, r0
 80099f6:	460b      	mov	r3, r1
 80099f8:	4640      	mov	r0, r8
 80099fa:	4649      	mov	r1, r9
 80099fc:	f7f6 fc64 	bl	80002c8 <__aeabi_dsub>
 8009a00:	f805 6b01 	strb.w	r6, [r5], #1
 8009a04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009a06:	429d      	cmp	r5, r3
 8009a08:	4680      	mov	r8, r0
 8009a0a:	4689      	mov	r9, r1
 8009a0c:	f04f 0200 	mov.w	r2, #0
 8009a10:	d124      	bne.n	8009a5c <_dtoa_r+0x60c>
 8009a12:	4b1b      	ldr	r3, [pc, #108]	; (8009a80 <_dtoa_r+0x630>)
 8009a14:	4650      	mov	r0, sl
 8009a16:	4659      	mov	r1, fp
 8009a18:	f7f6 fc58 	bl	80002cc <__adddf3>
 8009a1c:	4602      	mov	r2, r0
 8009a1e:	460b      	mov	r3, r1
 8009a20:	4640      	mov	r0, r8
 8009a22:	4649      	mov	r1, r9
 8009a24:	f7f7 f898 	bl	8000b58 <__aeabi_dcmpgt>
 8009a28:	2800      	cmp	r0, #0
 8009a2a:	d173      	bne.n	8009b14 <_dtoa_r+0x6c4>
 8009a2c:	4652      	mov	r2, sl
 8009a2e:	465b      	mov	r3, fp
 8009a30:	4913      	ldr	r1, [pc, #76]	; (8009a80 <_dtoa_r+0x630>)
 8009a32:	2000      	movs	r0, #0
 8009a34:	f7f6 fc48 	bl	80002c8 <__aeabi_dsub>
 8009a38:	4602      	mov	r2, r0
 8009a3a:	460b      	mov	r3, r1
 8009a3c:	4640      	mov	r0, r8
 8009a3e:	4649      	mov	r1, r9
 8009a40:	f7f7 f86c 	bl	8000b1c <__aeabi_dcmplt>
 8009a44:	2800      	cmp	r0, #0
 8009a46:	f43f af35 	beq.w	80098b4 <_dtoa_r+0x464>
 8009a4a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009a4c:	1e6b      	subs	r3, r5, #1
 8009a4e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009a50:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009a54:	2b30      	cmp	r3, #48	; 0x30
 8009a56:	d0f8      	beq.n	8009a4a <_dtoa_r+0x5fa>
 8009a58:	9700      	str	r7, [sp, #0]
 8009a5a:	e049      	b.n	8009af0 <_dtoa_r+0x6a0>
 8009a5c:	4b05      	ldr	r3, [pc, #20]	; (8009a74 <_dtoa_r+0x624>)
 8009a5e:	f7f6 fdeb 	bl	8000638 <__aeabi_dmul>
 8009a62:	4680      	mov	r8, r0
 8009a64:	4689      	mov	r9, r1
 8009a66:	e7bd      	b.n	80099e4 <_dtoa_r+0x594>
 8009a68:	0800c4a0 	.word	0x0800c4a0
 8009a6c:	0800c478 	.word	0x0800c478
 8009a70:	3ff00000 	.word	0x3ff00000
 8009a74:	40240000 	.word	0x40240000
 8009a78:	401c0000 	.word	0x401c0000
 8009a7c:	40140000 	.word	0x40140000
 8009a80:	3fe00000 	.word	0x3fe00000
 8009a84:	9d01      	ldr	r5, [sp, #4]
 8009a86:	4656      	mov	r6, sl
 8009a88:	465f      	mov	r7, fp
 8009a8a:	4642      	mov	r2, r8
 8009a8c:	464b      	mov	r3, r9
 8009a8e:	4630      	mov	r0, r6
 8009a90:	4639      	mov	r1, r7
 8009a92:	f7f6 fefb 	bl	800088c <__aeabi_ddiv>
 8009a96:	f7f7 f87f 	bl	8000b98 <__aeabi_d2iz>
 8009a9a:	4682      	mov	sl, r0
 8009a9c:	f7f6 fd62 	bl	8000564 <__aeabi_i2d>
 8009aa0:	4642      	mov	r2, r8
 8009aa2:	464b      	mov	r3, r9
 8009aa4:	f7f6 fdc8 	bl	8000638 <__aeabi_dmul>
 8009aa8:	4602      	mov	r2, r0
 8009aaa:	460b      	mov	r3, r1
 8009aac:	4630      	mov	r0, r6
 8009aae:	4639      	mov	r1, r7
 8009ab0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8009ab4:	f7f6 fc08 	bl	80002c8 <__aeabi_dsub>
 8009ab8:	f805 6b01 	strb.w	r6, [r5], #1
 8009abc:	9e01      	ldr	r6, [sp, #4]
 8009abe:	9f03      	ldr	r7, [sp, #12]
 8009ac0:	1bae      	subs	r6, r5, r6
 8009ac2:	42b7      	cmp	r7, r6
 8009ac4:	4602      	mov	r2, r0
 8009ac6:	460b      	mov	r3, r1
 8009ac8:	d135      	bne.n	8009b36 <_dtoa_r+0x6e6>
 8009aca:	f7f6 fbff 	bl	80002cc <__adddf3>
 8009ace:	4642      	mov	r2, r8
 8009ad0:	464b      	mov	r3, r9
 8009ad2:	4606      	mov	r6, r0
 8009ad4:	460f      	mov	r7, r1
 8009ad6:	f7f7 f83f 	bl	8000b58 <__aeabi_dcmpgt>
 8009ada:	b9d0      	cbnz	r0, 8009b12 <_dtoa_r+0x6c2>
 8009adc:	4642      	mov	r2, r8
 8009ade:	464b      	mov	r3, r9
 8009ae0:	4630      	mov	r0, r6
 8009ae2:	4639      	mov	r1, r7
 8009ae4:	f7f7 f810 	bl	8000b08 <__aeabi_dcmpeq>
 8009ae8:	b110      	cbz	r0, 8009af0 <_dtoa_r+0x6a0>
 8009aea:	f01a 0f01 	tst.w	sl, #1
 8009aee:	d110      	bne.n	8009b12 <_dtoa_r+0x6c2>
 8009af0:	4620      	mov	r0, r4
 8009af2:	ee18 1a10 	vmov	r1, s16
 8009af6:	f000 ff59 	bl	800a9ac <_Bfree>
 8009afa:	2300      	movs	r3, #0
 8009afc:	9800      	ldr	r0, [sp, #0]
 8009afe:	702b      	strb	r3, [r5, #0]
 8009b00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009b02:	3001      	adds	r0, #1
 8009b04:	6018      	str	r0, [r3, #0]
 8009b06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	f43f acf1 	beq.w	80094f0 <_dtoa_r+0xa0>
 8009b0e:	601d      	str	r5, [r3, #0]
 8009b10:	e4ee      	b.n	80094f0 <_dtoa_r+0xa0>
 8009b12:	9f00      	ldr	r7, [sp, #0]
 8009b14:	462b      	mov	r3, r5
 8009b16:	461d      	mov	r5, r3
 8009b18:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009b1c:	2a39      	cmp	r2, #57	; 0x39
 8009b1e:	d106      	bne.n	8009b2e <_dtoa_r+0x6de>
 8009b20:	9a01      	ldr	r2, [sp, #4]
 8009b22:	429a      	cmp	r2, r3
 8009b24:	d1f7      	bne.n	8009b16 <_dtoa_r+0x6c6>
 8009b26:	9901      	ldr	r1, [sp, #4]
 8009b28:	2230      	movs	r2, #48	; 0x30
 8009b2a:	3701      	adds	r7, #1
 8009b2c:	700a      	strb	r2, [r1, #0]
 8009b2e:	781a      	ldrb	r2, [r3, #0]
 8009b30:	3201      	adds	r2, #1
 8009b32:	701a      	strb	r2, [r3, #0]
 8009b34:	e790      	b.n	8009a58 <_dtoa_r+0x608>
 8009b36:	4ba6      	ldr	r3, [pc, #664]	; (8009dd0 <_dtoa_r+0x980>)
 8009b38:	2200      	movs	r2, #0
 8009b3a:	f7f6 fd7d 	bl	8000638 <__aeabi_dmul>
 8009b3e:	2200      	movs	r2, #0
 8009b40:	2300      	movs	r3, #0
 8009b42:	4606      	mov	r6, r0
 8009b44:	460f      	mov	r7, r1
 8009b46:	f7f6 ffdf 	bl	8000b08 <__aeabi_dcmpeq>
 8009b4a:	2800      	cmp	r0, #0
 8009b4c:	d09d      	beq.n	8009a8a <_dtoa_r+0x63a>
 8009b4e:	e7cf      	b.n	8009af0 <_dtoa_r+0x6a0>
 8009b50:	9a08      	ldr	r2, [sp, #32]
 8009b52:	2a00      	cmp	r2, #0
 8009b54:	f000 80d7 	beq.w	8009d06 <_dtoa_r+0x8b6>
 8009b58:	9a06      	ldr	r2, [sp, #24]
 8009b5a:	2a01      	cmp	r2, #1
 8009b5c:	f300 80ba 	bgt.w	8009cd4 <_dtoa_r+0x884>
 8009b60:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009b62:	2a00      	cmp	r2, #0
 8009b64:	f000 80b2 	beq.w	8009ccc <_dtoa_r+0x87c>
 8009b68:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009b6c:	9e07      	ldr	r6, [sp, #28]
 8009b6e:	9d04      	ldr	r5, [sp, #16]
 8009b70:	9a04      	ldr	r2, [sp, #16]
 8009b72:	441a      	add	r2, r3
 8009b74:	9204      	str	r2, [sp, #16]
 8009b76:	9a05      	ldr	r2, [sp, #20]
 8009b78:	2101      	movs	r1, #1
 8009b7a:	441a      	add	r2, r3
 8009b7c:	4620      	mov	r0, r4
 8009b7e:	9205      	str	r2, [sp, #20]
 8009b80:	f001 f816 	bl	800abb0 <__i2b>
 8009b84:	4607      	mov	r7, r0
 8009b86:	2d00      	cmp	r5, #0
 8009b88:	dd0c      	ble.n	8009ba4 <_dtoa_r+0x754>
 8009b8a:	9b05      	ldr	r3, [sp, #20]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	dd09      	ble.n	8009ba4 <_dtoa_r+0x754>
 8009b90:	42ab      	cmp	r3, r5
 8009b92:	9a04      	ldr	r2, [sp, #16]
 8009b94:	bfa8      	it	ge
 8009b96:	462b      	movge	r3, r5
 8009b98:	1ad2      	subs	r2, r2, r3
 8009b9a:	9204      	str	r2, [sp, #16]
 8009b9c:	9a05      	ldr	r2, [sp, #20]
 8009b9e:	1aed      	subs	r5, r5, r3
 8009ba0:	1ad3      	subs	r3, r2, r3
 8009ba2:	9305      	str	r3, [sp, #20]
 8009ba4:	9b07      	ldr	r3, [sp, #28]
 8009ba6:	b31b      	cbz	r3, 8009bf0 <_dtoa_r+0x7a0>
 8009ba8:	9b08      	ldr	r3, [sp, #32]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	f000 80af 	beq.w	8009d0e <_dtoa_r+0x8be>
 8009bb0:	2e00      	cmp	r6, #0
 8009bb2:	dd13      	ble.n	8009bdc <_dtoa_r+0x78c>
 8009bb4:	4639      	mov	r1, r7
 8009bb6:	4632      	mov	r2, r6
 8009bb8:	4620      	mov	r0, r4
 8009bba:	f001 f8b9 	bl	800ad30 <__pow5mult>
 8009bbe:	ee18 2a10 	vmov	r2, s16
 8009bc2:	4601      	mov	r1, r0
 8009bc4:	4607      	mov	r7, r0
 8009bc6:	4620      	mov	r0, r4
 8009bc8:	f001 f808 	bl	800abdc <__multiply>
 8009bcc:	ee18 1a10 	vmov	r1, s16
 8009bd0:	4680      	mov	r8, r0
 8009bd2:	4620      	mov	r0, r4
 8009bd4:	f000 feea 	bl	800a9ac <_Bfree>
 8009bd8:	ee08 8a10 	vmov	s16, r8
 8009bdc:	9b07      	ldr	r3, [sp, #28]
 8009bde:	1b9a      	subs	r2, r3, r6
 8009be0:	d006      	beq.n	8009bf0 <_dtoa_r+0x7a0>
 8009be2:	ee18 1a10 	vmov	r1, s16
 8009be6:	4620      	mov	r0, r4
 8009be8:	f001 f8a2 	bl	800ad30 <__pow5mult>
 8009bec:	ee08 0a10 	vmov	s16, r0
 8009bf0:	2101      	movs	r1, #1
 8009bf2:	4620      	mov	r0, r4
 8009bf4:	f000 ffdc 	bl	800abb0 <__i2b>
 8009bf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	4606      	mov	r6, r0
 8009bfe:	f340 8088 	ble.w	8009d12 <_dtoa_r+0x8c2>
 8009c02:	461a      	mov	r2, r3
 8009c04:	4601      	mov	r1, r0
 8009c06:	4620      	mov	r0, r4
 8009c08:	f001 f892 	bl	800ad30 <__pow5mult>
 8009c0c:	9b06      	ldr	r3, [sp, #24]
 8009c0e:	2b01      	cmp	r3, #1
 8009c10:	4606      	mov	r6, r0
 8009c12:	f340 8081 	ble.w	8009d18 <_dtoa_r+0x8c8>
 8009c16:	f04f 0800 	mov.w	r8, #0
 8009c1a:	6933      	ldr	r3, [r6, #16]
 8009c1c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009c20:	6918      	ldr	r0, [r3, #16]
 8009c22:	f000 ff75 	bl	800ab10 <__hi0bits>
 8009c26:	f1c0 0020 	rsb	r0, r0, #32
 8009c2a:	9b05      	ldr	r3, [sp, #20]
 8009c2c:	4418      	add	r0, r3
 8009c2e:	f010 001f 	ands.w	r0, r0, #31
 8009c32:	f000 8092 	beq.w	8009d5a <_dtoa_r+0x90a>
 8009c36:	f1c0 0320 	rsb	r3, r0, #32
 8009c3a:	2b04      	cmp	r3, #4
 8009c3c:	f340 808a 	ble.w	8009d54 <_dtoa_r+0x904>
 8009c40:	f1c0 001c 	rsb	r0, r0, #28
 8009c44:	9b04      	ldr	r3, [sp, #16]
 8009c46:	4403      	add	r3, r0
 8009c48:	9304      	str	r3, [sp, #16]
 8009c4a:	9b05      	ldr	r3, [sp, #20]
 8009c4c:	4403      	add	r3, r0
 8009c4e:	4405      	add	r5, r0
 8009c50:	9305      	str	r3, [sp, #20]
 8009c52:	9b04      	ldr	r3, [sp, #16]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	dd07      	ble.n	8009c68 <_dtoa_r+0x818>
 8009c58:	ee18 1a10 	vmov	r1, s16
 8009c5c:	461a      	mov	r2, r3
 8009c5e:	4620      	mov	r0, r4
 8009c60:	f001 f8c0 	bl	800ade4 <__lshift>
 8009c64:	ee08 0a10 	vmov	s16, r0
 8009c68:	9b05      	ldr	r3, [sp, #20]
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	dd05      	ble.n	8009c7a <_dtoa_r+0x82a>
 8009c6e:	4631      	mov	r1, r6
 8009c70:	461a      	mov	r2, r3
 8009c72:	4620      	mov	r0, r4
 8009c74:	f001 f8b6 	bl	800ade4 <__lshift>
 8009c78:	4606      	mov	r6, r0
 8009c7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d06e      	beq.n	8009d5e <_dtoa_r+0x90e>
 8009c80:	ee18 0a10 	vmov	r0, s16
 8009c84:	4631      	mov	r1, r6
 8009c86:	f001 f91d 	bl	800aec4 <__mcmp>
 8009c8a:	2800      	cmp	r0, #0
 8009c8c:	da67      	bge.n	8009d5e <_dtoa_r+0x90e>
 8009c8e:	9b00      	ldr	r3, [sp, #0]
 8009c90:	3b01      	subs	r3, #1
 8009c92:	ee18 1a10 	vmov	r1, s16
 8009c96:	9300      	str	r3, [sp, #0]
 8009c98:	220a      	movs	r2, #10
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	4620      	mov	r0, r4
 8009c9e:	f000 fea7 	bl	800a9f0 <__multadd>
 8009ca2:	9b08      	ldr	r3, [sp, #32]
 8009ca4:	ee08 0a10 	vmov	s16, r0
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	f000 81b1 	beq.w	800a010 <_dtoa_r+0xbc0>
 8009cae:	2300      	movs	r3, #0
 8009cb0:	4639      	mov	r1, r7
 8009cb2:	220a      	movs	r2, #10
 8009cb4:	4620      	mov	r0, r4
 8009cb6:	f000 fe9b 	bl	800a9f0 <__multadd>
 8009cba:	9b02      	ldr	r3, [sp, #8]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	4607      	mov	r7, r0
 8009cc0:	f300 808e 	bgt.w	8009de0 <_dtoa_r+0x990>
 8009cc4:	9b06      	ldr	r3, [sp, #24]
 8009cc6:	2b02      	cmp	r3, #2
 8009cc8:	dc51      	bgt.n	8009d6e <_dtoa_r+0x91e>
 8009cca:	e089      	b.n	8009de0 <_dtoa_r+0x990>
 8009ccc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009cce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009cd2:	e74b      	b.n	8009b6c <_dtoa_r+0x71c>
 8009cd4:	9b03      	ldr	r3, [sp, #12]
 8009cd6:	1e5e      	subs	r6, r3, #1
 8009cd8:	9b07      	ldr	r3, [sp, #28]
 8009cda:	42b3      	cmp	r3, r6
 8009cdc:	bfbf      	itttt	lt
 8009cde:	9b07      	ldrlt	r3, [sp, #28]
 8009ce0:	9607      	strlt	r6, [sp, #28]
 8009ce2:	1af2      	sublt	r2, r6, r3
 8009ce4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009ce6:	bfb6      	itet	lt
 8009ce8:	189b      	addlt	r3, r3, r2
 8009cea:	1b9e      	subge	r6, r3, r6
 8009cec:	930a      	strlt	r3, [sp, #40]	; 0x28
 8009cee:	9b03      	ldr	r3, [sp, #12]
 8009cf0:	bfb8      	it	lt
 8009cf2:	2600      	movlt	r6, #0
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	bfb7      	itett	lt
 8009cf8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8009cfc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8009d00:	1a9d      	sublt	r5, r3, r2
 8009d02:	2300      	movlt	r3, #0
 8009d04:	e734      	b.n	8009b70 <_dtoa_r+0x720>
 8009d06:	9e07      	ldr	r6, [sp, #28]
 8009d08:	9d04      	ldr	r5, [sp, #16]
 8009d0a:	9f08      	ldr	r7, [sp, #32]
 8009d0c:	e73b      	b.n	8009b86 <_dtoa_r+0x736>
 8009d0e:	9a07      	ldr	r2, [sp, #28]
 8009d10:	e767      	b.n	8009be2 <_dtoa_r+0x792>
 8009d12:	9b06      	ldr	r3, [sp, #24]
 8009d14:	2b01      	cmp	r3, #1
 8009d16:	dc18      	bgt.n	8009d4a <_dtoa_r+0x8fa>
 8009d18:	f1ba 0f00 	cmp.w	sl, #0
 8009d1c:	d115      	bne.n	8009d4a <_dtoa_r+0x8fa>
 8009d1e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009d22:	b993      	cbnz	r3, 8009d4a <_dtoa_r+0x8fa>
 8009d24:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009d28:	0d1b      	lsrs	r3, r3, #20
 8009d2a:	051b      	lsls	r3, r3, #20
 8009d2c:	b183      	cbz	r3, 8009d50 <_dtoa_r+0x900>
 8009d2e:	9b04      	ldr	r3, [sp, #16]
 8009d30:	3301      	adds	r3, #1
 8009d32:	9304      	str	r3, [sp, #16]
 8009d34:	9b05      	ldr	r3, [sp, #20]
 8009d36:	3301      	adds	r3, #1
 8009d38:	9305      	str	r3, [sp, #20]
 8009d3a:	f04f 0801 	mov.w	r8, #1
 8009d3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	f47f af6a 	bne.w	8009c1a <_dtoa_r+0x7ca>
 8009d46:	2001      	movs	r0, #1
 8009d48:	e76f      	b.n	8009c2a <_dtoa_r+0x7da>
 8009d4a:	f04f 0800 	mov.w	r8, #0
 8009d4e:	e7f6      	b.n	8009d3e <_dtoa_r+0x8ee>
 8009d50:	4698      	mov	r8, r3
 8009d52:	e7f4      	b.n	8009d3e <_dtoa_r+0x8ee>
 8009d54:	f43f af7d 	beq.w	8009c52 <_dtoa_r+0x802>
 8009d58:	4618      	mov	r0, r3
 8009d5a:	301c      	adds	r0, #28
 8009d5c:	e772      	b.n	8009c44 <_dtoa_r+0x7f4>
 8009d5e:	9b03      	ldr	r3, [sp, #12]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	dc37      	bgt.n	8009dd4 <_dtoa_r+0x984>
 8009d64:	9b06      	ldr	r3, [sp, #24]
 8009d66:	2b02      	cmp	r3, #2
 8009d68:	dd34      	ble.n	8009dd4 <_dtoa_r+0x984>
 8009d6a:	9b03      	ldr	r3, [sp, #12]
 8009d6c:	9302      	str	r3, [sp, #8]
 8009d6e:	9b02      	ldr	r3, [sp, #8]
 8009d70:	b96b      	cbnz	r3, 8009d8e <_dtoa_r+0x93e>
 8009d72:	4631      	mov	r1, r6
 8009d74:	2205      	movs	r2, #5
 8009d76:	4620      	mov	r0, r4
 8009d78:	f000 fe3a 	bl	800a9f0 <__multadd>
 8009d7c:	4601      	mov	r1, r0
 8009d7e:	4606      	mov	r6, r0
 8009d80:	ee18 0a10 	vmov	r0, s16
 8009d84:	f001 f89e 	bl	800aec4 <__mcmp>
 8009d88:	2800      	cmp	r0, #0
 8009d8a:	f73f adbb 	bgt.w	8009904 <_dtoa_r+0x4b4>
 8009d8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d90:	9d01      	ldr	r5, [sp, #4]
 8009d92:	43db      	mvns	r3, r3
 8009d94:	9300      	str	r3, [sp, #0]
 8009d96:	f04f 0800 	mov.w	r8, #0
 8009d9a:	4631      	mov	r1, r6
 8009d9c:	4620      	mov	r0, r4
 8009d9e:	f000 fe05 	bl	800a9ac <_Bfree>
 8009da2:	2f00      	cmp	r7, #0
 8009da4:	f43f aea4 	beq.w	8009af0 <_dtoa_r+0x6a0>
 8009da8:	f1b8 0f00 	cmp.w	r8, #0
 8009dac:	d005      	beq.n	8009dba <_dtoa_r+0x96a>
 8009dae:	45b8      	cmp	r8, r7
 8009db0:	d003      	beq.n	8009dba <_dtoa_r+0x96a>
 8009db2:	4641      	mov	r1, r8
 8009db4:	4620      	mov	r0, r4
 8009db6:	f000 fdf9 	bl	800a9ac <_Bfree>
 8009dba:	4639      	mov	r1, r7
 8009dbc:	4620      	mov	r0, r4
 8009dbe:	f000 fdf5 	bl	800a9ac <_Bfree>
 8009dc2:	e695      	b.n	8009af0 <_dtoa_r+0x6a0>
 8009dc4:	2600      	movs	r6, #0
 8009dc6:	4637      	mov	r7, r6
 8009dc8:	e7e1      	b.n	8009d8e <_dtoa_r+0x93e>
 8009dca:	9700      	str	r7, [sp, #0]
 8009dcc:	4637      	mov	r7, r6
 8009dce:	e599      	b.n	8009904 <_dtoa_r+0x4b4>
 8009dd0:	40240000 	.word	0x40240000
 8009dd4:	9b08      	ldr	r3, [sp, #32]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	f000 80ca 	beq.w	8009f70 <_dtoa_r+0xb20>
 8009ddc:	9b03      	ldr	r3, [sp, #12]
 8009dde:	9302      	str	r3, [sp, #8]
 8009de0:	2d00      	cmp	r5, #0
 8009de2:	dd05      	ble.n	8009df0 <_dtoa_r+0x9a0>
 8009de4:	4639      	mov	r1, r7
 8009de6:	462a      	mov	r2, r5
 8009de8:	4620      	mov	r0, r4
 8009dea:	f000 fffb 	bl	800ade4 <__lshift>
 8009dee:	4607      	mov	r7, r0
 8009df0:	f1b8 0f00 	cmp.w	r8, #0
 8009df4:	d05b      	beq.n	8009eae <_dtoa_r+0xa5e>
 8009df6:	6879      	ldr	r1, [r7, #4]
 8009df8:	4620      	mov	r0, r4
 8009dfa:	f000 fd97 	bl	800a92c <_Balloc>
 8009dfe:	4605      	mov	r5, r0
 8009e00:	b928      	cbnz	r0, 8009e0e <_dtoa_r+0x9be>
 8009e02:	4b87      	ldr	r3, [pc, #540]	; (800a020 <_dtoa_r+0xbd0>)
 8009e04:	4602      	mov	r2, r0
 8009e06:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009e0a:	f7ff bb3b 	b.w	8009484 <_dtoa_r+0x34>
 8009e0e:	693a      	ldr	r2, [r7, #16]
 8009e10:	3202      	adds	r2, #2
 8009e12:	0092      	lsls	r2, r2, #2
 8009e14:	f107 010c 	add.w	r1, r7, #12
 8009e18:	300c      	adds	r0, #12
 8009e1a:	f7fd fb2a 	bl	8007472 <memcpy>
 8009e1e:	2201      	movs	r2, #1
 8009e20:	4629      	mov	r1, r5
 8009e22:	4620      	mov	r0, r4
 8009e24:	f000 ffde 	bl	800ade4 <__lshift>
 8009e28:	9b01      	ldr	r3, [sp, #4]
 8009e2a:	f103 0901 	add.w	r9, r3, #1
 8009e2e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8009e32:	4413      	add	r3, r2
 8009e34:	9305      	str	r3, [sp, #20]
 8009e36:	f00a 0301 	and.w	r3, sl, #1
 8009e3a:	46b8      	mov	r8, r7
 8009e3c:	9304      	str	r3, [sp, #16]
 8009e3e:	4607      	mov	r7, r0
 8009e40:	4631      	mov	r1, r6
 8009e42:	ee18 0a10 	vmov	r0, s16
 8009e46:	f7ff fa77 	bl	8009338 <quorem>
 8009e4a:	4641      	mov	r1, r8
 8009e4c:	9002      	str	r0, [sp, #8]
 8009e4e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009e52:	ee18 0a10 	vmov	r0, s16
 8009e56:	f001 f835 	bl	800aec4 <__mcmp>
 8009e5a:	463a      	mov	r2, r7
 8009e5c:	9003      	str	r0, [sp, #12]
 8009e5e:	4631      	mov	r1, r6
 8009e60:	4620      	mov	r0, r4
 8009e62:	f001 f84b 	bl	800aefc <__mdiff>
 8009e66:	68c2      	ldr	r2, [r0, #12]
 8009e68:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8009e6c:	4605      	mov	r5, r0
 8009e6e:	bb02      	cbnz	r2, 8009eb2 <_dtoa_r+0xa62>
 8009e70:	4601      	mov	r1, r0
 8009e72:	ee18 0a10 	vmov	r0, s16
 8009e76:	f001 f825 	bl	800aec4 <__mcmp>
 8009e7a:	4602      	mov	r2, r0
 8009e7c:	4629      	mov	r1, r5
 8009e7e:	4620      	mov	r0, r4
 8009e80:	9207      	str	r2, [sp, #28]
 8009e82:	f000 fd93 	bl	800a9ac <_Bfree>
 8009e86:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8009e8a:	ea43 0102 	orr.w	r1, r3, r2
 8009e8e:	9b04      	ldr	r3, [sp, #16]
 8009e90:	430b      	orrs	r3, r1
 8009e92:	464d      	mov	r5, r9
 8009e94:	d10f      	bne.n	8009eb6 <_dtoa_r+0xa66>
 8009e96:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009e9a:	d02a      	beq.n	8009ef2 <_dtoa_r+0xaa2>
 8009e9c:	9b03      	ldr	r3, [sp, #12]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	dd02      	ble.n	8009ea8 <_dtoa_r+0xa58>
 8009ea2:	9b02      	ldr	r3, [sp, #8]
 8009ea4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009ea8:	f88b a000 	strb.w	sl, [fp]
 8009eac:	e775      	b.n	8009d9a <_dtoa_r+0x94a>
 8009eae:	4638      	mov	r0, r7
 8009eb0:	e7ba      	b.n	8009e28 <_dtoa_r+0x9d8>
 8009eb2:	2201      	movs	r2, #1
 8009eb4:	e7e2      	b.n	8009e7c <_dtoa_r+0xa2c>
 8009eb6:	9b03      	ldr	r3, [sp, #12]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	db04      	blt.n	8009ec6 <_dtoa_r+0xa76>
 8009ebc:	9906      	ldr	r1, [sp, #24]
 8009ebe:	430b      	orrs	r3, r1
 8009ec0:	9904      	ldr	r1, [sp, #16]
 8009ec2:	430b      	orrs	r3, r1
 8009ec4:	d122      	bne.n	8009f0c <_dtoa_r+0xabc>
 8009ec6:	2a00      	cmp	r2, #0
 8009ec8:	ddee      	ble.n	8009ea8 <_dtoa_r+0xa58>
 8009eca:	ee18 1a10 	vmov	r1, s16
 8009ece:	2201      	movs	r2, #1
 8009ed0:	4620      	mov	r0, r4
 8009ed2:	f000 ff87 	bl	800ade4 <__lshift>
 8009ed6:	4631      	mov	r1, r6
 8009ed8:	ee08 0a10 	vmov	s16, r0
 8009edc:	f000 fff2 	bl	800aec4 <__mcmp>
 8009ee0:	2800      	cmp	r0, #0
 8009ee2:	dc03      	bgt.n	8009eec <_dtoa_r+0xa9c>
 8009ee4:	d1e0      	bne.n	8009ea8 <_dtoa_r+0xa58>
 8009ee6:	f01a 0f01 	tst.w	sl, #1
 8009eea:	d0dd      	beq.n	8009ea8 <_dtoa_r+0xa58>
 8009eec:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009ef0:	d1d7      	bne.n	8009ea2 <_dtoa_r+0xa52>
 8009ef2:	2339      	movs	r3, #57	; 0x39
 8009ef4:	f88b 3000 	strb.w	r3, [fp]
 8009ef8:	462b      	mov	r3, r5
 8009efa:	461d      	mov	r5, r3
 8009efc:	3b01      	subs	r3, #1
 8009efe:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009f02:	2a39      	cmp	r2, #57	; 0x39
 8009f04:	d071      	beq.n	8009fea <_dtoa_r+0xb9a>
 8009f06:	3201      	adds	r2, #1
 8009f08:	701a      	strb	r2, [r3, #0]
 8009f0a:	e746      	b.n	8009d9a <_dtoa_r+0x94a>
 8009f0c:	2a00      	cmp	r2, #0
 8009f0e:	dd07      	ble.n	8009f20 <_dtoa_r+0xad0>
 8009f10:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009f14:	d0ed      	beq.n	8009ef2 <_dtoa_r+0xaa2>
 8009f16:	f10a 0301 	add.w	r3, sl, #1
 8009f1a:	f88b 3000 	strb.w	r3, [fp]
 8009f1e:	e73c      	b.n	8009d9a <_dtoa_r+0x94a>
 8009f20:	9b05      	ldr	r3, [sp, #20]
 8009f22:	f809 ac01 	strb.w	sl, [r9, #-1]
 8009f26:	4599      	cmp	r9, r3
 8009f28:	d047      	beq.n	8009fba <_dtoa_r+0xb6a>
 8009f2a:	ee18 1a10 	vmov	r1, s16
 8009f2e:	2300      	movs	r3, #0
 8009f30:	220a      	movs	r2, #10
 8009f32:	4620      	mov	r0, r4
 8009f34:	f000 fd5c 	bl	800a9f0 <__multadd>
 8009f38:	45b8      	cmp	r8, r7
 8009f3a:	ee08 0a10 	vmov	s16, r0
 8009f3e:	f04f 0300 	mov.w	r3, #0
 8009f42:	f04f 020a 	mov.w	r2, #10
 8009f46:	4641      	mov	r1, r8
 8009f48:	4620      	mov	r0, r4
 8009f4a:	d106      	bne.n	8009f5a <_dtoa_r+0xb0a>
 8009f4c:	f000 fd50 	bl	800a9f0 <__multadd>
 8009f50:	4680      	mov	r8, r0
 8009f52:	4607      	mov	r7, r0
 8009f54:	f109 0901 	add.w	r9, r9, #1
 8009f58:	e772      	b.n	8009e40 <_dtoa_r+0x9f0>
 8009f5a:	f000 fd49 	bl	800a9f0 <__multadd>
 8009f5e:	4639      	mov	r1, r7
 8009f60:	4680      	mov	r8, r0
 8009f62:	2300      	movs	r3, #0
 8009f64:	220a      	movs	r2, #10
 8009f66:	4620      	mov	r0, r4
 8009f68:	f000 fd42 	bl	800a9f0 <__multadd>
 8009f6c:	4607      	mov	r7, r0
 8009f6e:	e7f1      	b.n	8009f54 <_dtoa_r+0xb04>
 8009f70:	9b03      	ldr	r3, [sp, #12]
 8009f72:	9302      	str	r3, [sp, #8]
 8009f74:	9d01      	ldr	r5, [sp, #4]
 8009f76:	ee18 0a10 	vmov	r0, s16
 8009f7a:	4631      	mov	r1, r6
 8009f7c:	f7ff f9dc 	bl	8009338 <quorem>
 8009f80:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009f84:	9b01      	ldr	r3, [sp, #4]
 8009f86:	f805 ab01 	strb.w	sl, [r5], #1
 8009f8a:	1aea      	subs	r2, r5, r3
 8009f8c:	9b02      	ldr	r3, [sp, #8]
 8009f8e:	4293      	cmp	r3, r2
 8009f90:	dd09      	ble.n	8009fa6 <_dtoa_r+0xb56>
 8009f92:	ee18 1a10 	vmov	r1, s16
 8009f96:	2300      	movs	r3, #0
 8009f98:	220a      	movs	r2, #10
 8009f9a:	4620      	mov	r0, r4
 8009f9c:	f000 fd28 	bl	800a9f0 <__multadd>
 8009fa0:	ee08 0a10 	vmov	s16, r0
 8009fa4:	e7e7      	b.n	8009f76 <_dtoa_r+0xb26>
 8009fa6:	9b02      	ldr	r3, [sp, #8]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	bfc8      	it	gt
 8009fac:	461d      	movgt	r5, r3
 8009fae:	9b01      	ldr	r3, [sp, #4]
 8009fb0:	bfd8      	it	le
 8009fb2:	2501      	movle	r5, #1
 8009fb4:	441d      	add	r5, r3
 8009fb6:	f04f 0800 	mov.w	r8, #0
 8009fba:	ee18 1a10 	vmov	r1, s16
 8009fbe:	2201      	movs	r2, #1
 8009fc0:	4620      	mov	r0, r4
 8009fc2:	f000 ff0f 	bl	800ade4 <__lshift>
 8009fc6:	4631      	mov	r1, r6
 8009fc8:	ee08 0a10 	vmov	s16, r0
 8009fcc:	f000 ff7a 	bl	800aec4 <__mcmp>
 8009fd0:	2800      	cmp	r0, #0
 8009fd2:	dc91      	bgt.n	8009ef8 <_dtoa_r+0xaa8>
 8009fd4:	d102      	bne.n	8009fdc <_dtoa_r+0xb8c>
 8009fd6:	f01a 0f01 	tst.w	sl, #1
 8009fda:	d18d      	bne.n	8009ef8 <_dtoa_r+0xaa8>
 8009fdc:	462b      	mov	r3, r5
 8009fde:	461d      	mov	r5, r3
 8009fe0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009fe4:	2a30      	cmp	r2, #48	; 0x30
 8009fe6:	d0fa      	beq.n	8009fde <_dtoa_r+0xb8e>
 8009fe8:	e6d7      	b.n	8009d9a <_dtoa_r+0x94a>
 8009fea:	9a01      	ldr	r2, [sp, #4]
 8009fec:	429a      	cmp	r2, r3
 8009fee:	d184      	bne.n	8009efa <_dtoa_r+0xaaa>
 8009ff0:	9b00      	ldr	r3, [sp, #0]
 8009ff2:	3301      	adds	r3, #1
 8009ff4:	9300      	str	r3, [sp, #0]
 8009ff6:	2331      	movs	r3, #49	; 0x31
 8009ff8:	7013      	strb	r3, [r2, #0]
 8009ffa:	e6ce      	b.n	8009d9a <_dtoa_r+0x94a>
 8009ffc:	4b09      	ldr	r3, [pc, #36]	; (800a024 <_dtoa_r+0xbd4>)
 8009ffe:	f7ff ba95 	b.w	800952c <_dtoa_r+0xdc>
 800a002:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a004:	2b00      	cmp	r3, #0
 800a006:	f47f aa6e 	bne.w	80094e6 <_dtoa_r+0x96>
 800a00a:	4b07      	ldr	r3, [pc, #28]	; (800a028 <_dtoa_r+0xbd8>)
 800a00c:	f7ff ba8e 	b.w	800952c <_dtoa_r+0xdc>
 800a010:	9b02      	ldr	r3, [sp, #8]
 800a012:	2b00      	cmp	r3, #0
 800a014:	dcae      	bgt.n	8009f74 <_dtoa_r+0xb24>
 800a016:	9b06      	ldr	r3, [sp, #24]
 800a018:	2b02      	cmp	r3, #2
 800a01a:	f73f aea8 	bgt.w	8009d6e <_dtoa_r+0x91e>
 800a01e:	e7a9      	b.n	8009f74 <_dtoa_r+0xb24>
 800a020:	0800c38d 	.word	0x0800c38d
 800a024:	0800c0fc 	.word	0x0800c0fc
 800a028:	0800c325 	.word	0x0800c325

0800a02c <__sflush_r>:
 800a02c:	898a      	ldrh	r2, [r1, #12]
 800a02e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a032:	4605      	mov	r5, r0
 800a034:	0710      	lsls	r0, r2, #28
 800a036:	460c      	mov	r4, r1
 800a038:	d458      	bmi.n	800a0ec <__sflush_r+0xc0>
 800a03a:	684b      	ldr	r3, [r1, #4]
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	dc05      	bgt.n	800a04c <__sflush_r+0x20>
 800a040:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a042:	2b00      	cmp	r3, #0
 800a044:	dc02      	bgt.n	800a04c <__sflush_r+0x20>
 800a046:	2000      	movs	r0, #0
 800a048:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a04c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a04e:	2e00      	cmp	r6, #0
 800a050:	d0f9      	beq.n	800a046 <__sflush_r+0x1a>
 800a052:	2300      	movs	r3, #0
 800a054:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a058:	682f      	ldr	r7, [r5, #0]
 800a05a:	602b      	str	r3, [r5, #0]
 800a05c:	d032      	beq.n	800a0c4 <__sflush_r+0x98>
 800a05e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a060:	89a3      	ldrh	r3, [r4, #12]
 800a062:	075a      	lsls	r2, r3, #29
 800a064:	d505      	bpl.n	800a072 <__sflush_r+0x46>
 800a066:	6863      	ldr	r3, [r4, #4]
 800a068:	1ac0      	subs	r0, r0, r3
 800a06a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a06c:	b10b      	cbz	r3, 800a072 <__sflush_r+0x46>
 800a06e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a070:	1ac0      	subs	r0, r0, r3
 800a072:	2300      	movs	r3, #0
 800a074:	4602      	mov	r2, r0
 800a076:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a078:	6a21      	ldr	r1, [r4, #32]
 800a07a:	4628      	mov	r0, r5
 800a07c:	47b0      	blx	r6
 800a07e:	1c43      	adds	r3, r0, #1
 800a080:	89a3      	ldrh	r3, [r4, #12]
 800a082:	d106      	bne.n	800a092 <__sflush_r+0x66>
 800a084:	6829      	ldr	r1, [r5, #0]
 800a086:	291d      	cmp	r1, #29
 800a088:	d82c      	bhi.n	800a0e4 <__sflush_r+0xb8>
 800a08a:	4a2a      	ldr	r2, [pc, #168]	; (800a134 <__sflush_r+0x108>)
 800a08c:	40ca      	lsrs	r2, r1
 800a08e:	07d6      	lsls	r6, r2, #31
 800a090:	d528      	bpl.n	800a0e4 <__sflush_r+0xb8>
 800a092:	2200      	movs	r2, #0
 800a094:	6062      	str	r2, [r4, #4]
 800a096:	04d9      	lsls	r1, r3, #19
 800a098:	6922      	ldr	r2, [r4, #16]
 800a09a:	6022      	str	r2, [r4, #0]
 800a09c:	d504      	bpl.n	800a0a8 <__sflush_r+0x7c>
 800a09e:	1c42      	adds	r2, r0, #1
 800a0a0:	d101      	bne.n	800a0a6 <__sflush_r+0x7a>
 800a0a2:	682b      	ldr	r3, [r5, #0]
 800a0a4:	b903      	cbnz	r3, 800a0a8 <__sflush_r+0x7c>
 800a0a6:	6560      	str	r0, [r4, #84]	; 0x54
 800a0a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a0aa:	602f      	str	r7, [r5, #0]
 800a0ac:	2900      	cmp	r1, #0
 800a0ae:	d0ca      	beq.n	800a046 <__sflush_r+0x1a>
 800a0b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a0b4:	4299      	cmp	r1, r3
 800a0b6:	d002      	beq.n	800a0be <__sflush_r+0x92>
 800a0b8:	4628      	mov	r0, r5
 800a0ba:	f001 f90f 	bl	800b2dc <_free_r>
 800a0be:	2000      	movs	r0, #0
 800a0c0:	6360      	str	r0, [r4, #52]	; 0x34
 800a0c2:	e7c1      	b.n	800a048 <__sflush_r+0x1c>
 800a0c4:	6a21      	ldr	r1, [r4, #32]
 800a0c6:	2301      	movs	r3, #1
 800a0c8:	4628      	mov	r0, r5
 800a0ca:	47b0      	blx	r6
 800a0cc:	1c41      	adds	r1, r0, #1
 800a0ce:	d1c7      	bne.n	800a060 <__sflush_r+0x34>
 800a0d0:	682b      	ldr	r3, [r5, #0]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d0c4      	beq.n	800a060 <__sflush_r+0x34>
 800a0d6:	2b1d      	cmp	r3, #29
 800a0d8:	d001      	beq.n	800a0de <__sflush_r+0xb2>
 800a0da:	2b16      	cmp	r3, #22
 800a0dc:	d101      	bne.n	800a0e2 <__sflush_r+0xb6>
 800a0de:	602f      	str	r7, [r5, #0]
 800a0e0:	e7b1      	b.n	800a046 <__sflush_r+0x1a>
 800a0e2:	89a3      	ldrh	r3, [r4, #12]
 800a0e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a0e8:	81a3      	strh	r3, [r4, #12]
 800a0ea:	e7ad      	b.n	800a048 <__sflush_r+0x1c>
 800a0ec:	690f      	ldr	r7, [r1, #16]
 800a0ee:	2f00      	cmp	r7, #0
 800a0f0:	d0a9      	beq.n	800a046 <__sflush_r+0x1a>
 800a0f2:	0793      	lsls	r3, r2, #30
 800a0f4:	680e      	ldr	r6, [r1, #0]
 800a0f6:	bf08      	it	eq
 800a0f8:	694b      	ldreq	r3, [r1, #20]
 800a0fa:	600f      	str	r7, [r1, #0]
 800a0fc:	bf18      	it	ne
 800a0fe:	2300      	movne	r3, #0
 800a100:	eba6 0807 	sub.w	r8, r6, r7
 800a104:	608b      	str	r3, [r1, #8]
 800a106:	f1b8 0f00 	cmp.w	r8, #0
 800a10a:	dd9c      	ble.n	800a046 <__sflush_r+0x1a>
 800a10c:	6a21      	ldr	r1, [r4, #32]
 800a10e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a110:	4643      	mov	r3, r8
 800a112:	463a      	mov	r2, r7
 800a114:	4628      	mov	r0, r5
 800a116:	47b0      	blx	r6
 800a118:	2800      	cmp	r0, #0
 800a11a:	dc06      	bgt.n	800a12a <__sflush_r+0xfe>
 800a11c:	89a3      	ldrh	r3, [r4, #12]
 800a11e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a122:	81a3      	strh	r3, [r4, #12]
 800a124:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a128:	e78e      	b.n	800a048 <__sflush_r+0x1c>
 800a12a:	4407      	add	r7, r0
 800a12c:	eba8 0800 	sub.w	r8, r8, r0
 800a130:	e7e9      	b.n	800a106 <__sflush_r+0xda>
 800a132:	bf00      	nop
 800a134:	20400001 	.word	0x20400001

0800a138 <_fflush_r>:
 800a138:	b538      	push	{r3, r4, r5, lr}
 800a13a:	690b      	ldr	r3, [r1, #16]
 800a13c:	4605      	mov	r5, r0
 800a13e:	460c      	mov	r4, r1
 800a140:	b913      	cbnz	r3, 800a148 <_fflush_r+0x10>
 800a142:	2500      	movs	r5, #0
 800a144:	4628      	mov	r0, r5
 800a146:	bd38      	pop	{r3, r4, r5, pc}
 800a148:	b118      	cbz	r0, 800a152 <_fflush_r+0x1a>
 800a14a:	6983      	ldr	r3, [r0, #24]
 800a14c:	b90b      	cbnz	r3, 800a152 <_fflush_r+0x1a>
 800a14e:	f7fd f8cb 	bl	80072e8 <__sinit>
 800a152:	4b14      	ldr	r3, [pc, #80]	; (800a1a4 <_fflush_r+0x6c>)
 800a154:	429c      	cmp	r4, r3
 800a156:	d11b      	bne.n	800a190 <_fflush_r+0x58>
 800a158:	686c      	ldr	r4, [r5, #4]
 800a15a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d0ef      	beq.n	800a142 <_fflush_r+0xa>
 800a162:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a164:	07d0      	lsls	r0, r2, #31
 800a166:	d404      	bmi.n	800a172 <_fflush_r+0x3a>
 800a168:	0599      	lsls	r1, r3, #22
 800a16a:	d402      	bmi.n	800a172 <_fflush_r+0x3a>
 800a16c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a16e:	f7fd f97e 	bl	800746e <__retarget_lock_acquire_recursive>
 800a172:	4628      	mov	r0, r5
 800a174:	4621      	mov	r1, r4
 800a176:	f7ff ff59 	bl	800a02c <__sflush_r>
 800a17a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a17c:	07da      	lsls	r2, r3, #31
 800a17e:	4605      	mov	r5, r0
 800a180:	d4e0      	bmi.n	800a144 <_fflush_r+0xc>
 800a182:	89a3      	ldrh	r3, [r4, #12]
 800a184:	059b      	lsls	r3, r3, #22
 800a186:	d4dd      	bmi.n	800a144 <_fflush_r+0xc>
 800a188:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a18a:	f7fd f971 	bl	8007470 <__retarget_lock_release_recursive>
 800a18e:	e7d9      	b.n	800a144 <_fflush_r+0xc>
 800a190:	4b05      	ldr	r3, [pc, #20]	; (800a1a8 <_fflush_r+0x70>)
 800a192:	429c      	cmp	r4, r3
 800a194:	d101      	bne.n	800a19a <_fflush_r+0x62>
 800a196:	68ac      	ldr	r4, [r5, #8]
 800a198:	e7df      	b.n	800a15a <_fflush_r+0x22>
 800a19a:	4b04      	ldr	r3, [pc, #16]	; (800a1ac <_fflush_r+0x74>)
 800a19c:	429c      	cmp	r4, r3
 800a19e:	bf08      	it	eq
 800a1a0:	68ec      	ldreq	r4, [r5, #12]
 800a1a2:	e7da      	b.n	800a15a <_fflush_r+0x22>
 800a1a4:	0800c0a8 	.word	0x0800c0a8
 800a1a8:	0800c0c8 	.word	0x0800c0c8
 800a1ac:	0800c088 	.word	0x0800c088

0800a1b0 <fiprintf>:
 800a1b0:	b40e      	push	{r1, r2, r3}
 800a1b2:	b503      	push	{r0, r1, lr}
 800a1b4:	4601      	mov	r1, r0
 800a1b6:	ab03      	add	r3, sp, #12
 800a1b8:	4805      	ldr	r0, [pc, #20]	; (800a1d0 <fiprintf+0x20>)
 800a1ba:	f853 2b04 	ldr.w	r2, [r3], #4
 800a1be:	6800      	ldr	r0, [r0, #0]
 800a1c0:	9301      	str	r3, [sp, #4]
 800a1c2:	f001 fa5d 	bl	800b680 <_vfiprintf_r>
 800a1c6:	b002      	add	sp, #8
 800a1c8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a1cc:	b003      	add	sp, #12
 800a1ce:	4770      	bx	lr
 800a1d0:	20000010 	.word	0x20000010

0800a1d4 <rshift>:
 800a1d4:	6903      	ldr	r3, [r0, #16]
 800a1d6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a1da:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a1de:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a1e2:	f100 0414 	add.w	r4, r0, #20
 800a1e6:	dd45      	ble.n	800a274 <rshift+0xa0>
 800a1e8:	f011 011f 	ands.w	r1, r1, #31
 800a1ec:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a1f0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a1f4:	d10c      	bne.n	800a210 <rshift+0x3c>
 800a1f6:	f100 0710 	add.w	r7, r0, #16
 800a1fa:	4629      	mov	r1, r5
 800a1fc:	42b1      	cmp	r1, r6
 800a1fe:	d334      	bcc.n	800a26a <rshift+0x96>
 800a200:	1a9b      	subs	r3, r3, r2
 800a202:	009b      	lsls	r3, r3, #2
 800a204:	1eea      	subs	r2, r5, #3
 800a206:	4296      	cmp	r6, r2
 800a208:	bf38      	it	cc
 800a20a:	2300      	movcc	r3, #0
 800a20c:	4423      	add	r3, r4
 800a20e:	e015      	b.n	800a23c <rshift+0x68>
 800a210:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a214:	f1c1 0820 	rsb	r8, r1, #32
 800a218:	40cf      	lsrs	r7, r1
 800a21a:	f105 0e04 	add.w	lr, r5, #4
 800a21e:	46a1      	mov	r9, r4
 800a220:	4576      	cmp	r6, lr
 800a222:	46f4      	mov	ip, lr
 800a224:	d815      	bhi.n	800a252 <rshift+0x7e>
 800a226:	1a9a      	subs	r2, r3, r2
 800a228:	0092      	lsls	r2, r2, #2
 800a22a:	3a04      	subs	r2, #4
 800a22c:	3501      	adds	r5, #1
 800a22e:	42ae      	cmp	r6, r5
 800a230:	bf38      	it	cc
 800a232:	2200      	movcc	r2, #0
 800a234:	18a3      	adds	r3, r4, r2
 800a236:	50a7      	str	r7, [r4, r2]
 800a238:	b107      	cbz	r7, 800a23c <rshift+0x68>
 800a23a:	3304      	adds	r3, #4
 800a23c:	1b1a      	subs	r2, r3, r4
 800a23e:	42a3      	cmp	r3, r4
 800a240:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a244:	bf08      	it	eq
 800a246:	2300      	moveq	r3, #0
 800a248:	6102      	str	r2, [r0, #16]
 800a24a:	bf08      	it	eq
 800a24c:	6143      	streq	r3, [r0, #20]
 800a24e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a252:	f8dc c000 	ldr.w	ip, [ip]
 800a256:	fa0c fc08 	lsl.w	ip, ip, r8
 800a25a:	ea4c 0707 	orr.w	r7, ip, r7
 800a25e:	f849 7b04 	str.w	r7, [r9], #4
 800a262:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a266:	40cf      	lsrs	r7, r1
 800a268:	e7da      	b.n	800a220 <rshift+0x4c>
 800a26a:	f851 cb04 	ldr.w	ip, [r1], #4
 800a26e:	f847 cf04 	str.w	ip, [r7, #4]!
 800a272:	e7c3      	b.n	800a1fc <rshift+0x28>
 800a274:	4623      	mov	r3, r4
 800a276:	e7e1      	b.n	800a23c <rshift+0x68>

0800a278 <__hexdig_fun>:
 800a278:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a27c:	2b09      	cmp	r3, #9
 800a27e:	d802      	bhi.n	800a286 <__hexdig_fun+0xe>
 800a280:	3820      	subs	r0, #32
 800a282:	b2c0      	uxtb	r0, r0
 800a284:	4770      	bx	lr
 800a286:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a28a:	2b05      	cmp	r3, #5
 800a28c:	d801      	bhi.n	800a292 <__hexdig_fun+0x1a>
 800a28e:	3847      	subs	r0, #71	; 0x47
 800a290:	e7f7      	b.n	800a282 <__hexdig_fun+0xa>
 800a292:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a296:	2b05      	cmp	r3, #5
 800a298:	d801      	bhi.n	800a29e <__hexdig_fun+0x26>
 800a29a:	3827      	subs	r0, #39	; 0x27
 800a29c:	e7f1      	b.n	800a282 <__hexdig_fun+0xa>
 800a29e:	2000      	movs	r0, #0
 800a2a0:	4770      	bx	lr
	...

0800a2a4 <__gethex>:
 800a2a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2a8:	ed2d 8b02 	vpush	{d8}
 800a2ac:	b089      	sub	sp, #36	; 0x24
 800a2ae:	ee08 0a10 	vmov	s16, r0
 800a2b2:	9304      	str	r3, [sp, #16]
 800a2b4:	4bb4      	ldr	r3, [pc, #720]	; (800a588 <__gethex+0x2e4>)
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	9301      	str	r3, [sp, #4]
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	468b      	mov	fp, r1
 800a2be:	4690      	mov	r8, r2
 800a2c0:	f7f5 ffa6 	bl	8000210 <strlen>
 800a2c4:	9b01      	ldr	r3, [sp, #4]
 800a2c6:	f8db 2000 	ldr.w	r2, [fp]
 800a2ca:	4403      	add	r3, r0
 800a2cc:	4682      	mov	sl, r0
 800a2ce:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800a2d2:	9305      	str	r3, [sp, #20]
 800a2d4:	1c93      	adds	r3, r2, #2
 800a2d6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a2da:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a2de:	32fe      	adds	r2, #254	; 0xfe
 800a2e0:	18d1      	adds	r1, r2, r3
 800a2e2:	461f      	mov	r7, r3
 800a2e4:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a2e8:	9100      	str	r1, [sp, #0]
 800a2ea:	2830      	cmp	r0, #48	; 0x30
 800a2ec:	d0f8      	beq.n	800a2e0 <__gethex+0x3c>
 800a2ee:	f7ff ffc3 	bl	800a278 <__hexdig_fun>
 800a2f2:	4604      	mov	r4, r0
 800a2f4:	2800      	cmp	r0, #0
 800a2f6:	d13a      	bne.n	800a36e <__gethex+0xca>
 800a2f8:	9901      	ldr	r1, [sp, #4]
 800a2fa:	4652      	mov	r2, sl
 800a2fc:	4638      	mov	r0, r7
 800a2fe:	f001 fb0b 	bl	800b918 <strncmp>
 800a302:	4605      	mov	r5, r0
 800a304:	2800      	cmp	r0, #0
 800a306:	d168      	bne.n	800a3da <__gethex+0x136>
 800a308:	f817 000a 	ldrb.w	r0, [r7, sl]
 800a30c:	eb07 060a 	add.w	r6, r7, sl
 800a310:	f7ff ffb2 	bl	800a278 <__hexdig_fun>
 800a314:	2800      	cmp	r0, #0
 800a316:	d062      	beq.n	800a3de <__gethex+0x13a>
 800a318:	4633      	mov	r3, r6
 800a31a:	7818      	ldrb	r0, [r3, #0]
 800a31c:	2830      	cmp	r0, #48	; 0x30
 800a31e:	461f      	mov	r7, r3
 800a320:	f103 0301 	add.w	r3, r3, #1
 800a324:	d0f9      	beq.n	800a31a <__gethex+0x76>
 800a326:	f7ff ffa7 	bl	800a278 <__hexdig_fun>
 800a32a:	2301      	movs	r3, #1
 800a32c:	fab0 f480 	clz	r4, r0
 800a330:	0964      	lsrs	r4, r4, #5
 800a332:	4635      	mov	r5, r6
 800a334:	9300      	str	r3, [sp, #0]
 800a336:	463a      	mov	r2, r7
 800a338:	4616      	mov	r6, r2
 800a33a:	3201      	adds	r2, #1
 800a33c:	7830      	ldrb	r0, [r6, #0]
 800a33e:	f7ff ff9b 	bl	800a278 <__hexdig_fun>
 800a342:	2800      	cmp	r0, #0
 800a344:	d1f8      	bne.n	800a338 <__gethex+0x94>
 800a346:	9901      	ldr	r1, [sp, #4]
 800a348:	4652      	mov	r2, sl
 800a34a:	4630      	mov	r0, r6
 800a34c:	f001 fae4 	bl	800b918 <strncmp>
 800a350:	b980      	cbnz	r0, 800a374 <__gethex+0xd0>
 800a352:	b94d      	cbnz	r5, 800a368 <__gethex+0xc4>
 800a354:	eb06 050a 	add.w	r5, r6, sl
 800a358:	462a      	mov	r2, r5
 800a35a:	4616      	mov	r6, r2
 800a35c:	3201      	adds	r2, #1
 800a35e:	7830      	ldrb	r0, [r6, #0]
 800a360:	f7ff ff8a 	bl	800a278 <__hexdig_fun>
 800a364:	2800      	cmp	r0, #0
 800a366:	d1f8      	bne.n	800a35a <__gethex+0xb6>
 800a368:	1bad      	subs	r5, r5, r6
 800a36a:	00ad      	lsls	r5, r5, #2
 800a36c:	e004      	b.n	800a378 <__gethex+0xd4>
 800a36e:	2400      	movs	r4, #0
 800a370:	4625      	mov	r5, r4
 800a372:	e7e0      	b.n	800a336 <__gethex+0x92>
 800a374:	2d00      	cmp	r5, #0
 800a376:	d1f7      	bne.n	800a368 <__gethex+0xc4>
 800a378:	7833      	ldrb	r3, [r6, #0]
 800a37a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a37e:	2b50      	cmp	r3, #80	; 0x50
 800a380:	d13b      	bne.n	800a3fa <__gethex+0x156>
 800a382:	7873      	ldrb	r3, [r6, #1]
 800a384:	2b2b      	cmp	r3, #43	; 0x2b
 800a386:	d02c      	beq.n	800a3e2 <__gethex+0x13e>
 800a388:	2b2d      	cmp	r3, #45	; 0x2d
 800a38a:	d02e      	beq.n	800a3ea <__gethex+0x146>
 800a38c:	1c71      	adds	r1, r6, #1
 800a38e:	f04f 0900 	mov.w	r9, #0
 800a392:	7808      	ldrb	r0, [r1, #0]
 800a394:	f7ff ff70 	bl	800a278 <__hexdig_fun>
 800a398:	1e43      	subs	r3, r0, #1
 800a39a:	b2db      	uxtb	r3, r3
 800a39c:	2b18      	cmp	r3, #24
 800a39e:	d82c      	bhi.n	800a3fa <__gethex+0x156>
 800a3a0:	f1a0 0210 	sub.w	r2, r0, #16
 800a3a4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a3a8:	f7ff ff66 	bl	800a278 <__hexdig_fun>
 800a3ac:	1e43      	subs	r3, r0, #1
 800a3ae:	b2db      	uxtb	r3, r3
 800a3b0:	2b18      	cmp	r3, #24
 800a3b2:	d91d      	bls.n	800a3f0 <__gethex+0x14c>
 800a3b4:	f1b9 0f00 	cmp.w	r9, #0
 800a3b8:	d000      	beq.n	800a3bc <__gethex+0x118>
 800a3ba:	4252      	negs	r2, r2
 800a3bc:	4415      	add	r5, r2
 800a3be:	f8cb 1000 	str.w	r1, [fp]
 800a3c2:	b1e4      	cbz	r4, 800a3fe <__gethex+0x15a>
 800a3c4:	9b00      	ldr	r3, [sp, #0]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	bf14      	ite	ne
 800a3ca:	2700      	movne	r7, #0
 800a3cc:	2706      	moveq	r7, #6
 800a3ce:	4638      	mov	r0, r7
 800a3d0:	b009      	add	sp, #36	; 0x24
 800a3d2:	ecbd 8b02 	vpop	{d8}
 800a3d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3da:	463e      	mov	r6, r7
 800a3dc:	4625      	mov	r5, r4
 800a3de:	2401      	movs	r4, #1
 800a3e0:	e7ca      	b.n	800a378 <__gethex+0xd4>
 800a3e2:	f04f 0900 	mov.w	r9, #0
 800a3e6:	1cb1      	adds	r1, r6, #2
 800a3e8:	e7d3      	b.n	800a392 <__gethex+0xee>
 800a3ea:	f04f 0901 	mov.w	r9, #1
 800a3ee:	e7fa      	b.n	800a3e6 <__gethex+0x142>
 800a3f0:	230a      	movs	r3, #10
 800a3f2:	fb03 0202 	mla	r2, r3, r2, r0
 800a3f6:	3a10      	subs	r2, #16
 800a3f8:	e7d4      	b.n	800a3a4 <__gethex+0x100>
 800a3fa:	4631      	mov	r1, r6
 800a3fc:	e7df      	b.n	800a3be <__gethex+0x11a>
 800a3fe:	1bf3      	subs	r3, r6, r7
 800a400:	3b01      	subs	r3, #1
 800a402:	4621      	mov	r1, r4
 800a404:	2b07      	cmp	r3, #7
 800a406:	dc0b      	bgt.n	800a420 <__gethex+0x17c>
 800a408:	ee18 0a10 	vmov	r0, s16
 800a40c:	f000 fa8e 	bl	800a92c <_Balloc>
 800a410:	4604      	mov	r4, r0
 800a412:	b940      	cbnz	r0, 800a426 <__gethex+0x182>
 800a414:	4b5d      	ldr	r3, [pc, #372]	; (800a58c <__gethex+0x2e8>)
 800a416:	4602      	mov	r2, r0
 800a418:	21de      	movs	r1, #222	; 0xde
 800a41a:	485d      	ldr	r0, [pc, #372]	; (800a590 <__gethex+0x2ec>)
 800a41c:	f7fe ff5e 	bl	80092dc <__assert_func>
 800a420:	3101      	adds	r1, #1
 800a422:	105b      	asrs	r3, r3, #1
 800a424:	e7ee      	b.n	800a404 <__gethex+0x160>
 800a426:	f100 0914 	add.w	r9, r0, #20
 800a42a:	f04f 0b00 	mov.w	fp, #0
 800a42e:	f1ca 0301 	rsb	r3, sl, #1
 800a432:	f8cd 9008 	str.w	r9, [sp, #8]
 800a436:	f8cd b000 	str.w	fp, [sp]
 800a43a:	9306      	str	r3, [sp, #24]
 800a43c:	42b7      	cmp	r7, r6
 800a43e:	d340      	bcc.n	800a4c2 <__gethex+0x21e>
 800a440:	9802      	ldr	r0, [sp, #8]
 800a442:	9b00      	ldr	r3, [sp, #0]
 800a444:	f840 3b04 	str.w	r3, [r0], #4
 800a448:	eba0 0009 	sub.w	r0, r0, r9
 800a44c:	1080      	asrs	r0, r0, #2
 800a44e:	0146      	lsls	r6, r0, #5
 800a450:	6120      	str	r0, [r4, #16]
 800a452:	4618      	mov	r0, r3
 800a454:	f000 fb5c 	bl	800ab10 <__hi0bits>
 800a458:	1a30      	subs	r0, r6, r0
 800a45a:	f8d8 6000 	ldr.w	r6, [r8]
 800a45e:	42b0      	cmp	r0, r6
 800a460:	dd63      	ble.n	800a52a <__gethex+0x286>
 800a462:	1b87      	subs	r7, r0, r6
 800a464:	4639      	mov	r1, r7
 800a466:	4620      	mov	r0, r4
 800a468:	f000 ff00 	bl	800b26c <__any_on>
 800a46c:	4682      	mov	sl, r0
 800a46e:	b1a8      	cbz	r0, 800a49c <__gethex+0x1f8>
 800a470:	1e7b      	subs	r3, r7, #1
 800a472:	1159      	asrs	r1, r3, #5
 800a474:	f003 021f 	and.w	r2, r3, #31
 800a478:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800a47c:	f04f 0a01 	mov.w	sl, #1
 800a480:	fa0a f202 	lsl.w	r2, sl, r2
 800a484:	420a      	tst	r2, r1
 800a486:	d009      	beq.n	800a49c <__gethex+0x1f8>
 800a488:	4553      	cmp	r3, sl
 800a48a:	dd05      	ble.n	800a498 <__gethex+0x1f4>
 800a48c:	1eb9      	subs	r1, r7, #2
 800a48e:	4620      	mov	r0, r4
 800a490:	f000 feec 	bl	800b26c <__any_on>
 800a494:	2800      	cmp	r0, #0
 800a496:	d145      	bne.n	800a524 <__gethex+0x280>
 800a498:	f04f 0a02 	mov.w	sl, #2
 800a49c:	4639      	mov	r1, r7
 800a49e:	4620      	mov	r0, r4
 800a4a0:	f7ff fe98 	bl	800a1d4 <rshift>
 800a4a4:	443d      	add	r5, r7
 800a4a6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a4aa:	42ab      	cmp	r3, r5
 800a4ac:	da4c      	bge.n	800a548 <__gethex+0x2a4>
 800a4ae:	ee18 0a10 	vmov	r0, s16
 800a4b2:	4621      	mov	r1, r4
 800a4b4:	f000 fa7a 	bl	800a9ac <_Bfree>
 800a4b8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	6013      	str	r3, [r2, #0]
 800a4be:	27a3      	movs	r7, #163	; 0xa3
 800a4c0:	e785      	b.n	800a3ce <__gethex+0x12a>
 800a4c2:	1e73      	subs	r3, r6, #1
 800a4c4:	9a05      	ldr	r2, [sp, #20]
 800a4c6:	9303      	str	r3, [sp, #12]
 800a4c8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a4cc:	4293      	cmp	r3, r2
 800a4ce:	d019      	beq.n	800a504 <__gethex+0x260>
 800a4d0:	f1bb 0f20 	cmp.w	fp, #32
 800a4d4:	d107      	bne.n	800a4e6 <__gethex+0x242>
 800a4d6:	9b02      	ldr	r3, [sp, #8]
 800a4d8:	9a00      	ldr	r2, [sp, #0]
 800a4da:	f843 2b04 	str.w	r2, [r3], #4
 800a4de:	9302      	str	r3, [sp, #8]
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	9300      	str	r3, [sp, #0]
 800a4e4:	469b      	mov	fp, r3
 800a4e6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800a4ea:	f7ff fec5 	bl	800a278 <__hexdig_fun>
 800a4ee:	9b00      	ldr	r3, [sp, #0]
 800a4f0:	f000 000f 	and.w	r0, r0, #15
 800a4f4:	fa00 f00b 	lsl.w	r0, r0, fp
 800a4f8:	4303      	orrs	r3, r0
 800a4fa:	9300      	str	r3, [sp, #0]
 800a4fc:	f10b 0b04 	add.w	fp, fp, #4
 800a500:	9b03      	ldr	r3, [sp, #12]
 800a502:	e00d      	b.n	800a520 <__gethex+0x27c>
 800a504:	9b03      	ldr	r3, [sp, #12]
 800a506:	9a06      	ldr	r2, [sp, #24]
 800a508:	4413      	add	r3, r2
 800a50a:	42bb      	cmp	r3, r7
 800a50c:	d3e0      	bcc.n	800a4d0 <__gethex+0x22c>
 800a50e:	4618      	mov	r0, r3
 800a510:	9901      	ldr	r1, [sp, #4]
 800a512:	9307      	str	r3, [sp, #28]
 800a514:	4652      	mov	r2, sl
 800a516:	f001 f9ff 	bl	800b918 <strncmp>
 800a51a:	9b07      	ldr	r3, [sp, #28]
 800a51c:	2800      	cmp	r0, #0
 800a51e:	d1d7      	bne.n	800a4d0 <__gethex+0x22c>
 800a520:	461e      	mov	r6, r3
 800a522:	e78b      	b.n	800a43c <__gethex+0x198>
 800a524:	f04f 0a03 	mov.w	sl, #3
 800a528:	e7b8      	b.n	800a49c <__gethex+0x1f8>
 800a52a:	da0a      	bge.n	800a542 <__gethex+0x29e>
 800a52c:	1a37      	subs	r7, r6, r0
 800a52e:	4621      	mov	r1, r4
 800a530:	ee18 0a10 	vmov	r0, s16
 800a534:	463a      	mov	r2, r7
 800a536:	f000 fc55 	bl	800ade4 <__lshift>
 800a53a:	1bed      	subs	r5, r5, r7
 800a53c:	4604      	mov	r4, r0
 800a53e:	f100 0914 	add.w	r9, r0, #20
 800a542:	f04f 0a00 	mov.w	sl, #0
 800a546:	e7ae      	b.n	800a4a6 <__gethex+0x202>
 800a548:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a54c:	42a8      	cmp	r0, r5
 800a54e:	dd72      	ble.n	800a636 <__gethex+0x392>
 800a550:	1b45      	subs	r5, r0, r5
 800a552:	42ae      	cmp	r6, r5
 800a554:	dc36      	bgt.n	800a5c4 <__gethex+0x320>
 800a556:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a55a:	2b02      	cmp	r3, #2
 800a55c:	d02a      	beq.n	800a5b4 <__gethex+0x310>
 800a55e:	2b03      	cmp	r3, #3
 800a560:	d02c      	beq.n	800a5bc <__gethex+0x318>
 800a562:	2b01      	cmp	r3, #1
 800a564:	d11c      	bne.n	800a5a0 <__gethex+0x2fc>
 800a566:	42ae      	cmp	r6, r5
 800a568:	d11a      	bne.n	800a5a0 <__gethex+0x2fc>
 800a56a:	2e01      	cmp	r6, #1
 800a56c:	d112      	bne.n	800a594 <__gethex+0x2f0>
 800a56e:	9a04      	ldr	r2, [sp, #16]
 800a570:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a574:	6013      	str	r3, [r2, #0]
 800a576:	2301      	movs	r3, #1
 800a578:	6123      	str	r3, [r4, #16]
 800a57a:	f8c9 3000 	str.w	r3, [r9]
 800a57e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a580:	2762      	movs	r7, #98	; 0x62
 800a582:	601c      	str	r4, [r3, #0]
 800a584:	e723      	b.n	800a3ce <__gethex+0x12a>
 800a586:	bf00      	nop
 800a588:	0800c404 	.word	0x0800c404
 800a58c:	0800c38d 	.word	0x0800c38d
 800a590:	0800c39e 	.word	0x0800c39e
 800a594:	1e71      	subs	r1, r6, #1
 800a596:	4620      	mov	r0, r4
 800a598:	f000 fe68 	bl	800b26c <__any_on>
 800a59c:	2800      	cmp	r0, #0
 800a59e:	d1e6      	bne.n	800a56e <__gethex+0x2ca>
 800a5a0:	ee18 0a10 	vmov	r0, s16
 800a5a4:	4621      	mov	r1, r4
 800a5a6:	f000 fa01 	bl	800a9ac <_Bfree>
 800a5aa:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	6013      	str	r3, [r2, #0]
 800a5b0:	2750      	movs	r7, #80	; 0x50
 800a5b2:	e70c      	b.n	800a3ce <__gethex+0x12a>
 800a5b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d1f2      	bne.n	800a5a0 <__gethex+0x2fc>
 800a5ba:	e7d8      	b.n	800a56e <__gethex+0x2ca>
 800a5bc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d1d5      	bne.n	800a56e <__gethex+0x2ca>
 800a5c2:	e7ed      	b.n	800a5a0 <__gethex+0x2fc>
 800a5c4:	1e6f      	subs	r7, r5, #1
 800a5c6:	f1ba 0f00 	cmp.w	sl, #0
 800a5ca:	d131      	bne.n	800a630 <__gethex+0x38c>
 800a5cc:	b127      	cbz	r7, 800a5d8 <__gethex+0x334>
 800a5ce:	4639      	mov	r1, r7
 800a5d0:	4620      	mov	r0, r4
 800a5d2:	f000 fe4b 	bl	800b26c <__any_on>
 800a5d6:	4682      	mov	sl, r0
 800a5d8:	117b      	asrs	r3, r7, #5
 800a5da:	2101      	movs	r1, #1
 800a5dc:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800a5e0:	f007 071f 	and.w	r7, r7, #31
 800a5e4:	fa01 f707 	lsl.w	r7, r1, r7
 800a5e8:	421f      	tst	r7, r3
 800a5ea:	4629      	mov	r1, r5
 800a5ec:	4620      	mov	r0, r4
 800a5ee:	bf18      	it	ne
 800a5f0:	f04a 0a02 	orrne.w	sl, sl, #2
 800a5f4:	1b76      	subs	r6, r6, r5
 800a5f6:	f7ff fded 	bl	800a1d4 <rshift>
 800a5fa:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a5fe:	2702      	movs	r7, #2
 800a600:	f1ba 0f00 	cmp.w	sl, #0
 800a604:	d048      	beq.n	800a698 <__gethex+0x3f4>
 800a606:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a60a:	2b02      	cmp	r3, #2
 800a60c:	d015      	beq.n	800a63a <__gethex+0x396>
 800a60e:	2b03      	cmp	r3, #3
 800a610:	d017      	beq.n	800a642 <__gethex+0x39e>
 800a612:	2b01      	cmp	r3, #1
 800a614:	d109      	bne.n	800a62a <__gethex+0x386>
 800a616:	f01a 0f02 	tst.w	sl, #2
 800a61a:	d006      	beq.n	800a62a <__gethex+0x386>
 800a61c:	f8d9 0000 	ldr.w	r0, [r9]
 800a620:	ea4a 0a00 	orr.w	sl, sl, r0
 800a624:	f01a 0f01 	tst.w	sl, #1
 800a628:	d10e      	bne.n	800a648 <__gethex+0x3a4>
 800a62a:	f047 0710 	orr.w	r7, r7, #16
 800a62e:	e033      	b.n	800a698 <__gethex+0x3f4>
 800a630:	f04f 0a01 	mov.w	sl, #1
 800a634:	e7d0      	b.n	800a5d8 <__gethex+0x334>
 800a636:	2701      	movs	r7, #1
 800a638:	e7e2      	b.n	800a600 <__gethex+0x35c>
 800a63a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a63c:	f1c3 0301 	rsb	r3, r3, #1
 800a640:	9315      	str	r3, [sp, #84]	; 0x54
 800a642:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a644:	2b00      	cmp	r3, #0
 800a646:	d0f0      	beq.n	800a62a <__gethex+0x386>
 800a648:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a64c:	f104 0314 	add.w	r3, r4, #20
 800a650:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a654:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a658:	f04f 0c00 	mov.w	ip, #0
 800a65c:	4618      	mov	r0, r3
 800a65e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a662:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800a666:	d01c      	beq.n	800a6a2 <__gethex+0x3fe>
 800a668:	3201      	adds	r2, #1
 800a66a:	6002      	str	r2, [r0, #0]
 800a66c:	2f02      	cmp	r7, #2
 800a66e:	f104 0314 	add.w	r3, r4, #20
 800a672:	d13f      	bne.n	800a6f4 <__gethex+0x450>
 800a674:	f8d8 2000 	ldr.w	r2, [r8]
 800a678:	3a01      	subs	r2, #1
 800a67a:	42b2      	cmp	r2, r6
 800a67c:	d10a      	bne.n	800a694 <__gethex+0x3f0>
 800a67e:	1171      	asrs	r1, r6, #5
 800a680:	2201      	movs	r2, #1
 800a682:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a686:	f006 061f 	and.w	r6, r6, #31
 800a68a:	fa02 f606 	lsl.w	r6, r2, r6
 800a68e:	421e      	tst	r6, r3
 800a690:	bf18      	it	ne
 800a692:	4617      	movne	r7, r2
 800a694:	f047 0720 	orr.w	r7, r7, #32
 800a698:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a69a:	601c      	str	r4, [r3, #0]
 800a69c:	9b04      	ldr	r3, [sp, #16]
 800a69e:	601d      	str	r5, [r3, #0]
 800a6a0:	e695      	b.n	800a3ce <__gethex+0x12a>
 800a6a2:	4299      	cmp	r1, r3
 800a6a4:	f843 cc04 	str.w	ip, [r3, #-4]
 800a6a8:	d8d8      	bhi.n	800a65c <__gethex+0x3b8>
 800a6aa:	68a3      	ldr	r3, [r4, #8]
 800a6ac:	459b      	cmp	fp, r3
 800a6ae:	db19      	blt.n	800a6e4 <__gethex+0x440>
 800a6b0:	6861      	ldr	r1, [r4, #4]
 800a6b2:	ee18 0a10 	vmov	r0, s16
 800a6b6:	3101      	adds	r1, #1
 800a6b8:	f000 f938 	bl	800a92c <_Balloc>
 800a6bc:	4681      	mov	r9, r0
 800a6be:	b918      	cbnz	r0, 800a6c8 <__gethex+0x424>
 800a6c0:	4b1a      	ldr	r3, [pc, #104]	; (800a72c <__gethex+0x488>)
 800a6c2:	4602      	mov	r2, r0
 800a6c4:	2184      	movs	r1, #132	; 0x84
 800a6c6:	e6a8      	b.n	800a41a <__gethex+0x176>
 800a6c8:	6922      	ldr	r2, [r4, #16]
 800a6ca:	3202      	adds	r2, #2
 800a6cc:	f104 010c 	add.w	r1, r4, #12
 800a6d0:	0092      	lsls	r2, r2, #2
 800a6d2:	300c      	adds	r0, #12
 800a6d4:	f7fc fecd 	bl	8007472 <memcpy>
 800a6d8:	4621      	mov	r1, r4
 800a6da:	ee18 0a10 	vmov	r0, s16
 800a6de:	f000 f965 	bl	800a9ac <_Bfree>
 800a6e2:	464c      	mov	r4, r9
 800a6e4:	6923      	ldr	r3, [r4, #16]
 800a6e6:	1c5a      	adds	r2, r3, #1
 800a6e8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a6ec:	6122      	str	r2, [r4, #16]
 800a6ee:	2201      	movs	r2, #1
 800a6f0:	615a      	str	r2, [r3, #20]
 800a6f2:	e7bb      	b.n	800a66c <__gethex+0x3c8>
 800a6f4:	6922      	ldr	r2, [r4, #16]
 800a6f6:	455a      	cmp	r2, fp
 800a6f8:	dd0b      	ble.n	800a712 <__gethex+0x46e>
 800a6fa:	2101      	movs	r1, #1
 800a6fc:	4620      	mov	r0, r4
 800a6fe:	f7ff fd69 	bl	800a1d4 <rshift>
 800a702:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a706:	3501      	adds	r5, #1
 800a708:	42ab      	cmp	r3, r5
 800a70a:	f6ff aed0 	blt.w	800a4ae <__gethex+0x20a>
 800a70e:	2701      	movs	r7, #1
 800a710:	e7c0      	b.n	800a694 <__gethex+0x3f0>
 800a712:	f016 061f 	ands.w	r6, r6, #31
 800a716:	d0fa      	beq.n	800a70e <__gethex+0x46a>
 800a718:	4453      	add	r3, sl
 800a71a:	f1c6 0620 	rsb	r6, r6, #32
 800a71e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a722:	f000 f9f5 	bl	800ab10 <__hi0bits>
 800a726:	42b0      	cmp	r0, r6
 800a728:	dbe7      	blt.n	800a6fa <__gethex+0x456>
 800a72a:	e7f0      	b.n	800a70e <__gethex+0x46a>
 800a72c:	0800c38d 	.word	0x0800c38d

0800a730 <L_shift>:
 800a730:	f1c2 0208 	rsb	r2, r2, #8
 800a734:	0092      	lsls	r2, r2, #2
 800a736:	b570      	push	{r4, r5, r6, lr}
 800a738:	f1c2 0620 	rsb	r6, r2, #32
 800a73c:	6843      	ldr	r3, [r0, #4]
 800a73e:	6804      	ldr	r4, [r0, #0]
 800a740:	fa03 f506 	lsl.w	r5, r3, r6
 800a744:	432c      	orrs	r4, r5
 800a746:	40d3      	lsrs	r3, r2
 800a748:	6004      	str	r4, [r0, #0]
 800a74a:	f840 3f04 	str.w	r3, [r0, #4]!
 800a74e:	4288      	cmp	r0, r1
 800a750:	d3f4      	bcc.n	800a73c <L_shift+0xc>
 800a752:	bd70      	pop	{r4, r5, r6, pc}

0800a754 <__match>:
 800a754:	b530      	push	{r4, r5, lr}
 800a756:	6803      	ldr	r3, [r0, #0]
 800a758:	3301      	adds	r3, #1
 800a75a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a75e:	b914      	cbnz	r4, 800a766 <__match+0x12>
 800a760:	6003      	str	r3, [r0, #0]
 800a762:	2001      	movs	r0, #1
 800a764:	bd30      	pop	{r4, r5, pc}
 800a766:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a76a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a76e:	2d19      	cmp	r5, #25
 800a770:	bf98      	it	ls
 800a772:	3220      	addls	r2, #32
 800a774:	42a2      	cmp	r2, r4
 800a776:	d0f0      	beq.n	800a75a <__match+0x6>
 800a778:	2000      	movs	r0, #0
 800a77a:	e7f3      	b.n	800a764 <__match+0x10>

0800a77c <__hexnan>:
 800a77c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a780:	680b      	ldr	r3, [r1, #0]
 800a782:	115e      	asrs	r6, r3, #5
 800a784:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a788:	f013 031f 	ands.w	r3, r3, #31
 800a78c:	b087      	sub	sp, #28
 800a78e:	bf18      	it	ne
 800a790:	3604      	addne	r6, #4
 800a792:	2500      	movs	r5, #0
 800a794:	1f37      	subs	r7, r6, #4
 800a796:	4690      	mov	r8, r2
 800a798:	6802      	ldr	r2, [r0, #0]
 800a79a:	9301      	str	r3, [sp, #4]
 800a79c:	4682      	mov	sl, r0
 800a79e:	f846 5c04 	str.w	r5, [r6, #-4]
 800a7a2:	46b9      	mov	r9, r7
 800a7a4:	463c      	mov	r4, r7
 800a7a6:	9502      	str	r5, [sp, #8]
 800a7a8:	46ab      	mov	fp, r5
 800a7aa:	7851      	ldrb	r1, [r2, #1]
 800a7ac:	1c53      	adds	r3, r2, #1
 800a7ae:	9303      	str	r3, [sp, #12]
 800a7b0:	b341      	cbz	r1, 800a804 <__hexnan+0x88>
 800a7b2:	4608      	mov	r0, r1
 800a7b4:	9205      	str	r2, [sp, #20]
 800a7b6:	9104      	str	r1, [sp, #16]
 800a7b8:	f7ff fd5e 	bl	800a278 <__hexdig_fun>
 800a7bc:	2800      	cmp	r0, #0
 800a7be:	d14f      	bne.n	800a860 <__hexnan+0xe4>
 800a7c0:	9904      	ldr	r1, [sp, #16]
 800a7c2:	9a05      	ldr	r2, [sp, #20]
 800a7c4:	2920      	cmp	r1, #32
 800a7c6:	d818      	bhi.n	800a7fa <__hexnan+0x7e>
 800a7c8:	9b02      	ldr	r3, [sp, #8]
 800a7ca:	459b      	cmp	fp, r3
 800a7cc:	dd13      	ble.n	800a7f6 <__hexnan+0x7a>
 800a7ce:	454c      	cmp	r4, r9
 800a7d0:	d206      	bcs.n	800a7e0 <__hexnan+0x64>
 800a7d2:	2d07      	cmp	r5, #7
 800a7d4:	dc04      	bgt.n	800a7e0 <__hexnan+0x64>
 800a7d6:	462a      	mov	r2, r5
 800a7d8:	4649      	mov	r1, r9
 800a7da:	4620      	mov	r0, r4
 800a7dc:	f7ff ffa8 	bl	800a730 <L_shift>
 800a7e0:	4544      	cmp	r4, r8
 800a7e2:	d950      	bls.n	800a886 <__hexnan+0x10a>
 800a7e4:	2300      	movs	r3, #0
 800a7e6:	f1a4 0904 	sub.w	r9, r4, #4
 800a7ea:	f844 3c04 	str.w	r3, [r4, #-4]
 800a7ee:	f8cd b008 	str.w	fp, [sp, #8]
 800a7f2:	464c      	mov	r4, r9
 800a7f4:	461d      	mov	r5, r3
 800a7f6:	9a03      	ldr	r2, [sp, #12]
 800a7f8:	e7d7      	b.n	800a7aa <__hexnan+0x2e>
 800a7fa:	2929      	cmp	r1, #41	; 0x29
 800a7fc:	d156      	bne.n	800a8ac <__hexnan+0x130>
 800a7fe:	3202      	adds	r2, #2
 800a800:	f8ca 2000 	str.w	r2, [sl]
 800a804:	f1bb 0f00 	cmp.w	fp, #0
 800a808:	d050      	beq.n	800a8ac <__hexnan+0x130>
 800a80a:	454c      	cmp	r4, r9
 800a80c:	d206      	bcs.n	800a81c <__hexnan+0xa0>
 800a80e:	2d07      	cmp	r5, #7
 800a810:	dc04      	bgt.n	800a81c <__hexnan+0xa0>
 800a812:	462a      	mov	r2, r5
 800a814:	4649      	mov	r1, r9
 800a816:	4620      	mov	r0, r4
 800a818:	f7ff ff8a 	bl	800a730 <L_shift>
 800a81c:	4544      	cmp	r4, r8
 800a81e:	d934      	bls.n	800a88a <__hexnan+0x10e>
 800a820:	f1a8 0204 	sub.w	r2, r8, #4
 800a824:	4623      	mov	r3, r4
 800a826:	f853 1b04 	ldr.w	r1, [r3], #4
 800a82a:	f842 1f04 	str.w	r1, [r2, #4]!
 800a82e:	429f      	cmp	r7, r3
 800a830:	d2f9      	bcs.n	800a826 <__hexnan+0xaa>
 800a832:	1b3b      	subs	r3, r7, r4
 800a834:	f023 0303 	bic.w	r3, r3, #3
 800a838:	3304      	adds	r3, #4
 800a83a:	3401      	adds	r4, #1
 800a83c:	3e03      	subs	r6, #3
 800a83e:	42b4      	cmp	r4, r6
 800a840:	bf88      	it	hi
 800a842:	2304      	movhi	r3, #4
 800a844:	4443      	add	r3, r8
 800a846:	2200      	movs	r2, #0
 800a848:	f843 2b04 	str.w	r2, [r3], #4
 800a84c:	429f      	cmp	r7, r3
 800a84e:	d2fb      	bcs.n	800a848 <__hexnan+0xcc>
 800a850:	683b      	ldr	r3, [r7, #0]
 800a852:	b91b      	cbnz	r3, 800a85c <__hexnan+0xe0>
 800a854:	4547      	cmp	r7, r8
 800a856:	d127      	bne.n	800a8a8 <__hexnan+0x12c>
 800a858:	2301      	movs	r3, #1
 800a85a:	603b      	str	r3, [r7, #0]
 800a85c:	2005      	movs	r0, #5
 800a85e:	e026      	b.n	800a8ae <__hexnan+0x132>
 800a860:	3501      	adds	r5, #1
 800a862:	2d08      	cmp	r5, #8
 800a864:	f10b 0b01 	add.w	fp, fp, #1
 800a868:	dd06      	ble.n	800a878 <__hexnan+0xfc>
 800a86a:	4544      	cmp	r4, r8
 800a86c:	d9c3      	bls.n	800a7f6 <__hexnan+0x7a>
 800a86e:	2300      	movs	r3, #0
 800a870:	f844 3c04 	str.w	r3, [r4, #-4]
 800a874:	2501      	movs	r5, #1
 800a876:	3c04      	subs	r4, #4
 800a878:	6822      	ldr	r2, [r4, #0]
 800a87a:	f000 000f 	and.w	r0, r0, #15
 800a87e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800a882:	6022      	str	r2, [r4, #0]
 800a884:	e7b7      	b.n	800a7f6 <__hexnan+0x7a>
 800a886:	2508      	movs	r5, #8
 800a888:	e7b5      	b.n	800a7f6 <__hexnan+0x7a>
 800a88a:	9b01      	ldr	r3, [sp, #4]
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d0df      	beq.n	800a850 <__hexnan+0xd4>
 800a890:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a894:	f1c3 0320 	rsb	r3, r3, #32
 800a898:	fa22 f303 	lsr.w	r3, r2, r3
 800a89c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a8a0:	401a      	ands	r2, r3
 800a8a2:	f846 2c04 	str.w	r2, [r6, #-4]
 800a8a6:	e7d3      	b.n	800a850 <__hexnan+0xd4>
 800a8a8:	3f04      	subs	r7, #4
 800a8aa:	e7d1      	b.n	800a850 <__hexnan+0xd4>
 800a8ac:	2004      	movs	r0, #4
 800a8ae:	b007      	add	sp, #28
 800a8b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a8b4 <_localeconv_r>:
 800a8b4:	4800      	ldr	r0, [pc, #0]	; (800a8b8 <_localeconv_r+0x4>)
 800a8b6:	4770      	bx	lr
 800a8b8:	20000168 	.word	0x20000168

0800a8bc <_lseek_r>:
 800a8bc:	b538      	push	{r3, r4, r5, lr}
 800a8be:	4d07      	ldr	r5, [pc, #28]	; (800a8dc <_lseek_r+0x20>)
 800a8c0:	4604      	mov	r4, r0
 800a8c2:	4608      	mov	r0, r1
 800a8c4:	4611      	mov	r1, r2
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	602a      	str	r2, [r5, #0]
 800a8ca:	461a      	mov	r2, r3
 800a8cc:	f7f7 f87e 	bl	80019cc <_lseek>
 800a8d0:	1c43      	adds	r3, r0, #1
 800a8d2:	d102      	bne.n	800a8da <_lseek_r+0x1e>
 800a8d4:	682b      	ldr	r3, [r5, #0]
 800a8d6:	b103      	cbz	r3, 800a8da <_lseek_r+0x1e>
 800a8d8:	6023      	str	r3, [r4, #0]
 800a8da:	bd38      	pop	{r3, r4, r5, pc}
 800a8dc:	20004ce8 	.word	0x20004ce8

0800a8e0 <malloc>:
 800a8e0:	4b02      	ldr	r3, [pc, #8]	; (800a8ec <malloc+0xc>)
 800a8e2:	4601      	mov	r1, r0
 800a8e4:	6818      	ldr	r0, [r3, #0]
 800a8e6:	f7fc bdfb 	b.w	80074e0 <_malloc_r>
 800a8ea:	bf00      	nop
 800a8ec:	20000010 	.word	0x20000010

0800a8f0 <__ascii_mbtowc>:
 800a8f0:	b082      	sub	sp, #8
 800a8f2:	b901      	cbnz	r1, 800a8f6 <__ascii_mbtowc+0x6>
 800a8f4:	a901      	add	r1, sp, #4
 800a8f6:	b142      	cbz	r2, 800a90a <__ascii_mbtowc+0x1a>
 800a8f8:	b14b      	cbz	r3, 800a90e <__ascii_mbtowc+0x1e>
 800a8fa:	7813      	ldrb	r3, [r2, #0]
 800a8fc:	600b      	str	r3, [r1, #0]
 800a8fe:	7812      	ldrb	r2, [r2, #0]
 800a900:	1e10      	subs	r0, r2, #0
 800a902:	bf18      	it	ne
 800a904:	2001      	movne	r0, #1
 800a906:	b002      	add	sp, #8
 800a908:	4770      	bx	lr
 800a90a:	4610      	mov	r0, r2
 800a90c:	e7fb      	b.n	800a906 <__ascii_mbtowc+0x16>
 800a90e:	f06f 0001 	mvn.w	r0, #1
 800a912:	e7f8      	b.n	800a906 <__ascii_mbtowc+0x16>

0800a914 <__malloc_lock>:
 800a914:	4801      	ldr	r0, [pc, #4]	; (800a91c <__malloc_lock+0x8>)
 800a916:	f7fc bdaa 	b.w	800746e <__retarget_lock_acquire_recursive>
 800a91a:	bf00      	nop
 800a91c:	20004cdc 	.word	0x20004cdc

0800a920 <__malloc_unlock>:
 800a920:	4801      	ldr	r0, [pc, #4]	; (800a928 <__malloc_unlock+0x8>)
 800a922:	f7fc bda5 	b.w	8007470 <__retarget_lock_release_recursive>
 800a926:	bf00      	nop
 800a928:	20004cdc 	.word	0x20004cdc

0800a92c <_Balloc>:
 800a92c:	b570      	push	{r4, r5, r6, lr}
 800a92e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a930:	4604      	mov	r4, r0
 800a932:	460d      	mov	r5, r1
 800a934:	b976      	cbnz	r6, 800a954 <_Balloc+0x28>
 800a936:	2010      	movs	r0, #16
 800a938:	f7ff ffd2 	bl	800a8e0 <malloc>
 800a93c:	4602      	mov	r2, r0
 800a93e:	6260      	str	r0, [r4, #36]	; 0x24
 800a940:	b920      	cbnz	r0, 800a94c <_Balloc+0x20>
 800a942:	4b18      	ldr	r3, [pc, #96]	; (800a9a4 <_Balloc+0x78>)
 800a944:	4818      	ldr	r0, [pc, #96]	; (800a9a8 <_Balloc+0x7c>)
 800a946:	2166      	movs	r1, #102	; 0x66
 800a948:	f7fe fcc8 	bl	80092dc <__assert_func>
 800a94c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a950:	6006      	str	r6, [r0, #0]
 800a952:	60c6      	str	r6, [r0, #12]
 800a954:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a956:	68f3      	ldr	r3, [r6, #12]
 800a958:	b183      	cbz	r3, 800a97c <_Balloc+0x50>
 800a95a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a95c:	68db      	ldr	r3, [r3, #12]
 800a95e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a962:	b9b8      	cbnz	r0, 800a994 <_Balloc+0x68>
 800a964:	2101      	movs	r1, #1
 800a966:	fa01 f605 	lsl.w	r6, r1, r5
 800a96a:	1d72      	adds	r2, r6, #5
 800a96c:	0092      	lsls	r2, r2, #2
 800a96e:	4620      	mov	r0, r4
 800a970:	f000 fc9d 	bl	800b2ae <_calloc_r>
 800a974:	b160      	cbz	r0, 800a990 <_Balloc+0x64>
 800a976:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a97a:	e00e      	b.n	800a99a <_Balloc+0x6e>
 800a97c:	2221      	movs	r2, #33	; 0x21
 800a97e:	2104      	movs	r1, #4
 800a980:	4620      	mov	r0, r4
 800a982:	f000 fc94 	bl	800b2ae <_calloc_r>
 800a986:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a988:	60f0      	str	r0, [r6, #12]
 800a98a:	68db      	ldr	r3, [r3, #12]
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d1e4      	bne.n	800a95a <_Balloc+0x2e>
 800a990:	2000      	movs	r0, #0
 800a992:	bd70      	pop	{r4, r5, r6, pc}
 800a994:	6802      	ldr	r2, [r0, #0]
 800a996:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a99a:	2300      	movs	r3, #0
 800a99c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a9a0:	e7f7      	b.n	800a992 <_Balloc+0x66>
 800a9a2:	bf00      	nop
 800a9a4:	0800c125 	.word	0x0800c125
 800a9a8:	0800c418 	.word	0x0800c418

0800a9ac <_Bfree>:
 800a9ac:	b570      	push	{r4, r5, r6, lr}
 800a9ae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a9b0:	4605      	mov	r5, r0
 800a9b2:	460c      	mov	r4, r1
 800a9b4:	b976      	cbnz	r6, 800a9d4 <_Bfree+0x28>
 800a9b6:	2010      	movs	r0, #16
 800a9b8:	f7ff ff92 	bl	800a8e0 <malloc>
 800a9bc:	4602      	mov	r2, r0
 800a9be:	6268      	str	r0, [r5, #36]	; 0x24
 800a9c0:	b920      	cbnz	r0, 800a9cc <_Bfree+0x20>
 800a9c2:	4b09      	ldr	r3, [pc, #36]	; (800a9e8 <_Bfree+0x3c>)
 800a9c4:	4809      	ldr	r0, [pc, #36]	; (800a9ec <_Bfree+0x40>)
 800a9c6:	218a      	movs	r1, #138	; 0x8a
 800a9c8:	f7fe fc88 	bl	80092dc <__assert_func>
 800a9cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a9d0:	6006      	str	r6, [r0, #0]
 800a9d2:	60c6      	str	r6, [r0, #12]
 800a9d4:	b13c      	cbz	r4, 800a9e6 <_Bfree+0x3a>
 800a9d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a9d8:	6862      	ldr	r2, [r4, #4]
 800a9da:	68db      	ldr	r3, [r3, #12]
 800a9dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a9e0:	6021      	str	r1, [r4, #0]
 800a9e2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a9e6:	bd70      	pop	{r4, r5, r6, pc}
 800a9e8:	0800c125 	.word	0x0800c125
 800a9ec:	0800c418 	.word	0x0800c418

0800a9f0 <__multadd>:
 800a9f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9f4:	690d      	ldr	r5, [r1, #16]
 800a9f6:	4607      	mov	r7, r0
 800a9f8:	460c      	mov	r4, r1
 800a9fa:	461e      	mov	r6, r3
 800a9fc:	f101 0c14 	add.w	ip, r1, #20
 800aa00:	2000      	movs	r0, #0
 800aa02:	f8dc 3000 	ldr.w	r3, [ip]
 800aa06:	b299      	uxth	r1, r3
 800aa08:	fb02 6101 	mla	r1, r2, r1, r6
 800aa0c:	0c1e      	lsrs	r6, r3, #16
 800aa0e:	0c0b      	lsrs	r3, r1, #16
 800aa10:	fb02 3306 	mla	r3, r2, r6, r3
 800aa14:	b289      	uxth	r1, r1
 800aa16:	3001      	adds	r0, #1
 800aa18:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800aa1c:	4285      	cmp	r5, r0
 800aa1e:	f84c 1b04 	str.w	r1, [ip], #4
 800aa22:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800aa26:	dcec      	bgt.n	800aa02 <__multadd+0x12>
 800aa28:	b30e      	cbz	r6, 800aa6e <__multadd+0x7e>
 800aa2a:	68a3      	ldr	r3, [r4, #8]
 800aa2c:	42ab      	cmp	r3, r5
 800aa2e:	dc19      	bgt.n	800aa64 <__multadd+0x74>
 800aa30:	6861      	ldr	r1, [r4, #4]
 800aa32:	4638      	mov	r0, r7
 800aa34:	3101      	adds	r1, #1
 800aa36:	f7ff ff79 	bl	800a92c <_Balloc>
 800aa3a:	4680      	mov	r8, r0
 800aa3c:	b928      	cbnz	r0, 800aa4a <__multadd+0x5a>
 800aa3e:	4602      	mov	r2, r0
 800aa40:	4b0c      	ldr	r3, [pc, #48]	; (800aa74 <__multadd+0x84>)
 800aa42:	480d      	ldr	r0, [pc, #52]	; (800aa78 <__multadd+0x88>)
 800aa44:	21b5      	movs	r1, #181	; 0xb5
 800aa46:	f7fe fc49 	bl	80092dc <__assert_func>
 800aa4a:	6922      	ldr	r2, [r4, #16]
 800aa4c:	3202      	adds	r2, #2
 800aa4e:	f104 010c 	add.w	r1, r4, #12
 800aa52:	0092      	lsls	r2, r2, #2
 800aa54:	300c      	adds	r0, #12
 800aa56:	f7fc fd0c 	bl	8007472 <memcpy>
 800aa5a:	4621      	mov	r1, r4
 800aa5c:	4638      	mov	r0, r7
 800aa5e:	f7ff ffa5 	bl	800a9ac <_Bfree>
 800aa62:	4644      	mov	r4, r8
 800aa64:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800aa68:	3501      	adds	r5, #1
 800aa6a:	615e      	str	r6, [r3, #20]
 800aa6c:	6125      	str	r5, [r4, #16]
 800aa6e:	4620      	mov	r0, r4
 800aa70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa74:	0800c38d 	.word	0x0800c38d
 800aa78:	0800c418 	.word	0x0800c418

0800aa7c <__s2b>:
 800aa7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa80:	460c      	mov	r4, r1
 800aa82:	4615      	mov	r5, r2
 800aa84:	461f      	mov	r7, r3
 800aa86:	2209      	movs	r2, #9
 800aa88:	3308      	adds	r3, #8
 800aa8a:	4606      	mov	r6, r0
 800aa8c:	fb93 f3f2 	sdiv	r3, r3, r2
 800aa90:	2100      	movs	r1, #0
 800aa92:	2201      	movs	r2, #1
 800aa94:	429a      	cmp	r2, r3
 800aa96:	db09      	blt.n	800aaac <__s2b+0x30>
 800aa98:	4630      	mov	r0, r6
 800aa9a:	f7ff ff47 	bl	800a92c <_Balloc>
 800aa9e:	b940      	cbnz	r0, 800aab2 <__s2b+0x36>
 800aaa0:	4602      	mov	r2, r0
 800aaa2:	4b19      	ldr	r3, [pc, #100]	; (800ab08 <__s2b+0x8c>)
 800aaa4:	4819      	ldr	r0, [pc, #100]	; (800ab0c <__s2b+0x90>)
 800aaa6:	21ce      	movs	r1, #206	; 0xce
 800aaa8:	f7fe fc18 	bl	80092dc <__assert_func>
 800aaac:	0052      	lsls	r2, r2, #1
 800aaae:	3101      	adds	r1, #1
 800aab0:	e7f0      	b.n	800aa94 <__s2b+0x18>
 800aab2:	9b08      	ldr	r3, [sp, #32]
 800aab4:	6143      	str	r3, [r0, #20]
 800aab6:	2d09      	cmp	r5, #9
 800aab8:	f04f 0301 	mov.w	r3, #1
 800aabc:	6103      	str	r3, [r0, #16]
 800aabe:	dd16      	ble.n	800aaee <__s2b+0x72>
 800aac0:	f104 0909 	add.w	r9, r4, #9
 800aac4:	46c8      	mov	r8, r9
 800aac6:	442c      	add	r4, r5
 800aac8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800aacc:	4601      	mov	r1, r0
 800aace:	3b30      	subs	r3, #48	; 0x30
 800aad0:	220a      	movs	r2, #10
 800aad2:	4630      	mov	r0, r6
 800aad4:	f7ff ff8c 	bl	800a9f0 <__multadd>
 800aad8:	45a0      	cmp	r8, r4
 800aada:	d1f5      	bne.n	800aac8 <__s2b+0x4c>
 800aadc:	f1a5 0408 	sub.w	r4, r5, #8
 800aae0:	444c      	add	r4, r9
 800aae2:	1b2d      	subs	r5, r5, r4
 800aae4:	1963      	adds	r3, r4, r5
 800aae6:	42bb      	cmp	r3, r7
 800aae8:	db04      	blt.n	800aaf4 <__s2b+0x78>
 800aaea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aaee:	340a      	adds	r4, #10
 800aaf0:	2509      	movs	r5, #9
 800aaf2:	e7f6      	b.n	800aae2 <__s2b+0x66>
 800aaf4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800aaf8:	4601      	mov	r1, r0
 800aafa:	3b30      	subs	r3, #48	; 0x30
 800aafc:	220a      	movs	r2, #10
 800aafe:	4630      	mov	r0, r6
 800ab00:	f7ff ff76 	bl	800a9f0 <__multadd>
 800ab04:	e7ee      	b.n	800aae4 <__s2b+0x68>
 800ab06:	bf00      	nop
 800ab08:	0800c38d 	.word	0x0800c38d
 800ab0c:	0800c418 	.word	0x0800c418

0800ab10 <__hi0bits>:
 800ab10:	0c03      	lsrs	r3, r0, #16
 800ab12:	041b      	lsls	r3, r3, #16
 800ab14:	b9d3      	cbnz	r3, 800ab4c <__hi0bits+0x3c>
 800ab16:	0400      	lsls	r0, r0, #16
 800ab18:	2310      	movs	r3, #16
 800ab1a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ab1e:	bf04      	itt	eq
 800ab20:	0200      	lsleq	r0, r0, #8
 800ab22:	3308      	addeq	r3, #8
 800ab24:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ab28:	bf04      	itt	eq
 800ab2a:	0100      	lsleq	r0, r0, #4
 800ab2c:	3304      	addeq	r3, #4
 800ab2e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ab32:	bf04      	itt	eq
 800ab34:	0080      	lsleq	r0, r0, #2
 800ab36:	3302      	addeq	r3, #2
 800ab38:	2800      	cmp	r0, #0
 800ab3a:	db05      	blt.n	800ab48 <__hi0bits+0x38>
 800ab3c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ab40:	f103 0301 	add.w	r3, r3, #1
 800ab44:	bf08      	it	eq
 800ab46:	2320      	moveq	r3, #32
 800ab48:	4618      	mov	r0, r3
 800ab4a:	4770      	bx	lr
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	e7e4      	b.n	800ab1a <__hi0bits+0xa>

0800ab50 <__lo0bits>:
 800ab50:	6803      	ldr	r3, [r0, #0]
 800ab52:	f013 0207 	ands.w	r2, r3, #7
 800ab56:	4601      	mov	r1, r0
 800ab58:	d00b      	beq.n	800ab72 <__lo0bits+0x22>
 800ab5a:	07da      	lsls	r2, r3, #31
 800ab5c:	d423      	bmi.n	800aba6 <__lo0bits+0x56>
 800ab5e:	0798      	lsls	r0, r3, #30
 800ab60:	bf49      	itett	mi
 800ab62:	085b      	lsrmi	r3, r3, #1
 800ab64:	089b      	lsrpl	r3, r3, #2
 800ab66:	2001      	movmi	r0, #1
 800ab68:	600b      	strmi	r3, [r1, #0]
 800ab6a:	bf5c      	itt	pl
 800ab6c:	600b      	strpl	r3, [r1, #0]
 800ab6e:	2002      	movpl	r0, #2
 800ab70:	4770      	bx	lr
 800ab72:	b298      	uxth	r0, r3
 800ab74:	b9a8      	cbnz	r0, 800aba2 <__lo0bits+0x52>
 800ab76:	0c1b      	lsrs	r3, r3, #16
 800ab78:	2010      	movs	r0, #16
 800ab7a:	b2da      	uxtb	r2, r3
 800ab7c:	b90a      	cbnz	r2, 800ab82 <__lo0bits+0x32>
 800ab7e:	3008      	adds	r0, #8
 800ab80:	0a1b      	lsrs	r3, r3, #8
 800ab82:	071a      	lsls	r2, r3, #28
 800ab84:	bf04      	itt	eq
 800ab86:	091b      	lsreq	r3, r3, #4
 800ab88:	3004      	addeq	r0, #4
 800ab8a:	079a      	lsls	r2, r3, #30
 800ab8c:	bf04      	itt	eq
 800ab8e:	089b      	lsreq	r3, r3, #2
 800ab90:	3002      	addeq	r0, #2
 800ab92:	07da      	lsls	r2, r3, #31
 800ab94:	d403      	bmi.n	800ab9e <__lo0bits+0x4e>
 800ab96:	085b      	lsrs	r3, r3, #1
 800ab98:	f100 0001 	add.w	r0, r0, #1
 800ab9c:	d005      	beq.n	800abaa <__lo0bits+0x5a>
 800ab9e:	600b      	str	r3, [r1, #0]
 800aba0:	4770      	bx	lr
 800aba2:	4610      	mov	r0, r2
 800aba4:	e7e9      	b.n	800ab7a <__lo0bits+0x2a>
 800aba6:	2000      	movs	r0, #0
 800aba8:	4770      	bx	lr
 800abaa:	2020      	movs	r0, #32
 800abac:	4770      	bx	lr
	...

0800abb0 <__i2b>:
 800abb0:	b510      	push	{r4, lr}
 800abb2:	460c      	mov	r4, r1
 800abb4:	2101      	movs	r1, #1
 800abb6:	f7ff feb9 	bl	800a92c <_Balloc>
 800abba:	4602      	mov	r2, r0
 800abbc:	b928      	cbnz	r0, 800abca <__i2b+0x1a>
 800abbe:	4b05      	ldr	r3, [pc, #20]	; (800abd4 <__i2b+0x24>)
 800abc0:	4805      	ldr	r0, [pc, #20]	; (800abd8 <__i2b+0x28>)
 800abc2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800abc6:	f7fe fb89 	bl	80092dc <__assert_func>
 800abca:	2301      	movs	r3, #1
 800abcc:	6144      	str	r4, [r0, #20]
 800abce:	6103      	str	r3, [r0, #16]
 800abd0:	bd10      	pop	{r4, pc}
 800abd2:	bf00      	nop
 800abd4:	0800c38d 	.word	0x0800c38d
 800abd8:	0800c418 	.word	0x0800c418

0800abdc <__multiply>:
 800abdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abe0:	4691      	mov	r9, r2
 800abe2:	690a      	ldr	r2, [r1, #16]
 800abe4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800abe8:	429a      	cmp	r2, r3
 800abea:	bfb8      	it	lt
 800abec:	460b      	movlt	r3, r1
 800abee:	460c      	mov	r4, r1
 800abf0:	bfbc      	itt	lt
 800abf2:	464c      	movlt	r4, r9
 800abf4:	4699      	movlt	r9, r3
 800abf6:	6927      	ldr	r7, [r4, #16]
 800abf8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800abfc:	68a3      	ldr	r3, [r4, #8]
 800abfe:	6861      	ldr	r1, [r4, #4]
 800ac00:	eb07 060a 	add.w	r6, r7, sl
 800ac04:	42b3      	cmp	r3, r6
 800ac06:	b085      	sub	sp, #20
 800ac08:	bfb8      	it	lt
 800ac0a:	3101      	addlt	r1, #1
 800ac0c:	f7ff fe8e 	bl	800a92c <_Balloc>
 800ac10:	b930      	cbnz	r0, 800ac20 <__multiply+0x44>
 800ac12:	4602      	mov	r2, r0
 800ac14:	4b44      	ldr	r3, [pc, #272]	; (800ad28 <__multiply+0x14c>)
 800ac16:	4845      	ldr	r0, [pc, #276]	; (800ad2c <__multiply+0x150>)
 800ac18:	f240 115d 	movw	r1, #349	; 0x15d
 800ac1c:	f7fe fb5e 	bl	80092dc <__assert_func>
 800ac20:	f100 0514 	add.w	r5, r0, #20
 800ac24:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ac28:	462b      	mov	r3, r5
 800ac2a:	2200      	movs	r2, #0
 800ac2c:	4543      	cmp	r3, r8
 800ac2e:	d321      	bcc.n	800ac74 <__multiply+0x98>
 800ac30:	f104 0314 	add.w	r3, r4, #20
 800ac34:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ac38:	f109 0314 	add.w	r3, r9, #20
 800ac3c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ac40:	9202      	str	r2, [sp, #8]
 800ac42:	1b3a      	subs	r2, r7, r4
 800ac44:	3a15      	subs	r2, #21
 800ac46:	f022 0203 	bic.w	r2, r2, #3
 800ac4a:	3204      	adds	r2, #4
 800ac4c:	f104 0115 	add.w	r1, r4, #21
 800ac50:	428f      	cmp	r7, r1
 800ac52:	bf38      	it	cc
 800ac54:	2204      	movcc	r2, #4
 800ac56:	9201      	str	r2, [sp, #4]
 800ac58:	9a02      	ldr	r2, [sp, #8]
 800ac5a:	9303      	str	r3, [sp, #12]
 800ac5c:	429a      	cmp	r2, r3
 800ac5e:	d80c      	bhi.n	800ac7a <__multiply+0x9e>
 800ac60:	2e00      	cmp	r6, #0
 800ac62:	dd03      	ble.n	800ac6c <__multiply+0x90>
 800ac64:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d05a      	beq.n	800ad22 <__multiply+0x146>
 800ac6c:	6106      	str	r6, [r0, #16]
 800ac6e:	b005      	add	sp, #20
 800ac70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac74:	f843 2b04 	str.w	r2, [r3], #4
 800ac78:	e7d8      	b.n	800ac2c <__multiply+0x50>
 800ac7a:	f8b3 a000 	ldrh.w	sl, [r3]
 800ac7e:	f1ba 0f00 	cmp.w	sl, #0
 800ac82:	d024      	beq.n	800acce <__multiply+0xf2>
 800ac84:	f104 0e14 	add.w	lr, r4, #20
 800ac88:	46a9      	mov	r9, r5
 800ac8a:	f04f 0c00 	mov.w	ip, #0
 800ac8e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ac92:	f8d9 1000 	ldr.w	r1, [r9]
 800ac96:	fa1f fb82 	uxth.w	fp, r2
 800ac9a:	b289      	uxth	r1, r1
 800ac9c:	fb0a 110b 	mla	r1, sl, fp, r1
 800aca0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800aca4:	f8d9 2000 	ldr.w	r2, [r9]
 800aca8:	4461      	add	r1, ip
 800acaa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800acae:	fb0a c20b 	mla	r2, sl, fp, ip
 800acb2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800acb6:	b289      	uxth	r1, r1
 800acb8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800acbc:	4577      	cmp	r7, lr
 800acbe:	f849 1b04 	str.w	r1, [r9], #4
 800acc2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800acc6:	d8e2      	bhi.n	800ac8e <__multiply+0xb2>
 800acc8:	9a01      	ldr	r2, [sp, #4]
 800acca:	f845 c002 	str.w	ip, [r5, r2]
 800acce:	9a03      	ldr	r2, [sp, #12]
 800acd0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800acd4:	3304      	adds	r3, #4
 800acd6:	f1b9 0f00 	cmp.w	r9, #0
 800acda:	d020      	beq.n	800ad1e <__multiply+0x142>
 800acdc:	6829      	ldr	r1, [r5, #0]
 800acde:	f104 0c14 	add.w	ip, r4, #20
 800ace2:	46ae      	mov	lr, r5
 800ace4:	f04f 0a00 	mov.w	sl, #0
 800ace8:	f8bc b000 	ldrh.w	fp, [ip]
 800acec:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800acf0:	fb09 220b 	mla	r2, r9, fp, r2
 800acf4:	4492      	add	sl, r2
 800acf6:	b289      	uxth	r1, r1
 800acf8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800acfc:	f84e 1b04 	str.w	r1, [lr], #4
 800ad00:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ad04:	f8be 1000 	ldrh.w	r1, [lr]
 800ad08:	0c12      	lsrs	r2, r2, #16
 800ad0a:	fb09 1102 	mla	r1, r9, r2, r1
 800ad0e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800ad12:	4567      	cmp	r7, ip
 800ad14:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ad18:	d8e6      	bhi.n	800ace8 <__multiply+0x10c>
 800ad1a:	9a01      	ldr	r2, [sp, #4]
 800ad1c:	50a9      	str	r1, [r5, r2]
 800ad1e:	3504      	adds	r5, #4
 800ad20:	e79a      	b.n	800ac58 <__multiply+0x7c>
 800ad22:	3e01      	subs	r6, #1
 800ad24:	e79c      	b.n	800ac60 <__multiply+0x84>
 800ad26:	bf00      	nop
 800ad28:	0800c38d 	.word	0x0800c38d
 800ad2c:	0800c418 	.word	0x0800c418

0800ad30 <__pow5mult>:
 800ad30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad34:	4615      	mov	r5, r2
 800ad36:	f012 0203 	ands.w	r2, r2, #3
 800ad3a:	4606      	mov	r6, r0
 800ad3c:	460f      	mov	r7, r1
 800ad3e:	d007      	beq.n	800ad50 <__pow5mult+0x20>
 800ad40:	4c25      	ldr	r4, [pc, #148]	; (800add8 <__pow5mult+0xa8>)
 800ad42:	3a01      	subs	r2, #1
 800ad44:	2300      	movs	r3, #0
 800ad46:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ad4a:	f7ff fe51 	bl	800a9f0 <__multadd>
 800ad4e:	4607      	mov	r7, r0
 800ad50:	10ad      	asrs	r5, r5, #2
 800ad52:	d03d      	beq.n	800add0 <__pow5mult+0xa0>
 800ad54:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ad56:	b97c      	cbnz	r4, 800ad78 <__pow5mult+0x48>
 800ad58:	2010      	movs	r0, #16
 800ad5a:	f7ff fdc1 	bl	800a8e0 <malloc>
 800ad5e:	4602      	mov	r2, r0
 800ad60:	6270      	str	r0, [r6, #36]	; 0x24
 800ad62:	b928      	cbnz	r0, 800ad70 <__pow5mult+0x40>
 800ad64:	4b1d      	ldr	r3, [pc, #116]	; (800addc <__pow5mult+0xac>)
 800ad66:	481e      	ldr	r0, [pc, #120]	; (800ade0 <__pow5mult+0xb0>)
 800ad68:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ad6c:	f7fe fab6 	bl	80092dc <__assert_func>
 800ad70:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ad74:	6004      	str	r4, [r0, #0]
 800ad76:	60c4      	str	r4, [r0, #12]
 800ad78:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ad7c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ad80:	b94c      	cbnz	r4, 800ad96 <__pow5mult+0x66>
 800ad82:	f240 2171 	movw	r1, #625	; 0x271
 800ad86:	4630      	mov	r0, r6
 800ad88:	f7ff ff12 	bl	800abb0 <__i2b>
 800ad8c:	2300      	movs	r3, #0
 800ad8e:	f8c8 0008 	str.w	r0, [r8, #8]
 800ad92:	4604      	mov	r4, r0
 800ad94:	6003      	str	r3, [r0, #0]
 800ad96:	f04f 0900 	mov.w	r9, #0
 800ad9a:	07eb      	lsls	r3, r5, #31
 800ad9c:	d50a      	bpl.n	800adb4 <__pow5mult+0x84>
 800ad9e:	4639      	mov	r1, r7
 800ada0:	4622      	mov	r2, r4
 800ada2:	4630      	mov	r0, r6
 800ada4:	f7ff ff1a 	bl	800abdc <__multiply>
 800ada8:	4639      	mov	r1, r7
 800adaa:	4680      	mov	r8, r0
 800adac:	4630      	mov	r0, r6
 800adae:	f7ff fdfd 	bl	800a9ac <_Bfree>
 800adb2:	4647      	mov	r7, r8
 800adb4:	106d      	asrs	r5, r5, #1
 800adb6:	d00b      	beq.n	800add0 <__pow5mult+0xa0>
 800adb8:	6820      	ldr	r0, [r4, #0]
 800adba:	b938      	cbnz	r0, 800adcc <__pow5mult+0x9c>
 800adbc:	4622      	mov	r2, r4
 800adbe:	4621      	mov	r1, r4
 800adc0:	4630      	mov	r0, r6
 800adc2:	f7ff ff0b 	bl	800abdc <__multiply>
 800adc6:	6020      	str	r0, [r4, #0]
 800adc8:	f8c0 9000 	str.w	r9, [r0]
 800adcc:	4604      	mov	r4, r0
 800adce:	e7e4      	b.n	800ad9a <__pow5mult+0x6a>
 800add0:	4638      	mov	r0, r7
 800add2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800add6:	bf00      	nop
 800add8:	0800c568 	.word	0x0800c568
 800addc:	0800c125 	.word	0x0800c125
 800ade0:	0800c418 	.word	0x0800c418

0800ade4 <__lshift>:
 800ade4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ade8:	460c      	mov	r4, r1
 800adea:	6849      	ldr	r1, [r1, #4]
 800adec:	6923      	ldr	r3, [r4, #16]
 800adee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800adf2:	68a3      	ldr	r3, [r4, #8]
 800adf4:	4607      	mov	r7, r0
 800adf6:	4691      	mov	r9, r2
 800adf8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800adfc:	f108 0601 	add.w	r6, r8, #1
 800ae00:	42b3      	cmp	r3, r6
 800ae02:	db0b      	blt.n	800ae1c <__lshift+0x38>
 800ae04:	4638      	mov	r0, r7
 800ae06:	f7ff fd91 	bl	800a92c <_Balloc>
 800ae0a:	4605      	mov	r5, r0
 800ae0c:	b948      	cbnz	r0, 800ae22 <__lshift+0x3e>
 800ae0e:	4602      	mov	r2, r0
 800ae10:	4b2a      	ldr	r3, [pc, #168]	; (800aebc <__lshift+0xd8>)
 800ae12:	482b      	ldr	r0, [pc, #172]	; (800aec0 <__lshift+0xdc>)
 800ae14:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ae18:	f7fe fa60 	bl	80092dc <__assert_func>
 800ae1c:	3101      	adds	r1, #1
 800ae1e:	005b      	lsls	r3, r3, #1
 800ae20:	e7ee      	b.n	800ae00 <__lshift+0x1c>
 800ae22:	2300      	movs	r3, #0
 800ae24:	f100 0114 	add.w	r1, r0, #20
 800ae28:	f100 0210 	add.w	r2, r0, #16
 800ae2c:	4618      	mov	r0, r3
 800ae2e:	4553      	cmp	r3, sl
 800ae30:	db37      	blt.n	800aea2 <__lshift+0xbe>
 800ae32:	6920      	ldr	r0, [r4, #16]
 800ae34:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ae38:	f104 0314 	add.w	r3, r4, #20
 800ae3c:	f019 091f 	ands.w	r9, r9, #31
 800ae40:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ae44:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800ae48:	d02f      	beq.n	800aeaa <__lshift+0xc6>
 800ae4a:	f1c9 0e20 	rsb	lr, r9, #32
 800ae4e:	468a      	mov	sl, r1
 800ae50:	f04f 0c00 	mov.w	ip, #0
 800ae54:	681a      	ldr	r2, [r3, #0]
 800ae56:	fa02 f209 	lsl.w	r2, r2, r9
 800ae5a:	ea42 020c 	orr.w	r2, r2, ip
 800ae5e:	f84a 2b04 	str.w	r2, [sl], #4
 800ae62:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae66:	4298      	cmp	r0, r3
 800ae68:	fa22 fc0e 	lsr.w	ip, r2, lr
 800ae6c:	d8f2      	bhi.n	800ae54 <__lshift+0x70>
 800ae6e:	1b03      	subs	r3, r0, r4
 800ae70:	3b15      	subs	r3, #21
 800ae72:	f023 0303 	bic.w	r3, r3, #3
 800ae76:	3304      	adds	r3, #4
 800ae78:	f104 0215 	add.w	r2, r4, #21
 800ae7c:	4290      	cmp	r0, r2
 800ae7e:	bf38      	it	cc
 800ae80:	2304      	movcc	r3, #4
 800ae82:	f841 c003 	str.w	ip, [r1, r3]
 800ae86:	f1bc 0f00 	cmp.w	ip, #0
 800ae8a:	d001      	beq.n	800ae90 <__lshift+0xac>
 800ae8c:	f108 0602 	add.w	r6, r8, #2
 800ae90:	3e01      	subs	r6, #1
 800ae92:	4638      	mov	r0, r7
 800ae94:	612e      	str	r6, [r5, #16]
 800ae96:	4621      	mov	r1, r4
 800ae98:	f7ff fd88 	bl	800a9ac <_Bfree>
 800ae9c:	4628      	mov	r0, r5
 800ae9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aea2:	f842 0f04 	str.w	r0, [r2, #4]!
 800aea6:	3301      	adds	r3, #1
 800aea8:	e7c1      	b.n	800ae2e <__lshift+0x4a>
 800aeaa:	3904      	subs	r1, #4
 800aeac:	f853 2b04 	ldr.w	r2, [r3], #4
 800aeb0:	f841 2f04 	str.w	r2, [r1, #4]!
 800aeb4:	4298      	cmp	r0, r3
 800aeb6:	d8f9      	bhi.n	800aeac <__lshift+0xc8>
 800aeb8:	e7ea      	b.n	800ae90 <__lshift+0xac>
 800aeba:	bf00      	nop
 800aebc:	0800c38d 	.word	0x0800c38d
 800aec0:	0800c418 	.word	0x0800c418

0800aec4 <__mcmp>:
 800aec4:	b530      	push	{r4, r5, lr}
 800aec6:	6902      	ldr	r2, [r0, #16]
 800aec8:	690c      	ldr	r4, [r1, #16]
 800aeca:	1b12      	subs	r2, r2, r4
 800aecc:	d10e      	bne.n	800aeec <__mcmp+0x28>
 800aece:	f100 0314 	add.w	r3, r0, #20
 800aed2:	3114      	adds	r1, #20
 800aed4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800aed8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800aedc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800aee0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800aee4:	42a5      	cmp	r5, r4
 800aee6:	d003      	beq.n	800aef0 <__mcmp+0x2c>
 800aee8:	d305      	bcc.n	800aef6 <__mcmp+0x32>
 800aeea:	2201      	movs	r2, #1
 800aeec:	4610      	mov	r0, r2
 800aeee:	bd30      	pop	{r4, r5, pc}
 800aef0:	4283      	cmp	r3, r0
 800aef2:	d3f3      	bcc.n	800aedc <__mcmp+0x18>
 800aef4:	e7fa      	b.n	800aeec <__mcmp+0x28>
 800aef6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800aefa:	e7f7      	b.n	800aeec <__mcmp+0x28>

0800aefc <__mdiff>:
 800aefc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af00:	460c      	mov	r4, r1
 800af02:	4606      	mov	r6, r0
 800af04:	4611      	mov	r1, r2
 800af06:	4620      	mov	r0, r4
 800af08:	4690      	mov	r8, r2
 800af0a:	f7ff ffdb 	bl	800aec4 <__mcmp>
 800af0e:	1e05      	subs	r5, r0, #0
 800af10:	d110      	bne.n	800af34 <__mdiff+0x38>
 800af12:	4629      	mov	r1, r5
 800af14:	4630      	mov	r0, r6
 800af16:	f7ff fd09 	bl	800a92c <_Balloc>
 800af1a:	b930      	cbnz	r0, 800af2a <__mdiff+0x2e>
 800af1c:	4b3a      	ldr	r3, [pc, #232]	; (800b008 <__mdiff+0x10c>)
 800af1e:	4602      	mov	r2, r0
 800af20:	f240 2132 	movw	r1, #562	; 0x232
 800af24:	4839      	ldr	r0, [pc, #228]	; (800b00c <__mdiff+0x110>)
 800af26:	f7fe f9d9 	bl	80092dc <__assert_func>
 800af2a:	2301      	movs	r3, #1
 800af2c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800af30:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af34:	bfa4      	itt	ge
 800af36:	4643      	movge	r3, r8
 800af38:	46a0      	movge	r8, r4
 800af3a:	4630      	mov	r0, r6
 800af3c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800af40:	bfa6      	itte	ge
 800af42:	461c      	movge	r4, r3
 800af44:	2500      	movge	r5, #0
 800af46:	2501      	movlt	r5, #1
 800af48:	f7ff fcf0 	bl	800a92c <_Balloc>
 800af4c:	b920      	cbnz	r0, 800af58 <__mdiff+0x5c>
 800af4e:	4b2e      	ldr	r3, [pc, #184]	; (800b008 <__mdiff+0x10c>)
 800af50:	4602      	mov	r2, r0
 800af52:	f44f 7110 	mov.w	r1, #576	; 0x240
 800af56:	e7e5      	b.n	800af24 <__mdiff+0x28>
 800af58:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800af5c:	6926      	ldr	r6, [r4, #16]
 800af5e:	60c5      	str	r5, [r0, #12]
 800af60:	f104 0914 	add.w	r9, r4, #20
 800af64:	f108 0514 	add.w	r5, r8, #20
 800af68:	f100 0e14 	add.w	lr, r0, #20
 800af6c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800af70:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800af74:	f108 0210 	add.w	r2, r8, #16
 800af78:	46f2      	mov	sl, lr
 800af7a:	2100      	movs	r1, #0
 800af7c:	f859 3b04 	ldr.w	r3, [r9], #4
 800af80:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800af84:	fa1f f883 	uxth.w	r8, r3
 800af88:	fa11 f18b 	uxtah	r1, r1, fp
 800af8c:	0c1b      	lsrs	r3, r3, #16
 800af8e:	eba1 0808 	sub.w	r8, r1, r8
 800af92:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800af96:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800af9a:	fa1f f888 	uxth.w	r8, r8
 800af9e:	1419      	asrs	r1, r3, #16
 800afa0:	454e      	cmp	r6, r9
 800afa2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800afa6:	f84a 3b04 	str.w	r3, [sl], #4
 800afaa:	d8e7      	bhi.n	800af7c <__mdiff+0x80>
 800afac:	1b33      	subs	r3, r6, r4
 800afae:	3b15      	subs	r3, #21
 800afb0:	f023 0303 	bic.w	r3, r3, #3
 800afb4:	3304      	adds	r3, #4
 800afb6:	3415      	adds	r4, #21
 800afb8:	42a6      	cmp	r6, r4
 800afba:	bf38      	it	cc
 800afbc:	2304      	movcc	r3, #4
 800afbe:	441d      	add	r5, r3
 800afc0:	4473      	add	r3, lr
 800afc2:	469e      	mov	lr, r3
 800afc4:	462e      	mov	r6, r5
 800afc6:	4566      	cmp	r6, ip
 800afc8:	d30e      	bcc.n	800afe8 <__mdiff+0xec>
 800afca:	f10c 0203 	add.w	r2, ip, #3
 800afce:	1b52      	subs	r2, r2, r5
 800afd0:	f022 0203 	bic.w	r2, r2, #3
 800afd4:	3d03      	subs	r5, #3
 800afd6:	45ac      	cmp	ip, r5
 800afd8:	bf38      	it	cc
 800afda:	2200      	movcc	r2, #0
 800afdc:	441a      	add	r2, r3
 800afde:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800afe2:	b17b      	cbz	r3, 800b004 <__mdiff+0x108>
 800afe4:	6107      	str	r7, [r0, #16]
 800afe6:	e7a3      	b.n	800af30 <__mdiff+0x34>
 800afe8:	f856 8b04 	ldr.w	r8, [r6], #4
 800afec:	fa11 f288 	uxtah	r2, r1, r8
 800aff0:	1414      	asrs	r4, r2, #16
 800aff2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800aff6:	b292      	uxth	r2, r2
 800aff8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800affc:	f84e 2b04 	str.w	r2, [lr], #4
 800b000:	1421      	asrs	r1, r4, #16
 800b002:	e7e0      	b.n	800afc6 <__mdiff+0xca>
 800b004:	3f01      	subs	r7, #1
 800b006:	e7ea      	b.n	800afde <__mdiff+0xe2>
 800b008:	0800c38d 	.word	0x0800c38d
 800b00c:	0800c418 	.word	0x0800c418

0800b010 <__ulp>:
 800b010:	b082      	sub	sp, #8
 800b012:	ed8d 0b00 	vstr	d0, [sp]
 800b016:	9b01      	ldr	r3, [sp, #4]
 800b018:	4912      	ldr	r1, [pc, #72]	; (800b064 <__ulp+0x54>)
 800b01a:	4019      	ands	r1, r3
 800b01c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800b020:	2900      	cmp	r1, #0
 800b022:	dd05      	ble.n	800b030 <__ulp+0x20>
 800b024:	2200      	movs	r2, #0
 800b026:	460b      	mov	r3, r1
 800b028:	ec43 2b10 	vmov	d0, r2, r3
 800b02c:	b002      	add	sp, #8
 800b02e:	4770      	bx	lr
 800b030:	4249      	negs	r1, r1
 800b032:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800b036:	ea4f 5021 	mov.w	r0, r1, asr #20
 800b03a:	f04f 0200 	mov.w	r2, #0
 800b03e:	f04f 0300 	mov.w	r3, #0
 800b042:	da04      	bge.n	800b04e <__ulp+0x3e>
 800b044:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800b048:	fa41 f300 	asr.w	r3, r1, r0
 800b04c:	e7ec      	b.n	800b028 <__ulp+0x18>
 800b04e:	f1a0 0114 	sub.w	r1, r0, #20
 800b052:	291e      	cmp	r1, #30
 800b054:	bfda      	itte	le
 800b056:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800b05a:	fa20 f101 	lsrle.w	r1, r0, r1
 800b05e:	2101      	movgt	r1, #1
 800b060:	460a      	mov	r2, r1
 800b062:	e7e1      	b.n	800b028 <__ulp+0x18>
 800b064:	7ff00000 	.word	0x7ff00000

0800b068 <__b2d>:
 800b068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b06a:	6905      	ldr	r5, [r0, #16]
 800b06c:	f100 0714 	add.w	r7, r0, #20
 800b070:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800b074:	1f2e      	subs	r6, r5, #4
 800b076:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800b07a:	4620      	mov	r0, r4
 800b07c:	f7ff fd48 	bl	800ab10 <__hi0bits>
 800b080:	f1c0 0320 	rsb	r3, r0, #32
 800b084:	280a      	cmp	r0, #10
 800b086:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800b104 <__b2d+0x9c>
 800b08a:	600b      	str	r3, [r1, #0]
 800b08c:	dc14      	bgt.n	800b0b8 <__b2d+0x50>
 800b08e:	f1c0 0e0b 	rsb	lr, r0, #11
 800b092:	fa24 f10e 	lsr.w	r1, r4, lr
 800b096:	42b7      	cmp	r7, r6
 800b098:	ea41 030c 	orr.w	r3, r1, ip
 800b09c:	bf34      	ite	cc
 800b09e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b0a2:	2100      	movcs	r1, #0
 800b0a4:	3015      	adds	r0, #21
 800b0a6:	fa04 f000 	lsl.w	r0, r4, r0
 800b0aa:	fa21 f10e 	lsr.w	r1, r1, lr
 800b0ae:	ea40 0201 	orr.w	r2, r0, r1
 800b0b2:	ec43 2b10 	vmov	d0, r2, r3
 800b0b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b0b8:	42b7      	cmp	r7, r6
 800b0ba:	bf3a      	itte	cc
 800b0bc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b0c0:	f1a5 0608 	subcc.w	r6, r5, #8
 800b0c4:	2100      	movcs	r1, #0
 800b0c6:	380b      	subs	r0, #11
 800b0c8:	d017      	beq.n	800b0fa <__b2d+0x92>
 800b0ca:	f1c0 0c20 	rsb	ip, r0, #32
 800b0ce:	fa04 f500 	lsl.w	r5, r4, r0
 800b0d2:	42be      	cmp	r6, r7
 800b0d4:	fa21 f40c 	lsr.w	r4, r1, ip
 800b0d8:	ea45 0504 	orr.w	r5, r5, r4
 800b0dc:	bf8c      	ite	hi
 800b0de:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800b0e2:	2400      	movls	r4, #0
 800b0e4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800b0e8:	fa01 f000 	lsl.w	r0, r1, r0
 800b0ec:	fa24 f40c 	lsr.w	r4, r4, ip
 800b0f0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b0f4:	ea40 0204 	orr.w	r2, r0, r4
 800b0f8:	e7db      	b.n	800b0b2 <__b2d+0x4a>
 800b0fa:	ea44 030c 	orr.w	r3, r4, ip
 800b0fe:	460a      	mov	r2, r1
 800b100:	e7d7      	b.n	800b0b2 <__b2d+0x4a>
 800b102:	bf00      	nop
 800b104:	3ff00000 	.word	0x3ff00000

0800b108 <__d2b>:
 800b108:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b10c:	4689      	mov	r9, r1
 800b10e:	2101      	movs	r1, #1
 800b110:	ec57 6b10 	vmov	r6, r7, d0
 800b114:	4690      	mov	r8, r2
 800b116:	f7ff fc09 	bl	800a92c <_Balloc>
 800b11a:	4604      	mov	r4, r0
 800b11c:	b930      	cbnz	r0, 800b12c <__d2b+0x24>
 800b11e:	4602      	mov	r2, r0
 800b120:	4b25      	ldr	r3, [pc, #148]	; (800b1b8 <__d2b+0xb0>)
 800b122:	4826      	ldr	r0, [pc, #152]	; (800b1bc <__d2b+0xb4>)
 800b124:	f240 310a 	movw	r1, #778	; 0x30a
 800b128:	f7fe f8d8 	bl	80092dc <__assert_func>
 800b12c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b130:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b134:	bb35      	cbnz	r5, 800b184 <__d2b+0x7c>
 800b136:	2e00      	cmp	r6, #0
 800b138:	9301      	str	r3, [sp, #4]
 800b13a:	d028      	beq.n	800b18e <__d2b+0x86>
 800b13c:	4668      	mov	r0, sp
 800b13e:	9600      	str	r6, [sp, #0]
 800b140:	f7ff fd06 	bl	800ab50 <__lo0bits>
 800b144:	9900      	ldr	r1, [sp, #0]
 800b146:	b300      	cbz	r0, 800b18a <__d2b+0x82>
 800b148:	9a01      	ldr	r2, [sp, #4]
 800b14a:	f1c0 0320 	rsb	r3, r0, #32
 800b14e:	fa02 f303 	lsl.w	r3, r2, r3
 800b152:	430b      	orrs	r3, r1
 800b154:	40c2      	lsrs	r2, r0
 800b156:	6163      	str	r3, [r4, #20]
 800b158:	9201      	str	r2, [sp, #4]
 800b15a:	9b01      	ldr	r3, [sp, #4]
 800b15c:	61a3      	str	r3, [r4, #24]
 800b15e:	2b00      	cmp	r3, #0
 800b160:	bf14      	ite	ne
 800b162:	2202      	movne	r2, #2
 800b164:	2201      	moveq	r2, #1
 800b166:	6122      	str	r2, [r4, #16]
 800b168:	b1d5      	cbz	r5, 800b1a0 <__d2b+0x98>
 800b16a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b16e:	4405      	add	r5, r0
 800b170:	f8c9 5000 	str.w	r5, [r9]
 800b174:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b178:	f8c8 0000 	str.w	r0, [r8]
 800b17c:	4620      	mov	r0, r4
 800b17e:	b003      	add	sp, #12
 800b180:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b184:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b188:	e7d5      	b.n	800b136 <__d2b+0x2e>
 800b18a:	6161      	str	r1, [r4, #20]
 800b18c:	e7e5      	b.n	800b15a <__d2b+0x52>
 800b18e:	a801      	add	r0, sp, #4
 800b190:	f7ff fcde 	bl	800ab50 <__lo0bits>
 800b194:	9b01      	ldr	r3, [sp, #4]
 800b196:	6163      	str	r3, [r4, #20]
 800b198:	2201      	movs	r2, #1
 800b19a:	6122      	str	r2, [r4, #16]
 800b19c:	3020      	adds	r0, #32
 800b19e:	e7e3      	b.n	800b168 <__d2b+0x60>
 800b1a0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b1a4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b1a8:	f8c9 0000 	str.w	r0, [r9]
 800b1ac:	6918      	ldr	r0, [r3, #16]
 800b1ae:	f7ff fcaf 	bl	800ab10 <__hi0bits>
 800b1b2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b1b6:	e7df      	b.n	800b178 <__d2b+0x70>
 800b1b8:	0800c38d 	.word	0x0800c38d
 800b1bc:	0800c418 	.word	0x0800c418

0800b1c0 <__ratio>:
 800b1c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1c4:	4688      	mov	r8, r1
 800b1c6:	4669      	mov	r1, sp
 800b1c8:	4681      	mov	r9, r0
 800b1ca:	f7ff ff4d 	bl	800b068 <__b2d>
 800b1ce:	a901      	add	r1, sp, #4
 800b1d0:	4640      	mov	r0, r8
 800b1d2:	ec55 4b10 	vmov	r4, r5, d0
 800b1d6:	f7ff ff47 	bl	800b068 <__b2d>
 800b1da:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b1de:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b1e2:	eba3 0c02 	sub.w	ip, r3, r2
 800b1e6:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b1ea:	1a9b      	subs	r3, r3, r2
 800b1ec:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b1f0:	ec51 0b10 	vmov	r0, r1, d0
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	bfd6      	itet	le
 800b1f8:	460a      	movle	r2, r1
 800b1fa:	462a      	movgt	r2, r5
 800b1fc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b200:	468b      	mov	fp, r1
 800b202:	462f      	mov	r7, r5
 800b204:	bfd4      	ite	le
 800b206:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800b20a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b20e:	4620      	mov	r0, r4
 800b210:	ee10 2a10 	vmov	r2, s0
 800b214:	465b      	mov	r3, fp
 800b216:	4639      	mov	r1, r7
 800b218:	f7f5 fb38 	bl	800088c <__aeabi_ddiv>
 800b21c:	ec41 0b10 	vmov	d0, r0, r1
 800b220:	b003      	add	sp, #12
 800b222:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b226 <__copybits>:
 800b226:	3901      	subs	r1, #1
 800b228:	b570      	push	{r4, r5, r6, lr}
 800b22a:	1149      	asrs	r1, r1, #5
 800b22c:	6914      	ldr	r4, [r2, #16]
 800b22e:	3101      	adds	r1, #1
 800b230:	f102 0314 	add.w	r3, r2, #20
 800b234:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b238:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b23c:	1f05      	subs	r5, r0, #4
 800b23e:	42a3      	cmp	r3, r4
 800b240:	d30c      	bcc.n	800b25c <__copybits+0x36>
 800b242:	1aa3      	subs	r3, r4, r2
 800b244:	3b11      	subs	r3, #17
 800b246:	f023 0303 	bic.w	r3, r3, #3
 800b24a:	3211      	adds	r2, #17
 800b24c:	42a2      	cmp	r2, r4
 800b24e:	bf88      	it	hi
 800b250:	2300      	movhi	r3, #0
 800b252:	4418      	add	r0, r3
 800b254:	2300      	movs	r3, #0
 800b256:	4288      	cmp	r0, r1
 800b258:	d305      	bcc.n	800b266 <__copybits+0x40>
 800b25a:	bd70      	pop	{r4, r5, r6, pc}
 800b25c:	f853 6b04 	ldr.w	r6, [r3], #4
 800b260:	f845 6f04 	str.w	r6, [r5, #4]!
 800b264:	e7eb      	b.n	800b23e <__copybits+0x18>
 800b266:	f840 3b04 	str.w	r3, [r0], #4
 800b26a:	e7f4      	b.n	800b256 <__copybits+0x30>

0800b26c <__any_on>:
 800b26c:	f100 0214 	add.w	r2, r0, #20
 800b270:	6900      	ldr	r0, [r0, #16]
 800b272:	114b      	asrs	r3, r1, #5
 800b274:	4298      	cmp	r0, r3
 800b276:	b510      	push	{r4, lr}
 800b278:	db11      	blt.n	800b29e <__any_on+0x32>
 800b27a:	dd0a      	ble.n	800b292 <__any_on+0x26>
 800b27c:	f011 011f 	ands.w	r1, r1, #31
 800b280:	d007      	beq.n	800b292 <__any_on+0x26>
 800b282:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b286:	fa24 f001 	lsr.w	r0, r4, r1
 800b28a:	fa00 f101 	lsl.w	r1, r0, r1
 800b28e:	428c      	cmp	r4, r1
 800b290:	d10b      	bne.n	800b2aa <__any_on+0x3e>
 800b292:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b296:	4293      	cmp	r3, r2
 800b298:	d803      	bhi.n	800b2a2 <__any_on+0x36>
 800b29a:	2000      	movs	r0, #0
 800b29c:	bd10      	pop	{r4, pc}
 800b29e:	4603      	mov	r3, r0
 800b2a0:	e7f7      	b.n	800b292 <__any_on+0x26>
 800b2a2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b2a6:	2900      	cmp	r1, #0
 800b2a8:	d0f5      	beq.n	800b296 <__any_on+0x2a>
 800b2aa:	2001      	movs	r0, #1
 800b2ac:	e7f6      	b.n	800b29c <__any_on+0x30>

0800b2ae <_calloc_r>:
 800b2ae:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b2b0:	fba1 2402 	umull	r2, r4, r1, r2
 800b2b4:	b94c      	cbnz	r4, 800b2ca <_calloc_r+0x1c>
 800b2b6:	4611      	mov	r1, r2
 800b2b8:	9201      	str	r2, [sp, #4]
 800b2ba:	f7fc f911 	bl	80074e0 <_malloc_r>
 800b2be:	9a01      	ldr	r2, [sp, #4]
 800b2c0:	4605      	mov	r5, r0
 800b2c2:	b930      	cbnz	r0, 800b2d2 <_calloc_r+0x24>
 800b2c4:	4628      	mov	r0, r5
 800b2c6:	b003      	add	sp, #12
 800b2c8:	bd30      	pop	{r4, r5, pc}
 800b2ca:	220c      	movs	r2, #12
 800b2cc:	6002      	str	r2, [r0, #0]
 800b2ce:	2500      	movs	r5, #0
 800b2d0:	e7f8      	b.n	800b2c4 <_calloc_r+0x16>
 800b2d2:	4621      	mov	r1, r4
 800b2d4:	f7fc f8db 	bl	800748e <memset>
 800b2d8:	e7f4      	b.n	800b2c4 <_calloc_r+0x16>
	...

0800b2dc <_free_r>:
 800b2dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b2de:	2900      	cmp	r1, #0
 800b2e0:	d044      	beq.n	800b36c <_free_r+0x90>
 800b2e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b2e6:	9001      	str	r0, [sp, #4]
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	f1a1 0404 	sub.w	r4, r1, #4
 800b2ee:	bfb8      	it	lt
 800b2f0:	18e4      	addlt	r4, r4, r3
 800b2f2:	f7ff fb0f 	bl	800a914 <__malloc_lock>
 800b2f6:	4a1e      	ldr	r2, [pc, #120]	; (800b370 <_free_r+0x94>)
 800b2f8:	9801      	ldr	r0, [sp, #4]
 800b2fa:	6813      	ldr	r3, [r2, #0]
 800b2fc:	b933      	cbnz	r3, 800b30c <_free_r+0x30>
 800b2fe:	6063      	str	r3, [r4, #4]
 800b300:	6014      	str	r4, [r2, #0]
 800b302:	b003      	add	sp, #12
 800b304:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b308:	f7ff bb0a 	b.w	800a920 <__malloc_unlock>
 800b30c:	42a3      	cmp	r3, r4
 800b30e:	d908      	bls.n	800b322 <_free_r+0x46>
 800b310:	6825      	ldr	r5, [r4, #0]
 800b312:	1961      	adds	r1, r4, r5
 800b314:	428b      	cmp	r3, r1
 800b316:	bf01      	itttt	eq
 800b318:	6819      	ldreq	r1, [r3, #0]
 800b31a:	685b      	ldreq	r3, [r3, #4]
 800b31c:	1949      	addeq	r1, r1, r5
 800b31e:	6021      	streq	r1, [r4, #0]
 800b320:	e7ed      	b.n	800b2fe <_free_r+0x22>
 800b322:	461a      	mov	r2, r3
 800b324:	685b      	ldr	r3, [r3, #4]
 800b326:	b10b      	cbz	r3, 800b32c <_free_r+0x50>
 800b328:	42a3      	cmp	r3, r4
 800b32a:	d9fa      	bls.n	800b322 <_free_r+0x46>
 800b32c:	6811      	ldr	r1, [r2, #0]
 800b32e:	1855      	adds	r5, r2, r1
 800b330:	42a5      	cmp	r5, r4
 800b332:	d10b      	bne.n	800b34c <_free_r+0x70>
 800b334:	6824      	ldr	r4, [r4, #0]
 800b336:	4421      	add	r1, r4
 800b338:	1854      	adds	r4, r2, r1
 800b33a:	42a3      	cmp	r3, r4
 800b33c:	6011      	str	r1, [r2, #0]
 800b33e:	d1e0      	bne.n	800b302 <_free_r+0x26>
 800b340:	681c      	ldr	r4, [r3, #0]
 800b342:	685b      	ldr	r3, [r3, #4]
 800b344:	6053      	str	r3, [r2, #4]
 800b346:	4421      	add	r1, r4
 800b348:	6011      	str	r1, [r2, #0]
 800b34a:	e7da      	b.n	800b302 <_free_r+0x26>
 800b34c:	d902      	bls.n	800b354 <_free_r+0x78>
 800b34e:	230c      	movs	r3, #12
 800b350:	6003      	str	r3, [r0, #0]
 800b352:	e7d6      	b.n	800b302 <_free_r+0x26>
 800b354:	6825      	ldr	r5, [r4, #0]
 800b356:	1961      	adds	r1, r4, r5
 800b358:	428b      	cmp	r3, r1
 800b35a:	bf04      	itt	eq
 800b35c:	6819      	ldreq	r1, [r3, #0]
 800b35e:	685b      	ldreq	r3, [r3, #4]
 800b360:	6063      	str	r3, [r4, #4]
 800b362:	bf04      	itt	eq
 800b364:	1949      	addeq	r1, r1, r5
 800b366:	6021      	streq	r1, [r4, #0]
 800b368:	6054      	str	r4, [r2, #4]
 800b36a:	e7ca      	b.n	800b302 <_free_r+0x26>
 800b36c:	b003      	add	sp, #12
 800b36e:	bd30      	pop	{r4, r5, pc}
 800b370:	20004ce0 	.word	0x20004ce0

0800b374 <__ssputs_r>:
 800b374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b378:	688e      	ldr	r6, [r1, #8]
 800b37a:	429e      	cmp	r6, r3
 800b37c:	4682      	mov	sl, r0
 800b37e:	460c      	mov	r4, r1
 800b380:	4690      	mov	r8, r2
 800b382:	461f      	mov	r7, r3
 800b384:	d838      	bhi.n	800b3f8 <__ssputs_r+0x84>
 800b386:	898a      	ldrh	r2, [r1, #12]
 800b388:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b38c:	d032      	beq.n	800b3f4 <__ssputs_r+0x80>
 800b38e:	6825      	ldr	r5, [r4, #0]
 800b390:	6909      	ldr	r1, [r1, #16]
 800b392:	eba5 0901 	sub.w	r9, r5, r1
 800b396:	6965      	ldr	r5, [r4, #20]
 800b398:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b39c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b3a0:	3301      	adds	r3, #1
 800b3a2:	444b      	add	r3, r9
 800b3a4:	106d      	asrs	r5, r5, #1
 800b3a6:	429d      	cmp	r5, r3
 800b3a8:	bf38      	it	cc
 800b3aa:	461d      	movcc	r5, r3
 800b3ac:	0553      	lsls	r3, r2, #21
 800b3ae:	d531      	bpl.n	800b414 <__ssputs_r+0xa0>
 800b3b0:	4629      	mov	r1, r5
 800b3b2:	f7fc f895 	bl	80074e0 <_malloc_r>
 800b3b6:	4606      	mov	r6, r0
 800b3b8:	b950      	cbnz	r0, 800b3d0 <__ssputs_r+0x5c>
 800b3ba:	230c      	movs	r3, #12
 800b3bc:	f8ca 3000 	str.w	r3, [sl]
 800b3c0:	89a3      	ldrh	r3, [r4, #12]
 800b3c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b3c6:	81a3      	strh	r3, [r4, #12]
 800b3c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b3cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3d0:	6921      	ldr	r1, [r4, #16]
 800b3d2:	464a      	mov	r2, r9
 800b3d4:	f7fc f84d 	bl	8007472 <memcpy>
 800b3d8:	89a3      	ldrh	r3, [r4, #12]
 800b3da:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b3de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b3e2:	81a3      	strh	r3, [r4, #12]
 800b3e4:	6126      	str	r6, [r4, #16]
 800b3e6:	6165      	str	r5, [r4, #20]
 800b3e8:	444e      	add	r6, r9
 800b3ea:	eba5 0509 	sub.w	r5, r5, r9
 800b3ee:	6026      	str	r6, [r4, #0]
 800b3f0:	60a5      	str	r5, [r4, #8]
 800b3f2:	463e      	mov	r6, r7
 800b3f4:	42be      	cmp	r6, r7
 800b3f6:	d900      	bls.n	800b3fa <__ssputs_r+0x86>
 800b3f8:	463e      	mov	r6, r7
 800b3fa:	6820      	ldr	r0, [r4, #0]
 800b3fc:	4632      	mov	r2, r6
 800b3fe:	4641      	mov	r1, r8
 800b400:	f000 fbd8 	bl	800bbb4 <memmove>
 800b404:	68a3      	ldr	r3, [r4, #8]
 800b406:	1b9b      	subs	r3, r3, r6
 800b408:	60a3      	str	r3, [r4, #8]
 800b40a:	6823      	ldr	r3, [r4, #0]
 800b40c:	4433      	add	r3, r6
 800b40e:	6023      	str	r3, [r4, #0]
 800b410:	2000      	movs	r0, #0
 800b412:	e7db      	b.n	800b3cc <__ssputs_r+0x58>
 800b414:	462a      	mov	r2, r5
 800b416:	f000 fbe7 	bl	800bbe8 <_realloc_r>
 800b41a:	4606      	mov	r6, r0
 800b41c:	2800      	cmp	r0, #0
 800b41e:	d1e1      	bne.n	800b3e4 <__ssputs_r+0x70>
 800b420:	6921      	ldr	r1, [r4, #16]
 800b422:	4650      	mov	r0, sl
 800b424:	f7ff ff5a 	bl	800b2dc <_free_r>
 800b428:	e7c7      	b.n	800b3ba <__ssputs_r+0x46>
	...

0800b42c <_svfiprintf_r>:
 800b42c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b430:	4698      	mov	r8, r3
 800b432:	898b      	ldrh	r3, [r1, #12]
 800b434:	061b      	lsls	r3, r3, #24
 800b436:	b09d      	sub	sp, #116	; 0x74
 800b438:	4607      	mov	r7, r0
 800b43a:	460d      	mov	r5, r1
 800b43c:	4614      	mov	r4, r2
 800b43e:	d50e      	bpl.n	800b45e <_svfiprintf_r+0x32>
 800b440:	690b      	ldr	r3, [r1, #16]
 800b442:	b963      	cbnz	r3, 800b45e <_svfiprintf_r+0x32>
 800b444:	2140      	movs	r1, #64	; 0x40
 800b446:	f7fc f84b 	bl	80074e0 <_malloc_r>
 800b44a:	6028      	str	r0, [r5, #0]
 800b44c:	6128      	str	r0, [r5, #16]
 800b44e:	b920      	cbnz	r0, 800b45a <_svfiprintf_r+0x2e>
 800b450:	230c      	movs	r3, #12
 800b452:	603b      	str	r3, [r7, #0]
 800b454:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b458:	e0d1      	b.n	800b5fe <_svfiprintf_r+0x1d2>
 800b45a:	2340      	movs	r3, #64	; 0x40
 800b45c:	616b      	str	r3, [r5, #20]
 800b45e:	2300      	movs	r3, #0
 800b460:	9309      	str	r3, [sp, #36]	; 0x24
 800b462:	2320      	movs	r3, #32
 800b464:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b468:	f8cd 800c 	str.w	r8, [sp, #12]
 800b46c:	2330      	movs	r3, #48	; 0x30
 800b46e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b618 <_svfiprintf_r+0x1ec>
 800b472:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b476:	f04f 0901 	mov.w	r9, #1
 800b47a:	4623      	mov	r3, r4
 800b47c:	469a      	mov	sl, r3
 800b47e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b482:	b10a      	cbz	r2, 800b488 <_svfiprintf_r+0x5c>
 800b484:	2a25      	cmp	r2, #37	; 0x25
 800b486:	d1f9      	bne.n	800b47c <_svfiprintf_r+0x50>
 800b488:	ebba 0b04 	subs.w	fp, sl, r4
 800b48c:	d00b      	beq.n	800b4a6 <_svfiprintf_r+0x7a>
 800b48e:	465b      	mov	r3, fp
 800b490:	4622      	mov	r2, r4
 800b492:	4629      	mov	r1, r5
 800b494:	4638      	mov	r0, r7
 800b496:	f7ff ff6d 	bl	800b374 <__ssputs_r>
 800b49a:	3001      	adds	r0, #1
 800b49c:	f000 80aa 	beq.w	800b5f4 <_svfiprintf_r+0x1c8>
 800b4a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b4a2:	445a      	add	r2, fp
 800b4a4:	9209      	str	r2, [sp, #36]	; 0x24
 800b4a6:	f89a 3000 	ldrb.w	r3, [sl]
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	f000 80a2 	beq.w	800b5f4 <_svfiprintf_r+0x1c8>
 800b4b0:	2300      	movs	r3, #0
 800b4b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b4b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b4ba:	f10a 0a01 	add.w	sl, sl, #1
 800b4be:	9304      	str	r3, [sp, #16]
 800b4c0:	9307      	str	r3, [sp, #28]
 800b4c2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b4c6:	931a      	str	r3, [sp, #104]	; 0x68
 800b4c8:	4654      	mov	r4, sl
 800b4ca:	2205      	movs	r2, #5
 800b4cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4d0:	4851      	ldr	r0, [pc, #324]	; (800b618 <_svfiprintf_r+0x1ec>)
 800b4d2:	f7f4 fea5 	bl	8000220 <memchr>
 800b4d6:	9a04      	ldr	r2, [sp, #16]
 800b4d8:	b9d8      	cbnz	r0, 800b512 <_svfiprintf_r+0xe6>
 800b4da:	06d0      	lsls	r0, r2, #27
 800b4dc:	bf44      	itt	mi
 800b4de:	2320      	movmi	r3, #32
 800b4e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b4e4:	0711      	lsls	r1, r2, #28
 800b4e6:	bf44      	itt	mi
 800b4e8:	232b      	movmi	r3, #43	; 0x2b
 800b4ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b4ee:	f89a 3000 	ldrb.w	r3, [sl]
 800b4f2:	2b2a      	cmp	r3, #42	; 0x2a
 800b4f4:	d015      	beq.n	800b522 <_svfiprintf_r+0xf6>
 800b4f6:	9a07      	ldr	r2, [sp, #28]
 800b4f8:	4654      	mov	r4, sl
 800b4fa:	2000      	movs	r0, #0
 800b4fc:	f04f 0c0a 	mov.w	ip, #10
 800b500:	4621      	mov	r1, r4
 800b502:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b506:	3b30      	subs	r3, #48	; 0x30
 800b508:	2b09      	cmp	r3, #9
 800b50a:	d94e      	bls.n	800b5aa <_svfiprintf_r+0x17e>
 800b50c:	b1b0      	cbz	r0, 800b53c <_svfiprintf_r+0x110>
 800b50e:	9207      	str	r2, [sp, #28]
 800b510:	e014      	b.n	800b53c <_svfiprintf_r+0x110>
 800b512:	eba0 0308 	sub.w	r3, r0, r8
 800b516:	fa09 f303 	lsl.w	r3, r9, r3
 800b51a:	4313      	orrs	r3, r2
 800b51c:	9304      	str	r3, [sp, #16]
 800b51e:	46a2      	mov	sl, r4
 800b520:	e7d2      	b.n	800b4c8 <_svfiprintf_r+0x9c>
 800b522:	9b03      	ldr	r3, [sp, #12]
 800b524:	1d19      	adds	r1, r3, #4
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	9103      	str	r1, [sp, #12]
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	bfbb      	ittet	lt
 800b52e:	425b      	neglt	r3, r3
 800b530:	f042 0202 	orrlt.w	r2, r2, #2
 800b534:	9307      	strge	r3, [sp, #28]
 800b536:	9307      	strlt	r3, [sp, #28]
 800b538:	bfb8      	it	lt
 800b53a:	9204      	strlt	r2, [sp, #16]
 800b53c:	7823      	ldrb	r3, [r4, #0]
 800b53e:	2b2e      	cmp	r3, #46	; 0x2e
 800b540:	d10c      	bne.n	800b55c <_svfiprintf_r+0x130>
 800b542:	7863      	ldrb	r3, [r4, #1]
 800b544:	2b2a      	cmp	r3, #42	; 0x2a
 800b546:	d135      	bne.n	800b5b4 <_svfiprintf_r+0x188>
 800b548:	9b03      	ldr	r3, [sp, #12]
 800b54a:	1d1a      	adds	r2, r3, #4
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	9203      	str	r2, [sp, #12]
 800b550:	2b00      	cmp	r3, #0
 800b552:	bfb8      	it	lt
 800b554:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b558:	3402      	adds	r4, #2
 800b55a:	9305      	str	r3, [sp, #20]
 800b55c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b628 <_svfiprintf_r+0x1fc>
 800b560:	7821      	ldrb	r1, [r4, #0]
 800b562:	2203      	movs	r2, #3
 800b564:	4650      	mov	r0, sl
 800b566:	f7f4 fe5b 	bl	8000220 <memchr>
 800b56a:	b140      	cbz	r0, 800b57e <_svfiprintf_r+0x152>
 800b56c:	2340      	movs	r3, #64	; 0x40
 800b56e:	eba0 000a 	sub.w	r0, r0, sl
 800b572:	fa03 f000 	lsl.w	r0, r3, r0
 800b576:	9b04      	ldr	r3, [sp, #16]
 800b578:	4303      	orrs	r3, r0
 800b57a:	3401      	adds	r4, #1
 800b57c:	9304      	str	r3, [sp, #16]
 800b57e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b582:	4826      	ldr	r0, [pc, #152]	; (800b61c <_svfiprintf_r+0x1f0>)
 800b584:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b588:	2206      	movs	r2, #6
 800b58a:	f7f4 fe49 	bl	8000220 <memchr>
 800b58e:	2800      	cmp	r0, #0
 800b590:	d038      	beq.n	800b604 <_svfiprintf_r+0x1d8>
 800b592:	4b23      	ldr	r3, [pc, #140]	; (800b620 <_svfiprintf_r+0x1f4>)
 800b594:	bb1b      	cbnz	r3, 800b5de <_svfiprintf_r+0x1b2>
 800b596:	9b03      	ldr	r3, [sp, #12]
 800b598:	3307      	adds	r3, #7
 800b59a:	f023 0307 	bic.w	r3, r3, #7
 800b59e:	3308      	adds	r3, #8
 800b5a0:	9303      	str	r3, [sp, #12]
 800b5a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5a4:	4433      	add	r3, r6
 800b5a6:	9309      	str	r3, [sp, #36]	; 0x24
 800b5a8:	e767      	b.n	800b47a <_svfiprintf_r+0x4e>
 800b5aa:	fb0c 3202 	mla	r2, ip, r2, r3
 800b5ae:	460c      	mov	r4, r1
 800b5b0:	2001      	movs	r0, #1
 800b5b2:	e7a5      	b.n	800b500 <_svfiprintf_r+0xd4>
 800b5b4:	2300      	movs	r3, #0
 800b5b6:	3401      	adds	r4, #1
 800b5b8:	9305      	str	r3, [sp, #20]
 800b5ba:	4619      	mov	r1, r3
 800b5bc:	f04f 0c0a 	mov.w	ip, #10
 800b5c0:	4620      	mov	r0, r4
 800b5c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b5c6:	3a30      	subs	r2, #48	; 0x30
 800b5c8:	2a09      	cmp	r2, #9
 800b5ca:	d903      	bls.n	800b5d4 <_svfiprintf_r+0x1a8>
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d0c5      	beq.n	800b55c <_svfiprintf_r+0x130>
 800b5d0:	9105      	str	r1, [sp, #20]
 800b5d2:	e7c3      	b.n	800b55c <_svfiprintf_r+0x130>
 800b5d4:	fb0c 2101 	mla	r1, ip, r1, r2
 800b5d8:	4604      	mov	r4, r0
 800b5da:	2301      	movs	r3, #1
 800b5dc:	e7f0      	b.n	800b5c0 <_svfiprintf_r+0x194>
 800b5de:	ab03      	add	r3, sp, #12
 800b5e0:	9300      	str	r3, [sp, #0]
 800b5e2:	462a      	mov	r2, r5
 800b5e4:	4b0f      	ldr	r3, [pc, #60]	; (800b624 <_svfiprintf_r+0x1f8>)
 800b5e6:	a904      	add	r1, sp, #16
 800b5e8:	4638      	mov	r0, r7
 800b5ea:	f7fc f88d 	bl	8007708 <_printf_float>
 800b5ee:	1c42      	adds	r2, r0, #1
 800b5f0:	4606      	mov	r6, r0
 800b5f2:	d1d6      	bne.n	800b5a2 <_svfiprintf_r+0x176>
 800b5f4:	89ab      	ldrh	r3, [r5, #12]
 800b5f6:	065b      	lsls	r3, r3, #25
 800b5f8:	f53f af2c 	bmi.w	800b454 <_svfiprintf_r+0x28>
 800b5fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b5fe:	b01d      	add	sp, #116	; 0x74
 800b600:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b604:	ab03      	add	r3, sp, #12
 800b606:	9300      	str	r3, [sp, #0]
 800b608:	462a      	mov	r2, r5
 800b60a:	4b06      	ldr	r3, [pc, #24]	; (800b624 <_svfiprintf_r+0x1f8>)
 800b60c:	a904      	add	r1, sp, #16
 800b60e:	4638      	mov	r0, r7
 800b610:	f7fc fb1e 	bl	8007c50 <_printf_i>
 800b614:	e7eb      	b.n	800b5ee <_svfiprintf_r+0x1c2>
 800b616:	bf00      	nop
 800b618:	0800c574 	.word	0x0800c574
 800b61c:	0800c57e 	.word	0x0800c57e
 800b620:	08007709 	.word	0x08007709
 800b624:	0800b375 	.word	0x0800b375
 800b628:	0800c57a 	.word	0x0800c57a

0800b62c <__sfputc_r>:
 800b62c:	6893      	ldr	r3, [r2, #8]
 800b62e:	3b01      	subs	r3, #1
 800b630:	2b00      	cmp	r3, #0
 800b632:	b410      	push	{r4}
 800b634:	6093      	str	r3, [r2, #8]
 800b636:	da08      	bge.n	800b64a <__sfputc_r+0x1e>
 800b638:	6994      	ldr	r4, [r2, #24]
 800b63a:	42a3      	cmp	r3, r4
 800b63c:	db01      	blt.n	800b642 <__sfputc_r+0x16>
 800b63e:	290a      	cmp	r1, #10
 800b640:	d103      	bne.n	800b64a <__sfputc_r+0x1e>
 800b642:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b646:	f000 b97b 	b.w	800b940 <__swbuf_r>
 800b64a:	6813      	ldr	r3, [r2, #0]
 800b64c:	1c58      	adds	r0, r3, #1
 800b64e:	6010      	str	r0, [r2, #0]
 800b650:	7019      	strb	r1, [r3, #0]
 800b652:	4608      	mov	r0, r1
 800b654:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b658:	4770      	bx	lr

0800b65a <__sfputs_r>:
 800b65a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b65c:	4606      	mov	r6, r0
 800b65e:	460f      	mov	r7, r1
 800b660:	4614      	mov	r4, r2
 800b662:	18d5      	adds	r5, r2, r3
 800b664:	42ac      	cmp	r4, r5
 800b666:	d101      	bne.n	800b66c <__sfputs_r+0x12>
 800b668:	2000      	movs	r0, #0
 800b66a:	e007      	b.n	800b67c <__sfputs_r+0x22>
 800b66c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b670:	463a      	mov	r2, r7
 800b672:	4630      	mov	r0, r6
 800b674:	f7ff ffda 	bl	800b62c <__sfputc_r>
 800b678:	1c43      	adds	r3, r0, #1
 800b67a:	d1f3      	bne.n	800b664 <__sfputs_r+0xa>
 800b67c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b680 <_vfiprintf_r>:
 800b680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b684:	460d      	mov	r5, r1
 800b686:	b09d      	sub	sp, #116	; 0x74
 800b688:	4614      	mov	r4, r2
 800b68a:	4698      	mov	r8, r3
 800b68c:	4606      	mov	r6, r0
 800b68e:	b118      	cbz	r0, 800b698 <_vfiprintf_r+0x18>
 800b690:	6983      	ldr	r3, [r0, #24]
 800b692:	b90b      	cbnz	r3, 800b698 <_vfiprintf_r+0x18>
 800b694:	f7fb fe28 	bl	80072e8 <__sinit>
 800b698:	4b89      	ldr	r3, [pc, #548]	; (800b8c0 <_vfiprintf_r+0x240>)
 800b69a:	429d      	cmp	r5, r3
 800b69c:	d11b      	bne.n	800b6d6 <_vfiprintf_r+0x56>
 800b69e:	6875      	ldr	r5, [r6, #4]
 800b6a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b6a2:	07d9      	lsls	r1, r3, #31
 800b6a4:	d405      	bmi.n	800b6b2 <_vfiprintf_r+0x32>
 800b6a6:	89ab      	ldrh	r3, [r5, #12]
 800b6a8:	059a      	lsls	r2, r3, #22
 800b6aa:	d402      	bmi.n	800b6b2 <_vfiprintf_r+0x32>
 800b6ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b6ae:	f7fb fede 	bl	800746e <__retarget_lock_acquire_recursive>
 800b6b2:	89ab      	ldrh	r3, [r5, #12]
 800b6b4:	071b      	lsls	r3, r3, #28
 800b6b6:	d501      	bpl.n	800b6bc <_vfiprintf_r+0x3c>
 800b6b8:	692b      	ldr	r3, [r5, #16]
 800b6ba:	b9eb      	cbnz	r3, 800b6f8 <_vfiprintf_r+0x78>
 800b6bc:	4629      	mov	r1, r5
 800b6be:	4630      	mov	r0, r6
 800b6c0:	f000 f99e 	bl	800ba00 <__swsetup_r>
 800b6c4:	b1c0      	cbz	r0, 800b6f8 <_vfiprintf_r+0x78>
 800b6c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b6c8:	07dc      	lsls	r4, r3, #31
 800b6ca:	d50e      	bpl.n	800b6ea <_vfiprintf_r+0x6a>
 800b6cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b6d0:	b01d      	add	sp, #116	; 0x74
 800b6d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6d6:	4b7b      	ldr	r3, [pc, #492]	; (800b8c4 <_vfiprintf_r+0x244>)
 800b6d8:	429d      	cmp	r5, r3
 800b6da:	d101      	bne.n	800b6e0 <_vfiprintf_r+0x60>
 800b6dc:	68b5      	ldr	r5, [r6, #8]
 800b6de:	e7df      	b.n	800b6a0 <_vfiprintf_r+0x20>
 800b6e0:	4b79      	ldr	r3, [pc, #484]	; (800b8c8 <_vfiprintf_r+0x248>)
 800b6e2:	429d      	cmp	r5, r3
 800b6e4:	bf08      	it	eq
 800b6e6:	68f5      	ldreq	r5, [r6, #12]
 800b6e8:	e7da      	b.n	800b6a0 <_vfiprintf_r+0x20>
 800b6ea:	89ab      	ldrh	r3, [r5, #12]
 800b6ec:	0598      	lsls	r0, r3, #22
 800b6ee:	d4ed      	bmi.n	800b6cc <_vfiprintf_r+0x4c>
 800b6f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b6f2:	f7fb febd 	bl	8007470 <__retarget_lock_release_recursive>
 800b6f6:	e7e9      	b.n	800b6cc <_vfiprintf_r+0x4c>
 800b6f8:	2300      	movs	r3, #0
 800b6fa:	9309      	str	r3, [sp, #36]	; 0x24
 800b6fc:	2320      	movs	r3, #32
 800b6fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b702:	f8cd 800c 	str.w	r8, [sp, #12]
 800b706:	2330      	movs	r3, #48	; 0x30
 800b708:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b8cc <_vfiprintf_r+0x24c>
 800b70c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b710:	f04f 0901 	mov.w	r9, #1
 800b714:	4623      	mov	r3, r4
 800b716:	469a      	mov	sl, r3
 800b718:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b71c:	b10a      	cbz	r2, 800b722 <_vfiprintf_r+0xa2>
 800b71e:	2a25      	cmp	r2, #37	; 0x25
 800b720:	d1f9      	bne.n	800b716 <_vfiprintf_r+0x96>
 800b722:	ebba 0b04 	subs.w	fp, sl, r4
 800b726:	d00b      	beq.n	800b740 <_vfiprintf_r+0xc0>
 800b728:	465b      	mov	r3, fp
 800b72a:	4622      	mov	r2, r4
 800b72c:	4629      	mov	r1, r5
 800b72e:	4630      	mov	r0, r6
 800b730:	f7ff ff93 	bl	800b65a <__sfputs_r>
 800b734:	3001      	adds	r0, #1
 800b736:	f000 80aa 	beq.w	800b88e <_vfiprintf_r+0x20e>
 800b73a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b73c:	445a      	add	r2, fp
 800b73e:	9209      	str	r2, [sp, #36]	; 0x24
 800b740:	f89a 3000 	ldrb.w	r3, [sl]
 800b744:	2b00      	cmp	r3, #0
 800b746:	f000 80a2 	beq.w	800b88e <_vfiprintf_r+0x20e>
 800b74a:	2300      	movs	r3, #0
 800b74c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b750:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b754:	f10a 0a01 	add.w	sl, sl, #1
 800b758:	9304      	str	r3, [sp, #16]
 800b75a:	9307      	str	r3, [sp, #28]
 800b75c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b760:	931a      	str	r3, [sp, #104]	; 0x68
 800b762:	4654      	mov	r4, sl
 800b764:	2205      	movs	r2, #5
 800b766:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b76a:	4858      	ldr	r0, [pc, #352]	; (800b8cc <_vfiprintf_r+0x24c>)
 800b76c:	f7f4 fd58 	bl	8000220 <memchr>
 800b770:	9a04      	ldr	r2, [sp, #16]
 800b772:	b9d8      	cbnz	r0, 800b7ac <_vfiprintf_r+0x12c>
 800b774:	06d1      	lsls	r1, r2, #27
 800b776:	bf44      	itt	mi
 800b778:	2320      	movmi	r3, #32
 800b77a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b77e:	0713      	lsls	r3, r2, #28
 800b780:	bf44      	itt	mi
 800b782:	232b      	movmi	r3, #43	; 0x2b
 800b784:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b788:	f89a 3000 	ldrb.w	r3, [sl]
 800b78c:	2b2a      	cmp	r3, #42	; 0x2a
 800b78e:	d015      	beq.n	800b7bc <_vfiprintf_r+0x13c>
 800b790:	9a07      	ldr	r2, [sp, #28]
 800b792:	4654      	mov	r4, sl
 800b794:	2000      	movs	r0, #0
 800b796:	f04f 0c0a 	mov.w	ip, #10
 800b79a:	4621      	mov	r1, r4
 800b79c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b7a0:	3b30      	subs	r3, #48	; 0x30
 800b7a2:	2b09      	cmp	r3, #9
 800b7a4:	d94e      	bls.n	800b844 <_vfiprintf_r+0x1c4>
 800b7a6:	b1b0      	cbz	r0, 800b7d6 <_vfiprintf_r+0x156>
 800b7a8:	9207      	str	r2, [sp, #28]
 800b7aa:	e014      	b.n	800b7d6 <_vfiprintf_r+0x156>
 800b7ac:	eba0 0308 	sub.w	r3, r0, r8
 800b7b0:	fa09 f303 	lsl.w	r3, r9, r3
 800b7b4:	4313      	orrs	r3, r2
 800b7b6:	9304      	str	r3, [sp, #16]
 800b7b8:	46a2      	mov	sl, r4
 800b7ba:	e7d2      	b.n	800b762 <_vfiprintf_r+0xe2>
 800b7bc:	9b03      	ldr	r3, [sp, #12]
 800b7be:	1d19      	adds	r1, r3, #4
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	9103      	str	r1, [sp, #12]
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	bfbb      	ittet	lt
 800b7c8:	425b      	neglt	r3, r3
 800b7ca:	f042 0202 	orrlt.w	r2, r2, #2
 800b7ce:	9307      	strge	r3, [sp, #28]
 800b7d0:	9307      	strlt	r3, [sp, #28]
 800b7d2:	bfb8      	it	lt
 800b7d4:	9204      	strlt	r2, [sp, #16]
 800b7d6:	7823      	ldrb	r3, [r4, #0]
 800b7d8:	2b2e      	cmp	r3, #46	; 0x2e
 800b7da:	d10c      	bne.n	800b7f6 <_vfiprintf_r+0x176>
 800b7dc:	7863      	ldrb	r3, [r4, #1]
 800b7de:	2b2a      	cmp	r3, #42	; 0x2a
 800b7e0:	d135      	bne.n	800b84e <_vfiprintf_r+0x1ce>
 800b7e2:	9b03      	ldr	r3, [sp, #12]
 800b7e4:	1d1a      	adds	r2, r3, #4
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	9203      	str	r2, [sp, #12]
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	bfb8      	it	lt
 800b7ee:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b7f2:	3402      	adds	r4, #2
 800b7f4:	9305      	str	r3, [sp, #20]
 800b7f6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b8dc <_vfiprintf_r+0x25c>
 800b7fa:	7821      	ldrb	r1, [r4, #0]
 800b7fc:	2203      	movs	r2, #3
 800b7fe:	4650      	mov	r0, sl
 800b800:	f7f4 fd0e 	bl	8000220 <memchr>
 800b804:	b140      	cbz	r0, 800b818 <_vfiprintf_r+0x198>
 800b806:	2340      	movs	r3, #64	; 0x40
 800b808:	eba0 000a 	sub.w	r0, r0, sl
 800b80c:	fa03 f000 	lsl.w	r0, r3, r0
 800b810:	9b04      	ldr	r3, [sp, #16]
 800b812:	4303      	orrs	r3, r0
 800b814:	3401      	adds	r4, #1
 800b816:	9304      	str	r3, [sp, #16]
 800b818:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b81c:	482c      	ldr	r0, [pc, #176]	; (800b8d0 <_vfiprintf_r+0x250>)
 800b81e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b822:	2206      	movs	r2, #6
 800b824:	f7f4 fcfc 	bl	8000220 <memchr>
 800b828:	2800      	cmp	r0, #0
 800b82a:	d03f      	beq.n	800b8ac <_vfiprintf_r+0x22c>
 800b82c:	4b29      	ldr	r3, [pc, #164]	; (800b8d4 <_vfiprintf_r+0x254>)
 800b82e:	bb1b      	cbnz	r3, 800b878 <_vfiprintf_r+0x1f8>
 800b830:	9b03      	ldr	r3, [sp, #12]
 800b832:	3307      	adds	r3, #7
 800b834:	f023 0307 	bic.w	r3, r3, #7
 800b838:	3308      	adds	r3, #8
 800b83a:	9303      	str	r3, [sp, #12]
 800b83c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b83e:	443b      	add	r3, r7
 800b840:	9309      	str	r3, [sp, #36]	; 0x24
 800b842:	e767      	b.n	800b714 <_vfiprintf_r+0x94>
 800b844:	fb0c 3202 	mla	r2, ip, r2, r3
 800b848:	460c      	mov	r4, r1
 800b84a:	2001      	movs	r0, #1
 800b84c:	e7a5      	b.n	800b79a <_vfiprintf_r+0x11a>
 800b84e:	2300      	movs	r3, #0
 800b850:	3401      	adds	r4, #1
 800b852:	9305      	str	r3, [sp, #20]
 800b854:	4619      	mov	r1, r3
 800b856:	f04f 0c0a 	mov.w	ip, #10
 800b85a:	4620      	mov	r0, r4
 800b85c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b860:	3a30      	subs	r2, #48	; 0x30
 800b862:	2a09      	cmp	r2, #9
 800b864:	d903      	bls.n	800b86e <_vfiprintf_r+0x1ee>
 800b866:	2b00      	cmp	r3, #0
 800b868:	d0c5      	beq.n	800b7f6 <_vfiprintf_r+0x176>
 800b86a:	9105      	str	r1, [sp, #20]
 800b86c:	e7c3      	b.n	800b7f6 <_vfiprintf_r+0x176>
 800b86e:	fb0c 2101 	mla	r1, ip, r1, r2
 800b872:	4604      	mov	r4, r0
 800b874:	2301      	movs	r3, #1
 800b876:	e7f0      	b.n	800b85a <_vfiprintf_r+0x1da>
 800b878:	ab03      	add	r3, sp, #12
 800b87a:	9300      	str	r3, [sp, #0]
 800b87c:	462a      	mov	r2, r5
 800b87e:	4b16      	ldr	r3, [pc, #88]	; (800b8d8 <_vfiprintf_r+0x258>)
 800b880:	a904      	add	r1, sp, #16
 800b882:	4630      	mov	r0, r6
 800b884:	f7fb ff40 	bl	8007708 <_printf_float>
 800b888:	4607      	mov	r7, r0
 800b88a:	1c78      	adds	r0, r7, #1
 800b88c:	d1d6      	bne.n	800b83c <_vfiprintf_r+0x1bc>
 800b88e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b890:	07d9      	lsls	r1, r3, #31
 800b892:	d405      	bmi.n	800b8a0 <_vfiprintf_r+0x220>
 800b894:	89ab      	ldrh	r3, [r5, #12]
 800b896:	059a      	lsls	r2, r3, #22
 800b898:	d402      	bmi.n	800b8a0 <_vfiprintf_r+0x220>
 800b89a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b89c:	f7fb fde8 	bl	8007470 <__retarget_lock_release_recursive>
 800b8a0:	89ab      	ldrh	r3, [r5, #12]
 800b8a2:	065b      	lsls	r3, r3, #25
 800b8a4:	f53f af12 	bmi.w	800b6cc <_vfiprintf_r+0x4c>
 800b8a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b8aa:	e711      	b.n	800b6d0 <_vfiprintf_r+0x50>
 800b8ac:	ab03      	add	r3, sp, #12
 800b8ae:	9300      	str	r3, [sp, #0]
 800b8b0:	462a      	mov	r2, r5
 800b8b2:	4b09      	ldr	r3, [pc, #36]	; (800b8d8 <_vfiprintf_r+0x258>)
 800b8b4:	a904      	add	r1, sp, #16
 800b8b6:	4630      	mov	r0, r6
 800b8b8:	f7fc f9ca 	bl	8007c50 <_printf_i>
 800b8bc:	e7e4      	b.n	800b888 <_vfiprintf_r+0x208>
 800b8be:	bf00      	nop
 800b8c0:	0800c0a8 	.word	0x0800c0a8
 800b8c4:	0800c0c8 	.word	0x0800c0c8
 800b8c8:	0800c088 	.word	0x0800c088
 800b8cc:	0800c574 	.word	0x0800c574
 800b8d0:	0800c57e 	.word	0x0800c57e
 800b8d4:	08007709 	.word	0x08007709
 800b8d8:	0800b65b 	.word	0x0800b65b
 800b8dc:	0800c57a 	.word	0x0800c57a

0800b8e0 <_read_r>:
 800b8e0:	b538      	push	{r3, r4, r5, lr}
 800b8e2:	4d07      	ldr	r5, [pc, #28]	; (800b900 <_read_r+0x20>)
 800b8e4:	4604      	mov	r4, r0
 800b8e6:	4608      	mov	r0, r1
 800b8e8:	4611      	mov	r1, r2
 800b8ea:	2200      	movs	r2, #0
 800b8ec:	602a      	str	r2, [r5, #0]
 800b8ee:	461a      	mov	r2, r3
 800b8f0:	f7f6 f80c 	bl	800190c <_read>
 800b8f4:	1c43      	adds	r3, r0, #1
 800b8f6:	d102      	bne.n	800b8fe <_read_r+0x1e>
 800b8f8:	682b      	ldr	r3, [r5, #0]
 800b8fa:	b103      	cbz	r3, 800b8fe <_read_r+0x1e>
 800b8fc:	6023      	str	r3, [r4, #0]
 800b8fe:	bd38      	pop	{r3, r4, r5, pc}
 800b900:	20004ce8 	.word	0x20004ce8
 800b904:	00000000 	.word	0x00000000

0800b908 <nan>:
 800b908:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b910 <nan+0x8>
 800b90c:	4770      	bx	lr
 800b90e:	bf00      	nop
 800b910:	00000000 	.word	0x00000000
 800b914:	7ff80000 	.word	0x7ff80000

0800b918 <strncmp>:
 800b918:	b510      	push	{r4, lr}
 800b91a:	b17a      	cbz	r2, 800b93c <strncmp+0x24>
 800b91c:	4603      	mov	r3, r0
 800b91e:	3901      	subs	r1, #1
 800b920:	1884      	adds	r4, r0, r2
 800b922:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b926:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b92a:	4290      	cmp	r0, r2
 800b92c:	d101      	bne.n	800b932 <strncmp+0x1a>
 800b92e:	42a3      	cmp	r3, r4
 800b930:	d101      	bne.n	800b936 <strncmp+0x1e>
 800b932:	1a80      	subs	r0, r0, r2
 800b934:	bd10      	pop	{r4, pc}
 800b936:	2800      	cmp	r0, #0
 800b938:	d1f3      	bne.n	800b922 <strncmp+0xa>
 800b93a:	e7fa      	b.n	800b932 <strncmp+0x1a>
 800b93c:	4610      	mov	r0, r2
 800b93e:	e7f9      	b.n	800b934 <strncmp+0x1c>

0800b940 <__swbuf_r>:
 800b940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b942:	460e      	mov	r6, r1
 800b944:	4614      	mov	r4, r2
 800b946:	4605      	mov	r5, r0
 800b948:	b118      	cbz	r0, 800b952 <__swbuf_r+0x12>
 800b94a:	6983      	ldr	r3, [r0, #24]
 800b94c:	b90b      	cbnz	r3, 800b952 <__swbuf_r+0x12>
 800b94e:	f7fb fccb 	bl	80072e8 <__sinit>
 800b952:	4b21      	ldr	r3, [pc, #132]	; (800b9d8 <__swbuf_r+0x98>)
 800b954:	429c      	cmp	r4, r3
 800b956:	d12b      	bne.n	800b9b0 <__swbuf_r+0x70>
 800b958:	686c      	ldr	r4, [r5, #4]
 800b95a:	69a3      	ldr	r3, [r4, #24]
 800b95c:	60a3      	str	r3, [r4, #8]
 800b95e:	89a3      	ldrh	r3, [r4, #12]
 800b960:	071a      	lsls	r2, r3, #28
 800b962:	d52f      	bpl.n	800b9c4 <__swbuf_r+0x84>
 800b964:	6923      	ldr	r3, [r4, #16]
 800b966:	b36b      	cbz	r3, 800b9c4 <__swbuf_r+0x84>
 800b968:	6923      	ldr	r3, [r4, #16]
 800b96a:	6820      	ldr	r0, [r4, #0]
 800b96c:	1ac0      	subs	r0, r0, r3
 800b96e:	6963      	ldr	r3, [r4, #20]
 800b970:	b2f6      	uxtb	r6, r6
 800b972:	4283      	cmp	r3, r0
 800b974:	4637      	mov	r7, r6
 800b976:	dc04      	bgt.n	800b982 <__swbuf_r+0x42>
 800b978:	4621      	mov	r1, r4
 800b97a:	4628      	mov	r0, r5
 800b97c:	f7fe fbdc 	bl	800a138 <_fflush_r>
 800b980:	bb30      	cbnz	r0, 800b9d0 <__swbuf_r+0x90>
 800b982:	68a3      	ldr	r3, [r4, #8]
 800b984:	3b01      	subs	r3, #1
 800b986:	60a3      	str	r3, [r4, #8]
 800b988:	6823      	ldr	r3, [r4, #0]
 800b98a:	1c5a      	adds	r2, r3, #1
 800b98c:	6022      	str	r2, [r4, #0]
 800b98e:	701e      	strb	r6, [r3, #0]
 800b990:	6963      	ldr	r3, [r4, #20]
 800b992:	3001      	adds	r0, #1
 800b994:	4283      	cmp	r3, r0
 800b996:	d004      	beq.n	800b9a2 <__swbuf_r+0x62>
 800b998:	89a3      	ldrh	r3, [r4, #12]
 800b99a:	07db      	lsls	r3, r3, #31
 800b99c:	d506      	bpl.n	800b9ac <__swbuf_r+0x6c>
 800b99e:	2e0a      	cmp	r6, #10
 800b9a0:	d104      	bne.n	800b9ac <__swbuf_r+0x6c>
 800b9a2:	4621      	mov	r1, r4
 800b9a4:	4628      	mov	r0, r5
 800b9a6:	f7fe fbc7 	bl	800a138 <_fflush_r>
 800b9aa:	b988      	cbnz	r0, 800b9d0 <__swbuf_r+0x90>
 800b9ac:	4638      	mov	r0, r7
 800b9ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b9b0:	4b0a      	ldr	r3, [pc, #40]	; (800b9dc <__swbuf_r+0x9c>)
 800b9b2:	429c      	cmp	r4, r3
 800b9b4:	d101      	bne.n	800b9ba <__swbuf_r+0x7a>
 800b9b6:	68ac      	ldr	r4, [r5, #8]
 800b9b8:	e7cf      	b.n	800b95a <__swbuf_r+0x1a>
 800b9ba:	4b09      	ldr	r3, [pc, #36]	; (800b9e0 <__swbuf_r+0xa0>)
 800b9bc:	429c      	cmp	r4, r3
 800b9be:	bf08      	it	eq
 800b9c0:	68ec      	ldreq	r4, [r5, #12]
 800b9c2:	e7ca      	b.n	800b95a <__swbuf_r+0x1a>
 800b9c4:	4621      	mov	r1, r4
 800b9c6:	4628      	mov	r0, r5
 800b9c8:	f000 f81a 	bl	800ba00 <__swsetup_r>
 800b9cc:	2800      	cmp	r0, #0
 800b9ce:	d0cb      	beq.n	800b968 <__swbuf_r+0x28>
 800b9d0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800b9d4:	e7ea      	b.n	800b9ac <__swbuf_r+0x6c>
 800b9d6:	bf00      	nop
 800b9d8:	0800c0a8 	.word	0x0800c0a8
 800b9dc:	0800c0c8 	.word	0x0800c0c8
 800b9e0:	0800c088 	.word	0x0800c088

0800b9e4 <__ascii_wctomb>:
 800b9e4:	b149      	cbz	r1, 800b9fa <__ascii_wctomb+0x16>
 800b9e6:	2aff      	cmp	r2, #255	; 0xff
 800b9e8:	bf85      	ittet	hi
 800b9ea:	238a      	movhi	r3, #138	; 0x8a
 800b9ec:	6003      	strhi	r3, [r0, #0]
 800b9ee:	700a      	strbls	r2, [r1, #0]
 800b9f0:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800b9f4:	bf98      	it	ls
 800b9f6:	2001      	movls	r0, #1
 800b9f8:	4770      	bx	lr
 800b9fa:	4608      	mov	r0, r1
 800b9fc:	4770      	bx	lr
	...

0800ba00 <__swsetup_r>:
 800ba00:	4b32      	ldr	r3, [pc, #200]	; (800bacc <__swsetup_r+0xcc>)
 800ba02:	b570      	push	{r4, r5, r6, lr}
 800ba04:	681d      	ldr	r5, [r3, #0]
 800ba06:	4606      	mov	r6, r0
 800ba08:	460c      	mov	r4, r1
 800ba0a:	b125      	cbz	r5, 800ba16 <__swsetup_r+0x16>
 800ba0c:	69ab      	ldr	r3, [r5, #24]
 800ba0e:	b913      	cbnz	r3, 800ba16 <__swsetup_r+0x16>
 800ba10:	4628      	mov	r0, r5
 800ba12:	f7fb fc69 	bl	80072e8 <__sinit>
 800ba16:	4b2e      	ldr	r3, [pc, #184]	; (800bad0 <__swsetup_r+0xd0>)
 800ba18:	429c      	cmp	r4, r3
 800ba1a:	d10f      	bne.n	800ba3c <__swsetup_r+0x3c>
 800ba1c:	686c      	ldr	r4, [r5, #4]
 800ba1e:	89a3      	ldrh	r3, [r4, #12]
 800ba20:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ba24:	0719      	lsls	r1, r3, #28
 800ba26:	d42c      	bmi.n	800ba82 <__swsetup_r+0x82>
 800ba28:	06dd      	lsls	r5, r3, #27
 800ba2a:	d411      	bmi.n	800ba50 <__swsetup_r+0x50>
 800ba2c:	2309      	movs	r3, #9
 800ba2e:	6033      	str	r3, [r6, #0]
 800ba30:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ba34:	81a3      	strh	r3, [r4, #12]
 800ba36:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ba3a:	e03e      	b.n	800baba <__swsetup_r+0xba>
 800ba3c:	4b25      	ldr	r3, [pc, #148]	; (800bad4 <__swsetup_r+0xd4>)
 800ba3e:	429c      	cmp	r4, r3
 800ba40:	d101      	bne.n	800ba46 <__swsetup_r+0x46>
 800ba42:	68ac      	ldr	r4, [r5, #8]
 800ba44:	e7eb      	b.n	800ba1e <__swsetup_r+0x1e>
 800ba46:	4b24      	ldr	r3, [pc, #144]	; (800bad8 <__swsetup_r+0xd8>)
 800ba48:	429c      	cmp	r4, r3
 800ba4a:	bf08      	it	eq
 800ba4c:	68ec      	ldreq	r4, [r5, #12]
 800ba4e:	e7e6      	b.n	800ba1e <__swsetup_r+0x1e>
 800ba50:	0758      	lsls	r0, r3, #29
 800ba52:	d512      	bpl.n	800ba7a <__swsetup_r+0x7a>
 800ba54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ba56:	b141      	cbz	r1, 800ba6a <__swsetup_r+0x6a>
 800ba58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ba5c:	4299      	cmp	r1, r3
 800ba5e:	d002      	beq.n	800ba66 <__swsetup_r+0x66>
 800ba60:	4630      	mov	r0, r6
 800ba62:	f7ff fc3b 	bl	800b2dc <_free_r>
 800ba66:	2300      	movs	r3, #0
 800ba68:	6363      	str	r3, [r4, #52]	; 0x34
 800ba6a:	89a3      	ldrh	r3, [r4, #12]
 800ba6c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ba70:	81a3      	strh	r3, [r4, #12]
 800ba72:	2300      	movs	r3, #0
 800ba74:	6063      	str	r3, [r4, #4]
 800ba76:	6923      	ldr	r3, [r4, #16]
 800ba78:	6023      	str	r3, [r4, #0]
 800ba7a:	89a3      	ldrh	r3, [r4, #12]
 800ba7c:	f043 0308 	orr.w	r3, r3, #8
 800ba80:	81a3      	strh	r3, [r4, #12]
 800ba82:	6923      	ldr	r3, [r4, #16]
 800ba84:	b94b      	cbnz	r3, 800ba9a <__swsetup_r+0x9a>
 800ba86:	89a3      	ldrh	r3, [r4, #12]
 800ba88:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ba8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ba90:	d003      	beq.n	800ba9a <__swsetup_r+0x9a>
 800ba92:	4621      	mov	r1, r4
 800ba94:	4630      	mov	r0, r6
 800ba96:	f000 f84d 	bl	800bb34 <__smakebuf_r>
 800ba9a:	89a0      	ldrh	r0, [r4, #12]
 800ba9c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800baa0:	f010 0301 	ands.w	r3, r0, #1
 800baa4:	d00a      	beq.n	800babc <__swsetup_r+0xbc>
 800baa6:	2300      	movs	r3, #0
 800baa8:	60a3      	str	r3, [r4, #8]
 800baaa:	6963      	ldr	r3, [r4, #20]
 800baac:	425b      	negs	r3, r3
 800baae:	61a3      	str	r3, [r4, #24]
 800bab0:	6923      	ldr	r3, [r4, #16]
 800bab2:	b943      	cbnz	r3, 800bac6 <__swsetup_r+0xc6>
 800bab4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bab8:	d1ba      	bne.n	800ba30 <__swsetup_r+0x30>
 800baba:	bd70      	pop	{r4, r5, r6, pc}
 800babc:	0781      	lsls	r1, r0, #30
 800babe:	bf58      	it	pl
 800bac0:	6963      	ldrpl	r3, [r4, #20]
 800bac2:	60a3      	str	r3, [r4, #8]
 800bac4:	e7f4      	b.n	800bab0 <__swsetup_r+0xb0>
 800bac6:	2000      	movs	r0, #0
 800bac8:	e7f7      	b.n	800baba <__swsetup_r+0xba>
 800baca:	bf00      	nop
 800bacc:	20000010 	.word	0x20000010
 800bad0:	0800c0a8 	.word	0x0800c0a8
 800bad4:	0800c0c8 	.word	0x0800c0c8
 800bad8:	0800c088 	.word	0x0800c088

0800badc <abort>:
 800badc:	b508      	push	{r3, lr}
 800bade:	2006      	movs	r0, #6
 800bae0:	f000 f8da 	bl	800bc98 <raise>
 800bae4:	2001      	movs	r0, #1
 800bae6:	f7f5 ff07 	bl	80018f8 <_exit>

0800baea <__swhatbuf_r>:
 800baea:	b570      	push	{r4, r5, r6, lr}
 800baec:	460e      	mov	r6, r1
 800baee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800baf2:	2900      	cmp	r1, #0
 800baf4:	b096      	sub	sp, #88	; 0x58
 800baf6:	4614      	mov	r4, r2
 800baf8:	461d      	mov	r5, r3
 800bafa:	da08      	bge.n	800bb0e <__swhatbuf_r+0x24>
 800bafc:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800bb00:	2200      	movs	r2, #0
 800bb02:	602a      	str	r2, [r5, #0]
 800bb04:	061a      	lsls	r2, r3, #24
 800bb06:	d410      	bmi.n	800bb2a <__swhatbuf_r+0x40>
 800bb08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bb0c:	e00e      	b.n	800bb2c <__swhatbuf_r+0x42>
 800bb0e:	466a      	mov	r2, sp
 800bb10:	f000 f8de 	bl	800bcd0 <_fstat_r>
 800bb14:	2800      	cmp	r0, #0
 800bb16:	dbf1      	blt.n	800bafc <__swhatbuf_r+0x12>
 800bb18:	9a01      	ldr	r2, [sp, #4]
 800bb1a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bb1e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bb22:	425a      	negs	r2, r3
 800bb24:	415a      	adcs	r2, r3
 800bb26:	602a      	str	r2, [r5, #0]
 800bb28:	e7ee      	b.n	800bb08 <__swhatbuf_r+0x1e>
 800bb2a:	2340      	movs	r3, #64	; 0x40
 800bb2c:	2000      	movs	r0, #0
 800bb2e:	6023      	str	r3, [r4, #0]
 800bb30:	b016      	add	sp, #88	; 0x58
 800bb32:	bd70      	pop	{r4, r5, r6, pc}

0800bb34 <__smakebuf_r>:
 800bb34:	898b      	ldrh	r3, [r1, #12]
 800bb36:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bb38:	079d      	lsls	r5, r3, #30
 800bb3a:	4606      	mov	r6, r0
 800bb3c:	460c      	mov	r4, r1
 800bb3e:	d507      	bpl.n	800bb50 <__smakebuf_r+0x1c>
 800bb40:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bb44:	6023      	str	r3, [r4, #0]
 800bb46:	6123      	str	r3, [r4, #16]
 800bb48:	2301      	movs	r3, #1
 800bb4a:	6163      	str	r3, [r4, #20]
 800bb4c:	b002      	add	sp, #8
 800bb4e:	bd70      	pop	{r4, r5, r6, pc}
 800bb50:	ab01      	add	r3, sp, #4
 800bb52:	466a      	mov	r2, sp
 800bb54:	f7ff ffc9 	bl	800baea <__swhatbuf_r>
 800bb58:	9900      	ldr	r1, [sp, #0]
 800bb5a:	4605      	mov	r5, r0
 800bb5c:	4630      	mov	r0, r6
 800bb5e:	f7fb fcbf 	bl	80074e0 <_malloc_r>
 800bb62:	b948      	cbnz	r0, 800bb78 <__smakebuf_r+0x44>
 800bb64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bb68:	059a      	lsls	r2, r3, #22
 800bb6a:	d4ef      	bmi.n	800bb4c <__smakebuf_r+0x18>
 800bb6c:	f023 0303 	bic.w	r3, r3, #3
 800bb70:	f043 0302 	orr.w	r3, r3, #2
 800bb74:	81a3      	strh	r3, [r4, #12]
 800bb76:	e7e3      	b.n	800bb40 <__smakebuf_r+0xc>
 800bb78:	4b0d      	ldr	r3, [pc, #52]	; (800bbb0 <__smakebuf_r+0x7c>)
 800bb7a:	62b3      	str	r3, [r6, #40]	; 0x28
 800bb7c:	89a3      	ldrh	r3, [r4, #12]
 800bb7e:	6020      	str	r0, [r4, #0]
 800bb80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb84:	81a3      	strh	r3, [r4, #12]
 800bb86:	9b00      	ldr	r3, [sp, #0]
 800bb88:	6163      	str	r3, [r4, #20]
 800bb8a:	9b01      	ldr	r3, [sp, #4]
 800bb8c:	6120      	str	r0, [r4, #16]
 800bb8e:	b15b      	cbz	r3, 800bba8 <__smakebuf_r+0x74>
 800bb90:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bb94:	4630      	mov	r0, r6
 800bb96:	f000 f8ad 	bl	800bcf4 <_isatty_r>
 800bb9a:	b128      	cbz	r0, 800bba8 <__smakebuf_r+0x74>
 800bb9c:	89a3      	ldrh	r3, [r4, #12]
 800bb9e:	f023 0303 	bic.w	r3, r3, #3
 800bba2:	f043 0301 	orr.w	r3, r3, #1
 800bba6:	81a3      	strh	r3, [r4, #12]
 800bba8:	89a0      	ldrh	r0, [r4, #12]
 800bbaa:	4305      	orrs	r5, r0
 800bbac:	81a5      	strh	r5, [r4, #12]
 800bbae:	e7cd      	b.n	800bb4c <__smakebuf_r+0x18>
 800bbb0:	08007281 	.word	0x08007281

0800bbb4 <memmove>:
 800bbb4:	4288      	cmp	r0, r1
 800bbb6:	b510      	push	{r4, lr}
 800bbb8:	eb01 0402 	add.w	r4, r1, r2
 800bbbc:	d902      	bls.n	800bbc4 <memmove+0x10>
 800bbbe:	4284      	cmp	r4, r0
 800bbc0:	4623      	mov	r3, r4
 800bbc2:	d807      	bhi.n	800bbd4 <memmove+0x20>
 800bbc4:	1e43      	subs	r3, r0, #1
 800bbc6:	42a1      	cmp	r1, r4
 800bbc8:	d008      	beq.n	800bbdc <memmove+0x28>
 800bbca:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bbce:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bbd2:	e7f8      	b.n	800bbc6 <memmove+0x12>
 800bbd4:	4402      	add	r2, r0
 800bbd6:	4601      	mov	r1, r0
 800bbd8:	428a      	cmp	r2, r1
 800bbda:	d100      	bne.n	800bbde <memmove+0x2a>
 800bbdc:	bd10      	pop	{r4, pc}
 800bbde:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bbe2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bbe6:	e7f7      	b.n	800bbd8 <memmove+0x24>

0800bbe8 <_realloc_r>:
 800bbe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbec:	4680      	mov	r8, r0
 800bbee:	4614      	mov	r4, r2
 800bbf0:	460e      	mov	r6, r1
 800bbf2:	b921      	cbnz	r1, 800bbfe <_realloc_r+0x16>
 800bbf4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bbf8:	4611      	mov	r1, r2
 800bbfa:	f7fb bc71 	b.w	80074e0 <_malloc_r>
 800bbfe:	b92a      	cbnz	r2, 800bc0c <_realloc_r+0x24>
 800bc00:	f7ff fb6c 	bl	800b2dc <_free_r>
 800bc04:	4625      	mov	r5, r4
 800bc06:	4628      	mov	r0, r5
 800bc08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc0c:	f000 f882 	bl	800bd14 <_malloc_usable_size_r>
 800bc10:	4284      	cmp	r4, r0
 800bc12:	4607      	mov	r7, r0
 800bc14:	d802      	bhi.n	800bc1c <_realloc_r+0x34>
 800bc16:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bc1a:	d812      	bhi.n	800bc42 <_realloc_r+0x5a>
 800bc1c:	4621      	mov	r1, r4
 800bc1e:	4640      	mov	r0, r8
 800bc20:	f7fb fc5e 	bl	80074e0 <_malloc_r>
 800bc24:	4605      	mov	r5, r0
 800bc26:	2800      	cmp	r0, #0
 800bc28:	d0ed      	beq.n	800bc06 <_realloc_r+0x1e>
 800bc2a:	42bc      	cmp	r4, r7
 800bc2c:	4622      	mov	r2, r4
 800bc2e:	4631      	mov	r1, r6
 800bc30:	bf28      	it	cs
 800bc32:	463a      	movcs	r2, r7
 800bc34:	f7fb fc1d 	bl	8007472 <memcpy>
 800bc38:	4631      	mov	r1, r6
 800bc3a:	4640      	mov	r0, r8
 800bc3c:	f7ff fb4e 	bl	800b2dc <_free_r>
 800bc40:	e7e1      	b.n	800bc06 <_realloc_r+0x1e>
 800bc42:	4635      	mov	r5, r6
 800bc44:	e7df      	b.n	800bc06 <_realloc_r+0x1e>

0800bc46 <_raise_r>:
 800bc46:	291f      	cmp	r1, #31
 800bc48:	b538      	push	{r3, r4, r5, lr}
 800bc4a:	4604      	mov	r4, r0
 800bc4c:	460d      	mov	r5, r1
 800bc4e:	d904      	bls.n	800bc5a <_raise_r+0x14>
 800bc50:	2316      	movs	r3, #22
 800bc52:	6003      	str	r3, [r0, #0]
 800bc54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bc58:	bd38      	pop	{r3, r4, r5, pc}
 800bc5a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bc5c:	b112      	cbz	r2, 800bc64 <_raise_r+0x1e>
 800bc5e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bc62:	b94b      	cbnz	r3, 800bc78 <_raise_r+0x32>
 800bc64:	4620      	mov	r0, r4
 800bc66:	f000 f831 	bl	800bccc <_getpid_r>
 800bc6a:	462a      	mov	r2, r5
 800bc6c:	4601      	mov	r1, r0
 800bc6e:	4620      	mov	r0, r4
 800bc70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bc74:	f000 b818 	b.w	800bca8 <_kill_r>
 800bc78:	2b01      	cmp	r3, #1
 800bc7a:	d00a      	beq.n	800bc92 <_raise_r+0x4c>
 800bc7c:	1c59      	adds	r1, r3, #1
 800bc7e:	d103      	bne.n	800bc88 <_raise_r+0x42>
 800bc80:	2316      	movs	r3, #22
 800bc82:	6003      	str	r3, [r0, #0]
 800bc84:	2001      	movs	r0, #1
 800bc86:	e7e7      	b.n	800bc58 <_raise_r+0x12>
 800bc88:	2400      	movs	r4, #0
 800bc8a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bc8e:	4628      	mov	r0, r5
 800bc90:	4798      	blx	r3
 800bc92:	2000      	movs	r0, #0
 800bc94:	e7e0      	b.n	800bc58 <_raise_r+0x12>
	...

0800bc98 <raise>:
 800bc98:	4b02      	ldr	r3, [pc, #8]	; (800bca4 <raise+0xc>)
 800bc9a:	4601      	mov	r1, r0
 800bc9c:	6818      	ldr	r0, [r3, #0]
 800bc9e:	f7ff bfd2 	b.w	800bc46 <_raise_r>
 800bca2:	bf00      	nop
 800bca4:	20000010 	.word	0x20000010

0800bca8 <_kill_r>:
 800bca8:	b538      	push	{r3, r4, r5, lr}
 800bcaa:	4d07      	ldr	r5, [pc, #28]	; (800bcc8 <_kill_r+0x20>)
 800bcac:	2300      	movs	r3, #0
 800bcae:	4604      	mov	r4, r0
 800bcb0:	4608      	mov	r0, r1
 800bcb2:	4611      	mov	r1, r2
 800bcb4:	602b      	str	r3, [r5, #0]
 800bcb6:	f7f5 fe0f 	bl	80018d8 <_kill>
 800bcba:	1c43      	adds	r3, r0, #1
 800bcbc:	d102      	bne.n	800bcc4 <_kill_r+0x1c>
 800bcbe:	682b      	ldr	r3, [r5, #0]
 800bcc0:	b103      	cbz	r3, 800bcc4 <_kill_r+0x1c>
 800bcc2:	6023      	str	r3, [r4, #0]
 800bcc4:	bd38      	pop	{r3, r4, r5, pc}
 800bcc6:	bf00      	nop
 800bcc8:	20004ce8 	.word	0x20004ce8

0800bccc <_getpid_r>:
 800bccc:	f7f5 bdfc 	b.w	80018c8 <_getpid>

0800bcd0 <_fstat_r>:
 800bcd0:	b538      	push	{r3, r4, r5, lr}
 800bcd2:	4d07      	ldr	r5, [pc, #28]	; (800bcf0 <_fstat_r+0x20>)
 800bcd4:	2300      	movs	r3, #0
 800bcd6:	4604      	mov	r4, r0
 800bcd8:	4608      	mov	r0, r1
 800bcda:	4611      	mov	r1, r2
 800bcdc:	602b      	str	r3, [r5, #0]
 800bcde:	f7f5 fe5a 	bl	8001996 <_fstat>
 800bce2:	1c43      	adds	r3, r0, #1
 800bce4:	d102      	bne.n	800bcec <_fstat_r+0x1c>
 800bce6:	682b      	ldr	r3, [r5, #0]
 800bce8:	b103      	cbz	r3, 800bcec <_fstat_r+0x1c>
 800bcea:	6023      	str	r3, [r4, #0]
 800bcec:	bd38      	pop	{r3, r4, r5, pc}
 800bcee:	bf00      	nop
 800bcf0:	20004ce8 	.word	0x20004ce8

0800bcf4 <_isatty_r>:
 800bcf4:	b538      	push	{r3, r4, r5, lr}
 800bcf6:	4d06      	ldr	r5, [pc, #24]	; (800bd10 <_isatty_r+0x1c>)
 800bcf8:	2300      	movs	r3, #0
 800bcfa:	4604      	mov	r4, r0
 800bcfc:	4608      	mov	r0, r1
 800bcfe:	602b      	str	r3, [r5, #0]
 800bd00:	f7f5 fe59 	bl	80019b6 <_isatty>
 800bd04:	1c43      	adds	r3, r0, #1
 800bd06:	d102      	bne.n	800bd0e <_isatty_r+0x1a>
 800bd08:	682b      	ldr	r3, [r5, #0]
 800bd0a:	b103      	cbz	r3, 800bd0e <_isatty_r+0x1a>
 800bd0c:	6023      	str	r3, [r4, #0]
 800bd0e:	bd38      	pop	{r3, r4, r5, pc}
 800bd10:	20004ce8 	.word	0x20004ce8

0800bd14 <_malloc_usable_size_r>:
 800bd14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bd18:	1f18      	subs	r0, r3, #4
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	bfbc      	itt	lt
 800bd1e:	580b      	ldrlt	r3, [r1, r0]
 800bd20:	18c0      	addlt	r0, r0, r3
 800bd22:	4770      	bx	lr

0800bd24 <sqrt>:
 800bd24:	b538      	push	{r3, r4, r5, lr}
 800bd26:	ed2d 8b02 	vpush	{d8}
 800bd2a:	ec55 4b10 	vmov	r4, r5, d0
 800bd2e:	f000 f825 	bl	800bd7c <__ieee754_sqrt>
 800bd32:	4622      	mov	r2, r4
 800bd34:	462b      	mov	r3, r5
 800bd36:	4620      	mov	r0, r4
 800bd38:	4629      	mov	r1, r5
 800bd3a:	eeb0 8a40 	vmov.f32	s16, s0
 800bd3e:	eef0 8a60 	vmov.f32	s17, s1
 800bd42:	f7f4 ff13 	bl	8000b6c <__aeabi_dcmpun>
 800bd46:	b990      	cbnz	r0, 800bd6e <sqrt+0x4a>
 800bd48:	2200      	movs	r2, #0
 800bd4a:	2300      	movs	r3, #0
 800bd4c:	4620      	mov	r0, r4
 800bd4e:	4629      	mov	r1, r5
 800bd50:	f7f4 fee4 	bl	8000b1c <__aeabi_dcmplt>
 800bd54:	b158      	cbz	r0, 800bd6e <sqrt+0x4a>
 800bd56:	f7fb fa69 	bl	800722c <__errno>
 800bd5a:	2321      	movs	r3, #33	; 0x21
 800bd5c:	6003      	str	r3, [r0, #0]
 800bd5e:	2200      	movs	r2, #0
 800bd60:	2300      	movs	r3, #0
 800bd62:	4610      	mov	r0, r2
 800bd64:	4619      	mov	r1, r3
 800bd66:	f7f4 fd91 	bl	800088c <__aeabi_ddiv>
 800bd6a:	ec41 0b18 	vmov	d8, r0, r1
 800bd6e:	eeb0 0a48 	vmov.f32	s0, s16
 800bd72:	eef0 0a68 	vmov.f32	s1, s17
 800bd76:	ecbd 8b02 	vpop	{d8}
 800bd7a:	bd38      	pop	{r3, r4, r5, pc}

0800bd7c <__ieee754_sqrt>:
 800bd7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd80:	ec55 4b10 	vmov	r4, r5, d0
 800bd84:	4e55      	ldr	r6, [pc, #340]	; (800bedc <__ieee754_sqrt+0x160>)
 800bd86:	43ae      	bics	r6, r5
 800bd88:	ee10 0a10 	vmov	r0, s0
 800bd8c:	ee10 3a10 	vmov	r3, s0
 800bd90:	462a      	mov	r2, r5
 800bd92:	4629      	mov	r1, r5
 800bd94:	d110      	bne.n	800bdb8 <__ieee754_sqrt+0x3c>
 800bd96:	ee10 2a10 	vmov	r2, s0
 800bd9a:	462b      	mov	r3, r5
 800bd9c:	f7f4 fc4c 	bl	8000638 <__aeabi_dmul>
 800bda0:	4602      	mov	r2, r0
 800bda2:	460b      	mov	r3, r1
 800bda4:	4620      	mov	r0, r4
 800bda6:	4629      	mov	r1, r5
 800bda8:	f7f4 fa90 	bl	80002cc <__adddf3>
 800bdac:	4604      	mov	r4, r0
 800bdae:	460d      	mov	r5, r1
 800bdb0:	ec45 4b10 	vmov	d0, r4, r5
 800bdb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bdb8:	2d00      	cmp	r5, #0
 800bdba:	dc10      	bgt.n	800bdde <__ieee754_sqrt+0x62>
 800bdbc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800bdc0:	4330      	orrs	r0, r6
 800bdc2:	d0f5      	beq.n	800bdb0 <__ieee754_sqrt+0x34>
 800bdc4:	b15d      	cbz	r5, 800bdde <__ieee754_sqrt+0x62>
 800bdc6:	ee10 2a10 	vmov	r2, s0
 800bdca:	462b      	mov	r3, r5
 800bdcc:	ee10 0a10 	vmov	r0, s0
 800bdd0:	f7f4 fa7a 	bl	80002c8 <__aeabi_dsub>
 800bdd4:	4602      	mov	r2, r0
 800bdd6:	460b      	mov	r3, r1
 800bdd8:	f7f4 fd58 	bl	800088c <__aeabi_ddiv>
 800bddc:	e7e6      	b.n	800bdac <__ieee754_sqrt+0x30>
 800bdde:	1512      	asrs	r2, r2, #20
 800bde0:	d074      	beq.n	800becc <__ieee754_sqrt+0x150>
 800bde2:	07d4      	lsls	r4, r2, #31
 800bde4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800bde8:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800bdec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800bdf0:	bf5e      	ittt	pl
 800bdf2:	0fda      	lsrpl	r2, r3, #31
 800bdf4:	005b      	lslpl	r3, r3, #1
 800bdf6:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800bdfa:	2400      	movs	r4, #0
 800bdfc:	0fda      	lsrs	r2, r3, #31
 800bdfe:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800be02:	107f      	asrs	r7, r7, #1
 800be04:	005b      	lsls	r3, r3, #1
 800be06:	2516      	movs	r5, #22
 800be08:	4620      	mov	r0, r4
 800be0a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800be0e:	1886      	adds	r6, r0, r2
 800be10:	428e      	cmp	r6, r1
 800be12:	bfde      	ittt	le
 800be14:	1b89      	suble	r1, r1, r6
 800be16:	18b0      	addle	r0, r6, r2
 800be18:	18a4      	addle	r4, r4, r2
 800be1a:	0049      	lsls	r1, r1, #1
 800be1c:	3d01      	subs	r5, #1
 800be1e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800be22:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800be26:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800be2a:	d1f0      	bne.n	800be0e <__ieee754_sqrt+0x92>
 800be2c:	462a      	mov	r2, r5
 800be2e:	f04f 0e20 	mov.w	lr, #32
 800be32:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800be36:	4281      	cmp	r1, r0
 800be38:	eb06 0c05 	add.w	ip, r6, r5
 800be3c:	dc02      	bgt.n	800be44 <__ieee754_sqrt+0xc8>
 800be3e:	d113      	bne.n	800be68 <__ieee754_sqrt+0xec>
 800be40:	459c      	cmp	ip, r3
 800be42:	d811      	bhi.n	800be68 <__ieee754_sqrt+0xec>
 800be44:	f1bc 0f00 	cmp.w	ip, #0
 800be48:	eb0c 0506 	add.w	r5, ip, r6
 800be4c:	da43      	bge.n	800bed6 <__ieee754_sqrt+0x15a>
 800be4e:	2d00      	cmp	r5, #0
 800be50:	db41      	blt.n	800bed6 <__ieee754_sqrt+0x15a>
 800be52:	f100 0801 	add.w	r8, r0, #1
 800be56:	1a09      	subs	r1, r1, r0
 800be58:	459c      	cmp	ip, r3
 800be5a:	bf88      	it	hi
 800be5c:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 800be60:	eba3 030c 	sub.w	r3, r3, ip
 800be64:	4432      	add	r2, r6
 800be66:	4640      	mov	r0, r8
 800be68:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800be6c:	f1be 0e01 	subs.w	lr, lr, #1
 800be70:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800be74:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800be78:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800be7c:	d1db      	bne.n	800be36 <__ieee754_sqrt+0xba>
 800be7e:	430b      	orrs	r3, r1
 800be80:	d006      	beq.n	800be90 <__ieee754_sqrt+0x114>
 800be82:	1c50      	adds	r0, r2, #1
 800be84:	bf13      	iteet	ne
 800be86:	3201      	addne	r2, #1
 800be88:	3401      	addeq	r4, #1
 800be8a:	4672      	moveq	r2, lr
 800be8c:	f022 0201 	bicne.w	r2, r2, #1
 800be90:	1063      	asrs	r3, r4, #1
 800be92:	0852      	lsrs	r2, r2, #1
 800be94:	07e1      	lsls	r1, r4, #31
 800be96:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800be9a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800be9e:	bf48      	it	mi
 800bea0:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800bea4:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800bea8:	4614      	mov	r4, r2
 800beaa:	e781      	b.n	800bdb0 <__ieee754_sqrt+0x34>
 800beac:	0ad9      	lsrs	r1, r3, #11
 800beae:	3815      	subs	r0, #21
 800beb0:	055b      	lsls	r3, r3, #21
 800beb2:	2900      	cmp	r1, #0
 800beb4:	d0fa      	beq.n	800beac <__ieee754_sqrt+0x130>
 800beb6:	02cd      	lsls	r5, r1, #11
 800beb8:	d50a      	bpl.n	800bed0 <__ieee754_sqrt+0x154>
 800beba:	f1c2 0420 	rsb	r4, r2, #32
 800bebe:	fa23 f404 	lsr.w	r4, r3, r4
 800bec2:	1e55      	subs	r5, r2, #1
 800bec4:	4093      	lsls	r3, r2
 800bec6:	4321      	orrs	r1, r4
 800bec8:	1b42      	subs	r2, r0, r5
 800beca:	e78a      	b.n	800bde2 <__ieee754_sqrt+0x66>
 800becc:	4610      	mov	r0, r2
 800bece:	e7f0      	b.n	800beb2 <__ieee754_sqrt+0x136>
 800bed0:	0049      	lsls	r1, r1, #1
 800bed2:	3201      	adds	r2, #1
 800bed4:	e7ef      	b.n	800beb6 <__ieee754_sqrt+0x13a>
 800bed6:	4680      	mov	r8, r0
 800bed8:	e7bd      	b.n	800be56 <__ieee754_sqrt+0xda>
 800beda:	bf00      	nop
 800bedc:	7ff00000 	.word	0x7ff00000

0800bee0 <_init>:
 800bee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bee2:	bf00      	nop
 800bee4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bee6:	bc08      	pop	{r3}
 800bee8:	469e      	mov	lr, r3
 800beea:	4770      	bx	lr

0800beec <_fini>:
 800beec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800beee:	bf00      	nop
 800bef0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bef2:	bc08      	pop	{r3}
 800bef4:	469e      	mov	lr, r3
 800bef6:	4770      	bx	lr

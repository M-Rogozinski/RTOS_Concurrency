
RTOS_task3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005bf8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000230  08005dc8  08005dc8  00015dc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ff8  08005ff8  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005ff8  08005ff8  00015ff8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006000  08006000  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006000  08006000  00016000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006004  08006004  00016004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006008  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000040e4  20000074  0800607c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004158  0800607c  00024158  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016f05  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035ba  00000000  00000000  00036fa9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001338  00000000  00000000  0003a568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011d0  00000000  00000000  0003b8a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024ec7  00000000  00000000  0003ca70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016fcc  00000000  00000000  00061937  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000db44b  00000000  00000000  00078903  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00153d4e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000058a8  00000000  00000000  00153da0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005db0 	.word	0x08005db0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	08005db0 	.word	0x08005db0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005b4:	b480      	push	{r7}
 80005b6:	b085      	sub	sp, #20
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	60f8      	str	r0, [r7, #12]
 80005bc:	60b9      	str	r1, [r7, #8]
 80005be:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	4a07      	ldr	r2, [pc, #28]	; (80005e0 <vApplicationGetIdleTaskMemory+0x2c>)
 80005c4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005c6:	68bb      	ldr	r3, [r7, #8]
 80005c8:	4a06      	ldr	r2, [pc, #24]	; (80005e4 <vApplicationGetIdleTaskMemory+0x30>)
 80005ca:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	2280      	movs	r2, #128	; 0x80
 80005d0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005d2:	bf00      	nop
 80005d4:	3714      	adds	r7, #20
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop
 80005e0:	200000ac 	.word	0x200000ac
 80005e4:	20000160 	.word	0x20000160

080005e8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005e8:	b5b0      	push	{r4, r5, r7, lr}
 80005ea:	b0a8      	sub	sp, #160	; 0xa0
 80005ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* definition and creation of myMutex01 */
  osMutexDef(myMutex01);
 80005ee:	2300      	movs	r3, #0
 80005f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80005f4:	2300      	movs	r3, #0
 80005f6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  myMutex01Handle = osMutexCreate(osMutex(myMutex01));
 80005fa:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80005fe:	4618      	mov	r0, r3
 8000600:	f002 fb57 	bl	8002cb2 <osMutexCreate>
 8000604:	4603      	mov	r3, r0
 8000606:	4a39      	ldr	r2, [pc, #228]	; (80006ec <MX_FREERTOS_Init+0x104>)
 8000608:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of myBinarySem01 */
  osSemaphoreDef(myBinarySem01);
 800060a:	2300      	movs	r3, #0
 800060c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8000610:	2300      	movs	r3, #0
 8000612:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  myBinarySem01Handle = osSemaphoreCreate(osSemaphore(myBinarySem01), 1);
 8000616:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800061a:	2101      	movs	r1, #1
 800061c:	4618      	mov	r0, r3
 800061e:	f002 fb60 	bl	8002ce2 <osSemaphoreCreate>
 8000622:	4603      	mov	r3, r0
 8000624:	4a32      	ldr	r2, [pc, #200]	; (80006f0 <MX_FREERTOS_Init+0x108>)
 8000626:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000628:	4b32      	ldr	r3, [pc, #200]	; (80006f4 <MX_FREERTOS_Init+0x10c>)
 800062a:	f107 0474 	add.w	r4, r7, #116	; 0x74
 800062e:	461d      	mov	r5, r3
 8000630:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000632:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000634:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000638:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800063c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000640:	2100      	movs	r1, #0
 8000642:	4618      	mov	r0, r3
 8000644:	f002 fad5 	bl	8002bf2 <osThreadCreate>
 8000648:	4603      	mov	r3, r0
 800064a:	4a2b      	ldr	r2, [pc, #172]	; (80006f8 <MX_FREERTOS_Init+0x110>)
 800064c:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, StartTask02, osPriorityBelowNormal, 0, 128);
 800064e:	4b2b      	ldr	r3, [pc, #172]	; (80006fc <MX_FREERTOS_Init+0x114>)
 8000650:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8000654:	461d      	mov	r5, r3
 8000656:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000658:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800065a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800065e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 8000662:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000666:	2100      	movs	r1, #0
 8000668:	4618      	mov	r0, r3
 800066a:	f002 fac2 	bl	8002bf2 <osThreadCreate>
 800066e:	4603      	mov	r3, r0
 8000670:	4a23      	ldr	r2, [pc, #140]	; (8000700 <MX_FREERTOS_Init+0x118>)
 8000672:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask03 */
  osThreadDef(myTask03, StartTask03, osPriorityNormal, 0, 128);
 8000674:	4b23      	ldr	r3, [pc, #140]	; (8000704 <MX_FREERTOS_Init+0x11c>)
 8000676:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800067a:	461d      	mov	r5, r3
 800067c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800067e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000680:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000684:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask03Handle = osThreadCreate(osThread(myTask03), NULL);
 8000688:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800068c:	2100      	movs	r1, #0
 800068e:	4618      	mov	r0, r3
 8000690:	f002 faaf 	bl	8002bf2 <osThreadCreate>
 8000694:	4603      	mov	r3, r0
 8000696:	4a1c      	ldr	r2, [pc, #112]	; (8000708 <MX_FREERTOS_Init+0x120>)
 8000698:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask04 */
  osThreadDef(myTask04, StartTask04, osPriorityAboveNormal, 0, 128);
 800069a:	4b1c      	ldr	r3, [pc, #112]	; (800070c <MX_FREERTOS_Init+0x124>)
 800069c:	f107 0420 	add.w	r4, r7, #32
 80006a0:	461d      	mov	r5, r3
 80006a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006a6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask04Handle = osThreadCreate(osThread(myTask04), NULL);
 80006ae:	f107 0320 	add.w	r3, r7, #32
 80006b2:	2100      	movs	r1, #0
 80006b4:	4618      	mov	r0, r3
 80006b6:	f002 fa9c 	bl	8002bf2 <osThreadCreate>
 80006ba:	4603      	mov	r3, r0
 80006bc:	4a14      	ldr	r2, [pc, #80]	; (8000710 <MX_FREERTOS_Init+0x128>)
 80006be:	6013      	str	r3, [r2, #0]

  /* definition and creation of myPrintTask */
  osThreadDef(myPrintTask, StartPrintTask, osPriorityLow, 0, 128);
 80006c0:	4b14      	ldr	r3, [pc, #80]	; (8000714 <MX_FREERTOS_Init+0x12c>)
 80006c2:	1d3c      	adds	r4, r7, #4
 80006c4:	461d      	mov	r5, r3
 80006c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006ca:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006ce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myPrintTaskHandle = osThreadCreate(osThread(myPrintTask), NULL);
 80006d2:	1d3b      	adds	r3, r7, #4
 80006d4:	2100      	movs	r1, #0
 80006d6:	4618      	mov	r0, r3
 80006d8:	f002 fa8b 	bl	8002bf2 <osThreadCreate>
 80006dc:	4603      	mov	r3, r0
 80006de:	4a0e      	ldr	r2, [pc, #56]	; (8000718 <MX_FREERTOS_Init+0x130>)
 80006e0:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80006e2:	bf00      	nop
 80006e4:	37a0      	adds	r7, #160	; 0xa0
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bdb0      	pop	{r4, r5, r7, pc}
 80006ea:	bf00      	nop
 80006ec:	200000a4 	.word	0x200000a4
 80006f0:	200000a8 	.word	0x200000a8
 80006f4:	08005e04 	.word	0x08005e04
 80006f8:	20000090 	.word	0x20000090
 80006fc:	08005e20 	.word	0x08005e20
 8000700:	20000094 	.word	0x20000094
 8000704:	08005e3c 	.word	0x08005e3c
 8000708:	20000098 	.word	0x20000098
 800070c:	08005e58 	.word	0x08005e58
 8000710:	2000009c 	.word	0x2000009c
 8000714:	08005e74 	.word	0x08005e74
 8000718:	200000a0 	.word	0x200000a0

0800071c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000724:	2001      	movs	r0, #1
 8000726:	f002 fab0 	bl	8002c8a <osDelay>
 800072a:	e7fb      	b.n	8000724 <StartDefaultTask+0x8>

0800072c <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b084      	sub	sp, #16
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
	float rnd, mean, square;
	srand((unsigned)osKernelSysTick());
 8000734:	f002 fa4d 	bl	8002bd2 <osKernelSysTick>
 8000738:	4603      	mov	r3, r0
 800073a:	4618      	mov	r0, r3
 800073c:	f004 fc34 	bl	8004fa8 <srand>

  /* Infinite loop */
  for(;;)
	  mean = 0;
 8000740:	f04f 0300 	mov.w	r3, #0
 8000744:	60fb      	str	r3, [r7, #12]
 8000746:	e7fb      	b.n	8000740 <StartTask02+0x14>

08000748 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b084      	sub	sp, #16
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
	float rnd, mean, square;
	srand((unsigned)osKernelSysTick());
 8000750:	f002 fa3f 	bl	8002bd2 <osKernelSysTick>
 8000754:	4603      	mov	r3, r0
 8000756:	4618      	mov	r0, r3
 8000758:	f004 fc26 	bl	8004fa8 <srand>

  /* Infinite loop */
  for(;;)
	  mean = 0;
 800075c:	f04f 0300 	mov.w	r3, #0
 8000760:	60fb      	str	r3, [r7, #12]
 8000762:	e7fb      	b.n	800075c <StartTask03+0x14>

08000764 <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void const * argument)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b084      	sub	sp, #16
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */
	float rnd, mean, square;
	srand((unsigned)osKernelSysTick());
 800076c:	f002 fa31 	bl	8002bd2 <osKernelSysTick>
 8000770:	4603      	mov	r3, r0
 8000772:	4618      	mov	r0, r3
 8000774:	f004 fc18 	bl	8004fa8 <srand>

  /* Infinite loop */
  for(;;)
	  mean = 0;
 8000778:	f04f 0300 	mov.w	r3, #0
 800077c:	60fb      	str	r3, [r7, #12]
 800077e:	e7fb      	b.n	8000778 <StartTask04+0x14>

08000780 <StartPrintTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPrintTask */
void StartPrintTask(void const * argument)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartPrintTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000788:	2001      	movs	r0, #1
 800078a:	f002 fa7e 	bl	8002c8a <osDelay>
 800078e:	e7fb      	b.n	8000788 <StartPrintTask+0x8>

08000790 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b08a      	sub	sp, #40	; 0x28
 8000794:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000796:	f107 0314 	add.w	r3, r7, #20
 800079a:	2200      	movs	r2, #0
 800079c:	601a      	str	r2, [r3, #0]
 800079e:	605a      	str	r2, [r3, #4]
 80007a0:	609a      	str	r2, [r3, #8]
 80007a2:	60da      	str	r2, [r3, #12]
 80007a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	613b      	str	r3, [r7, #16]
 80007aa:	4b2d      	ldr	r3, [pc, #180]	; (8000860 <MX_GPIO_Init+0xd0>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	4a2c      	ldr	r2, [pc, #176]	; (8000860 <MX_GPIO_Init+0xd0>)
 80007b0:	f043 0304 	orr.w	r3, r3, #4
 80007b4:	6313      	str	r3, [r2, #48]	; 0x30
 80007b6:	4b2a      	ldr	r3, [pc, #168]	; (8000860 <MX_GPIO_Init+0xd0>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	f003 0304 	and.w	r3, r3, #4
 80007be:	613b      	str	r3, [r7, #16]
 80007c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	60fb      	str	r3, [r7, #12]
 80007c6:	4b26      	ldr	r3, [pc, #152]	; (8000860 <MX_GPIO_Init+0xd0>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	4a25      	ldr	r2, [pc, #148]	; (8000860 <MX_GPIO_Init+0xd0>)
 80007cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007d0:	6313      	str	r3, [r2, #48]	; 0x30
 80007d2:	4b23      	ldr	r3, [pc, #140]	; (8000860 <MX_GPIO_Init+0xd0>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007da:	60fb      	str	r3, [r7, #12]
 80007dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	60bb      	str	r3, [r7, #8]
 80007e2:	4b1f      	ldr	r3, [pc, #124]	; (8000860 <MX_GPIO_Init+0xd0>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	4a1e      	ldr	r2, [pc, #120]	; (8000860 <MX_GPIO_Init+0xd0>)
 80007e8:	f043 0301 	orr.w	r3, r3, #1
 80007ec:	6313      	str	r3, [r2, #48]	; 0x30
 80007ee:	4b1c      	ldr	r3, [pc, #112]	; (8000860 <MX_GPIO_Init+0xd0>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	f003 0301 	and.w	r3, r3, #1
 80007f6:	60bb      	str	r3, [r7, #8]
 80007f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	607b      	str	r3, [r7, #4]
 80007fe:	4b18      	ldr	r3, [pc, #96]	; (8000860 <MX_GPIO_Init+0xd0>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	4a17      	ldr	r2, [pc, #92]	; (8000860 <MX_GPIO_Init+0xd0>)
 8000804:	f043 0302 	orr.w	r3, r3, #2
 8000808:	6313      	str	r3, [r2, #48]	; 0x30
 800080a:	4b15      	ldr	r3, [pc, #84]	; (8000860 <MX_GPIO_Init+0xd0>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	f003 0302 	and.w	r3, r3, #2
 8000812:	607b      	str	r3, [r7, #4]
 8000814:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000816:	2200      	movs	r2, #0
 8000818:	2120      	movs	r1, #32
 800081a:	4812      	ldr	r0, [pc, #72]	; (8000864 <MX_GPIO_Init+0xd4>)
 800081c:	f000 fdb4 	bl	8001388 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000820:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000824:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000826:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800082a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082c:	2300      	movs	r3, #0
 800082e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000830:	f107 0314 	add.w	r3, r7, #20
 8000834:	4619      	mov	r1, r3
 8000836:	480c      	ldr	r0, [pc, #48]	; (8000868 <MX_GPIO_Init+0xd8>)
 8000838:	f000 fc12 	bl	8001060 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800083c:	2320      	movs	r3, #32
 800083e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000840:	2301      	movs	r3, #1
 8000842:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000844:	2300      	movs	r3, #0
 8000846:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000848:	2300      	movs	r3, #0
 800084a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800084c:	f107 0314 	add.w	r3, r7, #20
 8000850:	4619      	mov	r1, r3
 8000852:	4804      	ldr	r0, [pc, #16]	; (8000864 <MX_GPIO_Init+0xd4>)
 8000854:	f000 fc04 	bl	8001060 <HAL_GPIO_Init>

}
 8000858:	bf00      	nop
 800085a:	3728      	adds	r7, #40	; 0x28
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	40023800 	.word	0x40023800
 8000864:	40020000 	.word	0x40020000
 8000868:	40020800 	.word	0x40020800

0800086c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000870:	f000 fad2 	bl	8000e18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000874:	f000 f80a 	bl	800088c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000878:	f7ff ff8a 	bl	8000790 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800087c:	f000 fa30 	bl	8000ce0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000880:	f7ff feb2 	bl	80005e8 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000884:	f002 f99e 	bl	8002bc4 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000888:	e7fe      	b.n	8000888 <main+0x1c>
	...

0800088c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b094      	sub	sp, #80	; 0x50
 8000890:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000892:	f107 031c 	add.w	r3, r7, #28
 8000896:	2234      	movs	r2, #52	; 0x34
 8000898:	2100      	movs	r1, #0
 800089a:	4618      	mov	r0, r3
 800089c:	f004 fae7 	bl	8004e6e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008a0:	f107 0308 	add.w	r3, r7, #8
 80008a4:	2200      	movs	r2, #0
 80008a6:	601a      	str	r2, [r3, #0]
 80008a8:	605a      	str	r2, [r3, #4]
 80008aa:	609a      	str	r2, [r3, #8]
 80008ac:	60da      	str	r2, [r3, #12]
 80008ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008b0:	2300      	movs	r3, #0
 80008b2:	607b      	str	r3, [r7, #4]
 80008b4:	4b2c      	ldr	r3, [pc, #176]	; (8000968 <SystemClock_Config+0xdc>)
 80008b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b8:	4a2b      	ldr	r2, [pc, #172]	; (8000968 <SystemClock_Config+0xdc>)
 80008ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008be:	6413      	str	r3, [r2, #64]	; 0x40
 80008c0:	4b29      	ldr	r3, [pc, #164]	; (8000968 <SystemClock_Config+0xdc>)
 80008c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008c8:	607b      	str	r3, [r7, #4]
 80008ca:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008cc:	2300      	movs	r3, #0
 80008ce:	603b      	str	r3, [r7, #0]
 80008d0:	4b26      	ldr	r3, [pc, #152]	; (800096c <SystemClock_Config+0xe0>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4a25      	ldr	r2, [pc, #148]	; (800096c <SystemClock_Config+0xe0>)
 80008d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008da:	6013      	str	r3, [r2, #0]
 80008dc:	4b23      	ldr	r3, [pc, #140]	; (800096c <SystemClock_Config+0xe0>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008e4:	603b      	str	r3, [r7, #0]
 80008e6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008e8:	2302      	movs	r3, #2
 80008ea:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008ec:	2301      	movs	r3, #1
 80008ee:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008f0:	2310      	movs	r3, #16
 80008f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008f4:	2302      	movs	r3, #2
 80008f6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008f8:	2300      	movs	r3, #0
 80008fa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80008fc:	2308      	movs	r3, #8
 80008fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000900:	23b4      	movs	r3, #180	; 0xb4
 8000902:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000904:	2302      	movs	r3, #2
 8000906:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000908:	2302      	movs	r3, #2
 800090a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800090c:	2302      	movs	r3, #2
 800090e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000910:	f107 031c 	add.w	r3, r7, #28
 8000914:	4618      	mov	r0, r3
 8000916:	f001 f91d 	bl	8001b54 <HAL_RCC_OscConfig>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000920:	f000 f838 	bl	8000994 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000924:	f000 fd4a 	bl	80013bc <HAL_PWREx_EnableOverDrive>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800092e:	f000 f831 	bl	8000994 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000932:	230f      	movs	r3, #15
 8000934:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000936:	2302      	movs	r3, #2
 8000938:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800093a:	2300      	movs	r3, #0
 800093c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800093e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000942:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000944:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000948:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800094a:	f107 0308 	add.w	r3, r7, #8
 800094e:	2105      	movs	r1, #5
 8000950:	4618      	mov	r0, r3
 8000952:	f000 fd83 	bl	800145c <HAL_RCC_ClockConfig>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800095c:	f000 f81a 	bl	8000994 <Error_Handler>
  }
}
 8000960:	bf00      	nop
 8000962:	3750      	adds	r7, #80	; 0x50
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	40023800 	.word	0x40023800
 800096c:	40007000 	.word	0x40007000

08000970 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4a04      	ldr	r2, [pc, #16]	; (8000990 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d101      	bne.n	8000986 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000982:	f000 fa6b 	bl	8000e5c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000986:	bf00      	nop
 8000988:	3708      	adds	r7, #8
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	40001000 	.word	0x40001000

08000994 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000998:	b672      	cpsid	i
}
 800099a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800099c:	e7fe      	b.n	800099c <Error_Handler+0x8>
	...

080009a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	607b      	str	r3, [r7, #4]
 80009aa:	4b12      	ldr	r3, [pc, #72]	; (80009f4 <HAL_MspInit+0x54>)
 80009ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ae:	4a11      	ldr	r2, [pc, #68]	; (80009f4 <HAL_MspInit+0x54>)
 80009b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009b4:	6453      	str	r3, [r2, #68]	; 0x44
 80009b6:	4b0f      	ldr	r3, [pc, #60]	; (80009f4 <HAL_MspInit+0x54>)
 80009b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009be:	607b      	str	r3, [r7, #4]
 80009c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009c2:	2300      	movs	r3, #0
 80009c4:	603b      	str	r3, [r7, #0]
 80009c6:	4b0b      	ldr	r3, [pc, #44]	; (80009f4 <HAL_MspInit+0x54>)
 80009c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ca:	4a0a      	ldr	r2, [pc, #40]	; (80009f4 <HAL_MspInit+0x54>)
 80009cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009d0:	6413      	str	r3, [r2, #64]	; 0x40
 80009d2:	4b08      	ldr	r3, [pc, #32]	; (80009f4 <HAL_MspInit+0x54>)
 80009d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009da:	603b      	str	r3, [r7, #0]
 80009dc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009de:	2200      	movs	r2, #0
 80009e0:	210f      	movs	r1, #15
 80009e2:	f06f 0001 	mvn.w	r0, #1
 80009e6:	f000 fb11 	bl	800100c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ea:	bf00      	nop
 80009ec:	3708      	adds	r7, #8
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	40023800 	.word	0x40023800

080009f8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b08e      	sub	sp, #56	; 0x38
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000a00:	2300      	movs	r3, #0
 8000a02:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000a04:	2300      	movs	r3, #0
 8000a06:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000a08:	2300      	movs	r3, #0
 8000a0a:	60fb      	str	r3, [r7, #12]
 8000a0c:	4b33      	ldr	r3, [pc, #204]	; (8000adc <HAL_InitTick+0xe4>)
 8000a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a10:	4a32      	ldr	r2, [pc, #200]	; (8000adc <HAL_InitTick+0xe4>)
 8000a12:	f043 0310 	orr.w	r3, r3, #16
 8000a16:	6413      	str	r3, [r2, #64]	; 0x40
 8000a18:	4b30      	ldr	r3, [pc, #192]	; (8000adc <HAL_InitTick+0xe4>)
 8000a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a1c:	f003 0310 	and.w	r3, r3, #16
 8000a20:	60fb      	str	r3, [r7, #12]
 8000a22:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a24:	f107 0210 	add.w	r2, r7, #16
 8000a28:	f107 0314 	add.w	r3, r7, #20
 8000a2c:	4611      	mov	r1, r2
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f000 fe2e 	bl	8001690 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000a34:	6a3b      	ldr	r3, [r7, #32]
 8000a36:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d103      	bne.n	8000a46 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000a3e:	f000 fdff 	bl	8001640 <HAL_RCC_GetPCLK1Freq>
 8000a42:	6378      	str	r0, [r7, #52]	; 0x34
 8000a44:	e004      	b.n	8000a50 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000a46:	f000 fdfb 	bl	8001640 <HAL_RCC_GetPCLK1Freq>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	005b      	lsls	r3, r3, #1
 8000a4e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a52:	4a23      	ldr	r2, [pc, #140]	; (8000ae0 <HAL_InitTick+0xe8>)
 8000a54:	fba2 2303 	umull	r2, r3, r2, r3
 8000a58:	0c9b      	lsrs	r3, r3, #18
 8000a5a:	3b01      	subs	r3, #1
 8000a5c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000a5e:	4b21      	ldr	r3, [pc, #132]	; (8000ae4 <HAL_InitTick+0xec>)
 8000a60:	4a21      	ldr	r2, [pc, #132]	; (8000ae8 <HAL_InitTick+0xf0>)
 8000a62:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000a64:	4b1f      	ldr	r3, [pc, #124]	; (8000ae4 <HAL_InitTick+0xec>)
 8000a66:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a6a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000a6c:	4a1d      	ldr	r2, [pc, #116]	; (8000ae4 <HAL_InitTick+0xec>)
 8000a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a70:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000a72:	4b1c      	ldr	r3, [pc, #112]	; (8000ae4 <HAL_InitTick+0xec>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a78:	4b1a      	ldr	r3, [pc, #104]	; (8000ae4 <HAL_InitTick+0xec>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a7e:	4b19      	ldr	r3, [pc, #100]	; (8000ae4 <HAL_InitTick+0xec>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000a84:	4817      	ldr	r0, [pc, #92]	; (8000ae4 <HAL_InitTick+0xec>)
 8000a86:	f001 fb03 	bl	8002090 <HAL_TIM_Base_Init>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000a90:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d11b      	bne.n	8000ad0 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000a98:	4812      	ldr	r0, [pc, #72]	; (8000ae4 <HAL_InitTick+0xec>)
 8000a9a:	f001 fb53 	bl	8002144 <HAL_TIM_Base_Start_IT>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000aa4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d111      	bne.n	8000ad0 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000aac:	2036      	movs	r0, #54	; 0x36
 8000aae:	f000 fac9 	bl	8001044 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	2b0f      	cmp	r3, #15
 8000ab6:	d808      	bhi.n	8000aca <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000ab8:	2200      	movs	r2, #0
 8000aba:	6879      	ldr	r1, [r7, #4]
 8000abc:	2036      	movs	r0, #54	; 0x36
 8000abe:	f000 faa5 	bl	800100c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ac2:	4a0a      	ldr	r2, [pc, #40]	; (8000aec <HAL_InitTick+0xf4>)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	6013      	str	r3, [r2, #0]
 8000ac8:	e002      	b.n	8000ad0 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000aca:	2301      	movs	r3, #1
 8000acc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000ad0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	3738      	adds	r7, #56	; 0x38
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	40023800 	.word	0x40023800
 8000ae0:	431bde83 	.word	0x431bde83
 8000ae4:	20000360 	.word	0x20000360
 8000ae8:	40001000 	.word	0x40001000
 8000aec:	20000004 	.word	0x20000004

08000af0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000af4:	e7fe      	b.n	8000af4 <NMI_Handler+0x4>

08000af6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000af6:	b480      	push	{r7}
 8000af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000afa:	e7fe      	b.n	8000afa <HardFault_Handler+0x4>

08000afc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b00:	e7fe      	b.n	8000b00 <MemManage_Handler+0x4>

08000b02 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b02:	b480      	push	{r7}
 8000b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b06:	e7fe      	b.n	8000b06 <BusFault_Handler+0x4>

08000b08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b0c:	e7fe      	b.n	8000b0c <UsageFault_Handler+0x4>

08000b0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b0e:	b480      	push	{r7}
 8000b10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b12:	bf00      	nop
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr

08000b1c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000b20:	4802      	ldr	r0, [pc, #8]	; (8000b2c <TIM6_DAC_IRQHandler+0x10>)
 8000b22:	f001 fb7f 	bl	8002224 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000b26:	bf00      	nop
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	20000360 	.word	0x20000360

08000b30 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  return 1;
 8000b34:	2301      	movs	r3, #1
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr

08000b40 <_kill>:

int _kill(int pid, int sig)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
 8000b48:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000b4a:	f004 f85f 	bl	8004c0c <__errno>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2216      	movs	r2, #22
 8000b52:	601a      	str	r2, [r3, #0]
  return -1;
 8000b54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	3708      	adds	r7, #8
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}

08000b60 <_exit>:

void _exit (int status)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000b68:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000b6c:	6878      	ldr	r0, [r7, #4]
 8000b6e:	f7ff ffe7 	bl	8000b40 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000b72:	e7fe      	b.n	8000b72 <_exit+0x12>

08000b74 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b086      	sub	sp, #24
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	60f8      	str	r0, [r7, #12]
 8000b7c:	60b9      	str	r1, [r7, #8]
 8000b7e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b80:	2300      	movs	r3, #0
 8000b82:	617b      	str	r3, [r7, #20]
 8000b84:	e00a      	b.n	8000b9c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b86:	f3af 8000 	nop.w
 8000b8a:	4601      	mov	r1, r0
 8000b8c:	68bb      	ldr	r3, [r7, #8]
 8000b8e:	1c5a      	adds	r2, r3, #1
 8000b90:	60ba      	str	r2, [r7, #8]
 8000b92:	b2ca      	uxtb	r2, r1
 8000b94:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b96:	697b      	ldr	r3, [r7, #20]
 8000b98:	3301      	adds	r3, #1
 8000b9a:	617b      	str	r3, [r7, #20]
 8000b9c:	697a      	ldr	r2, [r7, #20]
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	429a      	cmp	r2, r3
 8000ba2:	dbf0      	blt.n	8000b86 <_read+0x12>
  }

  return len;
 8000ba4:	687b      	ldr	r3, [r7, #4]
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	3718      	adds	r7, #24
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}

08000bae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000bae:	b580      	push	{r7, lr}
 8000bb0:	b086      	sub	sp, #24
 8000bb2:	af00      	add	r7, sp, #0
 8000bb4:	60f8      	str	r0, [r7, #12]
 8000bb6:	60b9      	str	r1, [r7, #8]
 8000bb8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bba:	2300      	movs	r3, #0
 8000bbc:	617b      	str	r3, [r7, #20]
 8000bbe:	e009      	b.n	8000bd4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000bc0:	68bb      	ldr	r3, [r7, #8]
 8000bc2:	1c5a      	adds	r2, r3, #1
 8000bc4:	60ba      	str	r2, [r7, #8]
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bce:	697b      	ldr	r3, [r7, #20]
 8000bd0:	3301      	adds	r3, #1
 8000bd2:	617b      	str	r3, [r7, #20]
 8000bd4:	697a      	ldr	r2, [r7, #20]
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	429a      	cmp	r2, r3
 8000bda:	dbf1      	blt.n	8000bc0 <_write+0x12>
  }
  return len;
 8000bdc:	687b      	ldr	r3, [r7, #4]
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	3718      	adds	r7, #24
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}

08000be6 <_close>:

int _close(int file)
{
 8000be6:	b480      	push	{r7}
 8000be8:	b083      	sub	sp, #12
 8000bea:	af00      	add	r7, sp, #0
 8000bec:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000bee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	370c      	adds	r7, #12
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr

08000bfe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bfe:	b480      	push	{r7}
 8000c00:	b083      	sub	sp, #12
 8000c02:	af00      	add	r7, sp, #0
 8000c04:	6078      	str	r0, [r7, #4]
 8000c06:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c0e:	605a      	str	r2, [r3, #4]
  return 0;
 8000c10:	2300      	movs	r3, #0
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	370c      	adds	r7, #12
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr

08000c1e <_isatty>:

int _isatty(int file)
{
 8000c1e:	b480      	push	{r7}
 8000c20:	b083      	sub	sp, #12
 8000c22:	af00      	add	r7, sp, #0
 8000c24:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c26:	2301      	movs	r3, #1
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	370c      	adds	r7, #12
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr

08000c34 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b085      	sub	sp, #20
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	60f8      	str	r0, [r7, #12]
 8000c3c:	60b9      	str	r1, [r7, #8]
 8000c3e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c40:	2300      	movs	r3, #0
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	3714      	adds	r7, #20
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
	...

08000c50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b086      	sub	sp, #24
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c58:	4a14      	ldr	r2, [pc, #80]	; (8000cac <_sbrk+0x5c>)
 8000c5a:	4b15      	ldr	r3, [pc, #84]	; (8000cb0 <_sbrk+0x60>)
 8000c5c:	1ad3      	subs	r3, r2, r3
 8000c5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c64:	4b13      	ldr	r3, [pc, #76]	; (8000cb4 <_sbrk+0x64>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d102      	bne.n	8000c72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c6c:	4b11      	ldr	r3, [pc, #68]	; (8000cb4 <_sbrk+0x64>)
 8000c6e:	4a12      	ldr	r2, [pc, #72]	; (8000cb8 <_sbrk+0x68>)
 8000c70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c72:	4b10      	ldr	r3, [pc, #64]	; (8000cb4 <_sbrk+0x64>)
 8000c74:	681a      	ldr	r2, [r3, #0]
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	4413      	add	r3, r2
 8000c7a:	693a      	ldr	r2, [r7, #16]
 8000c7c:	429a      	cmp	r2, r3
 8000c7e:	d207      	bcs.n	8000c90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c80:	f003 ffc4 	bl	8004c0c <__errno>
 8000c84:	4603      	mov	r3, r0
 8000c86:	220c      	movs	r2, #12
 8000c88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c8e:	e009      	b.n	8000ca4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c90:	4b08      	ldr	r3, [pc, #32]	; (8000cb4 <_sbrk+0x64>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c96:	4b07      	ldr	r3, [pc, #28]	; (8000cb4 <_sbrk+0x64>)
 8000c98:	681a      	ldr	r2, [r3, #0]
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	4413      	add	r3, r2
 8000c9e:	4a05      	ldr	r2, [pc, #20]	; (8000cb4 <_sbrk+0x64>)
 8000ca0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ca2:	68fb      	ldr	r3, [r7, #12]
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	3718      	adds	r7, #24
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	20020000 	.word	0x20020000
 8000cb0:	00000400 	.word	0x00000400
 8000cb4:	200003a8 	.word	0x200003a8
 8000cb8:	20004158 	.word	0x20004158

08000cbc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cc0:	4b06      	ldr	r3, [pc, #24]	; (8000cdc <SystemInit+0x20>)
 8000cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cc6:	4a05      	ldr	r2, [pc, #20]	; (8000cdc <SystemInit+0x20>)
 8000cc8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ccc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cd0:	bf00      	nop
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	e000ed00 	.word	0xe000ed00

08000ce0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ce4:	4b11      	ldr	r3, [pc, #68]	; (8000d2c <MX_USART2_UART_Init+0x4c>)
 8000ce6:	4a12      	ldr	r2, [pc, #72]	; (8000d30 <MX_USART2_UART_Init+0x50>)
 8000ce8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000cea:	4b10      	ldr	r3, [pc, #64]	; (8000d2c <MX_USART2_UART_Init+0x4c>)
 8000cec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cf0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000cf2:	4b0e      	ldr	r3, [pc, #56]	; (8000d2c <MX_USART2_UART_Init+0x4c>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000cf8:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <MX_USART2_UART_Init+0x4c>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000cfe:	4b0b      	ldr	r3, [pc, #44]	; (8000d2c <MX_USART2_UART_Init+0x4c>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d04:	4b09      	ldr	r3, [pc, #36]	; (8000d2c <MX_USART2_UART_Init+0x4c>)
 8000d06:	220c      	movs	r2, #12
 8000d08:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d0a:	4b08      	ldr	r3, [pc, #32]	; (8000d2c <MX_USART2_UART_Init+0x4c>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d10:	4b06      	ldr	r3, [pc, #24]	; (8000d2c <MX_USART2_UART_Init+0x4c>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d16:	4805      	ldr	r0, [pc, #20]	; (8000d2c <MX_USART2_UART_Init+0x4c>)
 8000d18:	f001 fc68 	bl	80025ec <HAL_UART_Init>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000d22:	f7ff fe37 	bl	8000994 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d26:	bf00      	nop
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	200003ac 	.word	0x200003ac
 8000d30:	40004400 	.word	0x40004400

08000d34 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b08a      	sub	sp, #40	; 0x28
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d3c:	f107 0314 	add.w	r3, r7, #20
 8000d40:	2200      	movs	r2, #0
 8000d42:	601a      	str	r2, [r3, #0]
 8000d44:	605a      	str	r2, [r3, #4]
 8000d46:	609a      	str	r2, [r3, #8]
 8000d48:	60da      	str	r2, [r3, #12]
 8000d4a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a19      	ldr	r2, [pc, #100]	; (8000db8 <HAL_UART_MspInit+0x84>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d12b      	bne.n	8000dae <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d56:	2300      	movs	r3, #0
 8000d58:	613b      	str	r3, [r7, #16]
 8000d5a:	4b18      	ldr	r3, [pc, #96]	; (8000dbc <HAL_UART_MspInit+0x88>)
 8000d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5e:	4a17      	ldr	r2, [pc, #92]	; (8000dbc <HAL_UART_MspInit+0x88>)
 8000d60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d64:	6413      	str	r3, [r2, #64]	; 0x40
 8000d66:	4b15      	ldr	r3, [pc, #84]	; (8000dbc <HAL_UART_MspInit+0x88>)
 8000d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d6e:	613b      	str	r3, [r7, #16]
 8000d70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d72:	2300      	movs	r3, #0
 8000d74:	60fb      	str	r3, [r7, #12]
 8000d76:	4b11      	ldr	r3, [pc, #68]	; (8000dbc <HAL_UART_MspInit+0x88>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7a:	4a10      	ldr	r2, [pc, #64]	; (8000dbc <HAL_UART_MspInit+0x88>)
 8000d7c:	f043 0301 	orr.w	r3, r3, #1
 8000d80:	6313      	str	r3, [r2, #48]	; 0x30
 8000d82:	4b0e      	ldr	r3, [pc, #56]	; (8000dbc <HAL_UART_MspInit+0x88>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d86:	f003 0301 	and.w	r3, r3, #1
 8000d8a:	60fb      	str	r3, [r7, #12]
 8000d8c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d8e:	230c      	movs	r3, #12
 8000d90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d92:	2302      	movs	r3, #2
 8000d94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d96:	2300      	movs	r3, #0
 8000d98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d9a:	2303      	movs	r3, #3
 8000d9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d9e:	2307      	movs	r3, #7
 8000da0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da2:	f107 0314 	add.w	r3, r7, #20
 8000da6:	4619      	mov	r1, r3
 8000da8:	4805      	ldr	r0, [pc, #20]	; (8000dc0 <HAL_UART_MspInit+0x8c>)
 8000daa:	f000 f959 	bl	8001060 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000dae:	bf00      	nop
 8000db0:	3728      	adds	r7, #40	; 0x28
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	40004400 	.word	0x40004400
 8000dbc:	40023800 	.word	0x40023800
 8000dc0:	40020000 	.word	0x40020000

08000dc4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000dc4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dfc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000dc8:	480d      	ldr	r0, [pc, #52]	; (8000e00 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000dca:	490e      	ldr	r1, [pc, #56]	; (8000e04 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000dcc:	4a0e      	ldr	r2, [pc, #56]	; (8000e08 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000dce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dd0:	e002      	b.n	8000dd8 <LoopCopyDataInit>

08000dd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dd6:	3304      	adds	r3, #4

08000dd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ddc:	d3f9      	bcc.n	8000dd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dde:	4a0b      	ldr	r2, [pc, #44]	; (8000e0c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000de0:	4c0b      	ldr	r4, [pc, #44]	; (8000e10 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000de2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000de4:	e001      	b.n	8000dea <LoopFillZerobss>

08000de6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000de6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000de8:	3204      	adds	r2, #4

08000dea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dec:	d3fb      	bcc.n	8000de6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000dee:	f7ff ff65 	bl	8000cbc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000df2:	f004 f807 	bl	8004e04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000df6:	f7ff fd39 	bl	800086c <main>
  bx  lr    
 8000dfa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000dfc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e04:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000e08:	08006008 	.word	0x08006008
  ldr r2, =_sbss
 8000e0c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000e10:	20004158 	.word	0x20004158

08000e14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e14:	e7fe      	b.n	8000e14 <ADC_IRQHandler>
	...

08000e18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e1c:	4b0e      	ldr	r3, [pc, #56]	; (8000e58 <HAL_Init+0x40>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a0d      	ldr	r2, [pc, #52]	; (8000e58 <HAL_Init+0x40>)
 8000e22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e26:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e28:	4b0b      	ldr	r3, [pc, #44]	; (8000e58 <HAL_Init+0x40>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a0a      	ldr	r2, [pc, #40]	; (8000e58 <HAL_Init+0x40>)
 8000e2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e32:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e34:	4b08      	ldr	r3, [pc, #32]	; (8000e58 <HAL_Init+0x40>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a07      	ldr	r2, [pc, #28]	; (8000e58 <HAL_Init+0x40>)
 8000e3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e40:	2003      	movs	r0, #3
 8000e42:	f000 f8d8 	bl	8000ff6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e46:	200f      	movs	r0, #15
 8000e48:	f7ff fdd6 	bl	80009f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e4c:	f7ff fda8 	bl	80009a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e50:	2300      	movs	r3, #0
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	40023c00 	.word	0x40023c00

08000e5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e60:	4b06      	ldr	r3, [pc, #24]	; (8000e7c <HAL_IncTick+0x20>)
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	461a      	mov	r2, r3
 8000e66:	4b06      	ldr	r3, [pc, #24]	; (8000e80 <HAL_IncTick+0x24>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4413      	add	r3, r2
 8000e6c:	4a04      	ldr	r2, [pc, #16]	; (8000e80 <HAL_IncTick+0x24>)
 8000e6e:	6013      	str	r3, [r2, #0]
}
 8000e70:	bf00      	nop
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	20000008 	.word	0x20000008
 8000e80:	200003f0 	.word	0x200003f0

08000e84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  return uwTick;
 8000e88:	4b03      	ldr	r3, [pc, #12]	; (8000e98 <HAL_GetTick+0x14>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	200003f0 	.word	0x200003f0

08000e9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b085      	sub	sp, #20
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	f003 0307 	and.w	r3, r3, #7
 8000eaa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000eac:	4b0c      	ldr	r3, [pc, #48]	; (8000ee0 <__NVIC_SetPriorityGrouping+0x44>)
 8000eae:	68db      	ldr	r3, [r3, #12]
 8000eb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eb2:	68ba      	ldr	r2, [r7, #8]
 8000eb4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000eb8:	4013      	ands	r3, r2
 8000eba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ec0:	68bb      	ldr	r3, [r7, #8]
 8000ec2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ec4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ec8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ecc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ece:	4a04      	ldr	r2, [pc, #16]	; (8000ee0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ed0:	68bb      	ldr	r3, [r7, #8]
 8000ed2:	60d3      	str	r3, [r2, #12]
}
 8000ed4:	bf00      	nop
 8000ed6:	3714      	adds	r7, #20
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr
 8000ee0:	e000ed00 	.word	0xe000ed00

08000ee4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ee8:	4b04      	ldr	r3, [pc, #16]	; (8000efc <__NVIC_GetPriorityGrouping+0x18>)
 8000eea:	68db      	ldr	r3, [r3, #12]
 8000eec:	0a1b      	lsrs	r3, r3, #8
 8000eee:	f003 0307 	and.w	r3, r3, #7
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr
 8000efc:	e000ed00 	.word	0xe000ed00

08000f00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	4603      	mov	r3, r0
 8000f08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	db0b      	blt.n	8000f2a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f12:	79fb      	ldrb	r3, [r7, #7]
 8000f14:	f003 021f 	and.w	r2, r3, #31
 8000f18:	4907      	ldr	r1, [pc, #28]	; (8000f38 <__NVIC_EnableIRQ+0x38>)
 8000f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f1e:	095b      	lsrs	r3, r3, #5
 8000f20:	2001      	movs	r0, #1
 8000f22:	fa00 f202 	lsl.w	r2, r0, r2
 8000f26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f2a:	bf00      	nop
 8000f2c:	370c      	adds	r7, #12
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	e000e100 	.word	0xe000e100

08000f3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b083      	sub	sp, #12
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	4603      	mov	r3, r0
 8000f44:	6039      	str	r1, [r7, #0]
 8000f46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	db0a      	blt.n	8000f66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	b2da      	uxtb	r2, r3
 8000f54:	490c      	ldr	r1, [pc, #48]	; (8000f88 <__NVIC_SetPriority+0x4c>)
 8000f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5a:	0112      	lsls	r2, r2, #4
 8000f5c:	b2d2      	uxtb	r2, r2
 8000f5e:	440b      	add	r3, r1
 8000f60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f64:	e00a      	b.n	8000f7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	b2da      	uxtb	r2, r3
 8000f6a:	4908      	ldr	r1, [pc, #32]	; (8000f8c <__NVIC_SetPriority+0x50>)
 8000f6c:	79fb      	ldrb	r3, [r7, #7]
 8000f6e:	f003 030f 	and.w	r3, r3, #15
 8000f72:	3b04      	subs	r3, #4
 8000f74:	0112      	lsls	r2, r2, #4
 8000f76:	b2d2      	uxtb	r2, r2
 8000f78:	440b      	add	r3, r1
 8000f7a:	761a      	strb	r2, [r3, #24]
}
 8000f7c:	bf00      	nop
 8000f7e:	370c      	adds	r7, #12
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr
 8000f88:	e000e100 	.word	0xe000e100
 8000f8c:	e000ed00 	.word	0xe000ed00

08000f90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b089      	sub	sp, #36	; 0x24
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	60f8      	str	r0, [r7, #12]
 8000f98:	60b9      	str	r1, [r7, #8]
 8000f9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	f003 0307 	and.w	r3, r3, #7
 8000fa2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fa4:	69fb      	ldr	r3, [r7, #28]
 8000fa6:	f1c3 0307 	rsb	r3, r3, #7
 8000faa:	2b04      	cmp	r3, #4
 8000fac:	bf28      	it	cs
 8000fae:	2304      	movcs	r3, #4
 8000fb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	3304      	adds	r3, #4
 8000fb6:	2b06      	cmp	r3, #6
 8000fb8:	d902      	bls.n	8000fc0 <NVIC_EncodePriority+0x30>
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	3b03      	subs	r3, #3
 8000fbe:	e000      	b.n	8000fc2 <NVIC_EncodePriority+0x32>
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fc4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000fc8:	69bb      	ldr	r3, [r7, #24]
 8000fca:	fa02 f303 	lsl.w	r3, r2, r3
 8000fce:	43da      	mvns	r2, r3
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	401a      	ands	r2, r3
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fd8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	fa01 f303 	lsl.w	r3, r1, r3
 8000fe2:	43d9      	mvns	r1, r3
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fe8:	4313      	orrs	r3, r2
         );
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	3724      	adds	r7, #36	; 0x24
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr

08000ff6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ff6:	b580      	push	{r7, lr}
 8000ff8:	b082      	sub	sp, #8
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ffe:	6878      	ldr	r0, [r7, #4]
 8001000:	f7ff ff4c 	bl	8000e9c <__NVIC_SetPriorityGrouping>
}
 8001004:	bf00      	nop
 8001006:	3708      	adds	r7, #8
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}

0800100c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800100c:	b580      	push	{r7, lr}
 800100e:	b086      	sub	sp, #24
 8001010:	af00      	add	r7, sp, #0
 8001012:	4603      	mov	r3, r0
 8001014:	60b9      	str	r1, [r7, #8]
 8001016:	607a      	str	r2, [r7, #4]
 8001018:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800101a:	2300      	movs	r3, #0
 800101c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800101e:	f7ff ff61 	bl	8000ee4 <__NVIC_GetPriorityGrouping>
 8001022:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001024:	687a      	ldr	r2, [r7, #4]
 8001026:	68b9      	ldr	r1, [r7, #8]
 8001028:	6978      	ldr	r0, [r7, #20]
 800102a:	f7ff ffb1 	bl	8000f90 <NVIC_EncodePriority>
 800102e:	4602      	mov	r2, r0
 8001030:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001034:	4611      	mov	r1, r2
 8001036:	4618      	mov	r0, r3
 8001038:	f7ff ff80 	bl	8000f3c <__NVIC_SetPriority>
}
 800103c:	bf00      	nop
 800103e:	3718      	adds	r7, #24
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}

08001044 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	4603      	mov	r3, r0
 800104c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800104e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001052:	4618      	mov	r0, r3
 8001054:	f7ff ff54 	bl	8000f00 <__NVIC_EnableIRQ>
}
 8001058:	bf00      	nop
 800105a:	3708      	adds	r7, #8
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}

08001060 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001060:	b480      	push	{r7}
 8001062:	b089      	sub	sp, #36	; 0x24
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
 8001068:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800106a:	2300      	movs	r3, #0
 800106c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800106e:	2300      	movs	r3, #0
 8001070:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001072:	2300      	movs	r3, #0
 8001074:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001076:	2300      	movs	r3, #0
 8001078:	61fb      	str	r3, [r7, #28]
 800107a:	e165      	b.n	8001348 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800107c:	2201      	movs	r2, #1
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	697a      	ldr	r2, [r7, #20]
 800108c:	4013      	ands	r3, r2
 800108e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001090:	693a      	ldr	r2, [r7, #16]
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	429a      	cmp	r2, r3
 8001096:	f040 8154 	bne.w	8001342 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	f003 0303 	and.w	r3, r3, #3
 80010a2:	2b01      	cmp	r3, #1
 80010a4:	d005      	beq.n	80010b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010ae:	2b02      	cmp	r3, #2
 80010b0:	d130      	bne.n	8001114 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	689b      	ldr	r3, [r3, #8]
 80010b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	005b      	lsls	r3, r3, #1
 80010bc:	2203      	movs	r2, #3
 80010be:	fa02 f303 	lsl.w	r3, r2, r3
 80010c2:	43db      	mvns	r3, r3
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	4013      	ands	r3, r2
 80010c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	68da      	ldr	r2, [r3, #12]
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	005b      	lsls	r3, r3, #1
 80010d2:	fa02 f303 	lsl.w	r3, r2, r3
 80010d6:	69ba      	ldr	r2, [r7, #24]
 80010d8:	4313      	orrs	r3, r2
 80010da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	69ba      	ldr	r2, [r7, #24]
 80010e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010e8:	2201      	movs	r2, #1
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	fa02 f303 	lsl.w	r3, r2, r3
 80010f0:	43db      	mvns	r3, r3
 80010f2:	69ba      	ldr	r2, [r7, #24]
 80010f4:	4013      	ands	r3, r2
 80010f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	091b      	lsrs	r3, r3, #4
 80010fe:	f003 0201 	and.w	r2, r3, #1
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	fa02 f303 	lsl.w	r3, r2, r3
 8001108:	69ba      	ldr	r2, [r7, #24]
 800110a:	4313      	orrs	r3, r2
 800110c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	69ba      	ldr	r2, [r7, #24]
 8001112:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	f003 0303 	and.w	r3, r3, #3
 800111c:	2b03      	cmp	r3, #3
 800111e:	d017      	beq.n	8001150 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	68db      	ldr	r3, [r3, #12]
 8001124:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	005b      	lsls	r3, r3, #1
 800112a:	2203      	movs	r2, #3
 800112c:	fa02 f303 	lsl.w	r3, r2, r3
 8001130:	43db      	mvns	r3, r3
 8001132:	69ba      	ldr	r2, [r7, #24]
 8001134:	4013      	ands	r3, r2
 8001136:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	689a      	ldr	r2, [r3, #8]
 800113c:	69fb      	ldr	r3, [r7, #28]
 800113e:	005b      	lsls	r3, r3, #1
 8001140:	fa02 f303 	lsl.w	r3, r2, r3
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	4313      	orrs	r3, r2
 8001148:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	69ba      	ldr	r2, [r7, #24]
 800114e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	f003 0303 	and.w	r3, r3, #3
 8001158:	2b02      	cmp	r3, #2
 800115a:	d123      	bne.n	80011a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800115c:	69fb      	ldr	r3, [r7, #28]
 800115e:	08da      	lsrs	r2, r3, #3
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	3208      	adds	r2, #8
 8001164:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001168:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	f003 0307 	and.w	r3, r3, #7
 8001170:	009b      	lsls	r3, r3, #2
 8001172:	220f      	movs	r2, #15
 8001174:	fa02 f303 	lsl.w	r3, r2, r3
 8001178:	43db      	mvns	r3, r3
 800117a:	69ba      	ldr	r2, [r7, #24]
 800117c:	4013      	ands	r3, r2
 800117e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	691a      	ldr	r2, [r3, #16]
 8001184:	69fb      	ldr	r3, [r7, #28]
 8001186:	f003 0307 	and.w	r3, r3, #7
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	fa02 f303 	lsl.w	r3, r2, r3
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	4313      	orrs	r3, r2
 8001194:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	08da      	lsrs	r2, r3, #3
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	3208      	adds	r2, #8
 800119e:	69b9      	ldr	r1, [r7, #24]
 80011a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	005b      	lsls	r3, r3, #1
 80011ae:	2203      	movs	r2, #3
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	43db      	mvns	r3, r3
 80011b6:	69ba      	ldr	r2, [r7, #24]
 80011b8:	4013      	ands	r3, r2
 80011ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f003 0203 	and.w	r2, r3, #3
 80011c4:	69fb      	ldr	r3, [r7, #28]
 80011c6:	005b      	lsls	r3, r3, #1
 80011c8:	fa02 f303 	lsl.w	r3, r2, r3
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	4313      	orrs	r3, r2
 80011d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	f000 80ae 	beq.w	8001342 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011e6:	2300      	movs	r3, #0
 80011e8:	60fb      	str	r3, [r7, #12]
 80011ea:	4b5d      	ldr	r3, [pc, #372]	; (8001360 <HAL_GPIO_Init+0x300>)
 80011ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ee:	4a5c      	ldr	r2, [pc, #368]	; (8001360 <HAL_GPIO_Init+0x300>)
 80011f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011f4:	6453      	str	r3, [r2, #68]	; 0x44
 80011f6:	4b5a      	ldr	r3, [pc, #360]	; (8001360 <HAL_GPIO_Init+0x300>)
 80011f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011fe:	60fb      	str	r3, [r7, #12]
 8001200:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001202:	4a58      	ldr	r2, [pc, #352]	; (8001364 <HAL_GPIO_Init+0x304>)
 8001204:	69fb      	ldr	r3, [r7, #28]
 8001206:	089b      	lsrs	r3, r3, #2
 8001208:	3302      	adds	r3, #2
 800120a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800120e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001210:	69fb      	ldr	r3, [r7, #28]
 8001212:	f003 0303 	and.w	r3, r3, #3
 8001216:	009b      	lsls	r3, r3, #2
 8001218:	220f      	movs	r2, #15
 800121a:	fa02 f303 	lsl.w	r3, r2, r3
 800121e:	43db      	mvns	r3, r3
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	4013      	ands	r3, r2
 8001224:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4a4f      	ldr	r2, [pc, #316]	; (8001368 <HAL_GPIO_Init+0x308>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d025      	beq.n	800127a <HAL_GPIO_Init+0x21a>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4a4e      	ldr	r2, [pc, #312]	; (800136c <HAL_GPIO_Init+0x30c>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d01f      	beq.n	8001276 <HAL_GPIO_Init+0x216>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4a4d      	ldr	r2, [pc, #308]	; (8001370 <HAL_GPIO_Init+0x310>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d019      	beq.n	8001272 <HAL_GPIO_Init+0x212>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4a4c      	ldr	r2, [pc, #304]	; (8001374 <HAL_GPIO_Init+0x314>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d013      	beq.n	800126e <HAL_GPIO_Init+0x20e>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4a4b      	ldr	r2, [pc, #300]	; (8001378 <HAL_GPIO_Init+0x318>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d00d      	beq.n	800126a <HAL_GPIO_Init+0x20a>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4a4a      	ldr	r2, [pc, #296]	; (800137c <HAL_GPIO_Init+0x31c>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d007      	beq.n	8001266 <HAL_GPIO_Init+0x206>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4a49      	ldr	r2, [pc, #292]	; (8001380 <HAL_GPIO_Init+0x320>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d101      	bne.n	8001262 <HAL_GPIO_Init+0x202>
 800125e:	2306      	movs	r3, #6
 8001260:	e00c      	b.n	800127c <HAL_GPIO_Init+0x21c>
 8001262:	2307      	movs	r3, #7
 8001264:	e00a      	b.n	800127c <HAL_GPIO_Init+0x21c>
 8001266:	2305      	movs	r3, #5
 8001268:	e008      	b.n	800127c <HAL_GPIO_Init+0x21c>
 800126a:	2304      	movs	r3, #4
 800126c:	e006      	b.n	800127c <HAL_GPIO_Init+0x21c>
 800126e:	2303      	movs	r3, #3
 8001270:	e004      	b.n	800127c <HAL_GPIO_Init+0x21c>
 8001272:	2302      	movs	r3, #2
 8001274:	e002      	b.n	800127c <HAL_GPIO_Init+0x21c>
 8001276:	2301      	movs	r3, #1
 8001278:	e000      	b.n	800127c <HAL_GPIO_Init+0x21c>
 800127a:	2300      	movs	r3, #0
 800127c:	69fa      	ldr	r2, [r7, #28]
 800127e:	f002 0203 	and.w	r2, r2, #3
 8001282:	0092      	lsls	r2, r2, #2
 8001284:	4093      	lsls	r3, r2
 8001286:	69ba      	ldr	r2, [r7, #24]
 8001288:	4313      	orrs	r3, r2
 800128a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800128c:	4935      	ldr	r1, [pc, #212]	; (8001364 <HAL_GPIO_Init+0x304>)
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	089b      	lsrs	r3, r3, #2
 8001292:	3302      	adds	r3, #2
 8001294:	69ba      	ldr	r2, [r7, #24]
 8001296:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800129a:	4b3a      	ldr	r3, [pc, #232]	; (8001384 <HAL_GPIO_Init+0x324>)
 800129c:	689b      	ldr	r3, [r3, #8]
 800129e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012a0:	693b      	ldr	r3, [r7, #16]
 80012a2:	43db      	mvns	r3, r3
 80012a4:	69ba      	ldr	r2, [r7, #24]
 80012a6:	4013      	ands	r3, r2
 80012a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d003      	beq.n	80012be <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80012b6:	69ba      	ldr	r2, [r7, #24]
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	4313      	orrs	r3, r2
 80012bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012be:	4a31      	ldr	r2, [pc, #196]	; (8001384 <HAL_GPIO_Init+0x324>)
 80012c0:	69bb      	ldr	r3, [r7, #24]
 80012c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012c4:	4b2f      	ldr	r3, [pc, #188]	; (8001384 <HAL_GPIO_Init+0x324>)
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	43db      	mvns	r3, r3
 80012ce:	69ba      	ldr	r2, [r7, #24]
 80012d0:	4013      	ands	r3, r2
 80012d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d003      	beq.n	80012e8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80012e0:	69ba      	ldr	r2, [r7, #24]
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	4313      	orrs	r3, r2
 80012e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012e8:	4a26      	ldr	r2, [pc, #152]	; (8001384 <HAL_GPIO_Init+0x324>)
 80012ea:	69bb      	ldr	r3, [r7, #24]
 80012ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012ee:	4b25      	ldr	r3, [pc, #148]	; (8001384 <HAL_GPIO_Init+0x324>)
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	43db      	mvns	r3, r3
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	4013      	ands	r3, r2
 80012fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001306:	2b00      	cmp	r3, #0
 8001308:	d003      	beq.n	8001312 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800130a:	69ba      	ldr	r2, [r7, #24]
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	4313      	orrs	r3, r2
 8001310:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001312:	4a1c      	ldr	r2, [pc, #112]	; (8001384 <HAL_GPIO_Init+0x324>)
 8001314:	69bb      	ldr	r3, [r7, #24]
 8001316:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001318:	4b1a      	ldr	r3, [pc, #104]	; (8001384 <HAL_GPIO_Init+0x324>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	43db      	mvns	r3, r3
 8001322:	69ba      	ldr	r2, [r7, #24]
 8001324:	4013      	ands	r3, r2
 8001326:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001330:	2b00      	cmp	r3, #0
 8001332:	d003      	beq.n	800133c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001334:	69ba      	ldr	r2, [r7, #24]
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	4313      	orrs	r3, r2
 800133a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800133c:	4a11      	ldr	r2, [pc, #68]	; (8001384 <HAL_GPIO_Init+0x324>)
 800133e:	69bb      	ldr	r3, [r7, #24]
 8001340:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	3301      	adds	r3, #1
 8001346:	61fb      	str	r3, [r7, #28]
 8001348:	69fb      	ldr	r3, [r7, #28]
 800134a:	2b0f      	cmp	r3, #15
 800134c:	f67f ae96 	bls.w	800107c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001350:	bf00      	nop
 8001352:	bf00      	nop
 8001354:	3724      	adds	r7, #36	; 0x24
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	40023800 	.word	0x40023800
 8001364:	40013800 	.word	0x40013800
 8001368:	40020000 	.word	0x40020000
 800136c:	40020400 	.word	0x40020400
 8001370:	40020800 	.word	0x40020800
 8001374:	40020c00 	.word	0x40020c00
 8001378:	40021000 	.word	0x40021000
 800137c:	40021400 	.word	0x40021400
 8001380:	40021800 	.word	0x40021800
 8001384:	40013c00 	.word	0x40013c00

08001388 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001388:	b480      	push	{r7}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	460b      	mov	r3, r1
 8001392:	807b      	strh	r3, [r7, #2]
 8001394:	4613      	mov	r3, r2
 8001396:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001398:	787b      	ldrb	r3, [r7, #1]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d003      	beq.n	80013a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800139e:	887a      	ldrh	r2, [r7, #2]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013a4:	e003      	b.n	80013ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013a6:	887b      	ldrh	r3, [r7, #2]
 80013a8:	041a      	lsls	r2, r3, #16
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	619a      	str	r2, [r3, #24]
}
 80013ae:	bf00      	nop
 80013b0:	370c      	adds	r7, #12
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr
	...

080013bc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80013c2:	2300      	movs	r3, #0
 80013c4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80013c6:	2300      	movs	r3, #0
 80013c8:	603b      	str	r3, [r7, #0]
 80013ca:	4b20      	ldr	r3, [pc, #128]	; (800144c <HAL_PWREx_EnableOverDrive+0x90>)
 80013cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ce:	4a1f      	ldr	r2, [pc, #124]	; (800144c <HAL_PWREx_EnableOverDrive+0x90>)
 80013d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013d4:	6413      	str	r3, [r2, #64]	; 0x40
 80013d6:	4b1d      	ldr	r3, [pc, #116]	; (800144c <HAL_PWREx_EnableOverDrive+0x90>)
 80013d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013de:	603b      	str	r3, [r7, #0]
 80013e0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80013e2:	4b1b      	ldr	r3, [pc, #108]	; (8001450 <HAL_PWREx_EnableOverDrive+0x94>)
 80013e4:	2201      	movs	r2, #1
 80013e6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80013e8:	f7ff fd4c 	bl	8000e84 <HAL_GetTick>
 80013ec:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80013ee:	e009      	b.n	8001404 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80013f0:	f7ff fd48 	bl	8000e84 <HAL_GetTick>
 80013f4:	4602      	mov	r2, r0
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	1ad3      	subs	r3, r2, r3
 80013fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80013fe:	d901      	bls.n	8001404 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001400:	2303      	movs	r3, #3
 8001402:	e01f      	b.n	8001444 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001404:	4b13      	ldr	r3, [pc, #76]	; (8001454 <HAL_PWREx_EnableOverDrive+0x98>)
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800140c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001410:	d1ee      	bne.n	80013f0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001412:	4b11      	ldr	r3, [pc, #68]	; (8001458 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001414:	2201      	movs	r2, #1
 8001416:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001418:	f7ff fd34 	bl	8000e84 <HAL_GetTick>
 800141c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800141e:	e009      	b.n	8001434 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001420:	f7ff fd30 	bl	8000e84 <HAL_GetTick>
 8001424:	4602      	mov	r2, r0
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800142e:	d901      	bls.n	8001434 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001430:	2303      	movs	r3, #3
 8001432:	e007      	b.n	8001444 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001434:	4b07      	ldr	r3, [pc, #28]	; (8001454 <HAL_PWREx_EnableOverDrive+0x98>)
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800143c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001440:	d1ee      	bne.n	8001420 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001442:	2300      	movs	r3, #0
}
 8001444:	4618      	mov	r0, r3
 8001446:	3708      	adds	r7, #8
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	40023800 	.word	0x40023800
 8001450:	420e0040 	.word	0x420e0040
 8001454:	40007000 	.word	0x40007000
 8001458:	420e0044 	.word	0x420e0044

0800145c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b084      	sub	sp, #16
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
 8001464:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d101      	bne.n	8001470 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800146c:	2301      	movs	r3, #1
 800146e:	e0cc      	b.n	800160a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001470:	4b68      	ldr	r3, [pc, #416]	; (8001614 <HAL_RCC_ClockConfig+0x1b8>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f003 030f 	and.w	r3, r3, #15
 8001478:	683a      	ldr	r2, [r7, #0]
 800147a:	429a      	cmp	r2, r3
 800147c:	d90c      	bls.n	8001498 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800147e:	4b65      	ldr	r3, [pc, #404]	; (8001614 <HAL_RCC_ClockConfig+0x1b8>)
 8001480:	683a      	ldr	r2, [r7, #0]
 8001482:	b2d2      	uxtb	r2, r2
 8001484:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001486:	4b63      	ldr	r3, [pc, #396]	; (8001614 <HAL_RCC_ClockConfig+0x1b8>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f003 030f 	and.w	r3, r3, #15
 800148e:	683a      	ldr	r2, [r7, #0]
 8001490:	429a      	cmp	r2, r3
 8001492:	d001      	beq.n	8001498 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001494:	2301      	movs	r3, #1
 8001496:	e0b8      	b.n	800160a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f003 0302 	and.w	r3, r3, #2
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d020      	beq.n	80014e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f003 0304 	and.w	r3, r3, #4
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d005      	beq.n	80014bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014b0:	4b59      	ldr	r3, [pc, #356]	; (8001618 <HAL_RCC_ClockConfig+0x1bc>)
 80014b2:	689b      	ldr	r3, [r3, #8]
 80014b4:	4a58      	ldr	r2, [pc, #352]	; (8001618 <HAL_RCC_ClockConfig+0x1bc>)
 80014b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80014ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f003 0308 	and.w	r3, r3, #8
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d005      	beq.n	80014d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014c8:	4b53      	ldr	r3, [pc, #332]	; (8001618 <HAL_RCC_ClockConfig+0x1bc>)
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	4a52      	ldr	r2, [pc, #328]	; (8001618 <HAL_RCC_ClockConfig+0x1bc>)
 80014ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80014d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014d4:	4b50      	ldr	r3, [pc, #320]	; (8001618 <HAL_RCC_ClockConfig+0x1bc>)
 80014d6:	689b      	ldr	r3, [r3, #8]
 80014d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	494d      	ldr	r1, [pc, #308]	; (8001618 <HAL_RCC_ClockConfig+0x1bc>)
 80014e2:	4313      	orrs	r3, r2
 80014e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f003 0301 	and.w	r3, r3, #1
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d044      	beq.n	800157c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	d107      	bne.n	800150a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014fa:	4b47      	ldr	r3, [pc, #284]	; (8001618 <HAL_RCC_ClockConfig+0x1bc>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001502:	2b00      	cmp	r3, #0
 8001504:	d119      	bne.n	800153a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	e07f      	b.n	800160a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	2b02      	cmp	r3, #2
 8001510:	d003      	beq.n	800151a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001516:	2b03      	cmp	r3, #3
 8001518:	d107      	bne.n	800152a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800151a:	4b3f      	ldr	r3, [pc, #252]	; (8001618 <HAL_RCC_ClockConfig+0x1bc>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001522:	2b00      	cmp	r3, #0
 8001524:	d109      	bne.n	800153a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	e06f      	b.n	800160a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800152a:	4b3b      	ldr	r3, [pc, #236]	; (8001618 <HAL_RCC_ClockConfig+0x1bc>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f003 0302 	and.w	r3, r3, #2
 8001532:	2b00      	cmp	r3, #0
 8001534:	d101      	bne.n	800153a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e067      	b.n	800160a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800153a:	4b37      	ldr	r3, [pc, #220]	; (8001618 <HAL_RCC_ClockConfig+0x1bc>)
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	f023 0203 	bic.w	r2, r3, #3
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	4934      	ldr	r1, [pc, #208]	; (8001618 <HAL_RCC_ClockConfig+0x1bc>)
 8001548:	4313      	orrs	r3, r2
 800154a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800154c:	f7ff fc9a 	bl	8000e84 <HAL_GetTick>
 8001550:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001552:	e00a      	b.n	800156a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001554:	f7ff fc96 	bl	8000e84 <HAL_GetTick>
 8001558:	4602      	mov	r2, r0
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001562:	4293      	cmp	r3, r2
 8001564:	d901      	bls.n	800156a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001566:	2303      	movs	r3, #3
 8001568:	e04f      	b.n	800160a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800156a:	4b2b      	ldr	r3, [pc, #172]	; (8001618 <HAL_RCC_ClockConfig+0x1bc>)
 800156c:	689b      	ldr	r3, [r3, #8]
 800156e:	f003 020c 	and.w	r2, r3, #12
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	429a      	cmp	r2, r3
 800157a:	d1eb      	bne.n	8001554 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800157c:	4b25      	ldr	r3, [pc, #148]	; (8001614 <HAL_RCC_ClockConfig+0x1b8>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f003 030f 	and.w	r3, r3, #15
 8001584:	683a      	ldr	r2, [r7, #0]
 8001586:	429a      	cmp	r2, r3
 8001588:	d20c      	bcs.n	80015a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800158a:	4b22      	ldr	r3, [pc, #136]	; (8001614 <HAL_RCC_ClockConfig+0x1b8>)
 800158c:	683a      	ldr	r2, [r7, #0]
 800158e:	b2d2      	uxtb	r2, r2
 8001590:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001592:	4b20      	ldr	r3, [pc, #128]	; (8001614 <HAL_RCC_ClockConfig+0x1b8>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f003 030f 	and.w	r3, r3, #15
 800159a:	683a      	ldr	r2, [r7, #0]
 800159c:	429a      	cmp	r2, r3
 800159e:	d001      	beq.n	80015a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80015a0:	2301      	movs	r3, #1
 80015a2:	e032      	b.n	800160a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f003 0304 	and.w	r3, r3, #4
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d008      	beq.n	80015c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015b0:	4b19      	ldr	r3, [pc, #100]	; (8001618 <HAL_RCC_ClockConfig+0x1bc>)
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	4916      	ldr	r1, [pc, #88]	; (8001618 <HAL_RCC_ClockConfig+0x1bc>)
 80015be:	4313      	orrs	r3, r2
 80015c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f003 0308 	and.w	r3, r3, #8
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d009      	beq.n	80015e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80015ce:	4b12      	ldr	r3, [pc, #72]	; (8001618 <HAL_RCC_ClockConfig+0x1bc>)
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	691b      	ldr	r3, [r3, #16]
 80015da:	00db      	lsls	r3, r3, #3
 80015dc:	490e      	ldr	r1, [pc, #56]	; (8001618 <HAL_RCC_ClockConfig+0x1bc>)
 80015de:	4313      	orrs	r3, r2
 80015e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80015e2:	f000 f887 	bl	80016f4 <HAL_RCC_GetSysClockFreq>
 80015e6:	4602      	mov	r2, r0
 80015e8:	4b0b      	ldr	r3, [pc, #44]	; (8001618 <HAL_RCC_ClockConfig+0x1bc>)
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	091b      	lsrs	r3, r3, #4
 80015ee:	f003 030f 	and.w	r3, r3, #15
 80015f2:	490a      	ldr	r1, [pc, #40]	; (800161c <HAL_RCC_ClockConfig+0x1c0>)
 80015f4:	5ccb      	ldrb	r3, [r1, r3]
 80015f6:	fa22 f303 	lsr.w	r3, r2, r3
 80015fa:	4a09      	ldr	r2, [pc, #36]	; (8001620 <HAL_RCC_ClockConfig+0x1c4>)
 80015fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80015fe:	4b09      	ldr	r3, [pc, #36]	; (8001624 <HAL_RCC_ClockConfig+0x1c8>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4618      	mov	r0, r3
 8001604:	f7ff f9f8 	bl	80009f8 <HAL_InitTick>

  return HAL_OK;
 8001608:	2300      	movs	r3, #0
}
 800160a:	4618      	mov	r0, r3
 800160c:	3710      	adds	r7, #16
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	40023c00 	.word	0x40023c00
 8001618:	40023800 	.word	0x40023800
 800161c:	08005e98 	.word	0x08005e98
 8001620:	20000000 	.word	0x20000000
 8001624:	20000004 	.word	0x20000004

08001628 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800162c:	4b03      	ldr	r3, [pc, #12]	; (800163c <HAL_RCC_GetHCLKFreq+0x14>)
 800162e:	681b      	ldr	r3, [r3, #0]
}
 8001630:	4618      	mov	r0, r3
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	20000000 	.word	0x20000000

08001640 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001644:	f7ff fff0 	bl	8001628 <HAL_RCC_GetHCLKFreq>
 8001648:	4602      	mov	r2, r0
 800164a:	4b05      	ldr	r3, [pc, #20]	; (8001660 <HAL_RCC_GetPCLK1Freq+0x20>)
 800164c:	689b      	ldr	r3, [r3, #8]
 800164e:	0a9b      	lsrs	r3, r3, #10
 8001650:	f003 0307 	and.w	r3, r3, #7
 8001654:	4903      	ldr	r1, [pc, #12]	; (8001664 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001656:	5ccb      	ldrb	r3, [r1, r3]
 8001658:	fa22 f303 	lsr.w	r3, r2, r3
}
 800165c:	4618      	mov	r0, r3
 800165e:	bd80      	pop	{r7, pc}
 8001660:	40023800 	.word	0x40023800
 8001664:	08005ea8 	.word	0x08005ea8

08001668 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800166c:	f7ff ffdc 	bl	8001628 <HAL_RCC_GetHCLKFreq>
 8001670:	4602      	mov	r2, r0
 8001672:	4b05      	ldr	r3, [pc, #20]	; (8001688 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001674:	689b      	ldr	r3, [r3, #8]
 8001676:	0b5b      	lsrs	r3, r3, #13
 8001678:	f003 0307 	and.w	r3, r3, #7
 800167c:	4903      	ldr	r1, [pc, #12]	; (800168c <HAL_RCC_GetPCLK2Freq+0x24>)
 800167e:	5ccb      	ldrb	r3, [r1, r3]
 8001680:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001684:	4618      	mov	r0, r3
 8001686:	bd80      	pop	{r7, pc}
 8001688:	40023800 	.word	0x40023800
 800168c:	08005ea8 	.word	0x08005ea8

08001690 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
 8001698:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	220f      	movs	r2, #15
 800169e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80016a0:	4b12      	ldr	r3, [pc, #72]	; (80016ec <HAL_RCC_GetClockConfig+0x5c>)
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	f003 0203 	and.w	r2, r3, #3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80016ac:	4b0f      	ldr	r3, [pc, #60]	; (80016ec <HAL_RCC_GetClockConfig+0x5c>)
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80016b8:	4b0c      	ldr	r3, [pc, #48]	; (80016ec <HAL_RCC_GetClockConfig+0x5c>)
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80016c4:	4b09      	ldr	r3, [pc, #36]	; (80016ec <HAL_RCC_GetClockConfig+0x5c>)
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	08db      	lsrs	r3, r3, #3
 80016ca:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80016d2:	4b07      	ldr	r3, [pc, #28]	; (80016f0 <HAL_RCC_GetClockConfig+0x60>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f003 020f 	and.w	r2, r3, #15
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	601a      	str	r2, [r3, #0]
}
 80016de:	bf00      	nop
 80016e0:	370c      	adds	r7, #12
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	40023800 	.word	0x40023800
 80016f0:	40023c00 	.word	0x40023c00

080016f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80016f8:	b0ae      	sub	sp, #184	; 0xb8
 80016fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80016fc:	2300      	movs	r3, #0
 80016fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8001702:	2300      	movs	r3, #0
 8001704:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001708:	2300      	movs	r3, #0
 800170a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800170e:	2300      	movs	r3, #0
 8001710:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001714:	2300      	movs	r3, #0
 8001716:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800171a:	4bcb      	ldr	r3, [pc, #812]	; (8001a48 <HAL_RCC_GetSysClockFreq+0x354>)
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	f003 030c 	and.w	r3, r3, #12
 8001722:	2b0c      	cmp	r3, #12
 8001724:	f200 8206 	bhi.w	8001b34 <HAL_RCC_GetSysClockFreq+0x440>
 8001728:	a201      	add	r2, pc, #4	; (adr r2, 8001730 <HAL_RCC_GetSysClockFreq+0x3c>)
 800172a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800172e:	bf00      	nop
 8001730:	08001765 	.word	0x08001765
 8001734:	08001b35 	.word	0x08001b35
 8001738:	08001b35 	.word	0x08001b35
 800173c:	08001b35 	.word	0x08001b35
 8001740:	0800176d 	.word	0x0800176d
 8001744:	08001b35 	.word	0x08001b35
 8001748:	08001b35 	.word	0x08001b35
 800174c:	08001b35 	.word	0x08001b35
 8001750:	08001775 	.word	0x08001775
 8001754:	08001b35 	.word	0x08001b35
 8001758:	08001b35 	.word	0x08001b35
 800175c:	08001b35 	.word	0x08001b35
 8001760:	08001965 	.word	0x08001965
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001764:	4bb9      	ldr	r3, [pc, #740]	; (8001a4c <HAL_RCC_GetSysClockFreq+0x358>)
 8001766:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800176a:	e1e7      	b.n	8001b3c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800176c:	4bb8      	ldr	r3, [pc, #736]	; (8001a50 <HAL_RCC_GetSysClockFreq+0x35c>)
 800176e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001772:	e1e3      	b.n	8001b3c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001774:	4bb4      	ldr	r3, [pc, #720]	; (8001a48 <HAL_RCC_GetSysClockFreq+0x354>)
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800177c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001780:	4bb1      	ldr	r3, [pc, #708]	; (8001a48 <HAL_RCC_GetSysClockFreq+0x354>)
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001788:	2b00      	cmp	r3, #0
 800178a:	d071      	beq.n	8001870 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800178c:	4bae      	ldr	r3, [pc, #696]	; (8001a48 <HAL_RCC_GetSysClockFreq+0x354>)
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	099b      	lsrs	r3, r3, #6
 8001792:	2200      	movs	r2, #0
 8001794:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001798:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800179c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80017a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80017a4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80017a8:	2300      	movs	r3, #0
 80017aa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80017ae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80017b2:	4622      	mov	r2, r4
 80017b4:	462b      	mov	r3, r5
 80017b6:	f04f 0000 	mov.w	r0, #0
 80017ba:	f04f 0100 	mov.w	r1, #0
 80017be:	0159      	lsls	r1, r3, #5
 80017c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80017c4:	0150      	lsls	r0, r2, #5
 80017c6:	4602      	mov	r2, r0
 80017c8:	460b      	mov	r3, r1
 80017ca:	4621      	mov	r1, r4
 80017cc:	1a51      	subs	r1, r2, r1
 80017ce:	6439      	str	r1, [r7, #64]	; 0x40
 80017d0:	4629      	mov	r1, r5
 80017d2:	eb63 0301 	sbc.w	r3, r3, r1
 80017d6:	647b      	str	r3, [r7, #68]	; 0x44
 80017d8:	f04f 0200 	mov.w	r2, #0
 80017dc:	f04f 0300 	mov.w	r3, #0
 80017e0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80017e4:	4649      	mov	r1, r9
 80017e6:	018b      	lsls	r3, r1, #6
 80017e8:	4641      	mov	r1, r8
 80017ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80017ee:	4641      	mov	r1, r8
 80017f0:	018a      	lsls	r2, r1, #6
 80017f2:	4641      	mov	r1, r8
 80017f4:	1a51      	subs	r1, r2, r1
 80017f6:	63b9      	str	r1, [r7, #56]	; 0x38
 80017f8:	4649      	mov	r1, r9
 80017fa:	eb63 0301 	sbc.w	r3, r3, r1
 80017fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001800:	f04f 0200 	mov.w	r2, #0
 8001804:	f04f 0300 	mov.w	r3, #0
 8001808:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 800180c:	4649      	mov	r1, r9
 800180e:	00cb      	lsls	r3, r1, #3
 8001810:	4641      	mov	r1, r8
 8001812:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001816:	4641      	mov	r1, r8
 8001818:	00ca      	lsls	r2, r1, #3
 800181a:	4610      	mov	r0, r2
 800181c:	4619      	mov	r1, r3
 800181e:	4603      	mov	r3, r0
 8001820:	4622      	mov	r2, r4
 8001822:	189b      	adds	r3, r3, r2
 8001824:	633b      	str	r3, [r7, #48]	; 0x30
 8001826:	462b      	mov	r3, r5
 8001828:	460a      	mov	r2, r1
 800182a:	eb42 0303 	adc.w	r3, r2, r3
 800182e:	637b      	str	r3, [r7, #52]	; 0x34
 8001830:	f04f 0200 	mov.w	r2, #0
 8001834:	f04f 0300 	mov.w	r3, #0
 8001838:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800183c:	4629      	mov	r1, r5
 800183e:	024b      	lsls	r3, r1, #9
 8001840:	4621      	mov	r1, r4
 8001842:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001846:	4621      	mov	r1, r4
 8001848:	024a      	lsls	r2, r1, #9
 800184a:	4610      	mov	r0, r2
 800184c:	4619      	mov	r1, r3
 800184e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001852:	2200      	movs	r2, #0
 8001854:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001858:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800185c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001860:	f7fe fd26 	bl	80002b0 <__aeabi_uldivmod>
 8001864:	4602      	mov	r2, r0
 8001866:	460b      	mov	r3, r1
 8001868:	4613      	mov	r3, r2
 800186a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800186e:	e067      	b.n	8001940 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001870:	4b75      	ldr	r3, [pc, #468]	; (8001a48 <HAL_RCC_GetSysClockFreq+0x354>)
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	099b      	lsrs	r3, r3, #6
 8001876:	2200      	movs	r2, #0
 8001878:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800187c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001880:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001884:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001888:	67bb      	str	r3, [r7, #120]	; 0x78
 800188a:	2300      	movs	r3, #0
 800188c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800188e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001892:	4622      	mov	r2, r4
 8001894:	462b      	mov	r3, r5
 8001896:	f04f 0000 	mov.w	r0, #0
 800189a:	f04f 0100 	mov.w	r1, #0
 800189e:	0159      	lsls	r1, r3, #5
 80018a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018a4:	0150      	lsls	r0, r2, #5
 80018a6:	4602      	mov	r2, r0
 80018a8:	460b      	mov	r3, r1
 80018aa:	4621      	mov	r1, r4
 80018ac:	1a51      	subs	r1, r2, r1
 80018ae:	62b9      	str	r1, [r7, #40]	; 0x28
 80018b0:	4629      	mov	r1, r5
 80018b2:	eb63 0301 	sbc.w	r3, r3, r1
 80018b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018b8:	f04f 0200 	mov.w	r2, #0
 80018bc:	f04f 0300 	mov.w	r3, #0
 80018c0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80018c4:	4649      	mov	r1, r9
 80018c6:	018b      	lsls	r3, r1, #6
 80018c8:	4641      	mov	r1, r8
 80018ca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80018ce:	4641      	mov	r1, r8
 80018d0:	018a      	lsls	r2, r1, #6
 80018d2:	4641      	mov	r1, r8
 80018d4:	ebb2 0a01 	subs.w	sl, r2, r1
 80018d8:	4649      	mov	r1, r9
 80018da:	eb63 0b01 	sbc.w	fp, r3, r1
 80018de:	f04f 0200 	mov.w	r2, #0
 80018e2:	f04f 0300 	mov.w	r3, #0
 80018e6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80018ea:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80018ee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80018f2:	4692      	mov	sl, r2
 80018f4:	469b      	mov	fp, r3
 80018f6:	4623      	mov	r3, r4
 80018f8:	eb1a 0303 	adds.w	r3, sl, r3
 80018fc:	623b      	str	r3, [r7, #32]
 80018fe:	462b      	mov	r3, r5
 8001900:	eb4b 0303 	adc.w	r3, fp, r3
 8001904:	627b      	str	r3, [r7, #36]	; 0x24
 8001906:	f04f 0200 	mov.w	r2, #0
 800190a:	f04f 0300 	mov.w	r3, #0
 800190e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001912:	4629      	mov	r1, r5
 8001914:	028b      	lsls	r3, r1, #10
 8001916:	4621      	mov	r1, r4
 8001918:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800191c:	4621      	mov	r1, r4
 800191e:	028a      	lsls	r2, r1, #10
 8001920:	4610      	mov	r0, r2
 8001922:	4619      	mov	r1, r3
 8001924:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001928:	2200      	movs	r2, #0
 800192a:	673b      	str	r3, [r7, #112]	; 0x70
 800192c:	677a      	str	r2, [r7, #116]	; 0x74
 800192e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001932:	f7fe fcbd 	bl	80002b0 <__aeabi_uldivmod>
 8001936:	4602      	mov	r2, r0
 8001938:	460b      	mov	r3, r1
 800193a:	4613      	mov	r3, r2
 800193c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001940:	4b41      	ldr	r3, [pc, #260]	; (8001a48 <HAL_RCC_GetSysClockFreq+0x354>)
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	0c1b      	lsrs	r3, r3, #16
 8001946:	f003 0303 	and.w	r3, r3, #3
 800194a:	3301      	adds	r3, #1
 800194c:	005b      	lsls	r3, r3, #1
 800194e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8001952:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001956:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800195a:	fbb2 f3f3 	udiv	r3, r2, r3
 800195e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001962:	e0eb      	b.n	8001b3c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001964:	4b38      	ldr	r3, [pc, #224]	; (8001a48 <HAL_RCC_GetSysClockFreq+0x354>)
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800196c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001970:	4b35      	ldr	r3, [pc, #212]	; (8001a48 <HAL_RCC_GetSysClockFreq+0x354>)
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001978:	2b00      	cmp	r3, #0
 800197a:	d06b      	beq.n	8001a54 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800197c:	4b32      	ldr	r3, [pc, #200]	; (8001a48 <HAL_RCC_GetSysClockFreq+0x354>)
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	099b      	lsrs	r3, r3, #6
 8001982:	2200      	movs	r2, #0
 8001984:	66bb      	str	r3, [r7, #104]	; 0x68
 8001986:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001988:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800198a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800198e:	663b      	str	r3, [r7, #96]	; 0x60
 8001990:	2300      	movs	r3, #0
 8001992:	667b      	str	r3, [r7, #100]	; 0x64
 8001994:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001998:	4622      	mov	r2, r4
 800199a:	462b      	mov	r3, r5
 800199c:	f04f 0000 	mov.w	r0, #0
 80019a0:	f04f 0100 	mov.w	r1, #0
 80019a4:	0159      	lsls	r1, r3, #5
 80019a6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019aa:	0150      	lsls	r0, r2, #5
 80019ac:	4602      	mov	r2, r0
 80019ae:	460b      	mov	r3, r1
 80019b0:	4621      	mov	r1, r4
 80019b2:	1a51      	subs	r1, r2, r1
 80019b4:	61b9      	str	r1, [r7, #24]
 80019b6:	4629      	mov	r1, r5
 80019b8:	eb63 0301 	sbc.w	r3, r3, r1
 80019bc:	61fb      	str	r3, [r7, #28]
 80019be:	f04f 0200 	mov.w	r2, #0
 80019c2:	f04f 0300 	mov.w	r3, #0
 80019c6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80019ca:	4659      	mov	r1, fp
 80019cc:	018b      	lsls	r3, r1, #6
 80019ce:	4651      	mov	r1, sl
 80019d0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80019d4:	4651      	mov	r1, sl
 80019d6:	018a      	lsls	r2, r1, #6
 80019d8:	4651      	mov	r1, sl
 80019da:	ebb2 0801 	subs.w	r8, r2, r1
 80019de:	4659      	mov	r1, fp
 80019e0:	eb63 0901 	sbc.w	r9, r3, r1
 80019e4:	f04f 0200 	mov.w	r2, #0
 80019e8:	f04f 0300 	mov.w	r3, #0
 80019ec:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80019f0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80019f4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80019f8:	4690      	mov	r8, r2
 80019fa:	4699      	mov	r9, r3
 80019fc:	4623      	mov	r3, r4
 80019fe:	eb18 0303 	adds.w	r3, r8, r3
 8001a02:	613b      	str	r3, [r7, #16]
 8001a04:	462b      	mov	r3, r5
 8001a06:	eb49 0303 	adc.w	r3, r9, r3
 8001a0a:	617b      	str	r3, [r7, #20]
 8001a0c:	f04f 0200 	mov.w	r2, #0
 8001a10:	f04f 0300 	mov.w	r3, #0
 8001a14:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001a18:	4629      	mov	r1, r5
 8001a1a:	024b      	lsls	r3, r1, #9
 8001a1c:	4621      	mov	r1, r4
 8001a1e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a22:	4621      	mov	r1, r4
 8001a24:	024a      	lsls	r2, r1, #9
 8001a26:	4610      	mov	r0, r2
 8001a28:	4619      	mov	r1, r3
 8001a2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001a2e:	2200      	movs	r2, #0
 8001a30:	65bb      	str	r3, [r7, #88]	; 0x58
 8001a32:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001a34:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001a38:	f7fe fc3a 	bl	80002b0 <__aeabi_uldivmod>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	460b      	mov	r3, r1
 8001a40:	4613      	mov	r3, r2
 8001a42:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001a46:	e065      	b.n	8001b14 <HAL_RCC_GetSysClockFreq+0x420>
 8001a48:	40023800 	.word	0x40023800
 8001a4c:	00f42400 	.word	0x00f42400
 8001a50:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a54:	4b3d      	ldr	r3, [pc, #244]	; (8001b4c <HAL_RCC_GetSysClockFreq+0x458>)
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	099b      	lsrs	r3, r3, #6
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	4611      	mov	r1, r2
 8001a60:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001a64:	653b      	str	r3, [r7, #80]	; 0x50
 8001a66:	2300      	movs	r3, #0
 8001a68:	657b      	str	r3, [r7, #84]	; 0x54
 8001a6a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001a6e:	4642      	mov	r2, r8
 8001a70:	464b      	mov	r3, r9
 8001a72:	f04f 0000 	mov.w	r0, #0
 8001a76:	f04f 0100 	mov.w	r1, #0
 8001a7a:	0159      	lsls	r1, r3, #5
 8001a7c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a80:	0150      	lsls	r0, r2, #5
 8001a82:	4602      	mov	r2, r0
 8001a84:	460b      	mov	r3, r1
 8001a86:	4641      	mov	r1, r8
 8001a88:	1a51      	subs	r1, r2, r1
 8001a8a:	60b9      	str	r1, [r7, #8]
 8001a8c:	4649      	mov	r1, r9
 8001a8e:	eb63 0301 	sbc.w	r3, r3, r1
 8001a92:	60fb      	str	r3, [r7, #12]
 8001a94:	f04f 0200 	mov.w	r2, #0
 8001a98:	f04f 0300 	mov.w	r3, #0
 8001a9c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001aa0:	4659      	mov	r1, fp
 8001aa2:	018b      	lsls	r3, r1, #6
 8001aa4:	4651      	mov	r1, sl
 8001aa6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001aaa:	4651      	mov	r1, sl
 8001aac:	018a      	lsls	r2, r1, #6
 8001aae:	4651      	mov	r1, sl
 8001ab0:	1a54      	subs	r4, r2, r1
 8001ab2:	4659      	mov	r1, fp
 8001ab4:	eb63 0501 	sbc.w	r5, r3, r1
 8001ab8:	f04f 0200 	mov.w	r2, #0
 8001abc:	f04f 0300 	mov.w	r3, #0
 8001ac0:	00eb      	lsls	r3, r5, #3
 8001ac2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ac6:	00e2      	lsls	r2, r4, #3
 8001ac8:	4614      	mov	r4, r2
 8001aca:	461d      	mov	r5, r3
 8001acc:	4643      	mov	r3, r8
 8001ace:	18e3      	adds	r3, r4, r3
 8001ad0:	603b      	str	r3, [r7, #0]
 8001ad2:	464b      	mov	r3, r9
 8001ad4:	eb45 0303 	adc.w	r3, r5, r3
 8001ad8:	607b      	str	r3, [r7, #4]
 8001ada:	f04f 0200 	mov.w	r2, #0
 8001ade:	f04f 0300 	mov.w	r3, #0
 8001ae2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001ae6:	4629      	mov	r1, r5
 8001ae8:	028b      	lsls	r3, r1, #10
 8001aea:	4621      	mov	r1, r4
 8001aec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001af0:	4621      	mov	r1, r4
 8001af2:	028a      	lsls	r2, r1, #10
 8001af4:	4610      	mov	r0, r2
 8001af6:	4619      	mov	r1, r3
 8001af8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001afc:	2200      	movs	r2, #0
 8001afe:	64bb      	str	r3, [r7, #72]	; 0x48
 8001b00:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001b02:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001b06:	f7fe fbd3 	bl	80002b0 <__aeabi_uldivmod>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	460b      	mov	r3, r1
 8001b0e:	4613      	mov	r3, r2
 8001b10:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001b14:	4b0d      	ldr	r3, [pc, #52]	; (8001b4c <HAL_RCC_GetSysClockFreq+0x458>)
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	0f1b      	lsrs	r3, r3, #28
 8001b1a:	f003 0307 	and.w	r3, r3, #7
 8001b1e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8001b22:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001b26:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001b2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b2e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001b32:	e003      	b.n	8001b3c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b34:	4b06      	ldr	r3, [pc, #24]	; (8001b50 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001b36:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001b3a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b3c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	37b8      	adds	r7, #184	; 0xb8
 8001b44:	46bd      	mov	sp, r7
 8001b46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b4a:	bf00      	nop
 8001b4c:	40023800 	.word	0x40023800
 8001b50:	00f42400 	.word	0x00f42400

08001b54 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b086      	sub	sp, #24
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d101      	bne.n	8001b66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e28d      	b.n	8002082 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 0301 	and.w	r3, r3, #1
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	f000 8083 	beq.w	8001c7a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001b74:	4b94      	ldr	r3, [pc, #592]	; (8001dc8 <HAL_RCC_OscConfig+0x274>)
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	f003 030c 	and.w	r3, r3, #12
 8001b7c:	2b04      	cmp	r3, #4
 8001b7e:	d019      	beq.n	8001bb4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001b80:	4b91      	ldr	r3, [pc, #580]	; (8001dc8 <HAL_RCC_OscConfig+0x274>)
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001b88:	2b08      	cmp	r3, #8
 8001b8a:	d106      	bne.n	8001b9a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001b8c:	4b8e      	ldr	r3, [pc, #568]	; (8001dc8 <HAL_RCC_OscConfig+0x274>)
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b94:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b98:	d00c      	beq.n	8001bb4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b9a:	4b8b      	ldr	r3, [pc, #556]	; (8001dc8 <HAL_RCC_OscConfig+0x274>)
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001ba2:	2b0c      	cmp	r3, #12
 8001ba4:	d112      	bne.n	8001bcc <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ba6:	4b88      	ldr	r3, [pc, #544]	; (8001dc8 <HAL_RCC_OscConfig+0x274>)
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001bb2:	d10b      	bne.n	8001bcc <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bb4:	4b84      	ldr	r3, [pc, #528]	; (8001dc8 <HAL_RCC_OscConfig+0x274>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d05b      	beq.n	8001c78 <HAL_RCC_OscConfig+0x124>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d157      	bne.n	8001c78 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e25a      	b.n	8002082 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bd4:	d106      	bne.n	8001be4 <HAL_RCC_OscConfig+0x90>
 8001bd6:	4b7c      	ldr	r3, [pc, #496]	; (8001dc8 <HAL_RCC_OscConfig+0x274>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a7b      	ldr	r2, [pc, #492]	; (8001dc8 <HAL_RCC_OscConfig+0x274>)
 8001bdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001be0:	6013      	str	r3, [r2, #0]
 8001be2:	e01d      	b.n	8001c20 <HAL_RCC_OscConfig+0xcc>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bec:	d10c      	bne.n	8001c08 <HAL_RCC_OscConfig+0xb4>
 8001bee:	4b76      	ldr	r3, [pc, #472]	; (8001dc8 <HAL_RCC_OscConfig+0x274>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a75      	ldr	r2, [pc, #468]	; (8001dc8 <HAL_RCC_OscConfig+0x274>)
 8001bf4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bf8:	6013      	str	r3, [r2, #0]
 8001bfa:	4b73      	ldr	r3, [pc, #460]	; (8001dc8 <HAL_RCC_OscConfig+0x274>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a72      	ldr	r2, [pc, #456]	; (8001dc8 <HAL_RCC_OscConfig+0x274>)
 8001c00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c04:	6013      	str	r3, [r2, #0]
 8001c06:	e00b      	b.n	8001c20 <HAL_RCC_OscConfig+0xcc>
 8001c08:	4b6f      	ldr	r3, [pc, #444]	; (8001dc8 <HAL_RCC_OscConfig+0x274>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a6e      	ldr	r2, [pc, #440]	; (8001dc8 <HAL_RCC_OscConfig+0x274>)
 8001c0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c12:	6013      	str	r3, [r2, #0]
 8001c14:	4b6c      	ldr	r3, [pc, #432]	; (8001dc8 <HAL_RCC_OscConfig+0x274>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a6b      	ldr	r2, [pc, #428]	; (8001dc8 <HAL_RCC_OscConfig+0x274>)
 8001c1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d013      	beq.n	8001c50 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c28:	f7ff f92c 	bl	8000e84 <HAL_GetTick>
 8001c2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c2e:	e008      	b.n	8001c42 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c30:	f7ff f928 	bl	8000e84 <HAL_GetTick>
 8001c34:	4602      	mov	r2, r0
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	2b64      	cmp	r3, #100	; 0x64
 8001c3c:	d901      	bls.n	8001c42 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e21f      	b.n	8002082 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c42:	4b61      	ldr	r3, [pc, #388]	; (8001dc8 <HAL_RCC_OscConfig+0x274>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d0f0      	beq.n	8001c30 <HAL_RCC_OscConfig+0xdc>
 8001c4e:	e014      	b.n	8001c7a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c50:	f7ff f918 	bl	8000e84 <HAL_GetTick>
 8001c54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c56:	e008      	b.n	8001c6a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c58:	f7ff f914 	bl	8000e84 <HAL_GetTick>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	2b64      	cmp	r3, #100	; 0x64
 8001c64:	d901      	bls.n	8001c6a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001c66:	2303      	movs	r3, #3
 8001c68:	e20b      	b.n	8002082 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c6a:	4b57      	ldr	r3, [pc, #348]	; (8001dc8 <HAL_RCC_OscConfig+0x274>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d1f0      	bne.n	8001c58 <HAL_RCC_OscConfig+0x104>
 8001c76:	e000      	b.n	8001c7a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 0302 	and.w	r3, r3, #2
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d06f      	beq.n	8001d66 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001c86:	4b50      	ldr	r3, [pc, #320]	; (8001dc8 <HAL_RCC_OscConfig+0x274>)
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	f003 030c 	and.w	r3, r3, #12
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d017      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001c92:	4b4d      	ldr	r3, [pc, #308]	; (8001dc8 <HAL_RCC_OscConfig+0x274>)
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001c9a:	2b08      	cmp	r3, #8
 8001c9c:	d105      	bne.n	8001caa <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001c9e:	4b4a      	ldr	r3, [pc, #296]	; (8001dc8 <HAL_RCC_OscConfig+0x274>)
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d00b      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001caa:	4b47      	ldr	r3, [pc, #284]	; (8001dc8 <HAL_RCC_OscConfig+0x274>)
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001cb2:	2b0c      	cmp	r3, #12
 8001cb4:	d11c      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001cb6:	4b44      	ldr	r3, [pc, #272]	; (8001dc8 <HAL_RCC_OscConfig+0x274>)
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d116      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cc2:	4b41      	ldr	r3, [pc, #260]	; (8001dc8 <HAL_RCC_OscConfig+0x274>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 0302 	and.w	r3, r3, #2
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d005      	beq.n	8001cda <HAL_RCC_OscConfig+0x186>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	68db      	ldr	r3, [r3, #12]
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d001      	beq.n	8001cda <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e1d3      	b.n	8002082 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cda:	4b3b      	ldr	r3, [pc, #236]	; (8001dc8 <HAL_RCC_OscConfig+0x274>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	691b      	ldr	r3, [r3, #16]
 8001ce6:	00db      	lsls	r3, r3, #3
 8001ce8:	4937      	ldr	r1, [pc, #220]	; (8001dc8 <HAL_RCC_OscConfig+0x274>)
 8001cea:	4313      	orrs	r3, r2
 8001cec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cee:	e03a      	b.n	8001d66 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d020      	beq.n	8001d3a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cf8:	4b34      	ldr	r3, [pc, #208]	; (8001dcc <HAL_RCC_OscConfig+0x278>)
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cfe:	f7ff f8c1 	bl	8000e84 <HAL_GetTick>
 8001d02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d04:	e008      	b.n	8001d18 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d06:	f7ff f8bd 	bl	8000e84 <HAL_GetTick>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	1ad3      	subs	r3, r2, r3
 8001d10:	2b02      	cmp	r3, #2
 8001d12:	d901      	bls.n	8001d18 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001d14:	2303      	movs	r3, #3
 8001d16:	e1b4      	b.n	8002082 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d18:	4b2b      	ldr	r3, [pc, #172]	; (8001dc8 <HAL_RCC_OscConfig+0x274>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 0302 	and.w	r3, r3, #2
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d0f0      	beq.n	8001d06 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d24:	4b28      	ldr	r3, [pc, #160]	; (8001dc8 <HAL_RCC_OscConfig+0x274>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	691b      	ldr	r3, [r3, #16]
 8001d30:	00db      	lsls	r3, r3, #3
 8001d32:	4925      	ldr	r1, [pc, #148]	; (8001dc8 <HAL_RCC_OscConfig+0x274>)
 8001d34:	4313      	orrs	r3, r2
 8001d36:	600b      	str	r3, [r1, #0]
 8001d38:	e015      	b.n	8001d66 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d3a:	4b24      	ldr	r3, [pc, #144]	; (8001dcc <HAL_RCC_OscConfig+0x278>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d40:	f7ff f8a0 	bl	8000e84 <HAL_GetTick>
 8001d44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d46:	e008      	b.n	8001d5a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d48:	f7ff f89c 	bl	8000e84 <HAL_GetTick>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	2b02      	cmp	r3, #2
 8001d54:	d901      	bls.n	8001d5a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001d56:	2303      	movs	r3, #3
 8001d58:	e193      	b.n	8002082 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d5a:	4b1b      	ldr	r3, [pc, #108]	; (8001dc8 <HAL_RCC_OscConfig+0x274>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 0302 	and.w	r3, r3, #2
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d1f0      	bne.n	8001d48 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 0308 	and.w	r3, r3, #8
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d036      	beq.n	8001de0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	695b      	ldr	r3, [r3, #20]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d016      	beq.n	8001da8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d7a:	4b15      	ldr	r3, [pc, #84]	; (8001dd0 <HAL_RCC_OscConfig+0x27c>)
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d80:	f7ff f880 	bl	8000e84 <HAL_GetTick>
 8001d84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d86:	e008      	b.n	8001d9a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d88:	f7ff f87c 	bl	8000e84 <HAL_GetTick>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	2b02      	cmp	r3, #2
 8001d94:	d901      	bls.n	8001d9a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001d96:	2303      	movs	r3, #3
 8001d98:	e173      	b.n	8002082 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d9a:	4b0b      	ldr	r3, [pc, #44]	; (8001dc8 <HAL_RCC_OscConfig+0x274>)
 8001d9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d9e:	f003 0302 	and.w	r3, r3, #2
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d0f0      	beq.n	8001d88 <HAL_RCC_OscConfig+0x234>
 8001da6:	e01b      	b.n	8001de0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001da8:	4b09      	ldr	r3, [pc, #36]	; (8001dd0 <HAL_RCC_OscConfig+0x27c>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dae:	f7ff f869 	bl	8000e84 <HAL_GetTick>
 8001db2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001db4:	e00e      	b.n	8001dd4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001db6:	f7ff f865 	bl	8000e84 <HAL_GetTick>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	1ad3      	subs	r3, r2, r3
 8001dc0:	2b02      	cmp	r3, #2
 8001dc2:	d907      	bls.n	8001dd4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001dc4:	2303      	movs	r3, #3
 8001dc6:	e15c      	b.n	8002082 <HAL_RCC_OscConfig+0x52e>
 8001dc8:	40023800 	.word	0x40023800
 8001dcc:	42470000 	.word	0x42470000
 8001dd0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dd4:	4b8a      	ldr	r3, [pc, #552]	; (8002000 <HAL_RCC_OscConfig+0x4ac>)
 8001dd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001dd8:	f003 0302 	and.w	r3, r3, #2
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d1ea      	bne.n	8001db6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f003 0304 	and.w	r3, r3, #4
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	f000 8097 	beq.w	8001f1c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dee:	2300      	movs	r3, #0
 8001df0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001df2:	4b83      	ldr	r3, [pc, #524]	; (8002000 <HAL_RCC_OscConfig+0x4ac>)
 8001df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d10f      	bne.n	8001e1e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dfe:	2300      	movs	r3, #0
 8001e00:	60bb      	str	r3, [r7, #8]
 8001e02:	4b7f      	ldr	r3, [pc, #508]	; (8002000 <HAL_RCC_OscConfig+0x4ac>)
 8001e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e06:	4a7e      	ldr	r2, [pc, #504]	; (8002000 <HAL_RCC_OscConfig+0x4ac>)
 8001e08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e0c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e0e:	4b7c      	ldr	r3, [pc, #496]	; (8002000 <HAL_RCC_OscConfig+0x4ac>)
 8001e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e16:	60bb      	str	r3, [r7, #8]
 8001e18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e1e:	4b79      	ldr	r3, [pc, #484]	; (8002004 <HAL_RCC_OscConfig+0x4b0>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d118      	bne.n	8001e5c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e2a:	4b76      	ldr	r3, [pc, #472]	; (8002004 <HAL_RCC_OscConfig+0x4b0>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a75      	ldr	r2, [pc, #468]	; (8002004 <HAL_RCC_OscConfig+0x4b0>)
 8001e30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e36:	f7ff f825 	bl	8000e84 <HAL_GetTick>
 8001e3a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e3c:	e008      	b.n	8001e50 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e3e:	f7ff f821 	bl	8000e84 <HAL_GetTick>
 8001e42:	4602      	mov	r2, r0
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	1ad3      	subs	r3, r2, r3
 8001e48:	2b02      	cmp	r3, #2
 8001e4a:	d901      	bls.n	8001e50 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	e118      	b.n	8002082 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e50:	4b6c      	ldr	r3, [pc, #432]	; (8002004 <HAL_RCC_OscConfig+0x4b0>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d0f0      	beq.n	8001e3e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d106      	bne.n	8001e72 <HAL_RCC_OscConfig+0x31e>
 8001e64:	4b66      	ldr	r3, [pc, #408]	; (8002000 <HAL_RCC_OscConfig+0x4ac>)
 8001e66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e68:	4a65      	ldr	r2, [pc, #404]	; (8002000 <HAL_RCC_OscConfig+0x4ac>)
 8001e6a:	f043 0301 	orr.w	r3, r3, #1
 8001e6e:	6713      	str	r3, [r2, #112]	; 0x70
 8001e70:	e01c      	b.n	8001eac <HAL_RCC_OscConfig+0x358>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	2b05      	cmp	r3, #5
 8001e78:	d10c      	bne.n	8001e94 <HAL_RCC_OscConfig+0x340>
 8001e7a:	4b61      	ldr	r3, [pc, #388]	; (8002000 <HAL_RCC_OscConfig+0x4ac>)
 8001e7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e7e:	4a60      	ldr	r2, [pc, #384]	; (8002000 <HAL_RCC_OscConfig+0x4ac>)
 8001e80:	f043 0304 	orr.w	r3, r3, #4
 8001e84:	6713      	str	r3, [r2, #112]	; 0x70
 8001e86:	4b5e      	ldr	r3, [pc, #376]	; (8002000 <HAL_RCC_OscConfig+0x4ac>)
 8001e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e8a:	4a5d      	ldr	r2, [pc, #372]	; (8002000 <HAL_RCC_OscConfig+0x4ac>)
 8001e8c:	f043 0301 	orr.w	r3, r3, #1
 8001e90:	6713      	str	r3, [r2, #112]	; 0x70
 8001e92:	e00b      	b.n	8001eac <HAL_RCC_OscConfig+0x358>
 8001e94:	4b5a      	ldr	r3, [pc, #360]	; (8002000 <HAL_RCC_OscConfig+0x4ac>)
 8001e96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e98:	4a59      	ldr	r2, [pc, #356]	; (8002000 <HAL_RCC_OscConfig+0x4ac>)
 8001e9a:	f023 0301 	bic.w	r3, r3, #1
 8001e9e:	6713      	str	r3, [r2, #112]	; 0x70
 8001ea0:	4b57      	ldr	r3, [pc, #348]	; (8002000 <HAL_RCC_OscConfig+0x4ac>)
 8001ea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ea4:	4a56      	ldr	r2, [pc, #344]	; (8002000 <HAL_RCC_OscConfig+0x4ac>)
 8001ea6:	f023 0304 	bic.w	r3, r3, #4
 8001eaa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d015      	beq.n	8001ee0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eb4:	f7fe ffe6 	bl	8000e84 <HAL_GetTick>
 8001eb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eba:	e00a      	b.n	8001ed2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ebc:	f7fe ffe2 	bl	8000e84 <HAL_GetTick>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d901      	bls.n	8001ed2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e0d7      	b.n	8002082 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ed2:	4b4b      	ldr	r3, [pc, #300]	; (8002000 <HAL_RCC_OscConfig+0x4ac>)
 8001ed4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ed6:	f003 0302 	and.w	r3, r3, #2
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d0ee      	beq.n	8001ebc <HAL_RCC_OscConfig+0x368>
 8001ede:	e014      	b.n	8001f0a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ee0:	f7fe ffd0 	bl	8000e84 <HAL_GetTick>
 8001ee4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ee6:	e00a      	b.n	8001efe <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ee8:	f7fe ffcc 	bl	8000e84 <HAL_GetTick>
 8001eec:	4602      	mov	r2, r0
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d901      	bls.n	8001efe <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	e0c1      	b.n	8002082 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001efe:	4b40      	ldr	r3, [pc, #256]	; (8002000 <HAL_RCC_OscConfig+0x4ac>)
 8001f00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f02:	f003 0302 	and.w	r3, r3, #2
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d1ee      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f0a:	7dfb      	ldrb	r3, [r7, #23]
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d105      	bne.n	8001f1c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f10:	4b3b      	ldr	r3, [pc, #236]	; (8002000 <HAL_RCC_OscConfig+0x4ac>)
 8001f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f14:	4a3a      	ldr	r2, [pc, #232]	; (8002000 <HAL_RCC_OscConfig+0x4ac>)
 8001f16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f1a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	699b      	ldr	r3, [r3, #24]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	f000 80ad 	beq.w	8002080 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f26:	4b36      	ldr	r3, [pc, #216]	; (8002000 <HAL_RCC_OscConfig+0x4ac>)
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	f003 030c 	and.w	r3, r3, #12
 8001f2e:	2b08      	cmp	r3, #8
 8001f30:	d060      	beq.n	8001ff4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	699b      	ldr	r3, [r3, #24]
 8001f36:	2b02      	cmp	r3, #2
 8001f38:	d145      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f3a:	4b33      	ldr	r3, [pc, #204]	; (8002008 <HAL_RCC_OscConfig+0x4b4>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f40:	f7fe ffa0 	bl	8000e84 <HAL_GetTick>
 8001f44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f46:	e008      	b.n	8001f5a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f48:	f7fe ff9c 	bl	8000e84 <HAL_GetTick>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	2b02      	cmp	r3, #2
 8001f54:	d901      	bls.n	8001f5a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001f56:	2303      	movs	r3, #3
 8001f58:	e093      	b.n	8002082 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f5a:	4b29      	ldr	r3, [pc, #164]	; (8002000 <HAL_RCC_OscConfig+0x4ac>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d1f0      	bne.n	8001f48 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	69da      	ldr	r2, [r3, #28]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6a1b      	ldr	r3, [r3, #32]
 8001f6e:	431a      	orrs	r2, r3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f74:	019b      	lsls	r3, r3, #6
 8001f76:	431a      	orrs	r2, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f7c:	085b      	lsrs	r3, r3, #1
 8001f7e:	3b01      	subs	r3, #1
 8001f80:	041b      	lsls	r3, r3, #16
 8001f82:	431a      	orrs	r2, r3
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f88:	061b      	lsls	r3, r3, #24
 8001f8a:	431a      	orrs	r2, r3
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f90:	071b      	lsls	r3, r3, #28
 8001f92:	491b      	ldr	r1, [pc, #108]	; (8002000 <HAL_RCC_OscConfig+0x4ac>)
 8001f94:	4313      	orrs	r3, r2
 8001f96:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f98:	4b1b      	ldr	r3, [pc, #108]	; (8002008 <HAL_RCC_OscConfig+0x4b4>)
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f9e:	f7fe ff71 	bl	8000e84 <HAL_GetTick>
 8001fa2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fa4:	e008      	b.n	8001fb8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fa6:	f7fe ff6d 	bl	8000e84 <HAL_GetTick>
 8001faa:	4602      	mov	r2, r0
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	1ad3      	subs	r3, r2, r3
 8001fb0:	2b02      	cmp	r3, #2
 8001fb2:	d901      	bls.n	8001fb8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	e064      	b.n	8002082 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fb8:	4b11      	ldr	r3, [pc, #68]	; (8002000 <HAL_RCC_OscConfig+0x4ac>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d0f0      	beq.n	8001fa6 <HAL_RCC_OscConfig+0x452>
 8001fc4:	e05c      	b.n	8002080 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fc6:	4b10      	ldr	r3, [pc, #64]	; (8002008 <HAL_RCC_OscConfig+0x4b4>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fcc:	f7fe ff5a 	bl	8000e84 <HAL_GetTick>
 8001fd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fd2:	e008      	b.n	8001fe6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fd4:	f7fe ff56 	bl	8000e84 <HAL_GetTick>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d901      	bls.n	8001fe6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	e04d      	b.n	8002082 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fe6:	4b06      	ldr	r3, [pc, #24]	; (8002000 <HAL_RCC_OscConfig+0x4ac>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d1f0      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x480>
 8001ff2:	e045      	b.n	8002080 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	699b      	ldr	r3, [r3, #24]
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d107      	bne.n	800200c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e040      	b.n	8002082 <HAL_RCC_OscConfig+0x52e>
 8002000:	40023800 	.word	0x40023800
 8002004:	40007000 	.word	0x40007000
 8002008:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800200c:	4b1f      	ldr	r3, [pc, #124]	; (800208c <HAL_RCC_OscConfig+0x538>)
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	699b      	ldr	r3, [r3, #24]
 8002016:	2b01      	cmp	r3, #1
 8002018:	d030      	beq.n	800207c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002024:	429a      	cmp	r2, r3
 8002026:	d129      	bne.n	800207c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002032:	429a      	cmp	r2, r3
 8002034:	d122      	bne.n	800207c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002036:	68fa      	ldr	r2, [r7, #12]
 8002038:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800203c:	4013      	ands	r3, r2
 800203e:	687a      	ldr	r2, [r7, #4]
 8002040:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002042:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002044:	4293      	cmp	r3, r2
 8002046:	d119      	bne.n	800207c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002052:	085b      	lsrs	r3, r3, #1
 8002054:	3b01      	subs	r3, #1
 8002056:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002058:	429a      	cmp	r2, r3
 800205a:	d10f      	bne.n	800207c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002066:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002068:	429a      	cmp	r2, r3
 800206a:	d107      	bne.n	800207c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002076:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002078:	429a      	cmp	r2, r3
 800207a:	d001      	beq.n	8002080 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e000      	b.n	8002082 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002080:	2300      	movs	r3, #0
}
 8002082:	4618      	mov	r0, r3
 8002084:	3718      	adds	r7, #24
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	40023800 	.word	0x40023800

08002090 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d101      	bne.n	80020a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e041      	b.n	8002126 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d106      	bne.n	80020bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2200      	movs	r2, #0
 80020b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f000 f839 	bl	800212e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2202      	movs	r2, #2
 80020c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	3304      	adds	r3, #4
 80020cc:	4619      	mov	r1, r3
 80020ce:	4610      	mov	r0, r2
 80020d0:	f000 f9d8 	bl	8002484 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2201      	movs	r2, #1
 80020d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2201      	movs	r2, #1
 80020e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2201      	movs	r2, #1
 80020e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2201      	movs	r2, #1
 80020f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2201      	movs	r2, #1
 80020f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2201      	movs	r2, #1
 8002100:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2201      	movs	r2, #1
 8002108:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2201      	movs	r2, #1
 8002110:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2201      	movs	r2, #1
 8002118:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2201      	movs	r2, #1
 8002120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002124:	2300      	movs	r3, #0
}
 8002126:	4618      	mov	r0, r3
 8002128:	3708      	adds	r7, #8
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}

0800212e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800212e:	b480      	push	{r7}
 8002130:	b083      	sub	sp, #12
 8002132:	af00      	add	r7, sp, #0
 8002134:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002136:	bf00      	nop
 8002138:	370c      	adds	r7, #12
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr
	...

08002144 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002144:	b480      	push	{r7}
 8002146:	b085      	sub	sp, #20
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002152:	b2db      	uxtb	r3, r3
 8002154:	2b01      	cmp	r3, #1
 8002156:	d001      	beq.n	800215c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	e04e      	b.n	80021fa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2202      	movs	r2, #2
 8002160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	68da      	ldr	r2, [r3, #12]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f042 0201 	orr.w	r2, r2, #1
 8002172:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a23      	ldr	r2, [pc, #140]	; (8002208 <HAL_TIM_Base_Start_IT+0xc4>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d022      	beq.n	80021c4 <HAL_TIM_Base_Start_IT+0x80>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002186:	d01d      	beq.n	80021c4 <HAL_TIM_Base_Start_IT+0x80>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a1f      	ldr	r2, [pc, #124]	; (800220c <HAL_TIM_Base_Start_IT+0xc8>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d018      	beq.n	80021c4 <HAL_TIM_Base_Start_IT+0x80>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a1e      	ldr	r2, [pc, #120]	; (8002210 <HAL_TIM_Base_Start_IT+0xcc>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d013      	beq.n	80021c4 <HAL_TIM_Base_Start_IT+0x80>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a1c      	ldr	r2, [pc, #112]	; (8002214 <HAL_TIM_Base_Start_IT+0xd0>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d00e      	beq.n	80021c4 <HAL_TIM_Base_Start_IT+0x80>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a1b      	ldr	r2, [pc, #108]	; (8002218 <HAL_TIM_Base_Start_IT+0xd4>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d009      	beq.n	80021c4 <HAL_TIM_Base_Start_IT+0x80>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a19      	ldr	r2, [pc, #100]	; (800221c <HAL_TIM_Base_Start_IT+0xd8>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d004      	beq.n	80021c4 <HAL_TIM_Base_Start_IT+0x80>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a18      	ldr	r2, [pc, #96]	; (8002220 <HAL_TIM_Base_Start_IT+0xdc>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d111      	bne.n	80021e8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	f003 0307 	and.w	r3, r3, #7
 80021ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2b06      	cmp	r3, #6
 80021d4:	d010      	beq.n	80021f8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f042 0201 	orr.w	r2, r2, #1
 80021e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021e6:	e007      	b.n	80021f8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f042 0201 	orr.w	r2, r2, #1
 80021f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80021f8:	2300      	movs	r3, #0
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3714      	adds	r7, #20
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop
 8002208:	40010000 	.word	0x40010000
 800220c:	40000400 	.word	0x40000400
 8002210:	40000800 	.word	0x40000800
 8002214:	40000c00 	.word	0x40000c00
 8002218:	40010400 	.word	0x40010400
 800221c:	40014000 	.word	0x40014000
 8002220:	40001800 	.word	0x40001800

08002224 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b082      	sub	sp, #8
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	691b      	ldr	r3, [r3, #16]
 8002232:	f003 0302 	and.w	r3, r3, #2
 8002236:	2b02      	cmp	r3, #2
 8002238:	d122      	bne.n	8002280 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	f003 0302 	and.w	r3, r3, #2
 8002244:	2b02      	cmp	r3, #2
 8002246:	d11b      	bne.n	8002280 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f06f 0202 	mvn.w	r2, #2
 8002250:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2201      	movs	r2, #1
 8002256:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	699b      	ldr	r3, [r3, #24]
 800225e:	f003 0303 	and.w	r3, r3, #3
 8002262:	2b00      	cmp	r3, #0
 8002264:	d003      	beq.n	800226e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f000 f8ee 	bl	8002448 <HAL_TIM_IC_CaptureCallback>
 800226c:	e005      	b.n	800227a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	f000 f8e0 	bl	8002434 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002274:	6878      	ldr	r0, [r7, #4]
 8002276:	f000 f8f1 	bl	800245c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2200      	movs	r2, #0
 800227e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	691b      	ldr	r3, [r3, #16]
 8002286:	f003 0304 	and.w	r3, r3, #4
 800228a:	2b04      	cmp	r3, #4
 800228c:	d122      	bne.n	80022d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	f003 0304 	and.w	r3, r3, #4
 8002298:	2b04      	cmp	r3, #4
 800229a:	d11b      	bne.n	80022d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f06f 0204 	mvn.w	r2, #4
 80022a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2202      	movs	r2, #2
 80022aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	699b      	ldr	r3, [r3, #24]
 80022b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d003      	beq.n	80022c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f000 f8c4 	bl	8002448 <HAL_TIM_IC_CaptureCallback>
 80022c0:	e005      	b.n	80022ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f000 f8b6 	bl	8002434 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022c8:	6878      	ldr	r0, [r7, #4]
 80022ca:	f000 f8c7 	bl	800245c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2200      	movs	r2, #0
 80022d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	691b      	ldr	r3, [r3, #16]
 80022da:	f003 0308 	and.w	r3, r3, #8
 80022de:	2b08      	cmp	r3, #8
 80022e0:	d122      	bne.n	8002328 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	f003 0308 	and.w	r3, r3, #8
 80022ec:	2b08      	cmp	r3, #8
 80022ee:	d11b      	bne.n	8002328 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f06f 0208 	mvn.w	r2, #8
 80022f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2204      	movs	r2, #4
 80022fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	69db      	ldr	r3, [r3, #28]
 8002306:	f003 0303 	and.w	r3, r3, #3
 800230a:	2b00      	cmp	r3, #0
 800230c:	d003      	beq.n	8002316 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f000 f89a 	bl	8002448 <HAL_TIM_IC_CaptureCallback>
 8002314:	e005      	b.n	8002322 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f000 f88c 	bl	8002434 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	f000 f89d 	bl	800245c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2200      	movs	r2, #0
 8002326:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	691b      	ldr	r3, [r3, #16]
 800232e:	f003 0310 	and.w	r3, r3, #16
 8002332:	2b10      	cmp	r3, #16
 8002334:	d122      	bne.n	800237c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	f003 0310 	and.w	r3, r3, #16
 8002340:	2b10      	cmp	r3, #16
 8002342:	d11b      	bne.n	800237c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f06f 0210 	mvn.w	r2, #16
 800234c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2208      	movs	r2, #8
 8002352:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	69db      	ldr	r3, [r3, #28]
 800235a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800235e:	2b00      	cmp	r3, #0
 8002360:	d003      	beq.n	800236a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f000 f870 	bl	8002448 <HAL_TIM_IC_CaptureCallback>
 8002368:	e005      	b.n	8002376 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f000 f862 	bl	8002434 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	f000 f873 	bl	800245c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2200      	movs	r2, #0
 800237a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	691b      	ldr	r3, [r3, #16]
 8002382:	f003 0301 	and.w	r3, r3, #1
 8002386:	2b01      	cmp	r3, #1
 8002388:	d10e      	bne.n	80023a8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	f003 0301 	and.w	r3, r3, #1
 8002394:	2b01      	cmp	r3, #1
 8002396:	d107      	bne.n	80023a8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f06f 0201 	mvn.w	r2, #1
 80023a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f7fe fae4 	bl	8000970 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	691b      	ldr	r3, [r3, #16]
 80023ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023b2:	2b80      	cmp	r3, #128	; 0x80
 80023b4:	d10e      	bne.n	80023d4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023c0:	2b80      	cmp	r3, #128	; 0x80
 80023c2:	d107      	bne.n	80023d4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80023cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f000 f902 	bl	80025d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	691b      	ldr	r3, [r3, #16]
 80023da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023de:	2b40      	cmp	r3, #64	; 0x40
 80023e0:	d10e      	bne.n	8002400 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023ec:	2b40      	cmp	r3, #64	; 0x40
 80023ee:	d107      	bne.n	8002400 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80023f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f000 f838 	bl	8002470 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	691b      	ldr	r3, [r3, #16]
 8002406:	f003 0320 	and.w	r3, r3, #32
 800240a:	2b20      	cmp	r3, #32
 800240c:	d10e      	bne.n	800242c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	f003 0320 	and.w	r3, r3, #32
 8002418:	2b20      	cmp	r3, #32
 800241a:	d107      	bne.n	800242c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f06f 0220 	mvn.w	r2, #32
 8002424:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002426:	6878      	ldr	r0, [r7, #4]
 8002428:	f000 f8cc 	bl	80025c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800242c:	bf00      	nop
 800242e:	3708      	adds	r7, #8
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}

08002434 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002434:	b480      	push	{r7}
 8002436:	b083      	sub	sp, #12
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800243c:	bf00      	nop
 800243e:	370c      	adds	r7, #12
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr

08002448 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002448:	b480      	push	{r7}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002450:	bf00      	nop
 8002452:	370c      	adds	r7, #12
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr

0800245c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800245c:	b480      	push	{r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002464:	bf00      	nop
 8002466:	370c      	adds	r7, #12
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr

08002470 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002470:	b480      	push	{r7}
 8002472:	b083      	sub	sp, #12
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002478:	bf00      	nop
 800247a:	370c      	adds	r7, #12
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr

08002484 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002484:	b480      	push	{r7}
 8002486:	b085      	sub	sp, #20
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	4a40      	ldr	r2, [pc, #256]	; (8002598 <TIM_Base_SetConfig+0x114>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d013      	beq.n	80024c4 <TIM_Base_SetConfig+0x40>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024a2:	d00f      	beq.n	80024c4 <TIM_Base_SetConfig+0x40>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	4a3d      	ldr	r2, [pc, #244]	; (800259c <TIM_Base_SetConfig+0x118>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d00b      	beq.n	80024c4 <TIM_Base_SetConfig+0x40>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	4a3c      	ldr	r2, [pc, #240]	; (80025a0 <TIM_Base_SetConfig+0x11c>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d007      	beq.n	80024c4 <TIM_Base_SetConfig+0x40>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	4a3b      	ldr	r2, [pc, #236]	; (80025a4 <TIM_Base_SetConfig+0x120>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d003      	beq.n	80024c4 <TIM_Base_SetConfig+0x40>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	4a3a      	ldr	r2, [pc, #232]	; (80025a8 <TIM_Base_SetConfig+0x124>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d108      	bne.n	80024d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	68fa      	ldr	r2, [r7, #12]
 80024d2:	4313      	orrs	r3, r2
 80024d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4a2f      	ldr	r2, [pc, #188]	; (8002598 <TIM_Base_SetConfig+0x114>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d02b      	beq.n	8002536 <TIM_Base_SetConfig+0xb2>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024e4:	d027      	beq.n	8002536 <TIM_Base_SetConfig+0xb2>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	4a2c      	ldr	r2, [pc, #176]	; (800259c <TIM_Base_SetConfig+0x118>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d023      	beq.n	8002536 <TIM_Base_SetConfig+0xb2>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	4a2b      	ldr	r2, [pc, #172]	; (80025a0 <TIM_Base_SetConfig+0x11c>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d01f      	beq.n	8002536 <TIM_Base_SetConfig+0xb2>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	4a2a      	ldr	r2, [pc, #168]	; (80025a4 <TIM_Base_SetConfig+0x120>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d01b      	beq.n	8002536 <TIM_Base_SetConfig+0xb2>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	4a29      	ldr	r2, [pc, #164]	; (80025a8 <TIM_Base_SetConfig+0x124>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d017      	beq.n	8002536 <TIM_Base_SetConfig+0xb2>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	4a28      	ldr	r2, [pc, #160]	; (80025ac <TIM_Base_SetConfig+0x128>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d013      	beq.n	8002536 <TIM_Base_SetConfig+0xb2>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	4a27      	ldr	r2, [pc, #156]	; (80025b0 <TIM_Base_SetConfig+0x12c>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d00f      	beq.n	8002536 <TIM_Base_SetConfig+0xb2>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	4a26      	ldr	r2, [pc, #152]	; (80025b4 <TIM_Base_SetConfig+0x130>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d00b      	beq.n	8002536 <TIM_Base_SetConfig+0xb2>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	4a25      	ldr	r2, [pc, #148]	; (80025b8 <TIM_Base_SetConfig+0x134>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d007      	beq.n	8002536 <TIM_Base_SetConfig+0xb2>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4a24      	ldr	r2, [pc, #144]	; (80025bc <TIM_Base_SetConfig+0x138>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d003      	beq.n	8002536 <TIM_Base_SetConfig+0xb2>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	4a23      	ldr	r2, [pc, #140]	; (80025c0 <TIM_Base_SetConfig+0x13c>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d108      	bne.n	8002548 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800253c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	68db      	ldr	r3, [r3, #12]
 8002542:	68fa      	ldr	r2, [r7, #12]
 8002544:	4313      	orrs	r3, r2
 8002546:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	695b      	ldr	r3, [r3, #20]
 8002552:	4313      	orrs	r3, r2
 8002554:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	68fa      	ldr	r2, [r7, #12]
 800255a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	689a      	ldr	r2, [r3, #8]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	4a0a      	ldr	r2, [pc, #40]	; (8002598 <TIM_Base_SetConfig+0x114>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d003      	beq.n	800257c <TIM_Base_SetConfig+0xf8>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	4a0c      	ldr	r2, [pc, #48]	; (80025a8 <TIM_Base_SetConfig+0x124>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d103      	bne.n	8002584 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	691a      	ldr	r2, [r3, #16]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2201      	movs	r2, #1
 8002588:	615a      	str	r2, [r3, #20]
}
 800258a:	bf00      	nop
 800258c:	3714      	adds	r7, #20
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr
 8002596:	bf00      	nop
 8002598:	40010000 	.word	0x40010000
 800259c:	40000400 	.word	0x40000400
 80025a0:	40000800 	.word	0x40000800
 80025a4:	40000c00 	.word	0x40000c00
 80025a8:	40010400 	.word	0x40010400
 80025ac:	40014000 	.word	0x40014000
 80025b0:	40014400 	.word	0x40014400
 80025b4:	40014800 	.word	0x40014800
 80025b8:	40001800 	.word	0x40001800
 80025bc:	40001c00 	.word	0x40001c00
 80025c0:	40002000 	.word	0x40002000

080025c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80025cc:	bf00      	nop
 80025ce:	370c      	adds	r7, #12
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr

080025d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80025d8:	b480      	push	{r7}
 80025da:	b083      	sub	sp, #12
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80025e0:	bf00      	nop
 80025e2:	370c      	adds	r7, #12
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr

080025ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b082      	sub	sp, #8
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d101      	bne.n	80025fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e03f      	b.n	800267e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002604:	b2db      	uxtb	r3, r3
 8002606:	2b00      	cmp	r3, #0
 8002608:	d106      	bne.n	8002618 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2200      	movs	r2, #0
 800260e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	f7fe fb8e 	bl	8000d34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2224      	movs	r2, #36	; 0x24
 800261c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	68da      	ldr	r2, [r3, #12]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800262e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	f000 f829 	bl	8002688 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	691a      	ldr	r2, [r3, #16]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002644:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	695a      	ldr	r2, [r3, #20]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002654:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	68da      	ldr	r2, [r3, #12]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002664:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2200      	movs	r2, #0
 800266a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2220      	movs	r2, #32
 8002670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2220      	movs	r2, #32
 8002678:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800267c:	2300      	movs	r3, #0
}
 800267e:	4618      	mov	r0, r3
 8002680:	3708      	adds	r7, #8
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
	...

08002688 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002688:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800268c:	b0c0      	sub	sp, #256	; 0x100
 800268e:	af00      	add	r7, sp, #0
 8002690:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002694:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	691b      	ldr	r3, [r3, #16]
 800269c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80026a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026a4:	68d9      	ldr	r1, [r3, #12]
 80026a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	ea40 0301 	orr.w	r3, r0, r1
 80026b0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80026b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026b6:	689a      	ldr	r2, [r3, #8]
 80026b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026bc:	691b      	ldr	r3, [r3, #16]
 80026be:	431a      	orrs	r2, r3
 80026c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026c4:	695b      	ldr	r3, [r3, #20]
 80026c6:	431a      	orrs	r2, r3
 80026c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026cc:	69db      	ldr	r3, [r3, #28]
 80026ce:	4313      	orrs	r3, r2
 80026d0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80026d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80026e0:	f021 010c 	bic.w	r1, r1, #12
 80026e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80026ee:	430b      	orrs	r3, r1
 80026f0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80026f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	695b      	ldr	r3, [r3, #20]
 80026fa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80026fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002702:	6999      	ldr	r1, [r3, #24]
 8002704:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	ea40 0301 	orr.w	r3, r0, r1
 800270e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	4b8f      	ldr	r3, [pc, #572]	; (8002954 <UART_SetConfig+0x2cc>)
 8002718:	429a      	cmp	r2, r3
 800271a:	d005      	beq.n	8002728 <UART_SetConfig+0xa0>
 800271c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	4b8d      	ldr	r3, [pc, #564]	; (8002958 <UART_SetConfig+0x2d0>)
 8002724:	429a      	cmp	r2, r3
 8002726:	d104      	bne.n	8002732 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002728:	f7fe ff9e 	bl	8001668 <HAL_RCC_GetPCLK2Freq>
 800272c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002730:	e003      	b.n	800273a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002732:	f7fe ff85 	bl	8001640 <HAL_RCC_GetPCLK1Freq>
 8002736:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800273a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800273e:	69db      	ldr	r3, [r3, #28]
 8002740:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002744:	f040 810c 	bne.w	8002960 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002748:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800274c:	2200      	movs	r2, #0
 800274e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002752:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002756:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800275a:	4622      	mov	r2, r4
 800275c:	462b      	mov	r3, r5
 800275e:	1891      	adds	r1, r2, r2
 8002760:	65b9      	str	r1, [r7, #88]	; 0x58
 8002762:	415b      	adcs	r3, r3
 8002764:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002766:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800276a:	4621      	mov	r1, r4
 800276c:	eb12 0801 	adds.w	r8, r2, r1
 8002770:	4629      	mov	r1, r5
 8002772:	eb43 0901 	adc.w	r9, r3, r1
 8002776:	f04f 0200 	mov.w	r2, #0
 800277a:	f04f 0300 	mov.w	r3, #0
 800277e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002782:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002786:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800278a:	4690      	mov	r8, r2
 800278c:	4699      	mov	r9, r3
 800278e:	4623      	mov	r3, r4
 8002790:	eb18 0303 	adds.w	r3, r8, r3
 8002794:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002798:	462b      	mov	r3, r5
 800279a:	eb49 0303 	adc.w	r3, r9, r3
 800279e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80027a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	2200      	movs	r2, #0
 80027aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80027ae:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80027b2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80027b6:	460b      	mov	r3, r1
 80027b8:	18db      	adds	r3, r3, r3
 80027ba:	653b      	str	r3, [r7, #80]	; 0x50
 80027bc:	4613      	mov	r3, r2
 80027be:	eb42 0303 	adc.w	r3, r2, r3
 80027c2:	657b      	str	r3, [r7, #84]	; 0x54
 80027c4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80027c8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80027cc:	f7fd fd70 	bl	80002b0 <__aeabi_uldivmod>
 80027d0:	4602      	mov	r2, r0
 80027d2:	460b      	mov	r3, r1
 80027d4:	4b61      	ldr	r3, [pc, #388]	; (800295c <UART_SetConfig+0x2d4>)
 80027d6:	fba3 2302 	umull	r2, r3, r3, r2
 80027da:	095b      	lsrs	r3, r3, #5
 80027dc:	011c      	lsls	r4, r3, #4
 80027de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80027e2:	2200      	movs	r2, #0
 80027e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80027e8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80027ec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80027f0:	4642      	mov	r2, r8
 80027f2:	464b      	mov	r3, r9
 80027f4:	1891      	adds	r1, r2, r2
 80027f6:	64b9      	str	r1, [r7, #72]	; 0x48
 80027f8:	415b      	adcs	r3, r3
 80027fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80027fc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002800:	4641      	mov	r1, r8
 8002802:	eb12 0a01 	adds.w	sl, r2, r1
 8002806:	4649      	mov	r1, r9
 8002808:	eb43 0b01 	adc.w	fp, r3, r1
 800280c:	f04f 0200 	mov.w	r2, #0
 8002810:	f04f 0300 	mov.w	r3, #0
 8002814:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002818:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800281c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002820:	4692      	mov	sl, r2
 8002822:	469b      	mov	fp, r3
 8002824:	4643      	mov	r3, r8
 8002826:	eb1a 0303 	adds.w	r3, sl, r3
 800282a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800282e:	464b      	mov	r3, r9
 8002830:	eb4b 0303 	adc.w	r3, fp, r3
 8002834:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002838:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	2200      	movs	r2, #0
 8002840:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002844:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002848:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800284c:	460b      	mov	r3, r1
 800284e:	18db      	adds	r3, r3, r3
 8002850:	643b      	str	r3, [r7, #64]	; 0x40
 8002852:	4613      	mov	r3, r2
 8002854:	eb42 0303 	adc.w	r3, r2, r3
 8002858:	647b      	str	r3, [r7, #68]	; 0x44
 800285a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800285e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002862:	f7fd fd25 	bl	80002b0 <__aeabi_uldivmod>
 8002866:	4602      	mov	r2, r0
 8002868:	460b      	mov	r3, r1
 800286a:	4611      	mov	r1, r2
 800286c:	4b3b      	ldr	r3, [pc, #236]	; (800295c <UART_SetConfig+0x2d4>)
 800286e:	fba3 2301 	umull	r2, r3, r3, r1
 8002872:	095b      	lsrs	r3, r3, #5
 8002874:	2264      	movs	r2, #100	; 0x64
 8002876:	fb02 f303 	mul.w	r3, r2, r3
 800287a:	1acb      	subs	r3, r1, r3
 800287c:	00db      	lsls	r3, r3, #3
 800287e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002882:	4b36      	ldr	r3, [pc, #216]	; (800295c <UART_SetConfig+0x2d4>)
 8002884:	fba3 2302 	umull	r2, r3, r3, r2
 8002888:	095b      	lsrs	r3, r3, #5
 800288a:	005b      	lsls	r3, r3, #1
 800288c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002890:	441c      	add	r4, r3
 8002892:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002896:	2200      	movs	r2, #0
 8002898:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800289c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80028a0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80028a4:	4642      	mov	r2, r8
 80028a6:	464b      	mov	r3, r9
 80028a8:	1891      	adds	r1, r2, r2
 80028aa:	63b9      	str	r1, [r7, #56]	; 0x38
 80028ac:	415b      	adcs	r3, r3
 80028ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028b0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80028b4:	4641      	mov	r1, r8
 80028b6:	1851      	adds	r1, r2, r1
 80028b8:	6339      	str	r1, [r7, #48]	; 0x30
 80028ba:	4649      	mov	r1, r9
 80028bc:	414b      	adcs	r3, r1
 80028be:	637b      	str	r3, [r7, #52]	; 0x34
 80028c0:	f04f 0200 	mov.w	r2, #0
 80028c4:	f04f 0300 	mov.w	r3, #0
 80028c8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80028cc:	4659      	mov	r1, fp
 80028ce:	00cb      	lsls	r3, r1, #3
 80028d0:	4651      	mov	r1, sl
 80028d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80028d6:	4651      	mov	r1, sl
 80028d8:	00ca      	lsls	r2, r1, #3
 80028da:	4610      	mov	r0, r2
 80028dc:	4619      	mov	r1, r3
 80028de:	4603      	mov	r3, r0
 80028e0:	4642      	mov	r2, r8
 80028e2:	189b      	adds	r3, r3, r2
 80028e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80028e8:	464b      	mov	r3, r9
 80028ea:	460a      	mov	r2, r1
 80028ec:	eb42 0303 	adc.w	r3, r2, r3
 80028f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80028f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	2200      	movs	r2, #0
 80028fc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002900:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002904:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002908:	460b      	mov	r3, r1
 800290a:	18db      	adds	r3, r3, r3
 800290c:	62bb      	str	r3, [r7, #40]	; 0x28
 800290e:	4613      	mov	r3, r2
 8002910:	eb42 0303 	adc.w	r3, r2, r3
 8002914:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002916:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800291a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800291e:	f7fd fcc7 	bl	80002b0 <__aeabi_uldivmod>
 8002922:	4602      	mov	r2, r0
 8002924:	460b      	mov	r3, r1
 8002926:	4b0d      	ldr	r3, [pc, #52]	; (800295c <UART_SetConfig+0x2d4>)
 8002928:	fba3 1302 	umull	r1, r3, r3, r2
 800292c:	095b      	lsrs	r3, r3, #5
 800292e:	2164      	movs	r1, #100	; 0x64
 8002930:	fb01 f303 	mul.w	r3, r1, r3
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	00db      	lsls	r3, r3, #3
 8002938:	3332      	adds	r3, #50	; 0x32
 800293a:	4a08      	ldr	r2, [pc, #32]	; (800295c <UART_SetConfig+0x2d4>)
 800293c:	fba2 2303 	umull	r2, r3, r2, r3
 8002940:	095b      	lsrs	r3, r3, #5
 8002942:	f003 0207 	and.w	r2, r3, #7
 8002946:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4422      	add	r2, r4
 800294e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002950:	e105      	b.n	8002b5e <UART_SetConfig+0x4d6>
 8002952:	bf00      	nop
 8002954:	40011000 	.word	0x40011000
 8002958:	40011400 	.word	0x40011400
 800295c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002960:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002964:	2200      	movs	r2, #0
 8002966:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800296a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800296e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002972:	4642      	mov	r2, r8
 8002974:	464b      	mov	r3, r9
 8002976:	1891      	adds	r1, r2, r2
 8002978:	6239      	str	r1, [r7, #32]
 800297a:	415b      	adcs	r3, r3
 800297c:	627b      	str	r3, [r7, #36]	; 0x24
 800297e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002982:	4641      	mov	r1, r8
 8002984:	1854      	adds	r4, r2, r1
 8002986:	4649      	mov	r1, r9
 8002988:	eb43 0501 	adc.w	r5, r3, r1
 800298c:	f04f 0200 	mov.w	r2, #0
 8002990:	f04f 0300 	mov.w	r3, #0
 8002994:	00eb      	lsls	r3, r5, #3
 8002996:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800299a:	00e2      	lsls	r2, r4, #3
 800299c:	4614      	mov	r4, r2
 800299e:	461d      	mov	r5, r3
 80029a0:	4643      	mov	r3, r8
 80029a2:	18e3      	adds	r3, r4, r3
 80029a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80029a8:	464b      	mov	r3, r9
 80029aa:	eb45 0303 	adc.w	r3, r5, r3
 80029ae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80029b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	2200      	movs	r2, #0
 80029ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80029be:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80029c2:	f04f 0200 	mov.w	r2, #0
 80029c6:	f04f 0300 	mov.w	r3, #0
 80029ca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80029ce:	4629      	mov	r1, r5
 80029d0:	008b      	lsls	r3, r1, #2
 80029d2:	4621      	mov	r1, r4
 80029d4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80029d8:	4621      	mov	r1, r4
 80029da:	008a      	lsls	r2, r1, #2
 80029dc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80029e0:	f7fd fc66 	bl	80002b0 <__aeabi_uldivmod>
 80029e4:	4602      	mov	r2, r0
 80029e6:	460b      	mov	r3, r1
 80029e8:	4b60      	ldr	r3, [pc, #384]	; (8002b6c <UART_SetConfig+0x4e4>)
 80029ea:	fba3 2302 	umull	r2, r3, r3, r2
 80029ee:	095b      	lsrs	r3, r3, #5
 80029f0:	011c      	lsls	r4, r3, #4
 80029f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80029f6:	2200      	movs	r2, #0
 80029f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80029fc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002a00:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002a04:	4642      	mov	r2, r8
 8002a06:	464b      	mov	r3, r9
 8002a08:	1891      	adds	r1, r2, r2
 8002a0a:	61b9      	str	r1, [r7, #24]
 8002a0c:	415b      	adcs	r3, r3
 8002a0e:	61fb      	str	r3, [r7, #28]
 8002a10:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a14:	4641      	mov	r1, r8
 8002a16:	1851      	adds	r1, r2, r1
 8002a18:	6139      	str	r1, [r7, #16]
 8002a1a:	4649      	mov	r1, r9
 8002a1c:	414b      	adcs	r3, r1
 8002a1e:	617b      	str	r3, [r7, #20]
 8002a20:	f04f 0200 	mov.w	r2, #0
 8002a24:	f04f 0300 	mov.w	r3, #0
 8002a28:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002a2c:	4659      	mov	r1, fp
 8002a2e:	00cb      	lsls	r3, r1, #3
 8002a30:	4651      	mov	r1, sl
 8002a32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a36:	4651      	mov	r1, sl
 8002a38:	00ca      	lsls	r2, r1, #3
 8002a3a:	4610      	mov	r0, r2
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	4603      	mov	r3, r0
 8002a40:	4642      	mov	r2, r8
 8002a42:	189b      	adds	r3, r3, r2
 8002a44:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002a48:	464b      	mov	r3, r9
 8002a4a:	460a      	mov	r2, r1
 8002a4c:	eb42 0303 	adc.w	r3, r2, r3
 8002a50:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002a54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	67bb      	str	r3, [r7, #120]	; 0x78
 8002a5e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002a60:	f04f 0200 	mov.w	r2, #0
 8002a64:	f04f 0300 	mov.w	r3, #0
 8002a68:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002a6c:	4649      	mov	r1, r9
 8002a6e:	008b      	lsls	r3, r1, #2
 8002a70:	4641      	mov	r1, r8
 8002a72:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002a76:	4641      	mov	r1, r8
 8002a78:	008a      	lsls	r2, r1, #2
 8002a7a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002a7e:	f7fd fc17 	bl	80002b0 <__aeabi_uldivmod>
 8002a82:	4602      	mov	r2, r0
 8002a84:	460b      	mov	r3, r1
 8002a86:	4b39      	ldr	r3, [pc, #228]	; (8002b6c <UART_SetConfig+0x4e4>)
 8002a88:	fba3 1302 	umull	r1, r3, r3, r2
 8002a8c:	095b      	lsrs	r3, r3, #5
 8002a8e:	2164      	movs	r1, #100	; 0x64
 8002a90:	fb01 f303 	mul.w	r3, r1, r3
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	011b      	lsls	r3, r3, #4
 8002a98:	3332      	adds	r3, #50	; 0x32
 8002a9a:	4a34      	ldr	r2, [pc, #208]	; (8002b6c <UART_SetConfig+0x4e4>)
 8002a9c:	fba2 2303 	umull	r2, r3, r2, r3
 8002aa0:	095b      	lsrs	r3, r3, #5
 8002aa2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002aa6:	441c      	add	r4, r3
 8002aa8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002aac:	2200      	movs	r2, #0
 8002aae:	673b      	str	r3, [r7, #112]	; 0x70
 8002ab0:	677a      	str	r2, [r7, #116]	; 0x74
 8002ab2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002ab6:	4642      	mov	r2, r8
 8002ab8:	464b      	mov	r3, r9
 8002aba:	1891      	adds	r1, r2, r2
 8002abc:	60b9      	str	r1, [r7, #8]
 8002abe:	415b      	adcs	r3, r3
 8002ac0:	60fb      	str	r3, [r7, #12]
 8002ac2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002ac6:	4641      	mov	r1, r8
 8002ac8:	1851      	adds	r1, r2, r1
 8002aca:	6039      	str	r1, [r7, #0]
 8002acc:	4649      	mov	r1, r9
 8002ace:	414b      	adcs	r3, r1
 8002ad0:	607b      	str	r3, [r7, #4]
 8002ad2:	f04f 0200 	mov.w	r2, #0
 8002ad6:	f04f 0300 	mov.w	r3, #0
 8002ada:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002ade:	4659      	mov	r1, fp
 8002ae0:	00cb      	lsls	r3, r1, #3
 8002ae2:	4651      	mov	r1, sl
 8002ae4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ae8:	4651      	mov	r1, sl
 8002aea:	00ca      	lsls	r2, r1, #3
 8002aec:	4610      	mov	r0, r2
 8002aee:	4619      	mov	r1, r3
 8002af0:	4603      	mov	r3, r0
 8002af2:	4642      	mov	r2, r8
 8002af4:	189b      	adds	r3, r3, r2
 8002af6:	66bb      	str	r3, [r7, #104]	; 0x68
 8002af8:	464b      	mov	r3, r9
 8002afa:	460a      	mov	r2, r1
 8002afc:	eb42 0303 	adc.w	r3, r2, r3
 8002b00:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002b02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	663b      	str	r3, [r7, #96]	; 0x60
 8002b0c:	667a      	str	r2, [r7, #100]	; 0x64
 8002b0e:	f04f 0200 	mov.w	r2, #0
 8002b12:	f04f 0300 	mov.w	r3, #0
 8002b16:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002b1a:	4649      	mov	r1, r9
 8002b1c:	008b      	lsls	r3, r1, #2
 8002b1e:	4641      	mov	r1, r8
 8002b20:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002b24:	4641      	mov	r1, r8
 8002b26:	008a      	lsls	r2, r1, #2
 8002b28:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002b2c:	f7fd fbc0 	bl	80002b0 <__aeabi_uldivmod>
 8002b30:	4602      	mov	r2, r0
 8002b32:	460b      	mov	r3, r1
 8002b34:	4b0d      	ldr	r3, [pc, #52]	; (8002b6c <UART_SetConfig+0x4e4>)
 8002b36:	fba3 1302 	umull	r1, r3, r3, r2
 8002b3a:	095b      	lsrs	r3, r3, #5
 8002b3c:	2164      	movs	r1, #100	; 0x64
 8002b3e:	fb01 f303 	mul.w	r3, r1, r3
 8002b42:	1ad3      	subs	r3, r2, r3
 8002b44:	011b      	lsls	r3, r3, #4
 8002b46:	3332      	adds	r3, #50	; 0x32
 8002b48:	4a08      	ldr	r2, [pc, #32]	; (8002b6c <UART_SetConfig+0x4e4>)
 8002b4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b4e:	095b      	lsrs	r3, r3, #5
 8002b50:	f003 020f 	and.w	r2, r3, #15
 8002b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4422      	add	r2, r4
 8002b5c:	609a      	str	r2, [r3, #8]
}
 8002b5e:	bf00      	nop
 8002b60:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002b64:	46bd      	mov	sp, r7
 8002b66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b6a:	bf00      	nop
 8002b6c:	51eb851f 	.word	0x51eb851f

08002b70 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b085      	sub	sp, #20
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	4603      	mov	r3, r0
 8002b78:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002b7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b82:	2b84      	cmp	r3, #132	; 0x84
 8002b84:	d005      	beq.n	8002b92 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002b86:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	4413      	add	r3, r2
 8002b8e:	3303      	adds	r3, #3
 8002b90:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002b92:	68fb      	ldr	r3, [r7, #12]
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3714      	adds	r7, #20
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr

08002ba0 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b083      	sub	sp, #12
 8002ba4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002ba6:	f3ef 8305 	mrs	r3, IPSR
 8002baa:	607b      	str	r3, [r7, #4]
  return(result);
 8002bac:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	bf14      	ite	ne
 8002bb2:	2301      	movne	r3, #1
 8002bb4:	2300      	moveq	r3, #0
 8002bb6:	b2db      	uxtb	r3, r3
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	370c      	adds	r7, #12
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr

08002bc4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002bc8:	f000 fea8 	bl	800391c <vTaskStartScheduler>
  
  return osOK;
 8002bcc:	2300      	movs	r3, #0
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	bd80      	pop	{r7, pc}

08002bd2 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8002bd2:	b580      	push	{r7, lr}
 8002bd4:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8002bd6:	f7ff ffe3 	bl	8002ba0 <inHandlerMode>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d003      	beq.n	8002be8 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8002be0:	f000 ffc0 	bl	8003b64 <xTaskGetTickCountFromISR>
 8002be4:	4603      	mov	r3, r0
 8002be6:	e002      	b.n	8002bee <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8002be8:	f000 ffac 	bl	8003b44 <xTaskGetTickCount>
 8002bec:	4603      	mov	r3, r0
  }
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	bd80      	pop	{r7, pc}

08002bf2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002bf2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bf4:	b089      	sub	sp, #36	; 0x24
 8002bf6:	af04      	add	r7, sp, #16
 8002bf8:	6078      	str	r0, [r7, #4]
 8002bfa:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	695b      	ldr	r3, [r3, #20]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d020      	beq.n	8002c46 <osThreadCreate+0x54>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	699b      	ldr	r3, [r3, #24]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d01c      	beq.n	8002c46 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	685c      	ldr	r4, [r3, #4]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681d      	ldr	r5, [r3, #0]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	691e      	ldr	r6, [r3, #16]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f7ff ffa6 	bl	8002b70 <makeFreeRtosPriority>
 8002c24:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	695b      	ldr	r3, [r3, #20]
 8002c2a:	687a      	ldr	r2, [r7, #4]
 8002c2c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002c2e:	9202      	str	r2, [sp, #8]
 8002c30:	9301      	str	r3, [sp, #4]
 8002c32:	9100      	str	r1, [sp, #0]
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	4632      	mov	r2, r6
 8002c38:	4629      	mov	r1, r5
 8002c3a:	4620      	mov	r0, r4
 8002c3c:	f000 fc90 	bl	8003560 <xTaskCreateStatic>
 8002c40:	4603      	mov	r3, r0
 8002c42:	60fb      	str	r3, [r7, #12]
 8002c44:	e01c      	b.n	8002c80 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	685c      	ldr	r4, [r3, #4]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002c52:	b29e      	uxth	r6, r3
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f7ff ff88 	bl	8002b70 <makeFreeRtosPriority>
 8002c60:	4602      	mov	r2, r0
 8002c62:	f107 030c 	add.w	r3, r7, #12
 8002c66:	9301      	str	r3, [sp, #4]
 8002c68:	9200      	str	r2, [sp, #0]
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	4632      	mov	r2, r6
 8002c6e:	4629      	mov	r1, r5
 8002c70:	4620      	mov	r0, r4
 8002c72:	f000 fcd2 	bl	800361a <xTaskCreate>
 8002c76:	4603      	mov	r3, r0
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d001      	beq.n	8002c80 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	e000      	b.n	8002c82 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002c80:	68fb      	ldr	r3, [r7, #12]
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3714      	adds	r7, #20
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002c8a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002c8a:	b580      	push	{r7, lr}
 8002c8c:	b084      	sub	sp, #16
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d001      	beq.n	8002ca0 <osDelay+0x16>
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	e000      	b.n	8002ca2 <osDelay+0x18>
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f000 fe06 	bl	80038b4 <vTaskDelay>
  
  return osOK;
 8002ca8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3710      	adds	r7, #16
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}

08002cb2 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8002cb2:	b580      	push	{r7, lr}
 8002cb4:	b082      	sub	sp, #8
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d007      	beq.n	8002cd2 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	4619      	mov	r1, r3
 8002cc8:	2001      	movs	r0, #1
 8002cca:	f000 fa5c 	bl	8003186 <xQueueCreateMutexStatic>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	e003      	b.n	8002cda <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8002cd2:	2001      	movs	r0, #1
 8002cd4:	f000 fa3f 	bl	8003156 <xQueueCreateMutex>
 8002cd8:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3708      	adds	r7, #8
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}

08002ce2 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8002ce2:	b580      	push	{r7, lr}
 8002ce4:	b086      	sub	sp, #24
 8002ce6:	af02      	add	r7, sp, #8
 8002ce8:	6078      	str	r0, [r7, #4]
 8002cea:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d00f      	beq.n	8002d14 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d10a      	bne.n	8002d10 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	2203      	movs	r2, #3
 8002d00:	9200      	str	r2, [sp, #0]
 8002d02:	2200      	movs	r2, #0
 8002d04:	2100      	movs	r1, #0
 8002d06:	2001      	movs	r0, #1
 8002d08:	f000 f93a 	bl	8002f80 <xQueueGenericCreateStatic>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	e016      	b.n	8002d3e <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8002d10:	2300      	movs	r3, #0
 8002d12:	e014      	b.n	8002d3e <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d110      	bne.n	8002d3c <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8002d1a:	2203      	movs	r2, #3
 8002d1c:	2100      	movs	r1, #0
 8002d1e:	2001      	movs	r0, #1
 8002d20:	f000 f9a6 	bl	8003070 <xQueueGenericCreate>
 8002d24:	60f8      	str	r0, [r7, #12]
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d005      	beq.n	8002d38 <osSemaphoreCreate+0x56>
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	2200      	movs	r2, #0
 8002d30:	2100      	movs	r1, #0
 8002d32:	68f8      	ldr	r0, [r7, #12]
 8002d34:	f000 fa42 	bl	80031bc <xQueueGenericSend>
      return sema;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	e000      	b.n	8002d3e <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8002d3c:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3710      	adds	r7, #16
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}

08002d46 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002d46:	b480      	push	{r7}
 8002d48:	b083      	sub	sp, #12
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	f103 0208 	add.w	r2, r3, #8
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002d5e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	f103 0208 	add.w	r2, r3, #8
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	f103 0208 	add.w	r2, r3, #8
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2200      	movs	r2, #0
 8002d78:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002d7a:	bf00      	nop
 8002d7c:	370c      	adds	r7, #12
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr

08002d86 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002d86:	b480      	push	{r7}
 8002d88:	b083      	sub	sp, #12
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2200      	movs	r2, #0
 8002d92:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002d94:	bf00      	nop
 8002d96:	370c      	adds	r7, #12
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr

08002da0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002da0:	b480      	push	{r7}
 8002da2:	b085      	sub	sp, #20
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
 8002da8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	68fa      	ldr	r2, [r7, #12]
 8002db4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	689a      	ldr	r2, [r3, #8]
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	683a      	ldr	r2, [r7, #0]
 8002dc4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	683a      	ldr	r2, [r7, #0]
 8002dca:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	687a      	ldr	r2, [r7, #4]
 8002dd0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	1c5a      	adds	r2, r3, #1
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	601a      	str	r2, [r3, #0]
}
 8002ddc:	bf00      	nop
 8002dde:	3714      	adds	r7, #20
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr

08002de8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002de8:	b480      	push	{r7}
 8002dea:	b085      	sub	sp, #20
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
 8002df0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002dfe:	d103      	bne.n	8002e08 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	691b      	ldr	r3, [r3, #16]
 8002e04:	60fb      	str	r3, [r7, #12]
 8002e06:	e00c      	b.n	8002e22 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	3308      	adds	r3, #8
 8002e0c:	60fb      	str	r3, [r7, #12]
 8002e0e:	e002      	b.n	8002e16 <vListInsert+0x2e>
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	60fb      	str	r3, [r7, #12]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	68ba      	ldr	r2, [r7, #8]
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	d2f6      	bcs.n	8002e10 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	685a      	ldr	r2, [r3, #4]
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	683a      	ldr	r2, [r7, #0]
 8002e30:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	68fa      	ldr	r2, [r7, #12]
 8002e36:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	683a      	ldr	r2, [r7, #0]
 8002e3c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	687a      	ldr	r2, [r7, #4]
 8002e42:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	1c5a      	adds	r2, r3, #1
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	601a      	str	r2, [r3, #0]
}
 8002e4e:	bf00      	nop
 8002e50:	3714      	adds	r7, #20
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr

08002e5a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002e5a:	b480      	push	{r7}
 8002e5c:	b085      	sub	sp, #20
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	691b      	ldr	r3, [r3, #16]
 8002e66:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	687a      	ldr	r2, [r7, #4]
 8002e6e:	6892      	ldr	r2, [r2, #8]
 8002e70:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	687a      	ldr	r2, [r7, #4]
 8002e78:	6852      	ldr	r2, [r2, #4]
 8002e7a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d103      	bne.n	8002e8e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	689a      	ldr	r2, [r3, #8]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2200      	movs	r2, #0
 8002e92:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	1e5a      	subs	r2, r3, #1
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3714      	adds	r7, #20
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr
	...

08002eb0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b084      	sub	sp, #16
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
 8002eb8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d10a      	bne.n	8002eda <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ec8:	f383 8811 	msr	BASEPRI, r3
 8002ecc:	f3bf 8f6f 	isb	sy
 8002ed0:	f3bf 8f4f 	dsb	sy
 8002ed4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002ed6:	bf00      	nop
 8002ed8:	e7fe      	b.n	8002ed8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002eda:	f001 fb8b 	bl	80045f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ee6:	68f9      	ldr	r1, [r7, #12]
 8002ee8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002eea:	fb01 f303 	mul.w	r3, r1, r3
 8002eee:	441a      	add	r2, r3
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f0a:	3b01      	subs	r3, #1
 8002f0c:	68f9      	ldr	r1, [r7, #12]
 8002f0e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002f10:	fb01 f303 	mul.w	r3, r1, r3
 8002f14:	441a      	add	r2, r3
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	22ff      	movs	r2, #255	; 0xff
 8002f1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	22ff      	movs	r2, #255	; 0xff
 8002f26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d114      	bne.n	8002f5a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	691b      	ldr	r3, [r3, #16]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d01a      	beq.n	8002f6e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	3310      	adds	r3, #16
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f000 ff61 	bl	8003e04 <xTaskRemoveFromEventList>
 8002f42:	4603      	mov	r3, r0
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d012      	beq.n	8002f6e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002f48:	4b0c      	ldr	r3, [pc, #48]	; (8002f7c <xQueueGenericReset+0xcc>)
 8002f4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f4e:	601a      	str	r2, [r3, #0]
 8002f50:	f3bf 8f4f 	dsb	sy
 8002f54:	f3bf 8f6f 	isb	sy
 8002f58:	e009      	b.n	8002f6e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	3310      	adds	r3, #16
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f7ff fef1 	bl	8002d46 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	3324      	adds	r3, #36	; 0x24
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f7ff feec 	bl	8002d46 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002f6e:	f001 fb71 	bl	8004654 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002f72:	2301      	movs	r3, #1
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3710      	adds	r7, #16
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}
 8002f7c:	e000ed04 	.word	0xe000ed04

08002f80 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b08e      	sub	sp, #56	; 0x38
 8002f84:	af02      	add	r7, sp, #8
 8002f86:	60f8      	str	r0, [r7, #12]
 8002f88:	60b9      	str	r1, [r7, #8]
 8002f8a:	607a      	str	r2, [r7, #4]
 8002f8c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d10a      	bne.n	8002faa <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f98:	f383 8811 	msr	BASEPRI, r3
 8002f9c:	f3bf 8f6f 	isb	sy
 8002fa0:	f3bf 8f4f 	dsb	sy
 8002fa4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002fa6:	bf00      	nop
 8002fa8:	e7fe      	b.n	8002fa8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d10a      	bne.n	8002fc6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fb4:	f383 8811 	msr	BASEPRI, r3
 8002fb8:	f3bf 8f6f 	isb	sy
 8002fbc:	f3bf 8f4f 	dsb	sy
 8002fc0:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002fc2:	bf00      	nop
 8002fc4:	e7fe      	b.n	8002fc4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d002      	beq.n	8002fd2 <xQueueGenericCreateStatic+0x52>
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d001      	beq.n	8002fd6 <xQueueGenericCreateStatic+0x56>
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e000      	b.n	8002fd8 <xQueueGenericCreateStatic+0x58>
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d10a      	bne.n	8002ff2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fe0:	f383 8811 	msr	BASEPRI, r3
 8002fe4:	f3bf 8f6f 	isb	sy
 8002fe8:	f3bf 8f4f 	dsb	sy
 8002fec:	623b      	str	r3, [r7, #32]
}
 8002fee:	bf00      	nop
 8002ff0:	e7fe      	b.n	8002ff0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d102      	bne.n	8002ffe <xQueueGenericCreateStatic+0x7e>
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d101      	bne.n	8003002 <xQueueGenericCreateStatic+0x82>
 8002ffe:	2301      	movs	r3, #1
 8003000:	e000      	b.n	8003004 <xQueueGenericCreateStatic+0x84>
 8003002:	2300      	movs	r3, #0
 8003004:	2b00      	cmp	r3, #0
 8003006:	d10a      	bne.n	800301e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800300c:	f383 8811 	msr	BASEPRI, r3
 8003010:	f3bf 8f6f 	isb	sy
 8003014:	f3bf 8f4f 	dsb	sy
 8003018:	61fb      	str	r3, [r7, #28]
}
 800301a:	bf00      	nop
 800301c:	e7fe      	b.n	800301c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800301e:	2348      	movs	r3, #72	; 0x48
 8003020:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	2b48      	cmp	r3, #72	; 0x48
 8003026:	d00a      	beq.n	800303e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800302c:	f383 8811 	msr	BASEPRI, r3
 8003030:	f3bf 8f6f 	isb	sy
 8003034:	f3bf 8f4f 	dsb	sy
 8003038:	61bb      	str	r3, [r7, #24]
}
 800303a:	bf00      	nop
 800303c:	e7fe      	b.n	800303c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800303e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003046:	2b00      	cmp	r3, #0
 8003048:	d00d      	beq.n	8003066 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800304a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800304c:	2201      	movs	r2, #1
 800304e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003052:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003058:	9300      	str	r3, [sp, #0]
 800305a:	4613      	mov	r3, r2
 800305c:	687a      	ldr	r2, [r7, #4]
 800305e:	68b9      	ldr	r1, [r7, #8]
 8003060:	68f8      	ldr	r0, [r7, #12]
 8003062:	f000 f83f 	bl	80030e4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003068:	4618      	mov	r0, r3
 800306a:	3730      	adds	r7, #48	; 0x30
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}

08003070 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003070:	b580      	push	{r7, lr}
 8003072:	b08a      	sub	sp, #40	; 0x28
 8003074:	af02      	add	r7, sp, #8
 8003076:	60f8      	str	r0, [r7, #12]
 8003078:	60b9      	str	r1, [r7, #8]
 800307a:	4613      	mov	r3, r2
 800307c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d10a      	bne.n	800309a <xQueueGenericCreate+0x2a>
	__asm volatile
 8003084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003088:	f383 8811 	msr	BASEPRI, r3
 800308c:	f3bf 8f6f 	isb	sy
 8003090:	f3bf 8f4f 	dsb	sy
 8003094:	613b      	str	r3, [r7, #16]
}
 8003096:	bf00      	nop
 8003098:	e7fe      	b.n	8003098 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	68ba      	ldr	r2, [r7, #8]
 800309e:	fb02 f303 	mul.w	r3, r2, r3
 80030a2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80030a4:	69fb      	ldr	r3, [r7, #28]
 80030a6:	3348      	adds	r3, #72	; 0x48
 80030a8:	4618      	mov	r0, r3
 80030aa:	f001 fbc5 	bl	8004838 <pvPortMalloc>
 80030ae:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80030b0:	69bb      	ldr	r3, [r7, #24]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d011      	beq.n	80030da <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80030b6:	69bb      	ldr	r3, [r7, #24]
 80030b8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	3348      	adds	r3, #72	; 0x48
 80030be:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80030c0:	69bb      	ldr	r3, [r7, #24]
 80030c2:	2200      	movs	r2, #0
 80030c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80030c8:	79fa      	ldrb	r2, [r7, #7]
 80030ca:	69bb      	ldr	r3, [r7, #24]
 80030cc:	9300      	str	r3, [sp, #0]
 80030ce:	4613      	mov	r3, r2
 80030d0:	697a      	ldr	r2, [r7, #20]
 80030d2:	68b9      	ldr	r1, [r7, #8]
 80030d4:	68f8      	ldr	r0, [r7, #12]
 80030d6:	f000 f805 	bl	80030e4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80030da:	69bb      	ldr	r3, [r7, #24]
	}
 80030dc:	4618      	mov	r0, r3
 80030de:	3720      	adds	r7, #32
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}

080030e4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b084      	sub	sp, #16
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	60f8      	str	r0, [r7, #12]
 80030ec:	60b9      	str	r1, [r7, #8]
 80030ee:	607a      	str	r2, [r7, #4]
 80030f0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d103      	bne.n	8003100 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80030f8:	69bb      	ldr	r3, [r7, #24]
 80030fa:	69ba      	ldr	r2, [r7, #24]
 80030fc:	601a      	str	r2, [r3, #0]
 80030fe:	e002      	b.n	8003106 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003100:	69bb      	ldr	r3, [r7, #24]
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003106:	69bb      	ldr	r3, [r7, #24]
 8003108:	68fa      	ldr	r2, [r7, #12]
 800310a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800310c:	69bb      	ldr	r3, [r7, #24]
 800310e:	68ba      	ldr	r2, [r7, #8]
 8003110:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003112:	2101      	movs	r1, #1
 8003114:	69b8      	ldr	r0, [r7, #24]
 8003116:	f7ff fecb 	bl	8002eb0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800311a:	bf00      	nop
 800311c:	3710      	adds	r7, #16
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}

08003122 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8003122:	b580      	push	{r7, lr}
 8003124:	b082      	sub	sp, #8
 8003126:	af00      	add	r7, sp, #0
 8003128:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d00e      	beq.n	800314e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2200      	movs	r2, #0
 8003134:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2200      	movs	r2, #0
 800313a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2200      	movs	r2, #0
 8003140:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8003142:	2300      	movs	r3, #0
 8003144:	2200      	movs	r2, #0
 8003146:	2100      	movs	r1, #0
 8003148:	6878      	ldr	r0, [r7, #4]
 800314a:	f000 f837 	bl	80031bc <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800314e:	bf00      	nop
 8003150:	3708      	adds	r7, #8
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}

08003156 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8003156:	b580      	push	{r7, lr}
 8003158:	b086      	sub	sp, #24
 800315a:	af00      	add	r7, sp, #0
 800315c:	4603      	mov	r3, r0
 800315e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8003160:	2301      	movs	r3, #1
 8003162:	617b      	str	r3, [r7, #20]
 8003164:	2300      	movs	r3, #0
 8003166:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8003168:	79fb      	ldrb	r3, [r7, #7]
 800316a:	461a      	mov	r2, r3
 800316c:	6939      	ldr	r1, [r7, #16]
 800316e:	6978      	ldr	r0, [r7, #20]
 8003170:	f7ff ff7e 	bl	8003070 <xQueueGenericCreate>
 8003174:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8003176:	68f8      	ldr	r0, [r7, #12]
 8003178:	f7ff ffd3 	bl	8003122 <prvInitialiseMutex>

		return xNewQueue;
 800317c:	68fb      	ldr	r3, [r7, #12]
	}
 800317e:	4618      	mov	r0, r3
 8003180:	3718      	adds	r7, #24
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}

08003186 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8003186:	b580      	push	{r7, lr}
 8003188:	b088      	sub	sp, #32
 800318a:	af02      	add	r7, sp, #8
 800318c:	4603      	mov	r3, r0
 800318e:	6039      	str	r1, [r7, #0]
 8003190:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8003192:	2301      	movs	r3, #1
 8003194:	617b      	str	r3, [r7, #20]
 8003196:	2300      	movs	r3, #0
 8003198:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800319a:	79fb      	ldrb	r3, [r7, #7]
 800319c:	9300      	str	r3, [sp, #0]
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	2200      	movs	r2, #0
 80031a2:	6939      	ldr	r1, [r7, #16]
 80031a4:	6978      	ldr	r0, [r7, #20]
 80031a6:	f7ff feeb 	bl	8002f80 <xQueueGenericCreateStatic>
 80031aa:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80031ac:	68f8      	ldr	r0, [r7, #12]
 80031ae:	f7ff ffb8 	bl	8003122 <prvInitialiseMutex>

		return xNewQueue;
 80031b2:	68fb      	ldr	r3, [r7, #12]
	}
 80031b4:	4618      	mov	r0, r3
 80031b6:	3718      	adds	r7, #24
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}

080031bc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b08e      	sub	sp, #56	; 0x38
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	60f8      	str	r0, [r7, #12]
 80031c4:	60b9      	str	r1, [r7, #8]
 80031c6:	607a      	str	r2, [r7, #4]
 80031c8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80031ca:	2300      	movs	r3, #0
 80031cc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80031d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d10a      	bne.n	80031ee <xQueueGenericSend+0x32>
	__asm volatile
 80031d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031dc:	f383 8811 	msr	BASEPRI, r3
 80031e0:	f3bf 8f6f 	isb	sy
 80031e4:	f3bf 8f4f 	dsb	sy
 80031e8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80031ea:	bf00      	nop
 80031ec:	e7fe      	b.n	80031ec <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d103      	bne.n	80031fc <xQueueGenericSend+0x40>
 80031f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d101      	bne.n	8003200 <xQueueGenericSend+0x44>
 80031fc:	2301      	movs	r3, #1
 80031fe:	e000      	b.n	8003202 <xQueueGenericSend+0x46>
 8003200:	2300      	movs	r3, #0
 8003202:	2b00      	cmp	r3, #0
 8003204:	d10a      	bne.n	800321c <xQueueGenericSend+0x60>
	__asm volatile
 8003206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800320a:	f383 8811 	msr	BASEPRI, r3
 800320e:	f3bf 8f6f 	isb	sy
 8003212:	f3bf 8f4f 	dsb	sy
 8003216:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003218:	bf00      	nop
 800321a:	e7fe      	b.n	800321a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	2b02      	cmp	r3, #2
 8003220:	d103      	bne.n	800322a <xQueueGenericSend+0x6e>
 8003222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003224:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003226:	2b01      	cmp	r3, #1
 8003228:	d101      	bne.n	800322e <xQueueGenericSend+0x72>
 800322a:	2301      	movs	r3, #1
 800322c:	e000      	b.n	8003230 <xQueueGenericSend+0x74>
 800322e:	2300      	movs	r3, #0
 8003230:	2b00      	cmp	r3, #0
 8003232:	d10a      	bne.n	800324a <xQueueGenericSend+0x8e>
	__asm volatile
 8003234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003238:	f383 8811 	msr	BASEPRI, r3
 800323c:	f3bf 8f6f 	isb	sy
 8003240:	f3bf 8f4f 	dsb	sy
 8003244:	623b      	str	r3, [r7, #32]
}
 8003246:	bf00      	nop
 8003248:	e7fe      	b.n	8003248 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800324a:	f000 ff9b 	bl	8004184 <xTaskGetSchedulerState>
 800324e:	4603      	mov	r3, r0
 8003250:	2b00      	cmp	r3, #0
 8003252:	d102      	bne.n	800325a <xQueueGenericSend+0x9e>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d101      	bne.n	800325e <xQueueGenericSend+0xa2>
 800325a:	2301      	movs	r3, #1
 800325c:	e000      	b.n	8003260 <xQueueGenericSend+0xa4>
 800325e:	2300      	movs	r3, #0
 8003260:	2b00      	cmp	r3, #0
 8003262:	d10a      	bne.n	800327a <xQueueGenericSend+0xbe>
	__asm volatile
 8003264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003268:	f383 8811 	msr	BASEPRI, r3
 800326c:	f3bf 8f6f 	isb	sy
 8003270:	f3bf 8f4f 	dsb	sy
 8003274:	61fb      	str	r3, [r7, #28]
}
 8003276:	bf00      	nop
 8003278:	e7fe      	b.n	8003278 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800327a:	f001 f9bb 	bl	80045f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800327e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003280:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003284:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003286:	429a      	cmp	r2, r3
 8003288:	d302      	bcc.n	8003290 <xQueueGenericSend+0xd4>
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	2b02      	cmp	r3, #2
 800328e:	d129      	bne.n	80032e4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003290:	683a      	ldr	r2, [r7, #0]
 8003292:	68b9      	ldr	r1, [r7, #8]
 8003294:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003296:	f000 f88f 	bl	80033b8 <prvCopyDataToQueue>
 800329a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800329c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800329e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d010      	beq.n	80032c6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80032a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032a6:	3324      	adds	r3, #36	; 0x24
 80032a8:	4618      	mov	r0, r3
 80032aa:	f000 fdab 	bl	8003e04 <xTaskRemoveFromEventList>
 80032ae:	4603      	mov	r3, r0
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d013      	beq.n	80032dc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80032b4:	4b3f      	ldr	r3, [pc, #252]	; (80033b4 <xQueueGenericSend+0x1f8>)
 80032b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032ba:	601a      	str	r2, [r3, #0]
 80032bc:	f3bf 8f4f 	dsb	sy
 80032c0:	f3bf 8f6f 	isb	sy
 80032c4:	e00a      	b.n	80032dc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80032c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d007      	beq.n	80032dc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80032cc:	4b39      	ldr	r3, [pc, #228]	; (80033b4 <xQueueGenericSend+0x1f8>)
 80032ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032d2:	601a      	str	r2, [r3, #0]
 80032d4:	f3bf 8f4f 	dsb	sy
 80032d8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80032dc:	f001 f9ba 	bl	8004654 <vPortExitCritical>
				return pdPASS;
 80032e0:	2301      	movs	r3, #1
 80032e2:	e063      	b.n	80033ac <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d103      	bne.n	80032f2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80032ea:	f001 f9b3 	bl	8004654 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80032ee:	2300      	movs	r3, #0
 80032f0:	e05c      	b.n	80033ac <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80032f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d106      	bne.n	8003306 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80032f8:	f107 0314 	add.w	r3, r7, #20
 80032fc:	4618      	mov	r0, r3
 80032fe:	f000 fde3 	bl	8003ec8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003302:	2301      	movs	r3, #1
 8003304:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003306:	f001 f9a5 	bl	8004654 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800330a:	f000 fb71 	bl	80039f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800330e:	f001 f971 	bl	80045f4 <vPortEnterCritical>
 8003312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003314:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003318:	b25b      	sxtb	r3, r3
 800331a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800331e:	d103      	bne.n	8003328 <xQueueGenericSend+0x16c>
 8003320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003322:	2200      	movs	r2, #0
 8003324:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800332a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800332e:	b25b      	sxtb	r3, r3
 8003330:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003334:	d103      	bne.n	800333e <xQueueGenericSend+0x182>
 8003336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003338:	2200      	movs	r2, #0
 800333a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800333e:	f001 f989 	bl	8004654 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003342:	1d3a      	adds	r2, r7, #4
 8003344:	f107 0314 	add.w	r3, r7, #20
 8003348:	4611      	mov	r1, r2
 800334a:	4618      	mov	r0, r3
 800334c:	f000 fdd2 	bl	8003ef4 <xTaskCheckForTimeOut>
 8003350:	4603      	mov	r3, r0
 8003352:	2b00      	cmp	r3, #0
 8003354:	d124      	bne.n	80033a0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003356:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003358:	f000 f8ea 	bl	8003530 <prvIsQueueFull>
 800335c:	4603      	mov	r3, r0
 800335e:	2b00      	cmp	r3, #0
 8003360:	d018      	beq.n	8003394 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003364:	3310      	adds	r3, #16
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	4611      	mov	r1, r2
 800336a:	4618      	mov	r0, r3
 800336c:	f000 fd26 	bl	8003dbc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003370:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003372:	f000 f88b 	bl	800348c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003376:	f000 fb49 	bl	8003a0c <xTaskResumeAll>
 800337a:	4603      	mov	r3, r0
 800337c:	2b00      	cmp	r3, #0
 800337e:	f47f af7c 	bne.w	800327a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003382:	4b0c      	ldr	r3, [pc, #48]	; (80033b4 <xQueueGenericSend+0x1f8>)
 8003384:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003388:	601a      	str	r2, [r3, #0]
 800338a:	f3bf 8f4f 	dsb	sy
 800338e:	f3bf 8f6f 	isb	sy
 8003392:	e772      	b.n	800327a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003394:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003396:	f000 f879 	bl	800348c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800339a:	f000 fb37 	bl	8003a0c <xTaskResumeAll>
 800339e:	e76c      	b.n	800327a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80033a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80033a2:	f000 f873 	bl	800348c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80033a6:	f000 fb31 	bl	8003a0c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80033aa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	3738      	adds	r7, #56	; 0x38
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}
 80033b4:	e000ed04 	.word	0xe000ed04

080033b8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b086      	sub	sp, #24
 80033bc:	af00      	add	r7, sp, #0
 80033be:	60f8      	str	r0, [r7, #12]
 80033c0:	60b9      	str	r1, [r7, #8]
 80033c2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80033c4:	2300      	movs	r3, #0
 80033c6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033cc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d10d      	bne.n	80033f2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d14d      	bne.n	800347a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	4618      	mov	r0, r3
 80033e4:	f000 feec 	bl	80041c0 <xTaskPriorityDisinherit>
 80033e8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2200      	movs	r2, #0
 80033ee:	609a      	str	r2, [r3, #8]
 80033f0:	e043      	b.n	800347a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d119      	bne.n	800342c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	6858      	ldr	r0, [r3, #4]
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003400:	461a      	mov	r2, r3
 8003402:	68b9      	ldr	r1, [r7, #8]
 8003404:	f001 fd25 	bl	8004e52 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	685a      	ldr	r2, [r3, #4]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003410:	441a      	add	r2, r3
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	685a      	ldr	r2, [r3, #4]
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	429a      	cmp	r2, r3
 8003420:	d32b      	bcc.n	800347a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	605a      	str	r2, [r3, #4]
 800342a:	e026      	b.n	800347a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	68d8      	ldr	r0, [r3, #12]
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003434:	461a      	mov	r2, r3
 8003436:	68b9      	ldr	r1, [r7, #8]
 8003438:	f001 fd0b 	bl	8004e52 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	68da      	ldr	r2, [r3, #12]
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003444:	425b      	negs	r3, r3
 8003446:	441a      	add	r2, r3
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	68da      	ldr	r2, [r3, #12]
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	429a      	cmp	r2, r3
 8003456:	d207      	bcs.n	8003468 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	689a      	ldr	r2, [r3, #8]
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003460:	425b      	negs	r3, r3
 8003462:	441a      	add	r2, r3
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2b02      	cmp	r3, #2
 800346c:	d105      	bne.n	800347a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d002      	beq.n	800347a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	3b01      	subs	r3, #1
 8003478:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	1c5a      	adds	r2, r3, #1
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003482:	697b      	ldr	r3, [r7, #20]
}
 8003484:	4618      	mov	r0, r3
 8003486:	3718      	adds	r7, #24
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}

0800348c <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b084      	sub	sp, #16
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003494:	f001 f8ae 	bl	80045f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800349e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80034a0:	e011      	b.n	80034c6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d012      	beq.n	80034d0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	3324      	adds	r3, #36	; 0x24
 80034ae:	4618      	mov	r0, r3
 80034b0:	f000 fca8 	bl	8003e04 <xTaskRemoveFromEventList>
 80034b4:	4603      	mov	r3, r0
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d001      	beq.n	80034be <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80034ba:	f000 fd7d 	bl	8003fb8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80034be:	7bfb      	ldrb	r3, [r7, #15]
 80034c0:	3b01      	subs	r3, #1
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80034c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	dce9      	bgt.n	80034a2 <prvUnlockQueue+0x16>
 80034ce:	e000      	b.n	80034d2 <prvUnlockQueue+0x46>
					break;
 80034d0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	22ff      	movs	r2, #255	; 0xff
 80034d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80034da:	f001 f8bb 	bl	8004654 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80034de:	f001 f889 	bl	80045f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80034e8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80034ea:	e011      	b.n	8003510 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	691b      	ldr	r3, [r3, #16]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d012      	beq.n	800351a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	3310      	adds	r3, #16
 80034f8:	4618      	mov	r0, r3
 80034fa:	f000 fc83 	bl	8003e04 <xTaskRemoveFromEventList>
 80034fe:	4603      	mov	r3, r0
 8003500:	2b00      	cmp	r3, #0
 8003502:	d001      	beq.n	8003508 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003504:	f000 fd58 	bl	8003fb8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003508:	7bbb      	ldrb	r3, [r7, #14]
 800350a:	3b01      	subs	r3, #1
 800350c:	b2db      	uxtb	r3, r3
 800350e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003510:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003514:	2b00      	cmp	r3, #0
 8003516:	dce9      	bgt.n	80034ec <prvUnlockQueue+0x60>
 8003518:	e000      	b.n	800351c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800351a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	22ff      	movs	r2, #255	; 0xff
 8003520:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003524:	f001 f896 	bl	8004654 <vPortExitCritical>
}
 8003528:	bf00      	nop
 800352a:	3710      	adds	r7, #16
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}

08003530 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b084      	sub	sp, #16
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003538:	f001 f85c 	bl	80045f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003544:	429a      	cmp	r2, r3
 8003546:	d102      	bne.n	800354e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003548:	2301      	movs	r3, #1
 800354a:	60fb      	str	r3, [r7, #12]
 800354c:	e001      	b.n	8003552 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800354e:	2300      	movs	r3, #0
 8003550:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003552:	f001 f87f 	bl	8004654 <vPortExitCritical>

	return xReturn;
 8003556:	68fb      	ldr	r3, [r7, #12]
}
 8003558:	4618      	mov	r0, r3
 800355a:	3710      	adds	r7, #16
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}

08003560 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003560:	b580      	push	{r7, lr}
 8003562:	b08e      	sub	sp, #56	; 0x38
 8003564:	af04      	add	r7, sp, #16
 8003566:	60f8      	str	r0, [r7, #12]
 8003568:	60b9      	str	r1, [r7, #8]
 800356a:	607a      	str	r2, [r7, #4]
 800356c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800356e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003570:	2b00      	cmp	r3, #0
 8003572:	d10a      	bne.n	800358a <xTaskCreateStatic+0x2a>
	__asm volatile
 8003574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003578:	f383 8811 	msr	BASEPRI, r3
 800357c:	f3bf 8f6f 	isb	sy
 8003580:	f3bf 8f4f 	dsb	sy
 8003584:	623b      	str	r3, [r7, #32]
}
 8003586:	bf00      	nop
 8003588:	e7fe      	b.n	8003588 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800358a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800358c:	2b00      	cmp	r3, #0
 800358e:	d10a      	bne.n	80035a6 <xTaskCreateStatic+0x46>
	__asm volatile
 8003590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003594:	f383 8811 	msr	BASEPRI, r3
 8003598:	f3bf 8f6f 	isb	sy
 800359c:	f3bf 8f4f 	dsb	sy
 80035a0:	61fb      	str	r3, [r7, #28]
}
 80035a2:	bf00      	nop
 80035a4:	e7fe      	b.n	80035a4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80035a6:	23b4      	movs	r3, #180	; 0xb4
 80035a8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	2bb4      	cmp	r3, #180	; 0xb4
 80035ae:	d00a      	beq.n	80035c6 <xTaskCreateStatic+0x66>
	__asm volatile
 80035b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035b4:	f383 8811 	msr	BASEPRI, r3
 80035b8:	f3bf 8f6f 	isb	sy
 80035bc:	f3bf 8f4f 	dsb	sy
 80035c0:	61bb      	str	r3, [r7, #24]
}
 80035c2:	bf00      	nop
 80035c4:	e7fe      	b.n	80035c4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80035c6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80035c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d01e      	beq.n	800360c <xTaskCreateStatic+0xac>
 80035ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d01b      	beq.n	800360c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80035d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035d6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80035d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80035dc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80035de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e0:	2202      	movs	r2, #2
 80035e2:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80035e6:	2300      	movs	r3, #0
 80035e8:	9303      	str	r3, [sp, #12]
 80035ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ec:	9302      	str	r3, [sp, #8]
 80035ee:	f107 0314 	add.w	r3, r7, #20
 80035f2:	9301      	str	r3, [sp, #4]
 80035f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035f6:	9300      	str	r3, [sp, #0]
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	687a      	ldr	r2, [r7, #4]
 80035fc:	68b9      	ldr	r1, [r7, #8]
 80035fe:	68f8      	ldr	r0, [r7, #12]
 8003600:	f000 f850 	bl	80036a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003604:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003606:	f000 f8eb 	bl	80037e0 <prvAddNewTaskToReadyList>
 800360a:	e001      	b.n	8003610 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800360c:	2300      	movs	r3, #0
 800360e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003610:	697b      	ldr	r3, [r7, #20]
	}
 8003612:	4618      	mov	r0, r3
 8003614:	3728      	adds	r7, #40	; 0x28
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}

0800361a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800361a:	b580      	push	{r7, lr}
 800361c:	b08c      	sub	sp, #48	; 0x30
 800361e:	af04      	add	r7, sp, #16
 8003620:	60f8      	str	r0, [r7, #12]
 8003622:	60b9      	str	r1, [r7, #8]
 8003624:	603b      	str	r3, [r7, #0]
 8003626:	4613      	mov	r3, r2
 8003628:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800362a:	88fb      	ldrh	r3, [r7, #6]
 800362c:	009b      	lsls	r3, r3, #2
 800362e:	4618      	mov	r0, r3
 8003630:	f001 f902 	bl	8004838 <pvPortMalloc>
 8003634:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d00e      	beq.n	800365a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800363c:	20b4      	movs	r0, #180	; 0xb4
 800363e:	f001 f8fb 	bl	8004838 <pvPortMalloc>
 8003642:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003644:	69fb      	ldr	r3, [r7, #28]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d003      	beq.n	8003652 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800364a:	69fb      	ldr	r3, [r7, #28]
 800364c:	697a      	ldr	r2, [r7, #20]
 800364e:	631a      	str	r2, [r3, #48]	; 0x30
 8003650:	e005      	b.n	800365e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003652:	6978      	ldr	r0, [r7, #20]
 8003654:	f001 f9bc 	bl	80049d0 <vPortFree>
 8003658:	e001      	b.n	800365e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800365a:	2300      	movs	r3, #0
 800365c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800365e:	69fb      	ldr	r3, [r7, #28]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d017      	beq.n	8003694 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003664:	69fb      	ldr	r3, [r7, #28]
 8003666:	2200      	movs	r2, #0
 8003668:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800366c:	88fa      	ldrh	r2, [r7, #6]
 800366e:	2300      	movs	r3, #0
 8003670:	9303      	str	r3, [sp, #12]
 8003672:	69fb      	ldr	r3, [r7, #28]
 8003674:	9302      	str	r3, [sp, #8]
 8003676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003678:	9301      	str	r3, [sp, #4]
 800367a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800367c:	9300      	str	r3, [sp, #0]
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	68b9      	ldr	r1, [r7, #8]
 8003682:	68f8      	ldr	r0, [r7, #12]
 8003684:	f000 f80e 	bl	80036a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003688:	69f8      	ldr	r0, [r7, #28]
 800368a:	f000 f8a9 	bl	80037e0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800368e:	2301      	movs	r3, #1
 8003690:	61bb      	str	r3, [r7, #24]
 8003692:	e002      	b.n	800369a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003694:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003698:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800369a:	69bb      	ldr	r3, [r7, #24]
	}
 800369c:	4618      	mov	r0, r3
 800369e:	3720      	adds	r7, #32
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}

080036a4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b088      	sub	sp, #32
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	60f8      	str	r0, [r7, #12]
 80036ac:	60b9      	str	r1, [r7, #8]
 80036ae:	607a      	str	r2, [r7, #4]
 80036b0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80036b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80036bc:	3b01      	subs	r3, #1
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	4413      	add	r3, r2
 80036c2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80036c4:	69bb      	ldr	r3, [r7, #24]
 80036c6:	f023 0307 	bic.w	r3, r3, #7
 80036ca:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80036cc:	69bb      	ldr	r3, [r7, #24]
 80036ce:	f003 0307 	and.w	r3, r3, #7
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d00a      	beq.n	80036ec <prvInitialiseNewTask+0x48>
	__asm volatile
 80036d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036da:	f383 8811 	msr	BASEPRI, r3
 80036de:	f3bf 8f6f 	isb	sy
 80036e2:	f3bf 8f4f 	dsb	sy
 80036e6:	617b      	str	r3, [r7, #20]
}
 80036e8:	bf00      	nop
 80036ea:	e7fe      	b.n	80036ea <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d01f      	beq.n	8003732 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80036f2:	2300      	movs	r3, #0
 80036f4:	61fb      	str	r3, [r7, #28]
 80036f6:	e012      	b.n	800371e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80036f8:	68ba      	ldr	r2, [r7, #8]
 80036fa:	69fb      	ldr	r3, [r7, #28]
 80036fc:	4413      	add	r3, r2
 80036fe:	7819      	ldrb	r1, [r3, #0]
 8003700:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	4413      	add	r3, r2
 8003706:	3334      	adds	r3, #52	; 0x34
 8003708:	460a      	mov	r2, r1
 800370a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800370c:	68ba      	ldr	r2, [r7, #8]
 800370e:	69fb      	ldr	r3, [r7, #28]
 8003710:	4413      	add	r3, r2
 8003712:	781b      	ldrb	r3, [r3, #0]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d006      	beq.n	8003726 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003718:	69fb      	ldr	r3, [r7, #28]
 800371a:	3301      	adds	r3, #1
 800371c:	61fb      	str	r3, [r7, #28]
 800371e:	69fb      	ldr	r3, [r7, #28]
 8003720:	2b0f      	cmp	r3, #15
 8003722:	d9e9      	bls.n	80036f8 <prvInitialiseNewTask+0x54>
 8003724:	e000      	b.n	8003728 <prvInitialiseNewTask+0x84>
			{
				break;
 8003726:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800372a:	2200      	movs	r2, #0
 800372c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003730:	e003      	b.n	800373a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003734:	2200      	movs	r2, #0
 8003736:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800373a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800373c:	2b06      	cmp	r3, #6
 800373e:	d901      	bls.n	8003744 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003740:	2306      	movs	r3, #6
 8003742:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003746:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003748:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800374a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800374c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800374e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003752:	2200      	movs	r2, #0
 8003754:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003758:	3304      	adds	r3, #4
 800375a:	4618      	mov	r0, r3
 800375c:	f7ff fb13 	bl	8002d86 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003762:	3318      	adds	r3, #24
 8003764:	4618      	mov	r0, r3
 8003766:	f7ff fb0e 	bl	8002d86 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800376a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800376c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800376e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003772:	f1c3 0207 	rsb	r2, r3, #7
 8003776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003778:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800377a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800377c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800377e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003782:	2200      	movs	r2, #0
 8003784:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800378a:	2200      	movs	r2, #0
 800378c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003792:	334c      	adds	r3, #76	; 0x4c
 8003794:	2260      	movs	r2, #96	; 0x60
 8003796:	2100      	movs	r1, #0
 8003798:	4618      	mov	r0, r3
 800379a:	f001 fb68 	bl	8004e6e <memset>
 800379e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037a0:	4a0c      	ldr	r2, [pc, #48]	; (80037d4 <prvInitialiseNewTask+0x130>)
 80037a2:	651a      	str	r2, [r3, #80]	; 0x50
 80037a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037a6:	4a0c      	ldr	r2, [pc, #48]	; (80037d8 <prvInitialiseNewTask+0x134>)
 80037a8:	655a      	str	r2, [r3, #84]	; 0x54
 80037aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ac:	4a0b      	ldr	r2, [pc, #44]	; (80037dc <prvInitialiseNewTask+0x138>)
 80037ae:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80037b0:	683a      	ldr	r2, [r7, #0]
 80037b2:	68f9      	ldr	r1, [r7, #12]
 80037b4:	69b8      	ldr	r0, [r7, #24]
 80037b6:	f000 fdef 	bl	8004398 <pxPortInitialiseStack>
 80037ba:	4602      	mov	r2, r0
 80037bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037be:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80037c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d002      	beq.n	80037cc <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80037c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037ca:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80037cc:	bf00      	nop
 80037ce:	3720      	adds	r7, #32
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}
 80037d4:	08005ed0 	.word	0x08005ed0
 80037d8:	08005ef0 	.word	0x08005ef0
 80037dc:	08005eb0 	.word	0x08005eb0

080037e0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b082      	sub	sp, #8
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80037e8:	f000 ff04 	bl	80045f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80037ec:	4b2a      	ldr	r3, [pc, #168]	; (8003898 <prvAddNewTaskToReadyList+0xb8>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	3301      	adds	r3, #1
 80037f2:	4a29      	ldr	r2, [pc, #164]	; (8003898 <prvAddNewTaskToReadyList+0xb8>)
 80037f4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80037f6:	4b29      	ldr	r3, [pc, #164]	; (800389c <prvAddNewTaskToReadyList+0xbc>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d109      	bne.n	8003812 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80037fe:	4a27      	ldr	r2, [pc, #156]	; (800389c <prvAddNewTaskToReadyList+0xbc>)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003804:	4b24      	ldr	r3, [pc, #144]	; (8003898 <prvAddNewTaskToReadyList+0xb8>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	2b01      	cmp	r3, #1
 800380a:	d110      	bne.n	800382e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800380c:	f000 fbf8 	bl	8004000 <prvInitialiseTaskLists>
 8003810:	e00d      	b.n	800382e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003812:	4b23      	ldr	r3, [pc, #140]	; (80038a0 <prvAddNewTaskToReadyList+0xc0>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d109      	bne.n	800382e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800381a:	4b20      	ldr	r3, [pc, #128]	; (800389c <prvAddNewTaskToReadyList+0xbc>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003824:	429a      	cmp	r2, r3
 8003826:	d802      	bhi.n	800382e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003828:	4a1c      	ldr	r2, [pc, #112]	; (800389c <prvAddNewTaskToReadyList+0xbc>)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800382e:	4b1d      	ldr	r3, [pc, #116]	; (80038a4 <prvAddNewTaskToReadyList+0xc4>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	3301      	adds	r3, #1
 8003834:	4a1b      	ldr	r2, [pc, #108]	; (80038a4 <prvAddNewTaskToReadyList+0xc4>)
 8003836:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800383c:	2201      	movs	r2, #1
 800383e:	409a      	lsls	r2, r3
 8003840:	4b19      	ldr	r3, [pc, #100]	; (80038a8 <prvAddNewTaskToReadyList+0xc8>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4313      	orrs	r3, r2
 8003846:	4a18      	ldr	r2, [pc, #96]	; (80038a8 <prvAddNewTaskToReadyList+0xc8>)
 8003848:	6013      	str	r3, [r2, #0]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800384e:	4613      	mov	r3, r2
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	4413      	add	r3, r2
 8003854:	009b      	lsls	r3, r3, #2
 8003856:	4a15      	ldr	r2, [pc, #84]	; (80038ac <prvAddNewTaskToReadyList+0xcc>)
 8003858:	441a      	add	r2, r3
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	3304      	adds	r3, #4
 800385e:	4619      	mov	r1, r3
 8003860:	4610      	mov	r0, r2
 8003862:	f7ff fa9d 	bl	8002da0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003866:	f000 fef5 	bl	8004654 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800386a:	4b0d      	ldr	r3, [pc, #52]	; (80038a0 <prvAddNewTaskToReadyList+0xc0>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d00e      	beq.n	8003890 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003872:	4b0a      	ldr	r3, [pc, #40]	; (800389c <prvAddNewTaskToReadyList+0xbc>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800387c:	429a      	cmp	r2, r3
 800387e:	d207      	bcs.n	8003890 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003880:	4b0b      	ldr	r3, [pc, #44]	; (80038b0 <prvAddNewTaskToReadyList+0xd0>)
 8003882:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003886:	601a      	str	r2, [r3, #0]
 8003888:	f3bf 8f4f 	dsb	sy
 800388c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003890:	bf00      	nop
 8003892:	3708      	adds	r7, #8
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}
 8003898:	200004f4 	.word	0x200004f4
 800389c:	200003f4 	.word	0x200003f4
 80038a0:	20000500 	.word	0x20000500
 80038a4:	20000510 	.word	0x20000510
 80038a8:	200004fc 	.word	0x200004fc
 80038ac:	200003f8 	.word	0x200003f8
 80038b0:	e000ed04 	.word	0xe000ed04

080038b4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b084      	sub	sp, #16
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80038bc:	2300      	movs	r3, #0
 80038be:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d017      	beq.n	80038f6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80038c6:	4b13      	ldr	r3, [pc, #76]	; (8003914 <vTaskDelay+0x60>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d00a      	beq.n	80038e4 <vTaskDelay+0x30>
	__asm volatile
 80038ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038d2:	f383 8811 	msr	BASEPRI, r3
 80038d6:	f3bf 8f6f 	isb	sy
 80038da:	f3bf 8f4f 	dsb	sy
 80038de:	60bb      	str	r3, [r7, #8]
}
 80038e0:	bf00      	nop
 80038e2:	e7fe      	b.n	80038e2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80038e4:	f000 f884 	bl	80039f0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80038e8:	2100      	movs	r1, #0
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f000 fcee 	bl	80042cc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80038f0:	f000 f88c 	bl	8003a0c <xTaskResumeAll>
 80038f4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d107      	bne.n	800390c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80038fc:	4b06      	ldr	r3, [pc, #24]	; (8003918 <vTaskDelay+0x64>)
 80038fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003902:	601a      	str	r2, [r3, #0]
 8003904:	f3bf 8f4f 	dsb	sy
 8003908:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800390c:	bf00      	nop
 800390e:	3710      	adds	r7, #16
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}
 8003914:	2000051c 	.word	0x2000051c
 8003918:	e000ed04 	.word	0xe000ed04

0800391c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b08a      	sub	sp, #40	; 0x28
 8003920:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003922:	2300      	movs	r3, #0
 8003924:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003926:	2300      	movs	r3, #0
 8003928:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800392a:	463a      	mov	r2, r7
 800392c:	1d39      	adds	r1, r7, #4
 800392e:	f107 0308 	add.w	r3, r7, #8
 8003932:	4618      	mov	r0, r3
 8003934:	f7fc fe3e 	bl	80005b4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003938:	6839      	ldr	r1, [r7, #0]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	68ba      	ldr	r2, [r7, #8]
 800393e:	9202      	str	r2, [sp, #8]
 8003940:	9301      	str	r3, [sp, #4]
 8003942:	2300      	movs	r3, #0
 8003944:	9300      	str	r3, [sp, #0]
 8003946:	2300      	movs	r3, #0
 8003948:	460a      	mov	r2, r1
 800394a:	4921      	ldr	r1, [pc, #132]	; (80039d0 <vTaskStartScheduler+0xb4>)
 800394c:	4821      	ldr	r0, [pc, #132]	; (80039d4 <vTaskStartScheduler+0xb8>)
 800394e:	f7ff fe07 	bl	8003560 <xTaskCreateStatic>
 8003952:	4603      	mov	r3, r0
 8003954:	4a20      	ldr	r2, [pc, #128]	; (80039d8 <vTaskStartScheduler+0xbc>)
 8003956:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003958:	4b1f      	ldr	r3, [pc, #124]	; (80039d8 <vTaskStartScheduler+0xbc>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d002      	beq.n	8003966 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003960:	2301      	movs	r3, #1
 8003962:	617b      	str	r3, [r7, #20]
 8003964:	e001      	b.n	800396a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003966:	2300      	movs	r3, #0
 8003968:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	2b01      	cmp	r3, #1
 800396e:	d11b      	bne.n	80039a8 <vTaskStartScheduler+0x8c>
	__asm volatile
 8003970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003974:	f383 8811 	msr	BASEPRI, r3
 8003978:	f3bf 8f6f 	isb	sy
 800397c:	f3bf 8f4f 	dsb	sy
 8003980:	613b      	str	r3, [r7, #16]
}
 8003982:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003984:	4b15      	ldr	r3, [pc, #84]	; (80039dc <vTaskStartScheduler+0xc0>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	334c      	adds	r3, #76	; 0x4c
 800398a:	4a15      	ldr	r2, [pc, #84]	; (80039e0 <vTaskStartScheduler+0xc4>)
 800398c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800398e:	4b15      	ldr	r3, [pc, #84]	; (80039e4 <vTaskStartScheduler+0xc8>)
 8003990:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003994:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003996:	4b14      	ldr	r3, [pc, #80]	; (80039e8 <vTaskStartScheduler+0xcc>)
 8003998:	2201      	movs	r2, #1
 800399a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800399c:	4b13      	ldr	r3, [pc, #76]	; (80039ec <vTaskStartScheduler+0xd0>)
 800399e:	2200      	movs	r2, #0
 80039a0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80039a2:	f000 fd85 	bl	80044b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80039a6:	e00e      	b.n	80039c6 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80039ae:	d10a      	bne.n	80039c6 <vTaskStartScheduler+0xaa>
	__asm volatile
 80039b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039b4:	f383 8811 	msr	BASEPRI, r3
 80039b8:	f3bf 8f6f 	isb	sy
 80039bc:	f3bf 8f4f 	dsb	sy
 80039c0:	60fb      	str	r3, [r7, #12]
}
 80039c2:	bf00      	nop
 80039c4:	e7fe      	b.n	80039c4 <vTaskStartScheduler+0xa8>
}
 80039c6:	bf00      	nop
 80039c8:	3718      	adds	r7, #24
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	08005e90 	.word	0x08005e90
 80039d4:	08003fd1 	.word	0x08003fd1
 80039d8:	20000518 	.word	0x20000518
 80039dc:	200003f4 	.word	0x200003f4
 80039e0:	20000010 	.word	0x20000010
 80039e4:	20000514 	.word	0x20000514
 80039e8:	20000500 	.word	0x20000500
 80039ec:	200004f8 	.word	0x200004f8

080039f0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80039f0:	b480      	push	{r7}
 80039f2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80039f4:	4b04      	ldr	r3, [pc, #16]	; (8003a08 <vTaskSuspendAll+0x18>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	3301      	adds	r3, #1
 80039fa:	4a03      	ldr	r2, [pc, #12]	; (8003a08 <vTaskSuspendAll+0x18>)
 80039fc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80039fe:	bf00      	nop
 8003a00:	46bd      	mov	sp, r7
 8003a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a06:	4770      	bx	lr
 8003a08:	2000051c 	.word	0x2000051c

08003a0c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b084      	sub	sp, #16
 8003a10:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003a12:	2300      	movs	r3, #0
 8003a14:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003a16:	2300      	movs	r3, #0
 8003a18:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003a1a:	4b41      	ldr	r3, [pc, #260]	; (8003b20 <xTaskResumeAll+0x114>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d10a      	bne.n	8003a38 <xTaskResumeAll+0x2c>
	__asm volatile
 8003a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a26:	f383 8811 	msr	BASEPRI, r3
 8003a2a:	f3bf 8f6f 	isb	sy
 8003a2e:	f3bf 8f4f 	dsb	sy
 8003a32:	603b      	str	r3, [r7, #0]
}
 8003a34:	bf00      	nop
 8003a36:	e7fe      	b.n	8003a36 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003a38:	f000 fddc 	bl	80045f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003a3c:	4b38      	ldr	r3, [pc, #224]	; (8003b20 <xTaskResumeAll+0x114>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	3b01      	subs	r3, #1
 8003a42:	4a37      	ldr	r2, [pc, #220]	; (8003b20 <xTaskResumeAll+0x114>)
 8003a44:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a46:	4b36      	ldr	r3, [pc, #216]	; (8003b20 <xTaskResumeAll+0x114>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d161      	bne.n	8003b12 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003a4e:	4b35      	ldr	r3, [pc, #212]	; (8003b24 <xTaskResumeAll+0x118>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d05d      	beq.n	8003b12 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003a56:	e02e      	b.n	8003ab6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a58:	4b33      	ldr	r3, [pc, #204]	; (8003b28 <xTaskResumeAll+0x11c>)
 8003a5a:	68db      	ldr	r3, [r3, #12]
 8003a5c:	68db      	ldr	r3, [r3, #12]
 8003a5e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	3318      	adds	r3, #24
 8003a64:	4618      	mov	r0, r3
 8003a66:	f7ff f9f8 	bl	8002e5a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	3304      	adds	r3, #4
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f7ff f9f3 	bl	8002e5a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a78:	2201      	movs	r2, #1
 8003a7a:	409a      	lsls	r2, r3
 8003a7c:	4b2b      	ldr	r3, [pc, #172]	; (8003b2c <xTaskResumeAll+0x120>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4313      	orrs	r3, r2
 8003a82:	4a2a      	ldr	r2, [pc, #168]	; (8003b2c <xTaskResumeAll+0x120>)
 8003a84:	6013      	str	r3, [r2, #0]
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a8a:	4613      	mov	r3, r2
 8003a8c:	009b      	lsls	r3, r3, #2
 8003a8e:	4413      	add	r3, r2
 8003a90:	009b      	lsls	r3, r3, #2
 8003a92:	4a27      	ldr	r2, [pc, #156]	; (8003b30 <xTaskResumeAll+0x124>)
 8003a94:	441a      	add	r2, r3
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	3304      	adds	r3, #4
 8003a9a:	4619      	mov	r1, r3
 8003a9c:	4610      	mov	r0, r2
 8003a9e:	f7ff f97f 	bl	8002da0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003aa6:	4b23      	ldr	r3, [pc, #140]	; (8003b34 <xTaskResumeAll+0x128>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d302      	bcc.n	8003ab6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003ab0:	4b21      	ldr	r3, [pc, #132]	; (8003b38 <xTaskResumeAll+0x12c>)
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003ab6:	4b1c      	ldr	r3, [pc, #112]	; (8003b28 <xTaskResumeAll+0x11c>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d1cc      	bne.n	8003a58 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d001      	beq.n	8003ac8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003ac4:	f000 fb3e 	bl	8004144 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003ac8:	4b1c      	ldr	r3, [pc, #112]	; (8003b3c <xTaskResumeAll+0x130>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d010      	beq.n	8003af6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003ad4:	f000 f858 	bl	8003b88 <xTaskIncrementTick>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d002      	beq.n	8003ae4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003ade:	4b16      	ldr	r3, [pc, #88]	; (8003b38 <xTaskResumeAll+0x12c>)
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	3b01      	subs	r3, #1
 8003ae8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d1f1      	bne.n	8003ad4 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8003af0:	4b12      	ldr	r3, [pc, #72]	; (8003b3c <xTaskResumeAll+0x130>)
 8003af2:	2200      	movs	r2, #0
 8003af4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003af6:	4b10      	ldr	r3, [pc, #64]	; (8003b38 <xTaskResumeAll+0x12c>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d009      	beq.n	8003b12 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003afe:	2301      	movs	r3, #1
 8003b00:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003b02:	4b0f      	ldr	r3, [pc, #60]	; (8003b40 <xTaskResumeAll+0x134>)
 8003b04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b08:	601a      	str	r2, [r3, #0]
 8003b0a:	f3bf 8f4f 	dsb	sy
 8003b0e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003b12:	f000 fd9f 	bl	8004654 <vPortExitCritical>

	return xAlreadyYielded;
 8003b16:	68bb      	ldr	r3, [r7, #8]
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	3710      	adds	r7, #16
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}
 8003b20:	2000051c 	.word	0x2000051c
 8003b24:	200004f4 	.word	0x200004f4
 8003b28:	200004b4 	.word	0x200004b4
 8003b2c:	200004fc 	.word	0x200004fc
 8003b30:	200003f8 	.word	0x200003f8
 8003b34:	200003f4 	.word	0x200003f4
 8003b38:	20000508 	.word	0x20000508
 8003b3c:	20000504 	.word	0x20000504
 8003b40:	e000ed04 	.word	0xe000ed04

08003b44 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003b44:	b480      	push	{r7}
 8003b46:	b083      	sub	sp, #12
 8003b48:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003b4a:	4b05      	ldr	r3, [pc, #20]	; (8003b60 <xTaskGetTickCount+0x1c>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003b50:	687b      	ldr	r3, [r7, #4]
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	370c      	adds	r7, #12
 8003b56:	46bd      	mov	sp, r7
 8003b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5c:	4770      	bx	lr
 8003b5e:	bf00      	nop
 8003b60:	200004f8 	.word	0x200004f8

08003b64 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b082      	sub	sp, #8
 8003b68:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003b6a:	f000 fe25 	bl	80047b8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8003b6e:	2300      	movs	r3, #0
 8003b70:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8003b72:	4b04      	ldr	r3, [pc, #16]	; (8003b84 <xTaskGetTickCountFromISR+0x20>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003b78:	683b      	ldr	r3, [r7, #0]
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3708      	adds	r7, #8
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	200004f8 	.word	0x200004f8

08003b88 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b086      	sub	sp, #24
 8003b8c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b92:	4b4e      	ldr	r3, [pc, #312]	; (8003ccc <xTaskIncrementTick+0x144>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	f040 808e 	bne.w	8003cb8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003b9c:	4b4c      	ldr	r3, [pc, #304]	; (8003cd0 <xTaskIncrementTick+0x148>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	3301      	adds	r3, #1
 8003ba2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003ba4:	4a4a      	ldr	r2, [pc, #296]	; (8003cd0 <xTaskIncrementTick+0x148>)
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d120      	bne.n	8003bf2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003bb0:	4b48      	ldr	r3, [pc, #288]	; (8003cd4 <xTaskIncrementTick+0x14c>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d00a      	beq.n	8003bd0 <xTaskIncrementTick+0x48>
	__asm volatile
 8003bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bbe:	f383 8811 	msr	BASEPRI, r3
 8003bc2:	f3bf 8f6f 	isb	sy
 8003bc6:	f3bf 8f4f 	dsb	sy
 8003bca:	603b      	str	r3, [r7, #0]
}
 8003bcc:	bf00      	nop
 8003bce:	e7fe      	b.n	8003bce <xTaskIncrementTick+0x46>
 8003bd0:	4b40      	ldr	r3, [pc, #256]	; (8003cd4 <xTaskIncrementTick+0x14c>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	60fb      	str	r3, [r7, #12]
 8003bd6:	4b40      	ldr	r3, [pc, #256]	; (8003cd8 <xTaskIncrementTick+0x150>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a3e      	ldr	r2, [pc, #248]	; (8003cd4 <xTaskIncrementTick+0x14c>)
 8003bdc:	6013      	str	r3, [r2, #0]
 8003bde:	4a3e      	ldr	r2, [pc, #248]	; (8003cd8 <xTaskIncrementTick+0x150>)
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	6013      	str	r3, [r2, #0]
 8003be4:	4b3d      	ldr	r3, [pc, #244]	; (8003cdc <xTaskIncrementTick+0x154>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	3301      	adds	r3, #1
 8003bea:	4a3c      	ldr	r2, [pc, #240]	; (8003cdc <xTaskIncrementTick+0x154>)
 8003bec:	6013      	str	r3, [r2, #0]
 8003bee:	f000 faa9 	bl	8004144 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003bf2:	4b3b      	ldr	r3, [pc, #236]	; (8003ce0 <xTaskIncrementTick+0x158>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	693a      	ldr	r2, [r7, #16]
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d348      	bcc.n	8003c8e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003bfc:	4b35      	ldr	r3, [pc, #212]	; (8003cd4 <xTaskIncrementTick+0x14c>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d104      	bne.n	8003c10 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c06:	4b36      	ldr	r3, [pc, #216]	; (8003ce0 <xTaskIncrementTick+0x158>)
 8003c08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003c0c:	601a      	str	r2, [r3, #0]
					break;
 8003c0e:	e03e      	b.n	8003c8e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c10:	4b30      	ldr	r3, [pc, #192]	; (8003cd4 <xTaskIncrementTick+0x14c>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	68db      	ldr	r3, [r3, #12]
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003c20:	693a      	ldr	r2, [r7, #16]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	429a      	cmp	r2, r3
 8003c26:	d203      	bcs.n	8003c30 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003c28:	4a2d      	ldr	r2, [pc, #180]	; (8003ce0 <xTaskIncrementTick+0x158>)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003c2e:	e02e      	b.n	8003c8e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	3304      	adds	r3, #4
 8003c34:	4618      	mov	r0, r3
 8003c36:	f7ff f910 	bl	8002e5a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d004      	beq.n	8003c4c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	3318      	adds	r3, #24
 8003c46:	4618      	mov	r0, r3
 8003c48:	f7ff f907 	bl	8002e5a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c50:	2201      	movs	r2, #1
 8003c52:	409a      	lsls	r2, r3
 8003c54:	4b23      	ldr	r3, [pc, #140]	; (8003ce4 <xTaskIncrementTick+0x15c>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	4a22      	ldr	r2, [pc, #136]	; (8003ce4 <xTaskIncrementTick+0x15c>)
 8003c5c:	6013      	str	r3, [r2, #0]
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c62:	4613      	mov	r3, r2
 8003c64:	009b      	lsls	r3, r3, #2
 8003c66:	4413      	add	r3, r2
 8003c68:	009b      	lsls	r3, r3, #2
 8003c6a:	4a1f      	ldr	r2, [pc, #124]	; (8003ce8 <xTaskIncrementTick+0x160>)
 8003c6c:	441a      	add	r2, r3
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	3304      	adds	r3, #4
 8003c72:	4619      	mov	r1, r3
 8003c74:	4610      	mov	r0, r2
 8003c76:	f7ff f893 	bl	8002da0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c7e:	4b1b      	ldr	r3, [pc, #108]	; (8003cec <xTaskIncrementTick+0x164>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d3b9      	bcc.n	8003bfc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c8c:	e7b6      	b.n	8003bfc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003c8e:	4b17      	ldr	r3, [pc, #92]	; (8003cec <xTaskIncrementTick+0x164>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c94:	4914      	ldr	r1, [pc, #80]	; (8003ce8 <xTaskIncrementTick+0x160>)
 8003c96:	4613      	mov	r3, r2
 8003c98:	009b      	lsls	r3, r3, #2
 8003c9a:	4413      	add	r3, r2
 8003c9c:	009b      	lsls	r3, r3, #2
 8003c9e:	440b      	add	r3, r1
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d901      	bls.n	8003caa <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003caa:	4b11      	ldr	r3, [pc, #68]	; (8003cf0 <xTaskIncrementTick+0x168>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d007      	beq.n	8003cc2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	617b      	str	r3, [r7, #20]
 8003cb6:	e004      	b.n	8003cc2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003cb8:	4b0e      	ldr	r3, [pc, #56]	; (8003cf4 <xTaskIncrementTick+0x16c>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	3301      	adds	r3, #1
 8003cbe:	4a0d      	ldr	r2, [pc, #52]	; (8003cf4 <xTaskIncrementTick+0x16c>)
 8003cc0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003cc2:	697b      	ldr	r3, [r7, #20]
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3718      	adds	r7, #24
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}
 8003ccc:	2000051c 	.word	0x2000051c
 8003cd0:	200004f8 	.word	0x200004f8
 8003cd4:	200004ac 	.word	0x200004ac
 8003cd8:	200004b0 	.word	0x200004b0
 8003cdc:	2000050c 	.word	0x2000050c
 8003ce0:	20000514 	.word	0x20000514
 8003ce4:	200004fc 	.word	0x200004fc
 8003ce8:	200003f8 	.word	0x200003f8
 8003cec:	200003f4 	.word	0x200003f4
 8003cf0:	20000508 	.word	0x20000508
 8003cf4:	20000504 	.word	0x20000504

08003cf8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b087      	sub	sp, #28
 8003cfc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003cfe:	4b29      	ldr	r3, [pc, #164]	; (8003da4 <vTaskSwitchContext+0xac>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d003      	beq.n	8003d0e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003d06:	4b28      	ldr	r3, [pc, #160]	; (8003da8 <vTaskSwitchContext+0xb0>)
 8003d08:	2201      	movs	r2, #1
 8003d0a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003d0c:	e044      	b.n	8003d98 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8003d0e:	4b26      	ldr	r3, [pc, #152]	; (8003da8 <vTaskSwitchContext+0xb0>)
 8003d10:	2200      	movs	r2, #0
 8003d12:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d14:	4b25      	ldr	r3, [pc, #148]	; (8003dac <vTaskSwitchContext+0xb4>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	fab3 f383 	clz	r3, r3
 8003d20:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003d22:	7afb      	ldrb	r3, [r7, #11]
 8003d24:	f1c3 031f 	rsb	r3, r3, #31
 8003d28:	617b      	str	r3, [r7, #20]
 8003d2a:	4921      	ldr	r1, [pc, #132]	; (8003db0 <vTaskSwitchContext+0xb8>)
 8003d2c:	697a      	ldr	r2, [r7, #20]
 8003d2e:	4613      	mov	r3, r2
 8003d30:	009b      	lsls	r3, r3, #2
 8003d32:	4413      	add	r3, r2
 8003d34:	009b      	lsls	r3, r3, #2
 8003d36:	440b      	add	r3, r1
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d10a      	bne.n	8003d54 <vTaskSwitchContext+0x5c>
	__asm volatile
 8003d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d42:	f383 8811 	msr	BASEPRI, r3
 8003d46:	f3bf 8f6f 	isb	sy
 8003d4a:	f3bf 8f4f 	dsb	sy
 8003d4e:	607b      	str	r3, [r7, #4]
}
 8003d50:	bf00      	nop
 8003d52:	e7fe      	b.n	8003d52 <vTaskSwitchContext+0x5a>
 8003d54:	697a      	ldr	r2, [r7, #20]
 8003d56:	4613      	mov	r3, r2
 8003d58:	009b      	lsls	r3, r3, #2
 8003d5a:	4413      	add	r3, r2
 8003d5c:	009b      	lsls	r3, r3, #2
 8003d5e:	4a14      	ldr	r2, [pc, #80]	; (8003db0 <vTaskSwitchContext+0xb8>)
 8003d60:	4413      	add	r3, r2
 8003d62:	613b      	str	r3, [r7, #16]
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	685a      	ldr	r2, [r3, #4]
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	605a      	str	r2, [r3, #4]
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	685a      	ldr	r2, [r3, #4]
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	3308      	adds	r3, #8
 8003d76:	429a      	cmp	r2, r3
 8003d78:	d104      	bne.n	8003d84 <vTaskSwitchContext+0x8c>
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	685a      	ldr	r2, [r3, #4]
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	605a      	str	r2, [r3, #4]
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	68db      	ldr	r3, [r3, #12]
 8003d8a:	4a0a      	ldr	r2, [pc, #40]	; (8003db4 <vTaskSwitchContext+0xbc>)
 8003d8c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003d8e:	4b09      	ldr	r3, [pc, #36]	; (8003db4 <vTaskSwitchContext+0xbc>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	334c      	adds	r3, #76	; 0x4c
 8003d94:	4a08      	ldr	r2, [pc, #32]	; (8003db8 <vTaskSwitchContext+0xc0>)
 8003d96:	6013      	str	r3, [r2, #0]
}
 8003d98:	bf00      	nop
 8003d9a:	371c      	adds	r7, #28
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da2:	4770      	bx	lr
 8003da4:	2000051c 	.word	0x2000051c
 8003da8:	20000508 	.word	0x20000508
 8003dac:	200004fc 	.word	0x200004fc
 8003db0:	200003f8 	.word	0x200003f8
 8003db4:	200003f4 	.word	0x200003f4
 8003db8:	20000010 	.word	0x20000010

08003dbc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b084      	sub	sp, #16
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
 8003dc4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d10a      	bne.n	8003de2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dd0:	f383 8811 	msr	BASEPRI, r3
 8003dd4:	f3bf 8f6f 	isb	sy
 8003dd8:	f3bf 8f4f 	dsb	sy
 8003ddc:	60fb      	str	r3, [r7, #12]
}
 8003dde:	bf00      	nop
 8003de0:	e7fe      	b.n	8003de0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003de2:	4b07      	ldr	r3, [pc, #28]	; (8003e00 <vTaskPlaceOnEventList+0x44>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	3318      	adds	r3, #24
 8003de8:	4619      	mov	r1, r3
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f7fe fffc 	bl	8002de8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003df0:	2101      	movs	r1, #1
 8003df2:	6838      	ldr	r0, [r7, #0]
 8003df4:	f000 fa6a 	bl	80042cc <prvAddCurrentTaskToDelayedList>
}
 8003df8:	bf00      	nop
 8003dfa:	3710      	adds	r7, #16
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}
 8003e00:	200003f4 	.word	0x200003f4

08003e04 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b086      	sub	sp, #24
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	68db      	ldr	r3, [r3, #12]
 8003e12:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d10a      	bne.n	8003e30 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e1e:	f383 8811 	msr	BASEPRI, r3
 8003e22:	f3bf 8f6f 	isb	sy
 8003e26:	f3bf 8f4f 	dsb	sy
 8003e2a:	60fb      	str	r3, [r7, #12]
}
 8003e2c:	bf00      	nop
 8003e2e:	e7fe      	b.n	8003e2e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	3318      	adds	r3, #24
 8003e34:	4618      	mov	r0, r3
 8003e36:	f7ff f810 	bl	8002e5a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e3a:	4b1d      	ldr	r3, [pc, #116]	; (8003eb0 <xTaskRemoveFromEventList+0xac>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d11c      	bne.n	8003e7c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	3304      	adds	r3, #4
 8003e46:	4618      	mov	r0, r3
 8003e48:	f7ff f807 	bl	8002e5a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e50:	2201      	movs	r2, #1
 8003e52:	409a      	lsls	r2, r3
 8003e54:	4b17      	ldr	r3, [pc, #92]	; (8003eb4 <xTaskRemoveFromEventList+0xb0>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	4a16      	ldr	r2, [pc, #88]	; (8003eb4 <xTaskRemoveFromEventList+0xb0>)
 8003e5c:	6013      	str	r3, [r2, #0]
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e62:	4613      	mov	r3, r2
 8003e64:	009b      	lsls	r3, r3, #2
 8003e66:	4413      	add	r3, r2
 8003e68:	009b      	lsls	r3, r3, #2
 8003e6a:	4a13      	ldr	r2, [pc, #76]	; (8003eb8 <xTaskRemoveFromEventList+0xb4>)
 8003e6c:	441a      	add	r2, r3
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	3304      	adds	r3, #4
 8003e72:	4619      	mov	r1, r3
 8003e74:	4610      	mov	r0, r2
 8003e76:	f7fe ff93 	bl	8002da0 <vListInsertEnd>
 8003e7a:	e005      	b.n	8003e88 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	3318      	adds	r3, #24
 8003e80:	4619      	mov	r1, r3
 8003e82:	480e      	ldr	r0, [pc, #56]	; (8003ebc <xTaskRemoveFromEventList+0xb8>)
 8003e84:	f7fe ff8c 	bl	8002da0 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e8c:	4b0c      	ldr	r3, [pc, #48]	; (8003ec0 <xTaskRemoveFromEventList+0xbc>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e92:	429a      	cmp	r2, r3
 8003e94:	d905      	bls.n	8003ea2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003e96:	2301      	movs	r3, #1
 8003e98:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003e9a:	4b0a      	ldr	r3, [pc, #40]	; (8003ec4 <xTaskRemoveFromEventList+0xc0>)
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	601a      	str	r2, [r3, #0]
 8003ea0:	e001      	b.n	8003ea6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003ea6:	697b      	ldr	r3, [r7, #20]
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	3718      	adds	r7, #24
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}
 8003eb0:	2000051c 	.word	0x2000051c
 8003eb4:	200004fc 	.word	0x200004fc
 8003eb8:	200003f8 	.word	0x200003f8
 8003ebc:	200004b4 	.word	0x200004b4
 8003ec0:	200003f4 	.word	0x200003f4
 8003ec4:	20000508 	.word	0x20000508

08003ec8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b083      	sub	sp, #12
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003ed0:	4b06      	ldr	r3, [pc, #24]	; (8003eec <vTaskInternalSetTimeOutState+0x24>)
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003ed8:	4b05      	ldr	r3, [pc, #20]	; (8003ef0 <vTaskInternalSetTimeOutState+0x28>)
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	605a      	str	r2, [r3, #4]
}
 8003ee0:	bf00      	nop
 8003ee2:	370c      	adds	r7, #12
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eea:	4770      	bx	lr
 8003eec:	2000050c 	.word	0x2000050c
 8003ef0:	200004f8 	.word	0x200004f8

08003ef4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b088      	sub	sp, #32
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d10a      	bne.n	8003f1a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f08:	f383 8811 	msr	BASEPRI, r3
 8003f0c:	f3bf 8f6f 	isb	sy
 8003f10:	f3bf 8f4f 	dsb	sy
 8003f14:	613b      	str	r3, [r7, #16]
}
 8003f16:	bf00      	nop
 8003f18:	e7fe      	b.n	8003f18 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d10a      	bne.n	8003f36 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f24:	f383 8811 	msr	BASEPRI, r3
 8003f28:	f3bf 8f6f 	isb	sy
 8003f2c:	f3bf 8f4f 	dsb	sy
 8003f30:	60fb      	str	r3, [r7, #12]
}
 8003f32:	bf00      	nop
 8003f34:	e7fe      	b.n	8003f34 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003f36:	f000 fb5d 	bl	80045f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003f3a:	4b1d      	ldr	r3, [pc, #116]	; (8003fb0 <xTaskCheckForTimeOut+0xbc>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	69ba      	ldr	r2, [r7, #24]
 8003f46:	1ad3      	subs	r3, r2, r3
 8003f48:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f52:	d102      	bne.n	8003f5a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003f54:	2300      	movs	r3, #0
 8003f56:	61fb      	str	r3, [r7, #28]
 8003f58:	e023      	b.n	8003fa2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	4b15      	ldr	r3, [pc, #84]	; (8003fb4 <xTaskCheckForTimeOut+0xc0>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	429a      	cmp	r2, r3
 8003f64:	d007      	beq.n	8003f76 <xTaskCheckForTimeOut+0x82>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	69ba      	ldr	r2, [r7, #24]
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	d302      	bcc.n	8003f76 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003f70:	2301      	movs	r3, #1
 8003f72:	61fb      	str	r3, [r7, #28]
 8003f74:	e015      	b.n	8003fa2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	697a      	ldr	r2, [r7, #20]
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d20b      	bcs.n	8003f98 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	681a      	ldr	r2, [r3, #0]
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	1ad2      	subs	r2, r2, r3
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003f8c:	6878      	ldr	r0, [r7, #4]
 8003f8e:	f7ff ff9b 	bl	8003ec8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003f92:	2300      	movs	r3, #0
 8003f94:	61fb      	str	r3, [r7, #28]
 8003f96:	e004      	b.n	8003fa2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003fa2:	f000 fb57 	bl	8004654 <vPortExitCritical>

	return xReturn;
 8003fa6:	69fb      	ldr	r3, [r7, #28]
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	3720      	adds	r7, #32
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}
 8003fb0:	200004f8 	.word	0x200004f8
 8003fb4:	2000050c 	.word	0x2000050c

08003fb8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003fb8:	b480      	push	{r7}
 8003fba:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003fbc:	4b03      	ldr	r3, [pc, #12]	; (8003fcc <vTaskMissedYield+0x14>)
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	601a      	str	r2, [r3, #0]
}
 8003fc2:	bf00      	nop
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fca:	4770      	bx	lr
 8003fcc:	20000508 	.word	0x20000508

08003fd0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b082      	sub	sp, #8
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003fd8:	f000 f852 	bl	8004080 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003fdc:	4b06      	ldr	r3, [pc, #24]	; (8003ff8 <prvIdleTask+0x28>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d9f9      	bls.n	8003fd8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003fe4:	4b05      	ldr	r3, [pc, #20]	; (8003ffc <prvIdleTask+0x2c>)
 8003fe6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fea:	601a      	str	r2, [r3, #0]
 8003fec:	f3bf 8f4f 	dsb	sy
 8003ff0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003ff4:	e7f0      	b.n	8003fd8 <prvIdleTask+0x8>
 8003ff6:	bf00      	nop
 8003ff8:	200003f8 	.word	0x200003f8
 8003ffc:	e000ed04 	.word	0xe000ed04

08004000 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b082      	sub	sp, #8
 8004004:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004006:	2300      	movs	r3, #0
 8004008:	607b      	str	r3, [r7, #4]
 800400a:	e00c      	b.n	8004026 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800400c:	687a      	ldr	r2, [r7, #4]
 800400e:	4613      	mov	r3, r2
 8004010:	009b      	lsls	r3, r3, #2
 8004012:	4413      	add	r3, r2
 8004014:	009b      	lsls	r3, r3, #2
 8004016:	4a12      	ldr	r2, [pc, #72]	; (8004060 <prvInitialiseTaskLists+0x60>)
 8004018:	4413      	add	r3, r2
 800401a:	4618      	mov	r0, r3
 800401c:	f7fe fe93 	bl	8002d46 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	3301      	adds	r3, #1
 8004024:	607b      	str	r3, [r7, #4]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2b06      	cmp	r3, #6
 800402a:	d9ef      	bls.n	800400c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800402c:	480d      	ldr	r0, [pc, #52]	; (8004064 <prvInitialiseTaskLists+0x64>)
 800402e:	f7fe fe8a 	bl	8002d46 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004032:	480d      	ldr	r0, [pc, #52]	; (8004068 <prvInitialiseTaskLists+0x68>)
 8004034:	f7fe fe87 	bl	8002d46 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004038:	480c      	ldr	r0, [pc, #48]	; (800406c <prvInitialiseTaskLists+0x6c>)
 800403a:	f7fe fe84 	bl	8002d46 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800403e:	480c      	ldr	r0, [pc, #48]	; (8004070 <prvInitialiseTaskLists+0x70>)
 8004040:	f7fe fe81 	bl	8002d46 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004044:	480b      	ldr	r0, [pc, #44]	; (8004074 <prvInitialiseTaskLists+0x74>)
 8004046:	f7fe fe7e 	bl	8002d46 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800404a:	4b0b      	ldr	r3, [pc, #44]	; (8004078 <prvInitialiseTaskLists+0x78>)
 800404c:	4a05      	ldr	r2, [pc, #20]	; (8004064 <prvInitialiseTaskLists+0x64>)
 800404e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004050:	4b0a      	ldr	r3, [pc, #40]	; (800407c <prvInitialiseTaskLists+0x7c>)
 8004052:	4a05      	ldr	r2, [pc, #20]	; (8004068 <prvInitialiseTaskLists+0x68>)
 8004054:	601a      	str	r2, [r3, #0]
}
 8004056:	bf00      	nop
 8004058:	3708      	adds	r7, #8
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}
 800405e:	bf00      	nop
 8004060:	200003f8 	.word	0x200003f8
 8004064:	20000484 	.word	0x20000484
 8004068:	20000498 	.word	0x20000498
 800406c:	200004b4 	.word	0x200004b4
 8004070:	200004c8 	.word	0x200004c8
 8004074:	200004e0 	.word	0x200004e0
 8004078:	200004ac 	.word	0x200004ac
 800407c:	200004b0 	.word	0x200004b0

08004080 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b082      	sub	sp, #8
 8004084:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004086:	e019      	b.n	80040bc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004088:	f000 fab4 	bl	80045f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800408c:	4b10      	ldr	r3, [pc, #64]	; (80040d0 <prvCheckTasksWaitingTermination+0x50>)
 800408e:	68db      	ldr	r3, [r3, #12]
 8004090:	68db      	ldr	r3, [r3, #12]
 8004092:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	3304      	adds	r3, #4
 8004098:	4618      	mov	r0, r3
 800409a:	f7fe fede 	bl	8002e5a <uxListRemove>
				--uxCurrentNumberOfTasks;
 800409e:	4b0d      	ldr	r3, [pc, #52]	; (80040d4 <prvCheckTasksWaitingTermination+0x54>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	3b01      	subs	r3, #1
 80040a4:	4a0b      	ldr	r2, [pc, #44]	; (80040d4 <prvCheckTasksWaitingTermination+0x54>)
 80040a6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80040a8:	4b0b      	ldr	r3, [pc, #44]	; (80040d8 <prvCheckTasksWaitingTermination+0x58>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	3b01      	subs	r3, #1
 80040ae:	4a0a      	ldr	r2, [pc, #40]	; (80040d8 <prvCheckTasksWaitingTermination+0x58>)
 80040b0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80040b2:	f000 facf 	bl	8004654 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f000 f810 	bl	80040dc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80040bc:	4b06      	ldr	r3, [pc, #24]	; (80040d8 <prvCheckTasksWaitingTermination+0x58>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d1e1      	bne.n	8004088 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80040c4:	bf00      	nop
 80040c6:	bf00      	nop
 80040c8:	3708      	adds	r7, #8
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}
 80040ce:	bf00      	nop
 80040d0:	200004c8 	.word	0x200004c8
 80040d4:	200004f4 	.word	0x200004f4
 80040d8:	200004dc 	.word	0x200004dc

080040dc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b084      	sub	sp, #16
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	334c      	adds	r3, #76	; 0x4c
 80040e8:	4618      	mov	r0, r3
 80040ea:	f000 ff99 	bl	8005020 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d108      	bne.n	800410a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040fc:	4618      	mov	r0, r3
 80040fe:	f000 fc67 	bl	80049d0 <vPortFree>
				vPortFree( pxTCB );
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f000 fc64 	bl	80049d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004108:	e018      	b.n	800413c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8004110:	2b01      	cmp	r3, #1
 8004112:	d103      	bne.n	800411c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f000 fc5b 	bl	80049d0 <vPortFree>
	}
 800411a:	e00f      	b.n	800413c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8004122:	2b02      	cmp	r3, #2
 8004124:	d00a      	beq.n	800413c <prvDeleteTCB+0x60>
	__asm volatile
 8004126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800412a:	f383 8811 	msr	BASEPRI, r3
 800412e:	f3bf 8f6f 	isb	sy
 8004132:	f3bf 8f4f 	dsb	sy
 8004136:	60fb      	str	r3, [r7, #12]
}
 8004138:	bf00      	nop
 800413a:	e7fe      	b.n	800413a <prvDeleteTCB+0x5e>
	}
 800413c:	bf00      	nop
 800413e:	3710      	adds	r7, #16
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}

08004144 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004144:	b480      	push	{r7}
 8004146:	b083      	sub	sp, #12
 8004148:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800414a:	4b0c      	ldr	r3, [pc, #48]	; (800417c <prvResetNextTaskUnblockTime+0x38>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d104      	bne.n	800415e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004154:	4b0a      	ldr	r3, [pc, #40]	; (8004180 <prvResetNextTaskUnblockTime+0x3c>)
 8004156:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800415a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800415c:	e008      	b.n	8004170 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800415e:	4b07      	ldr	r3, [pc, #28]	; (800417c <prvResetNextTaskUnblockTime+0x38>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	68db      	ldr	r3, [r3, #12]
 8004164:	68db      	ldr	r3, [r3, #12]
 8004166:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	4a04      	ldr	r2, [pc, #16]	; (8004180 <prvResetNextTaskUnblockTime+0x3c>)
 800416e:	6013      	str	r3, [r2, #0]
}
 8004170:	bf00      	nop
 8004172:	370c      	adds	r7, #12
 8004174:	46bd      	mov	sp, r7
 8004176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417a:	4770      	bx	lr
 800417c:	200004ac 	.word	0x200004ac
 8004180:	20000514 	.word	0x20000514

08004184 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004184:	b480      	push	{r7}
 8004186:	b083      	sub	sp, #12
 8004188:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800418a:	4b0b      	ldr	r3, [pc, #44]	; (80041b8 <xTaskGetSchedulerState+0x34>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d102      	bne.n	8004198 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004192:	2301      	movs	r3, #1
 8004194:	607b      	str	r3, [r7, #4]
 8004196:	e008      	b.n	80041aa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004198:	4b08      	ldr	r3, [pc, #32]	; (80041bc <xTaskGetSchedulerState+0x38>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d102      	bne.n	80041a6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80041a0:	2302      	movs	r3, #2
 80041a2:	607b      	str	r3, [r7, #4]
 80041a4:	e001      	b.n	80041aa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80041a6:	2300      	movs	r3, #0
 80041a8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80041aa:	687b      	ldr	r3, [r7, #4]
	}
 80041ac:	4618      	mov	r0, r3
 80041ae:	370c      	adds	r7, #12
 80041b0:	46bd      	mov	sp, r7
 80041b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b6:	4770      	bx	lr
 80041b8:	20000500 	.word	0x20000500
 80041bc:	2000051c 	.word	0x2000051c

080041c0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b086      	sub	sp, #24
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80041cc:	2300      	movs	r3, #0
 80041ce:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d06e      	beq.n	80042b4 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80041d6:	4b3a      	ldr	r3, [pc, #232]	; (80042c0 <xTaskPriorityDisinherit+0x100>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	693a      	ldr	r2, [r7, #16]
 80041dc:	429a      	cmp	r2, r3
 80041de:	d00a      	beq.n	80041f6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80041e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041e4:	f383 8811 	msr	BASEPRI, r3
 80041e8:	f3bf 8f6f 	isb	sy
 80041ec:	f3bf 8f4f 	dsb	sy
 80041f0:	60fb      	str	r3, [r7, #12]
}
 80041f2:	bf00      	nop
 80041f4:	e7fe      	b.n	80041f4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d10a      	bne.n	8004214 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80041fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004202:	f383 8811 	msr	BASEPRI, r3
 8004206:	f3bf 8f6f 	isb	sy
 800420a:	f3bf 8f4f 	dsb	sy
 800420e:	60bb      	str	r3, [r7, #8]
}
 8004210:	bf00      	nop
 8004212:	e7fe      	b.n	8004212 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004218:	1e5a      	subs	r2, r3, #1
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004226:	429a      	cmp	r2, r3
 8004228:	d044      	beq.n	80042b4 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800422e:	2b00      	cmp	r3, #0
 8004230:	d140      	bne.n	80042b4 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	3304      	adds	r3, #4
 8004236:	4618      	mov	r0, r3
 8004238:	f7fe fe0f 	bl	8002e5a <uxListRemove>
 800423c:	4603      	mov	r3, r0
 800423e:	2b00      	cmp	r3, #0
 8004240:	d115      	bne.n	800426e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004246:	491f      	ldr	r1, [pc, #124]	; (80042c4 <xTaskPriorityDisinherit+0x104>)
 8004248:	4613      	mov	r3, r2
 800424a:	009b      	lsls	r3, r3, #2
 800424c:	4413      	add	r3, r2
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	440b      	add	r3, r1
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d10a      	bne.n	800426e <xTaskPriorityDisinherit+0xae>
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800425c:	2201      	movs	r2, #1
 800425e:	fa02 f303 	lsl.w	r3, r2, r3
 8004262:	43da      	mvns	r2, r3
 8004264:	4b18      	ldr	r3, [pc, #96]	; (80042c8 <xTaskPriorityDisinherit+0x108>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4013      	ands	r3, r2
 800426a:	4a17      	ldr	r2, [pc, #92]	; (80042c8 <xTaskPriorityDisinherit+0x108>)
 800426c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800427a:	f1c3 0207 	rsb	r2, r3, #7
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004286:	2201      	movs	r2, #1
 8004288:	409a      	lsls	r2, r3
 800428a:	4b0f      	ldr	r3, [pc, #60]	; (80042c8 <xTaskPriorityDisinherit+0x108>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4313      	orrs	r3, r2
 8004290:	4a0d      	ldr	r2, [pc, #52]	; (80042c8 <xTaskPriorityDisinherit+0x108>)
 8004292:	6013      	str	r3, [r2, #0]
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004298:	4613      	mov	r3, r2
 800429a:	009b      	lsls	r3, r3, #2
 800429c:	4413      	add	r3, r2
 800429e:	009b      	lsls	r3, r3, #2
 80042a0:	4a08      	ldr	r2, [pc, #32]	; (80042c4 <xTaskPriorityDisinherit+0x104>)
 80042a2:	441a      	add	r2, r3
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	3304      	adds	r3, #4
 80042a8:	4619      	mov	r1, r3
 80042aa:	4610      	mov	r0, r2
 80042ac:	f7fe fd78 	bl	8002da0 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80042b0:	2301      	movs	r3, #1
 80042b2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80042b4:	697b      	ldr	r3, [r7, #20]
	}
 80042b6:	4618      	mov	r0, r3
 80042b8:	3718      	adds	r7, #24
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}
 80042be:	bf00      	nop
 80042c0:	200003f4 	.word	0x200003f4
 80042c4:	200003f8 	.word	0x200003f8
 80042c8:	200004fc 	.word	0x200004fc

080042cc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b084      	sub	sp, #16
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
 80042d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80042d6:	4b29      	ldr	r3, [pc, #164]	; (800437c <prvAddCurrentTaskToDelayedList+0xb0>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80042dc:	4b28      	ldr	r3, [pc, #160]	; (8004380 <prvAddCurrentTaskToDelayedList+0xb4>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	3304      	adds	r3, #4
 80042e2:	4618      	mov	r0, r3
 80042e4:	f7fe fdb9 	bl	8002e5a <uxListRemove>
 80042e8:	4603      	mov	r3, r0
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d10b      	bne.n	8004306 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80042ee:	4b24      	ldr	r3, [pc, #144]	; (8004380 <prvAddCurrentTaskToDelayedList+0xb4>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042f4:	2201      	movs	r2, #1
 80042f6:	fa02 f303 	lsl.w	r3, r2, r3
 80042fa:	43da      	mvns	r2, r3
 80042fc:	4b21      	ldr	r3, [pc, #132]	; (8004384 <prvAddCurrentTaskToDelayedList+0xb8>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4013      	ands	r3, r2
 8004302:	4a20      	ldr	r2, [pc, #128]	; (8004384 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004304:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800430c:	d10a      	bne.n	8004324 <prvAddCurrentTaskToDelayedList+0x58>
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d007      	beq.n	8004324 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004314:	4b1a      	ldr	r3, [pc, #104]	; (8004380 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	3304      	adds	r3, #4
 800431a:	4619      	mov	r1, r3
 800431c:	481a      	ldr	r0, [pc, #104]	; (8004388 <prvAddCurrentTaskToDelayedList+0xbc>)
 800431e:	f7fe fd3f 	bl	8002da0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004322:	e026      	b.n	8004372 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004324:	68fa      	ldr	r2, [r7, #12]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	4413      	add	r3, r2
 800432a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800432c:	4b14      	ldr	r3, [pc, #80]	; (8004380 <prvAddCurrentTaskToDelayedList+0xb4>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	68ba      	ldr	r2, [r7, #8]
 8004332:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004334:	68ba      	ldr	r2, [r7, #8]
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	429a      	cmp	r2, r3
 800433a:	d209      	bcs.n	8004350 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800433c:	4b13      	ldr	r3, [pc, #76]	; (800438c <prvAddCurrentTaskToDelayedList+0xc0>)
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	4b0f      	ldr	r3, [pc, #60]	; (8004380 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	3304      	adds	r3, #4
 8004346:	4619      	mov	r1, r3
 8004348:	4610      	mov	r0, r2
 800434a:	f7fe fd4d 	bl	8002de8 <vListInsert>
}
 800434e:	e010      	b.n	8004372 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004350:	4b0f      	ldr	r3, [pc, #60]	; (8004390 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	4b0a      	ldr	r3, [pc, #40]	; (8004380 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	3304      	adds	r3, #4
 800435a:	4619      	mov	r1, r3
 800435c:	4610      	mov	r0, r2
 800435e:	f7fe fd43 	bl	8002de8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004362:	4b0c      	ldr	r3, [pc, #48]	; (8004394 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	68ba      	ldr	r2, [r7, #8]
 8004368:	429a      	cmp	r2, r3
 800436a:	d202      	bcs.n	8004372 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800436c:	4a09      	ldr	r2, [pc, #36]	; (8004394 <prvAddCurrentTaskToDelayedList+0xc8>)
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	6013      	str	r3, [r2, #0]
}
 8004372:	bf00      	nop
 8004374:	3710      	adds	r7, #16
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}
 800437a:	bf00      	nop
 800437c:	200004f8 	.word	0x200004f8
 8004380:	200003f4 	.word	0x200003f4
 8004384:	200004fc 	.word	0x200004fc
 8004388:	200004e0 	.word	0x200004e0
 800438c:	200004b0 	.word	0x200004b0
 8004390:	200004ac 	.word	0x200004ac
 8004394:	20000514 	.word	0x20000514

08004398 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004398:	b480      	push	{r7}
 800439a:	b085      	sub	sp, #20
 800439c:	af00      	add	r7, sp, #0
 800439e:	60f8      	str	r0, [r7, #12]
 80043a0:	60b9      	str	r1, [r7, #8]
 80043a2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	3b04      	subs	r3, #4
 80043a8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80043b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	3b04      	subs	r3, #4
 80043b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	f023 0201 	bic.w	r2, r3, #1
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	3b04      	subs	r3, #4
 80043c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80043c8:	4a0c      	ldr	r2, [pc, #48]	; (80043fc <pxPortInitialiseStack+0x64>)
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	3b14      	subs	r3, #20
 80043d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80043d4:	687a      	ldr	r2, [r7, #4]
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	3b04      	subs	r3, #4
 80043de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	f06f 0202 	mvn.w	r2, #2
 80043e6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	3b20      	subs	r3, #32
 80043ec:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80043ee:	68fb      	ldr	r3, [r7, #12]
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	3714      	adds	r7, #20
 80043f4:	46bd      	mov	sp, r7
 80043f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fa:	4770      	bx	lr
 80043fc:	08004401 	.word	0x08004401

08004400 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004400:	b480      	push	{r7}
 8004402:	b085      	sub	sp, #20
 8004404:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004406:	2300      	movs	r3, #0
 8004408:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800440a:	4b12      	ldr	r3, [pc, #72]	; (8004454 <prvTaskExitError+0x54>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004412:	d00a      	beq.n	800442a <prvTaskExitError+0x2a>
	__asm volatile
 8004414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004418:	f383 8811 	msr	BASEPRI, r3
 800441c:	f3bf 8f6f 	isb	sy
 8004420:	f3bf 8f4f 	dsb	sy
 8004424:	60fb      	str	r3, [r7, #12]
}
 8004426:	bf00      	nop
 8004428:	e7fe      	b.n	8004428 <prvTaskExitError+0x28>
	__asm volatile
 800442a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800442e:	f383 8811 	msr	BASEPRI, r3
 8004432:	f3bf 8f6f 	isb	sy
 8004436:	f3bf 8f4f 	dsb	sy
 800443a:	60bb      	str	r3, [r7, #8]
}
 800443c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800443e:	bf00      	nop
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d0fc      	beq.n	8004440 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004446:	bf00      	nop
 8004448:	bf00      	nop
 800444a:	3714      	adds	r7, #20
 800444c:	46bd      	mov	sp, r7
 800444e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004452:	4770      	bx	lr
 8004454:	2000000c 	.word	0x2000000c
	...

08004460 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004460:	4b07      	ldr	r3, [pc, #28]	; (8004480 <pxCurrentTCBConst2>)
 8004462:	6819      	ldr	r1, [r3, #0]
 8004464:	6808      	ldr	r0, [r1, #0]
 8004466:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800446a:	f380 8809 	msr	PSP, r0
 800446e:	f3bf 8f6f 	isb	sy
 8004472:	f04f 0000 	mov.w	r0, #0
 8004476:	f380 8811 	msr	BASEPRI, r0
 800447a:	4770      	bx	lr
 800447c:	f3af 8000 	nop.w

08004480 <pxCurrentTCBConst2>:
 8004480:	200003f4 	.word	0x200003f4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004484:	bf00      	nop
 8004486:	bf00      	nop

08004488 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004488:	4808      	ldr	r0, [pc, #32]	; (80044ac <prvPortStartFirstTask+0x24>)
 800448a:	6800      	ldr	r0, [r0, #0]
 800448c:	6800      	ldr	r0, [r0, #0]
 800448e:	f380 8808 	msr	MSP, r0
 8004492:	f04f 0000 	mov.w	r0, #0
 8004496:	f380 8814 	msr	CONTROL, r0
 800449a:	b662      	cpsie	i
 800449c:	b661      	cpsie	f
 800449e:	f3bf 8f4f 	dsb	sy
 80044a2:	f3bf 8f6f 	isb	sy
 80044a6:	df00      	svc	0
 80044a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80044aa:	bf00      	nop
 80044ac:	e000ed08 	.word	0xe000ed08

080044b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b086      	sub	sp, #24
 80044b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80044b6:	4b46      	ldr	r3, [pc, #280]	; (80045d0 <xPortStartScheduler+0x120>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a46      	ldr	r2, [pc, #280]	; (80045d4 <xPortStartScheduler+0x124>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d10a      	bne.n	80044d6 <xPortStartScheduler+0x26>
	__asm volatile
 80044c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044c4:	f383 8811 	msr	BASEPRI, r3
 80044c8:	f3bf 8f6f 	isb	sy
 80044cc:	f3bf 8f4f 	dsb	sy
 80044d0:	613b      	str	r3, [r7, #16]
}
 80044d2:	bf00      	nop
 80044d4:	e7fe      	b.n	80044d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80044d6:	4b3e      	ldr	r3, [pc, #248]	; (80045d0 <xPortStartScheduler+0x120>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a3f      	ldr	r2, [pc, #252]	; (80045d8 <xPortStartScheduler+0x128>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d10a      	bne.n	80044f6 <xPortStartScheduler+0x46>
	__asm volatile
 80044e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044e4:	f383 8811 	msr	BASEPRI, r3
 80044e8:	f3bf 8f6f 	isb	sy
 80044ec:	f3bf 8f4f 	dsb	sy
 80044f0:	60fb      	str	r3, [r7, #12]
}
 80044f2:	bf00      	nop
 80044f4:	e7fe      	b.n	80044f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80044f6:	4b39      	ldr	r3, [pc, #228]	; (80045dc <xPortStartScheduler+0x12c>)
 80044f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	781b      	ldrb	r3, [r3, #0]
 80044fe:	b2db      	uxtb	r3, r3
 8004500:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	22ff      	movs	r2, #255	; 0xff
 8004506:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	781b      	ldrb	r3, [r3, #0]
 800450c:	b2db      	uxtb	r3, r3
 800450e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004510:	78fb      	ldrb	r3, [r7, #3]
 8004512:	b2db      	uxtb	r3, r3
 8004514:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004518:	b2da      	uxtb	r2, r3
 800451a:	4b31      	ldr	r3, [pc, #196]	; (80045e0 <xPortStartScheduler+0x130>)
 800451c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800451e:	4b31      	ldr	r3, [pc, #196]	; (80045e4 <xPortStartScheduler+0x134>)
 8004520:	2207      	movs	r2, #7
 8004522:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004524:	e009      	b.n	800453a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004526:	4b2f      	ldr	r3, [pc, #188]	; (80045e4 <xPortStartScheduler+0x134>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	3b01      	subs	r3, #1
 800452c:	4a2d      	ldr	r2, [pc, #180]	; (80045e4 <xPortStartScheduler+0x134>)
 800452e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004530:	78fb      	ldrb	r3, [r7, #3]
 8004532:	b2db      	uxtb	r3, r3
 8004534:	005b      	lsls	r3, r3, #1
 8004536:	b2db      	uxtb	r3, r3
 8004538:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800453a:	78fb      	ldrb	r3, [r7, #3]
 800453c:	b2db      	uxtb	r3, r3
 800453e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004542:	2b80      	cmp	r3, #128	; 0x80
 8004544:	d0ef      	beq.n	8004526 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004546:	4b27      	ldr	r3, [pc, #156]	; (80045e4 <xPortStartScheduler+0x134>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f1c3 0307 	rsb	r3, r3, #7
 800454e:	2b04      	cmp	r3, #4
 8004550:	d00a      	beq.n	8004568 <xPortStartScheduler+0xb8>
	__asm volatile
 8004552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004556:	f383 8811 	msr	BASEPRI, r3
 800455a:	f3bf 8f6f 	isb	sy
 800455e:	f3bf 8f4f 	dsb	sy
 8004562:	60bb      	str	r3, [r7, #8]
}
 8004564:	bf00      	nop
 8004566:	e7fe      	b.n	8004566 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004568:	4b1e      	ldr	r3, [pc, #120]	; (80045e4 <xPortStartScheduler+0x134>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	021b      	lsls	r3, r3, #8
 800456e:	4a1d      	ldr	r2, [pc, #116]	; (80045e4 <xPortStartScheduler+0x134>)
 8004570:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004572:	4b1c      	ldr	r3, [pc, #112]	; (80045e4 <xPortStartScheduler+0x134>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800457a:	4a1a      	ldr	r2, [pc, #104]	; (80045e4 <xPortStartScheduler+0x134>)
 800457c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	b2da      	uxtb	r2, r3
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004586:	4b18      	ldr	r3, [pc, #96]	; (80045e8 <xPortStartScheduler+0x138>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a17      	ldr	r2, [pc, #92]	; (80045e8 <xPortStartScheduler+0x138>)
 800458c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004590:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004592:	4b15      	ldr	r3, [pc, #84]	; (80045e8 <xPortStartScheduler+0x138>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a14      	ldr	r2, [pc, #80]	; (80045e8 <xPortStartScheduler+0x138>)
 8004598:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800459c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800459e:	f000 f8dd 	bl	800475c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80045a2:	4b12      	ldr	r3, [pc, #72]	; (80045ec <xPortStartScheduler+0x13c>)
 80045a4:	2200      	movs	r2, #0
 80045a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80045a8:	f000 f8fc 	bl	80047a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80045ac:	4b10      	ldr	r3, [pc, #64]	; (80045f0 <xPortStartScheduler+0x140>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a0f      	ldr	r2, [pc, #60]	; (80045f0 <xPortStartScheduler+0x140>)
 80045b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80045b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80045b8:	f7ff ff66 	bl	8004488 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80045bc:	f7ff fb9c 	bl	8003cf8 <vTaskSwitchContext>
	prvTaskExitError();
 80045c0:	f7ff ff1e 	bl	8004400 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80045c4:	2300      	movs	r3, #0
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3718      	adds	r7, #24
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}
 80045ce:	bf00      	nop
 80045d0:	e000ed00 	.word	0xe000ed00
 80045d4:	410fc271 	.word	0x410fc271
 80045d8:	410fc270 	.word	0x410fc270
 80045dc:	e000e400 	.word	0xe000e400
 80045e0:	20000520 	.word	0x20000520
 80045e4:	20000524 	.word	0x20000524
 80045e8:	e000ed20 	.word	0xe000ed20
 80045ec:	2000000c 	.word	0x2000000c
 80045f0:	e000ef34 	.word	0xe000ef34

080045f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80045f4:	b480      	push	{r7}
 80045f6:	b083      	sub	sp, #12
 80045f8:	af00      	add	r7, sp, #0
	__asm volatile
 80045fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045fe:	f383 8811 	msr	BASEPRI, r3
 8004602:	f3bf 8f6f 	isb	sy
 8004606:	f3bf 8f4f 	dsb	sy
 800460a:	607b      	str	r3, [r7, #4]
}
 800460c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800460e:	4b0f      	ldr	r3, [pc, #60]	; (800464c <vPortEnterCritical+0x58>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	3301      	adds	r3, #1
 8004614:	4a0d      	ldr	r2, [pc, #52]	; (800464c <vPortEnterCritical+0x58>)
 8004616:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004618:	4b0c      	ldr	r3, [pc, #48]	; (800464c <vPortEnterCritical+0x58>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	2b01      	cmp	r3, #1
 800461e:	d10f      	bne.n	8004640 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004620:	4b0b      	ldr	r3, [pc, #44]	; (8004650 <vPortEnterCritical+0x5c>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	b2db      	uxtb	r3, r3
 8004626:	2b00      	cmp	r3, #0
 8004628:	d00a      	beq.n	8004640 <vPortEnterCritical+0x4c>
	__asm volatile
 800462a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800462e:	f383 8811 	msr	BASEPRI, r3
 8004632:	f3bf 8f6f 	isb	sy
 8004636:	f3bf 8f4f 	dsb	sy
 800463a:	603b      	str	r3, [r7, #0]
}
 800463c:	bf00      	nop
 800463e:	e7fe      	b.n	800463e <vPortEnterCritical+0x4a>
	}
}
 8004640:	bf00      	nop
 8004642:	370c      	adds	r7, #12
 8004644:	46bd      	mov	sp, r7
 8004646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464a:	4770      	bx	lr
 800464c:	2000000c 	.word	0x2000000c
 8004650:	e000ed04 	.word	0xe000ed04

08004654 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004654:	b480      	push	{r7}
 8004656:	b083      	sub	sp, #12
 8004658:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800465a:	4b12      	ldr	r3, [pc, #72]	; (80046a4 <vPortExitCritical+0x50>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d10a      	bne.n	8004678 <vPortExitCritical+0x24>
	__asm volatile
 8004662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004666:	f383 8811 	msr	BASEPRI, r3
 800466a:	f3bf 8f6f 	isb	sy
 800466e:	f3bf 8f4f 	dsb	sy
 8004672:	607b      	str	r3, [r7, #4]
}
 8004674:	bf00      	nop
 8004676:	e7fe      	b.n	8004676 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004678:	4b0a      	ldr	r3, [pc, #40]	; (80046a4 <vPortExitCritical+0x50>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	3b01      	subs	r3, #1
 800467e:	4a09      	ldr	r2, [pc, #36]	; (80046a4 <vPortExitCritical+0x50>)
 8004680:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004682:	4b08      	ldr	r3, [pc, #32]	; (80046a4 <vPortExitCritical+0x50>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d105      	bne.n	8004696 <vPortExitCritical+0x42>
 800468a:	2300      	movs	r3, #0
 800468c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004694:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004696:	bf00      	nop
 8004698:	370c      	adds	r7, #12
 800469a:	46bd      	mov	sp, r7
 800469c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a0:	4770      	bx	lr
 80046a2:	bf00      	nop
 80046a4:	2000000c 	.word	0x2000000c
	...

080046b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80046b0:	f3ef 8009 	mrs	r0, PSP
 80046b4:	f3bf 8f6f 	isb	sy
 80046b8:	4b15      	ldr	r3, [pc, #84]	; (8004710 <pxCurrentTCBConst>)
 80046ba:	681a      	ldr	r2, [r3, #0]
 80046bc:	f01e 0f10 	tst.w	lr, #16
 80046c0:	bf08      	it	eq
 80046c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80046c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046ca:	6010      	str	r0, [r2, #0]
 80046cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80046d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80046d4:	f380 8811 	msr	BASEPRI, r0
 80046d8:	f3bf 8f4f 	dsb	sy
 80046dc:	f3bf 8f6f 	isb	sy
 80046e0:	f7ff fb0a 	bl	8003cf8 <vTaskSwitchContext>
 80046e4:	f04f 0000 	mov.w	r0, #0
 80046e8:	f380 8811 	msr	BASEPRI, r0
 80046ec:	bc09      	pop	{r0, r3}
 80046ee:	6819      	ldr	r1, [r3, #0]
 80046f0:	6808      	ldr	r0, [r1, #0]
 80046f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046f6:	f01e 0f10 	tst.w	lr, #16
 80046fa:	bf08      	it	eq
 80046fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004700:	f380 8809 	msr	PSP, r0
 8004704:	f3bf 8f6f 	isb	sy
 8004708:	4770      	bx	lr
 800470a:	bf00      	nop
 800470c:	f3af 8000 	nop.w

08004710 <pxCurrentTCBConst>:
 8004710:	200003f4 	.word	0x200003f4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004714:	bf00      	nop
 8004716:	bf00      	nop

08004718 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b082      	sub	sp, #8
 800471c:	af00      	add	r7, sp, #0
	__asm volatile
 800471e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004722:	f383 8811 	msr	BASEPRI, r3
 8004726:	f3bf 8f6f 	isb	sy
 800472a:	f3bf 8f4f 	dsb	sy
 800472e:	607b      	str	r3, [r7, #4]
}
 8004730:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004732:	f7ff fa29 	bl	8003b88 <xTaskIncrementTick>
 8004736:	4603      	mov	r3, r0
 8004738:	2b00      	cmp	r3, #0
 800473a:	d003      	beq.n	8004744 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800473c:	4b06      	ldr	r3, [pc, #24]	; (8004758 <SysTick_Handler+0x40>)
 800473e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004742:	601a      	str	r2, [r3, #0]
 8004744:	2300      	movs	r3, #0
 8004746:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	f383 8811 	msr	BASEPRI, r3
}
 800474e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004750:	bf00      	nop
 8004752:	3708      	adds	r7, #8
 8004754:	46bd      	mov	sp, r7
 8004756:	bd80      	pop	{r7, pc}
 8004758:	e000ed04 	.word	0xe000ed04

0800475c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800475c:	b480      	push	{r7}
 800475e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004760:	4b0b      	ldr	r3, [pc, #44]	; (8004790 <vPortSetupTimerInterrupt+0x34>)
 8004762:	2200      	movs	r2, #0
 8004764:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004766:	4b0b      	ldr	r3, [pc, #44]	; (8004794 <vPortSetupTimerInterrupt+0x38>)
 8004768:	2200      	movs	r2, #0
 800476a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800476c:	4b0a      	ldr	r3, [pc, #40]	; (8004798 <vPortSetupTimerInterrupt+0x3c>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a0a      	ldr	r2, [pc, #40]	; (800479c <vPortSetupTimerInterrupt+0x40>)
 8004772:	fba2 2303 	umull	r2, r3, r2, r3
 8004776:	099b      	lsrs	r3, r3, #6
 8004778:	4a09      	ldr	r2, [pc, #36]	; (80047a0 <vPortSetupTimerInterrupt+0x44>)
 800477a:	3b01      	subs	r3, #1
 800477c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800477e:	4b04      	ldr	r3, [pc, #16]	; (8004790 <vPortSetupTimerInterrupt+0x34>)
 8004780:	2207      	movs	r2, #7
 8004782:	601a      	str	r2, [r3, #0]
}
 8004784:	bf00      	nop
 8004786:	46bd      	mov	sp, r7
 8004788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478c:	4770      	bx	lr
 800478e:	bf00      	nop
 8004790:	e000e010 	.word	0xe000e010
 8004794:	e000e018 	.word	0xe000e018
 8004798:	20000000 	.word	0x20000000
 800479c:	10624dd3 	.word	0x10624dd3
 80047a0:	e000e014 	.word	0xe000e014

080047a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80047a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80047b4 <vPortEnableVFP+0x10>
 80047a8:	6801      	ldr	r1, [r0, #0]
 80047aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80047ae:	6001      	str	r1, [r0, #0]
 80047b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80047b2:	bf00      	nop
 80047b4:	e000ed88 	.word	0xe000ed88

080047b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80047b8:	b480      	push	{r7}
 80047ba:	b085      	sub	sp, #20
 80047bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80047be:	f3ef 8305 	mrs	r3, IPSR
 80047c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2b0f      	cmp	r3, #15
 80047c8:	d914      	bls.n	80047f4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80047ca:	4a17      	ldr	r2, [pc, #92]	; (8004828 <vPortValidateInterruptPriority+0x70>)
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	4413      	add	r3, r2
 80047d0:	781b      	ldrb	r3, [r3, #0]
 80047d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80047d4:	4b15      	ldr	r3, [pc, #84]	; (800482c <vPortValidateInterruptPriority+0x74>)
 80047d6:	781b      	ldrb	r3, [r3, #0]
 80047d8:	7afa      	ldrb	r2, [r7, #11]
 80047da:	429a      	cmp	r2, r3
 80047dc:	d20a      	bcs.n	80047f4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80047de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047e2:	f383 8811 	msr	BASEPRI, r3
 80047e6:	f3bf 8f6f 	isb	sy
 80047ea:	f3bf 8f4f 	dsb	sy
 80047ee:	607b      	str	r3, [r7, #4]
}
 80047f0:	bf00      	nop
 80047f2:	e7fe      	b.n	80047f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80047f4:	4b0e      	ldr	r3, [pc, #56]	; (8004830 <vPortValidateInterruptPriority+0x78>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80047fc:	4b0d      	ldr	r3, [pc, #52]	; (8004834 <vPortValidateInterruptPriority+0x7c>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	429a      	cmp	r2, r3
 8004802:	d90a      	bls.n	800481a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004808:	f383 8811 	msr	BASEPRI, r3
 800480c:	f3bf 8f6f 	isb	sy
 8004810:	f3bf 8f4f 	dsb	sy
 8004814:	603b      	str	r3, [r7, #0]
}
 8004816:	bf00      	nop
 8004818:	e7fe      	b.n	8004818 <vPortValidateInterruptPriority+0x60>
	}
 800481a:	bf00      	nop
 800481c:	3714      	adds	r7, #20
 800481e:	46bd      	mov	sp, r7
 8004820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004824:	4770      	bx	lr
 8004826:	bf00      	nop
 8004828:	e000e3f0 	.word	0xe000e3f0
 800482c:	20000520 	.word	0x20000520
 8004830:	e000ed0c 	.word	0xe000ed0c
 8004834:	20000524 	.word	0x20000524

08004838 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b08a      	sub	sp, #40	; 0x28
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004840:	2300      	movs	r3, #0
 8004842:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004844:	f7ff f8d4 	bl	80039f0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004848:	4b5b      	ldr	r3, [pc, #364]	; (80049b8 <pvPortMalloc+0x180>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d101      	bne.n	8004854 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004850:	f000 f920 	bl	8004a94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004854:	4b59      	ldr	r3, [pc, #356]	; (80049bc <pvPortMalloc+0x184>)
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	4013      	ands	r3, r2
 800485c:	2b00      	cmp	r3, #0
 800485e:	f040 8093 	bne.w	8004988 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d01d      	beq.n	80048a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004868:	2208      	movs	r2, #8
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	4413      	add	r3, r2
 800486e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	f003 0307 	and.w	r3, r3, #7
 8004876:	2b00      	cmp	r3, #0
 8004878:	d014      	beq.n	80048a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	f023 0307 	bic.w	r3, r3, #7
 8004880:	3308      	adds	r3, #8
 8004882:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	f003 0307 	and.w	r3, r3, #7
 800488a:	2b00      	cmp	r3, #0
 800488c:	d00a      	beq.n	80048a4 <pvPortMalloc+0x6c>
	__asm volatile
 800488e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004892:	f383 8811 	msr	BASEPRI, r3
 8004896:	f3bf 8f6f 	isb	sy
 800489a:	f3bf 8f4f 	dsb	sy
 800489e:	617b      	str	r3, [r7, #20]
}
 80048a0:	bf00      	nop
 80048a2:	e7fe      	b.n	80048a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d06e      	beq.n	8004988 <pvPortMalloc+0x150>
 80048aa:	4b45      	ldr	r3, [pc, #276]	; (80049c0 <pvPortMalloc+0x188>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	687a      	ldr	r2, [r7, #4]
 80048b0:	429a      	cmp	r2, r3
 80048b2:	d869      	bhi.n	8004988 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80048b4:	4b43      	ldr	r3, [pc, #268]	; (80049c4 <pvPortMalloc+0x18c>)
 80048b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80048b8:	4b42      	ldr	r3, [pc, #264]	; (80049c4 <pvPortMalloc+0x18c>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80048be:	e004      	b.n	80048ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80048c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80048c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80048ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	687a      	ldr	r2, [r7, #4]
 80048d0:	429a      	cmp	r2, r3
 80048d2:	d903      	bls.n	80048dc <pvPortMalloc+0xa4>
 80048d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d1f1      	bne.n	80048c0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80048dc:	4b36      	ldr	r3, [pc, #216]	; (80049b8 <pvPortMalloc+0x180>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048e2:	429a      	cmp	r2, r3
 80048e4:	d050      	beq.n	8004988 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80048e6:	6a3b      	ldr	r3, [r7, #32]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	2208      	movs	r2, #8
 80048ec:	4413      	add	r3, r2
 80048ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80048f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f2:	681a      	ldr	r2, [r3, #0]
 80048f4:	6a3b      	ldr	r3, [r7, #32]
 80048f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80048f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048fa:	685a      	ldr	r2, [r3, #4]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	1ad2      	subs	r2, r2, r3
 8004900:	2308      	movs	r3, #8
 8004902:	005b      	lsls	r3, r3, #1
 8004904:	429a      	cmp	r2, r3
 8004906:	d91f      	bls.n	8004948 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004908:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	4413      	add	r3, r2
 800490e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004910:	69bb      	ldr	r3, [r7, #24]
 8004912:	f003 0307 	and.w	r3, r3, #7
 8004916:	2b00      	cmp	r3, #0
 8004918:	d00a      	beq.n	8004930 <pvPortMalloc+0xf8>
	__asm volatile
 800491a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800491e:	f383 8811 	msr	BASEPRI, r3
 8004922:	f3bf 8f6f 	isb	sy
 8004926:	f3bf 8f4f 	dsb	sy
 800492a:	613b      	str	r3, [r7, #16]
}
 800492c:	bf00      	nop
 800492e:	e7fe      	b.n	800492e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004932:	685a      	ldr	r2, [r3, #4]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	1ad2      	subs	r2, r2, r3
 8004938:	69bb      	ldr	r3, [r7, #24]
 800493a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800493c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800493e:	687a      	ldr	r2, [r7, #4]
 8004940:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004942:	69b8      	ldr	r0, [r7, #24]
 8004944:	f000 f908 	bl	8004b58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004948:	4b1d      	ldr	r3, [pc, #116]	; (80049c0 <pvPortMalloc+0x188>)
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	1ad3      	subs	r3, r2, r3
 8004952:	4a1b      	ldr	r2, [pc, #108]	; (80049c0 <pvPortMalloc+0x188>)
 8004954:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004956:	4b1a      	ldr	r3, [pc, #104]	; (80049c0 <pvPortMalloc+0x188>)
 8004958:	681a      	ldr	r2, [r3, #0]
 800495a:	4b1b      	ldr	r3, [pc, #108]	; (80049c8 <pvPortMalloc+0x190>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	429a      	cmp	r2, r3
 8004960:	d203      	bcs.n	800496a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004962:	4b17      	ldr	r3, [pc, #92]	; (80049c0 <pvPortMalloc+0x188>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a18      	ldr	r2, [pc, #96]	; (80049c8 <pvPortMalloc+0x190>)
 8004968:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800496a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800496c:	685a      	ldr	r2, [r3, #4]
 800496e:	4b13      	ldr	r3, [pc, #76]	; (80049bc <pvPortMalloc+0x184>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	431a      	orrs	r2, r3
 8004974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004976:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800497a:	2200      	movs	r2, #0
 800497c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800497e:	4b13      	ldr	r3, [pc, #76]	; (80049cc <pvPortMalloc+0x194>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	3301      	adds	r3, #1
 8004984:	4a11      	ldr	r2, [pc, #68]	; (80049cc <pvPortMalloc+0x194>)
 8004986:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004988:	f7ff f840 	bl	8003a0c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800498c:	69fb      	ldr	r3, [r7, #28]
 800498e:	f003 0307 	and.w	r3, r3, #7
 8004992:	2b00      	cmp	r3, #0
 8004994:	d00a      	beq.n	80049ac <pvPortMalloc+0x174>
	__asm volatile
 8004996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800499a:	f383 8811 	msr	BASEPRI, r3
 800499e:	f3bf 8f6f 	isb	sy
 80049a2:	f3bf 8f4f 	dsb	sy
 80049a6:	60fb      	str	r3, [r7, #12]
}
 80049a8:	bf00      	nop
 80049aa:	e7fe      	b.n	80049aa <pvPortMalloc+0x172>
	return pvReturn;
 80049ac:	69fb      	ldr	r3, [r7, #28]
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	3728      	adds	r7, #40	; 0x28
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}
 80049b6:	bf00      	nop
 80049b8:	20004130 	.word	0x20004130
 80049bc:	20004144 	.word	0x20004144
 80049c0:	20004134 	.word	0x20004134
 80049c4:	20004128 	.word	0x20004128
 80049c8:	20004138 	.word	0x20004138
 80049cc:	2000413c 	.word	0x2000413c

080049d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b086      	sub	sp, #24
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d04d      	beq.n	8004a7e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80049e2:	2308      	movs	r3, #8
 80049e4:	425b      	negs	r3, r3
 80049e6:	697a      	ldr	r2, [r7, #20]
 80049e8:	4413      	add	r3, r2
 80049ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	685a      	ldr	r2, [r3, #4]
 80049f4:	4b24      	ldr	r3, [pc, #144]	; (8004a88 <vPortFree+0xb8>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4013      	ands	r3, r2
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d10a      	bne.n	8004a14 <vPortFree+0x44>
	__asm volatile
 80049fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a02:	f383 8811 	msr	BASEPRI, r3
 8004a06:	f3bf 8f6f 	isb	sy
 8004a0a:	f3bf 8f4f 	dsb	sy
 8004a0e:	60fb      	str	r3, [r7, #12]
}
 8004a10:	bf00      	nop
 8004a12:	e7fe      	b.n	8004a12 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d00a      	beq.n	8004a32 <vPortFree+0x62>
	__asm volatile
 8004a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a20:	f383 8811 	msr	BASEPRI, r3
 8004a24:	f3bf 8f6f 	isb	sy
 8004a28:	f3bf 8f4f 	dsb	sy
 8004a2c:	60bb      	str	r3, [r7, #8]
}
 8004a2e:	bf00      	nop
 8004a30:	e7fe      	b.n	8004a30 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	685a      	ldr	r2, [r3, #4]
 8004a36:	4b14      	ldr	r3, [pc, #80]	; (8004a88 <vPortFree+0xb8>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4013      	ands	r3, r2
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d01e      	beq.n	8004a7e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d11a      	bne.n	8004a7e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	685a      	ldr	r2, [r3, #4]
 8004a4c:	4b0e      	ldr	r3, [pc, #56]	; (8004a88 <vPortFree+0xb8>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	43db      	mvns	r3, r3
 8004a52:	401a      	ands	r2, r3
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004a58:	f7fe ffca 	bl	80039f0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	685a      	ldr	r2, [r3, #4]
 8004a60:	4b0a      	ldr	r3, [pc, #40]	; (8004a8c <vPortFree+0xbc>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4413      	add	r3, r2
 8004a66:	4a09      	ldr	r2, [pc, #36]	; (8004a8c <vPortFree+0xbc>)
 8004a68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004a6a:	6938      	ldr	r0, [r7, #16]
 8004a6c:	f000 f874 	bl	8004b58 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004a70:	4b07      	ldr	r3, [pc, #28]	; (8004a90 <vPortFree+0xc0>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	3301      	adds	r3, #1
 8004a76:	4a06      	ldr	r2, [pc, #24]	; (8004a90 <vPortFree+0xc0>)
 8004a78:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004a7a:	f7fe ffc7 	bl	8003a0c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004a7e:	bf00      	nop
 8004a80:	3718      	adds	r7, #24
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}
 8004a86:	bf00      	nop
 8004a88:	20004144 	.word	0x20004144
 8004a8c:	20004134 	.word	0x20004134
 8004a90:	20004140 	.word	0x20004140

08004a94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004a94:	b480      	push	{r7}
 8004a96:	b085      	sub	sp, #20
 8004a98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004a9a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004a9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004aa0:	4b27      	ldr	r3, [pc, #156]	; (8004b40 <prvHeapInit+0xac>)
 8004aa2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	f003 0307 	and.w	r3, r3, #7
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d00c      	beq.n	8004ac8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	3307      	adds	r3, #7
 8004ab2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	f023 0307 	bic.w	r3, r3, #7
 8004aba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004abc:	68ba      	ldr	r2, [r7, #8]
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	1ad3      	subs	r3, r2, r3
 8004ac2:	4a1f      	ldr	r2, [pc, #124]	; (8004b40 <prvHeapInit+0xac>)
 8004ac4:	4413      	add	r3, r2
 8004ac6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004acc:	4a1d      	ldr	r2, [pc, #116]	; (8004b44 <prvHeapInit+0xb0>)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004ad2:	4b1c      	ldr	r3, [pc, #112]	; (8004b44 <prvHeapInit+0xb0>)
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	68ba      	ldr	r2, [r7, #8]
 8004adc:	4413      	add	r3, r2
 8004ade:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004ae0:	2208      	movs	r2, #8
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	1a9b      	subs	r3, r3, r2
 8004ae6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	f023 0307 	bic.w	r3, r3, #7
 8004aee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	4a15      	ldr	r2, [pc, #84]	; (8004b48 <prvHeapInit+0xb4>)
 8004af4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004af6:	4b14      	ldr	r3, [pc, #80]	; (8004b48 <prvHeapInit+0xb4>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	2200      	movs	r2, #0
 8004afc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004afe:	4b12      	ldr	r3, [pc, #72]	; (8004b48 <prvHeapInit+0xb4>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	2200      	movs	r2, #0
 8004b04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	68fa      	ldr	r2, [r7, #12]
 8004b0e:	1ad2      	subs	r2, r2, r3
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004b14:	4b0c      	ldr	r3, [pc, #48]	; (8004b48 <prvHeapInit+0xb4>)
 8004b16:	681a      	ldr	r2, [r3, #0]
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	4a0a      	ldr	r2, [pc, #40]	; (8004b4c <prvHeapInit+0xb8>)
 8004b22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	4a09      	ldr	r2, [pc, #36]	; (8004b50 <prvHeapInit+0xbc>)
 8004b2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004b2c:	4b09      	ldr	r3, [pc, #36]	; (8004b54 <prvHeapInit+0xc0>)
 8004b2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004b32:	601a      	str	r2, [r3, #0]
}
 8004b34:	bf00      	nop
 8004b36:	3714      	adds	r7, #20
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3e:	4770      	bx	lr
 8004b40:	20000528 	.word	0x20000528
 8004b44:	20004128 	.word	0x20004128
 8004b48:	20004130 	.word	0x20004130
 8004b4c:	20004138 	.word	0x20004138
 8004b50:	20004134 	.word	0x20004134
 8004b54:	20004144 	.word	0x20004144

08004b58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b085      	sub	sp, #20
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004b60:	4b28      	ldr	r3, [pc, #160]	; (8004c04 <prvInsertBlockIntoFreeList+0xac>)
 8004b62:	60fb      	str	r3, [r7, #12]
 8004b64:	e002      	b.n	8004b6c <prvInsertBlockIntoFreeList+0x14>
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	60fb      	str	r3, [r7, #12]
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	687a      	ldr	r2, [r7, #4]
 8004b72:	429a      	cmp	r2, r3
 8004b74:	d8f7      	bhi.n	8004b66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	68ba      	ldr	r2, [r7, #8]
 8004b80:	4413      	add	r3, r2
 8004b82:	687a      	ldr	r2, [r7, #4]
 8004b84:	429a      	cmp	r2, r3
 8004b86:	d108      	bne.n	8004b9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	685a      	ldr	r2, [r3, #4]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	441a      	add	r2, r3
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	68ba      	ldr	r2, [r7, #8]
 8004ba4:	441a      	add	r2, r3
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	429a      	cmp	r2, r3
 8004bac:	d118      	bne.n	8004be0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681a      	ldr	r2, [r3, #0]
 8004bb2:	4b15      	ldr	r3, [pc, #84]	; (8004c08 <prvInsertBlockIntoFreeList+0xb0>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	429a      	cmp	r2, r3
 8004bb8:	d00d      	beq.n	8004bd6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	685a      	ldr	r2, [r3, #4]
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	441a      	add	r2, r3
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	681a      	ldr	r2, [r3, #0]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	601a      	str	r2, [r3, #0]
 8004bd4:	e008      	b.n	8004be8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004bd6:	4b0c      	ldr	r3, [pc, #48]	; (8004c08 <prvInsertBlockIntoFreeList+0xb0>)
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	601a      	str	r2, [r3, #0]
 8004bde:	e003      	b.n	8004be8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681a      	ldr	r2, [r3, #0]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004be8:	68fa      	ldr	r2, [r7, #12]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	429a      	cmp	r2, r3
 8004bee:	d002      	beq.n	8004bf6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	687a      	ldr	r2, [r7, #4]
 8004bf4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004bf6:	bf00      	nop
 8004bf8:	3714      	adds	r7, #20
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c00:	4770      	bx	lr
 8004c02:	bf00      	nop
 8004c04:	20004128 	.word	0x20004128
 8004c08:	20004130 	.word	0x20004130

08004c0c <__errno>:
 8004c0c:	4b01      	ldr	r3, [pc, #4]	; (8004c14 <__errno+0x8>)
 8004c0e:	6818      	ldr	r0, [r3, #0]
 8004c10:	4770      	bx	lr
 8004c12:	bf00      	nop
 8004c14:	20000010 	.word	0x20000010

08004c18 <std>:
 8004c18:	2300      	movs	r3, #0
 8004c1a:	b510      	push	{r4, lr}
 8004c1c:	4604      	mov	r4, r0
 8004c1e:	e9c0 3300 	strd	r3, r3, [r0]
 8004c22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004c26:	6083      	str	r3, [r0, #8]
 8004c28:	8181      	strh	r1, [r0, #12]
 8004c2a:	6643      	str	r3, [r0, #100]	; 0x64
 8004c2c:	81c2      	strh	r2, [r0, #14]
 8004c2e:	6183      	str	r3, [r0, #24]
 8004c30:	4619      	mov	r1, r3
 8004c32:	2208      	movs	r2, #8
 8004c34:	305c      	adds	r0, #92	; 0x5c
 8004c36:	f000 f91a 	bl	8004e6e <memset>
 8004c3a:	4b05      	ldr	r3, [pc, #20]	; (8004c50 <std+0x38>)
 8004c3c:	6263      	str	r3, [r4, #36]	; 0x24
 8004c3e:	4b05      	ldr	r3, [pc, #20]	; (8004c54 <std+0x3c>)
 8004c40:	62a3      	str	r3, [r4, #40]	; 0x28
 8004c42:	4b05      	ldr	r3, [pc, #20]	; (8004c58 <std+0x40>)
 8004c44:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004c46:	4b05      	ldr	r3, [pc, #20]	; (8004c5c <std+0x44>)
 8004c48:	6224      	str	r4, [r4, #32]
 8004c4a:	6323      	str	r3, [r4, #48]	; 0x30
 8004c4c:	bd10      	pop	{r4, pc}
 8004c4e:	bf00      	nop
 8004c50:	080050f9 	.word	0x080050f9
 8004c54:	0800511b 	.word	0x0800511b
 8004c58:	08005153 	.word	0x08005153
 8004c5c:	08005177 	.word	0x08005177

08004c60 <_cleanup_r>:
 8004c60:	4901      	ldr	r1, [pc, #4]	; (8004c68 <_cleanup_r+0x8>)
 8004c62:	f000 b8af 	b.w	8004dc4 <_fwalk_reent>
 8004c66:	bf00      	nop
 8004c68:	0800530d 	.word	0x0800530d

08004c6c <__sfmoreglue>:
 8004c6c:	b570      	push	{r4, r5, r6, lr}
 8004c6e:	2268      	movs	r2, #104	; 0x68
 8004c70:	1e4d      	subs	r5, r1, #1
 8004c72:	4355      	muls	r5, r2
 8004c74:	460e      	mov	r6, r1
 8004c76:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004c7a:	f000 f921 	bl	8004ec0 <_malloc_r>
 8004c7e:	4604      	mov	r4, r0
 8004c80:	b140      	cbz	r0, 8004c94 <__sfmoreglue+0x28>
 8004c82:	2100      	movs	r1, #0
 8004c84:	e9c0 1600 	strd	r1, r6, [r0]
 8004c88:	300c      	adds	r0, #12
 8004c8a:	60a0      	str	r0, [r4, #8]
 8004c8c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004c90:	f000 f8ed 	bl	8004e6e <memset>
 8004c94:	4620      	mov	r0, r4
 8004c96:	bd70      	pop	{r4, r5, r6, pc}

08004c98 <__sfp_lock_acquire>:
 8004c98:	4801      	ldr	r0, [pc, #4]	; (8004ca0 <__sfp_lock_acquire+0x8>)
 8004c9a:	f000 b8d8 	b.w	8004e4e <__retarget_lock_acquire_recursive>
 8004c9e:	bf00      	nop
 8004ca0:	20004149 	.word	0x20004149

08004ca4 <__sfp_lock_release>:
 8004ca4:	4801      	ldr	r0, [pc, #4]	; (8004cac <__sfp_lock_release+0x8>)
 8004ca6:	f000 b8d3 	b.w	8004e50 <__retarget_lock_release_recursive>
 8004caa:	bf00      	nop
 8004cac:	20004149 	.word	0x20004149

08004cb0 <__sinit_lock_acquire>:
 8004cb0:	4801      	ldr	r0, [pc, #4]	; (8004cb8 <__sinit_lock_acquire+0x8>)
 8004cb2:	f000 b8cc 	b.w	8004e4e <__retarget_lock_acquire_recursive>
 8004cb6:	bf00      	nop
 8004cb8:	2000414a 	.word	0x2000414a

08004cbc <__sinit_lock_release>:
 8004cbc:	4801      	ldr	r0, [pc, #4]	; (8004cc4 <__sinit_lock_release+0x8>)
 8004cbe:	f000 b8c7 	b.w	8004e50 <__retarget_lock_release_recursive>
 8004cc2:	bf00      	nop
 8004cc4:	2000414a 	.word	0x2000414a

08004cc8 <__sinit>:
 8004cc8:	b510      	push	{r4, lr}
 8004cca:	4604      	mov	r4, r0
 8004ccc:	f7ff fff0 	bl	8004cb0 <__sinit_lock_acquire>
 8004cd0:	69a3      	ldr	r3, [r4, #24]
 8004cd2:	b11b      	cbz	r3, 8004cdc <__sinit+0x14>
 8004cd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004cd8:	f7ff bff0 	b.w	8004cbc <__sinit_lock_release>
 8004cdc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004ce0:	6523      	str	r3, [r4, #80]	; 0x50
 8004ce2:	4b13      	ldr	r3, [pc, #76]	; (8004d30 <__sinit+0x68>)
 8004ce4:	4a13      	ldr	r2, [pc, #76]	; (8004d34 <__sinit+0x6c>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	62a2      	str	r2, [r4, #40]	; 0x28
 8004cea:	42a3      	cmp	r3, r4
 8004cec:	bf04      	itt	eq
 8004cee:	2301      	moveq	r3, #1
 8004cf0:	61a3      	streq	r3, [r4, #24]
 8004cf2:	4620      	mov	r0, r4
 8004cf4:	f000 f820 	bl	8004d38 <__sfp>
 8004cf8:	6060      	str	r0, [r4, #4]
 8004cfa:	4620      	mov	r0, r4
 8004cfc:	f000 f81c 	bl	8004d38 <__sfp>
 8004d00:	60a0      	str	r0, [r4, #8]
 8004d02:	4620      	mov	r0, r4
 8004d04:	f000 f818 	bl	8004d38 <__sfp>
 8004d08:	2200      	movs	r2, #0
 8004d0a:	60e0      	str	r0, [r4, #12]
 8004d0c:	2104      	movs	r1, #4
 8004d0e:	6860      	ldr	r0, [r4, #4]
 8004d10:	f7ff ff82 	bl	8004c18 <std>
 8004d14:	68a0      	ldr	r0, [r4, #8]
 8004d16:	2201      	movs	r2, #1
 8004d18:	2109      	movs	r1, #9
 8004d1a:	f7ff ff7d 	bl	8004c18 <std>
 8004d1e:	68e0      	ldr	r0, [r4, #12]
 8004d20:	2202      	movs	r2, #2
 8004d22:	2112      	movs	r1, #18
 8004d24:	f7ff ff78 	bl	8004c18 <std>
 8004d28:	2301      	movs	r3, #1
 8004d2a:	61a3      	str	r3, [r4, #24]
 8004d2c:	e7d2      	b.n	8004cd4 <__sinit+0xc>
 8004d2e:	bf00      	nop
 8004d30:	08005f10 	.word	0x08005f10
 8004d34:	08004c61 	.word	0x08004c61

08004d38 <__sfp>:
 8004d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d3a:	4607      	mov	r7, r0
 8004d3c:	f7ff ffac 	bl	8004c98 <__sfp_lock_acquire>
 8004d40:	4b1e      	ldr	r3, [pc, #120]	; (8004dbc <__sfp+0x84>)
 8004d42:	681e      	ldr	r6, [r3, #0]
 8004d44:	69b3      	ldr	r3, [r6, #24]
 8004d46:	b913      	cbnz	r3, 8004d4e <__sfp+0x16>
 8004d48:	4630      	mov	r0, r6
 8004d4a:	f7ff ffbd 	bl	8004cc8 <__sinit>
 8004d4e:	3648      	adds	r6, #72	; 0x48
 8004d50:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004d54:	3b01      	subs	r3, #1
 8004d56:	d503      	bpl.n	8004d60 <__sfp+0x28>
 8004d58:	6833      	ldr	r3, [r6, #0]
 8004d5a:	b30b      	cbz	r3, 8004da0 <__sfp+0x68>
 8004d5c:	6836      	ldr	r6, [r6, #0]
 8004d5e:	e7f7      	b.n	8004d50 <__sfp+0x18>
 8004d60:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004d64:	b9d5      	cbnz	r5, 8004d9c <__sfp+0x64>
 8004d66:	4b16      	ldr	r3, [pc, #88]	; (8004dc0 <__sfp+0x88>)
 8004d68:	60e3      	str	r3, [r4, #12]
 8004d6a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004d6e:	6665      	str	r5, [r4, #100]	; 0x64
 8004d70:	f000 f86c 	bl	8004e4c <__retarget_lock_init_recursive>
 8004d74:	f7ff ff96 	bl	8004ca4 <__sfp_lock_release>
 8004d78:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004d7c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004d80:	6025      	str	r5, [r4, #0]
 8004d82:	61a5      	str	r5, [r4, #24]
 8004d84:	2208      	movs	r2, #8
 8004d86:	4629      	mov	r1, r5
 8004d88:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004d8c:	f000 f86f 	bl	8004e6e <memset>
 8004d90:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004d94:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004d98:	4620      	mov	r0, r4
 8004d9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d9c:	3468      	adds	r4, #104	; 0x68
 8004d9e:	e7d9      	b.n	8004d54 <__sfp+0x1c>
 8004da0:	2104      	movs	r1, #4
 8004da2:	4638      	mov	r0, r7
 8004da4:	f7ff ff62 	bl	8004c6c <__sfmoreglue>
 8004da8:	4604      	mov	r4, r0
 8004daa:	6030      	str	r0, [r6, #0]
 8004dac:	2800      	cmp	r0, #0
 8004dae:	d1d5      	bne.n	8004d5c <__sfp+0x24>
 8004db0:	f7ff ff78 	bl	8004ca4 <__sfp_lock_release>
 8004db4:	230c      	movs	r3, #12
 8004db6:	603b      	str	r3, [r7, #0]
 8004db8:	e7ee      	b.n	8004d98 <__sfp+0x60>
 8004dba:	bf00      	nop
 8004dbc:	08005f10 	.word	0x08005f10
 8004dc0:	ffff0001 	.word	0xffff0001

08004dc4 <_fwalk_reent>:
 8004dc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004dc8:	4606      	mov	r6, r0
 8004dca:	4688      	mov	r8, r1
 8004dcc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004dd0:	2700      	movs	r7, #0
 8004dd2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004dd6:	f1b9 0901 	subs.w	r9, r9, #1
 8004dda:	d505      	bpl.n	8004de8 <_fwalk_reent+0x24>
 8004ddc:	6824      	ldr	r4, [r4, #0]
 8004dde:	2c00      	cmp	r4, #0
 8004de0:	d1f7      	bne.n	8004dd2 <_fwalk_reent+0xe>
 8004de2:	4638      	mov	r0, r7
 8004de4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004de8:	89ab      	ldrh	r3, [r5, #12]
 8004dea:	2b01      	cmp	r3, #1
 8004dec:	d907      	bls.n	8004dfe <_fwalk_reent+0x3a>
 8004dee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004df2:	3301      	adds	r3, #1
 8004df4:	d003      	beq.n	8004dfe <_fwalk_reent+0x3a>
 8004df6:	4629      	mov	r1, r5
 8004df8:	4630      	mov	r0, r6
 8004dfa:	47c0      	blx	r8
 8004dfc:	4307      	orrs	r7, r0
 8004dfe:	3568      	adds	r5, #104	; 0x68
 8004e00:	e7e9      	b.n	8004dd6 <_fwalk_reent+0x12>
	...

08004e04 <__libc_init_array>:
 8004e04:	b570      	push	{r4, r5, r6, lr}
 8004e06:	4d0d      	ldr	r5, [pc, #52]	; (8004e3c <__libc_init_array+0x38>)
 8004e08:	4c0d      	ldr	r4, [pc, #52]	; (8004e40 <__libc_init_array+0x3c>)
 8004e0a:	1b64      	subs	r4, r4, r5
 8004e0c:	10a4      	asrs	r4, r4, #2
 8004e0e:	2600      	movs	r6, #0
 8004e10:	42a6      	cmp	r6, r4
 8004e12:	d109      	bne.n	8004e28 <__libc_init_array+0x24>
 8004e14:	4d0b      	ldr	r5, [pc, #44]	; (8004e44 <__libc_init_array+0x40>)
 8004e16:	4c0c      	ldr	r4, [pc, #48]	; (8004e48 <__libc_init_array+0x44>)
 8004e18:	f000 ffca 	bl	8005db0 <_init>
 8004e1c:	1b64      	subs	r4, r4, r5
 8004e1e:	10a4      	asrs	r4, r4, #2
 8004e20:	2600      	movs	r6, #0
 8004e22:	42a6      	cmp	r6, r4
 8004e24:	d105      	bne.n	8004e32 <__libc_init_array+0x2e>
 8004e26:	bd70      	pop	{r4, r5, r6, pc}
 8004e28:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e2c:	4798      	blx	r3
 8004e2e:	3601      	adds	r6, #1
 8004e30:	e7ee      	b.n	8004e10 <__libc_init_array+0xc>
 8004e32:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e36:	4798      	blx	r3
 8004e38:	3601      	adds	r6, #1
 8004e3a:	e7f2      	b.n	8004e22 <__libc_init_array+0x1e>
 8004e3c:	08006000 	.word	0x08006000
 8004e40:	08006000 	.word	0x08006000
 8004e44:	08006000 	.word	0x08006000
 8004e48:	08006004 	.word	0x08006004

08004e4c <__retarget_lock_init_recursive>:
 8004e4c:	4770      	bx	lr

08004e4e <__retarget_lock_acquire_recursive>:
 8004e4e:	4770      	bx	lr

08004e50 <__retarget_lock_release_recursive>:
 8004e50:	4770      	bx	lr

08004e52 <memcpy>:
 8004e52:	440a      	add	r2, r1
 8004e54:	4291      	cmp	r1, r2
 8004e56:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004e5a:	d100      	bne.n	8004e5e <memcpy+0xc>
 8004e5c:	4770      	bx	lr
 8004e5e:	b510      	push	{r4, lr}
 8004e60:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e64:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e68:	4291      	cmp	r1, r2
 8004e6a:	d1f9      	bne.n	8004e60 <memcpy+0xe>
 8004e6c:	bd10      	pop	{r4, pc}

08004e6e <memset>:
 8004e6e:	4402      	add	r2, r0
 8004e70:	4603      	mov	r3, r0
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d100      	bne.n	8004e78 <memset+0xa>
 8004e76:	4770      	bx	lr
 8004e78:	f803 1b01 	strb.w	r1, [r3], #1
 8004e7c:	e7f9      	b.n	8004e72 <memset+0x4>
	...

08004e80 <sbrk_aligned>:
 8004e80:	b570      	push	{r4, r5, r6, lr}
 8004e82:	4e0e      	ldr	r6, [pc, #56]	; (8004ebc <sbrk_aligned+0x3c>)
 8004e84:	460c      	mov	r4, r1
 8004e86:	6831      	ldr	r1, [r6, #0]
 8004e88:	4605      	mov	r5, r0
 8004e8a:	b911      	cbnz	r1, 8004e92 <sbrk_aligned+0x12>
 8004e8c:	f000 f924 	bl	80050d8 <_sbrk_r>
 8004e90:	6030      	str	r0, [r6, #0]
 8004e92:	4621      	mov	r1, r4
 8004e94:	4628      	mov	r0, r5
 8004e96:	f000 f91f 	bl	80050d8 <_sbrk_r>
 8004e9a:	1c43      	adds	r3, r0, #1
 8004e9c:	d00a      	beq.n	8004eb4 <sbrk_aligned+0x34>
 8004e9e:	1cc4      	adds	r4, r0, #3
 8004ea0:	f024 0403 	bic.w	r4, r4, #3
 8004ea4:	42a0      	cmp	r0, r4
 8004ea6:	d007      	beq.n	8004eb8 <sbrk_aligned+0x38>
 8004ea8:	1a21      	subs	r1, r4, r0
 8004eaa:	4628      	mov	r0, r5
 8004eac:	f000 f914 	bl	80050d8 <_sbrk_r>
 8004eb0:	3001      	adds	r0, #1
 8004eb2:	d101      	bne.n	8004eb8 <sbrk_aligned+0x38>
 8004eb4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004eb8:	4620      	mov	r0, r4
 8004eba:	bd70      	pop	{r4, r5, r6, pc}
 8004ebc:	20004150 	.word	0x20004150

08004ec0 <_malloc_r>:
 8004ec0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ec4:	1ccd      	adds	r5, r1, #3
 8004ec6:	f025 0503 	bic.w	r5, r5, #3
 8004eca:	3508      	adds	r5, #8
 8004ecc:	2d0c      	cmp	r5, #12
 8004ece:	bf38      	it	cc
 8004ed0:	250c      	movcc	r5, #12
 8004ed2:	2d00      	cmp	r5, #0
 8004ed4:	4607      	mov	r7, r0
 8004ed6:	db01      	blt.n	8004edc <_malloc_r+0x1c>
 8004ed8:	42a9      	cmp	r1, r5
 8004eda:	d905      	bls.n	8004ee8 <_malloc_r+0x28>
 8004edc:	230c      	movs	r3, #12
 8004ede:	603b      	str	r3, [r7, #0]
 8004ee0:	2600      	movs	r6, #0
 8004ee2:	4630      	mov	r0, r6
 8004ee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ee8:	4e2e      	ldr	r6, [pc, #184]	; (8004fa4 <_malloc_r+0xe4>)
 8004eea:	f000 fa77 	bl	80053dc <__malloc_lock>
 8004eee:	6833      	ldr	r3, [r6, #0]
 8004ef0:	461c      	mov	r4, r3
 8004ef2:	bb34      	cbnz	r4, 8004f42 <_malloc_r+0x82>
 8004ef4:	4629      	mov	r1, r5
 8004ef6:	4638      	mov	r0, r7
 8004ef8:	f7ff ffc2 	bl	8004e80 <sbrk_aligned>
 8004efc:	1c43      	adds	r3, r0, #1
 8004efe:	4604      	mov	r4, r0
 8004f00:	d14d      	bne.n	8004f9e <_malloc_r+0xde>
 8004f02:	6834      	ldr	r4, [r6, #0]
 8004f04:	4626      	mov	r6, r4
 8004f06:	2e00      	cmp	r6, #0
 8004f08:	d140      	bne.n	8004f8c <_malloc_r+0xcc>
 8004f0a:	6823      	ldr	r3, [r4, #0]
 8004f0c:	4631      	mov	r1, r6
 8004f0e:	4638      	mov	r0, r7
 8004f10:	eb04 0803 	add.w	r8, r4, r3
 8004f14:	f000 f8e0 	bl	80050d8 <_sbrk_r>
 8004f18:	4580      	cmp	r8, r0
 8004f1a:	d13a      	bne.n	8004f92 <_malloc_r+0xd2>
 8004f1c:	6821      	ldr	r1, [r4, #0]
 8004f1e:	3503      	adds	r5, #3
 8004f20:	1a6d      	subs	r5, r5, r1
 8004f22:	f025 0503 	bic.w	r5, r5, #3
 8004f26:	3508      	adds	r5, #8
 8004f28:	2d0c      	cmp	r5, #12
 8004f2a:	bf38      	it	cc
 8004f2c:	250c      	movcc	r5, #12
 8004f2e:	4629      	mov	r1, r5
 8004f30:	4638      	mov	r0, r7
 8004f32:	f7ff ffa5 	bl	8004e80 <sbrk_aligned>
 8004f36:	3001      	adds	r0, #1
 8004f38:	d02b      	beq.n	8004f92 <_malloc_r+0xd2>
 8004f3a:	6823      	ldr	r3, [r4, #0]
 8004f3c:	442b      	add	r3, r5
 8004f3e:	6023      	str	r3, [r4, #0]
 8004f40:	e00e      	b.n	8004f60 <_malloc_r+0xa0>
 8004f42:	6822      	ldr	r2, [r4, #0]
 8004f44:	1b52      	subs	r2, r2, r5
 8004f46:	d41e      	bmi.n	8004f86 <_malloc_r+0xc6>
 8004f48:	2a0b      	cmp	r2, #11
 8004f4a:	d916      	bls.n	8004f7a <_malloc_r+0xba>
 8004f4c:	1961      	adds	r1, r4, r5
 8004f4e:	42a3      	cmp	r3, r4
 8004f50:	6025      	str	r5, [r4, #0]
 8004f52:	bf18      	it	ne
 8004f54:	6059      	strne	r1, [r3, #4]
 8004f56:	6863      	ldr	r3, [r4, #4]
 8004f58:	bf08      	it	eq
 8004f5a:	6031      	streq	r1, [r6, #0]
 8004f5c:	5162      	str	r2, [r4, r5]
 8004f5e:	604b      	str	r3, [r1, #4]
 8004f60:	4638      	mov	r0, r7
 8004f62:	f104 060b 	add.w	r6, r4, #11
 8004f66:	f000 fa3f 	bl	80053e8 <__malloc_unlock>
 8004f6a:	f026 0607 	bic.w	r6, r6, #7
 8004f6e:	1d23      	adds	r3, r4, #4
 8004f70:	1af2      	subs	r2, r6, r3
 8004f72:	d0b6      	beq.n	8004ee2 <_malloc_r+0x22>
 8004f74:	1b9b      	subs	r3, r3, r6
 8004f76:	50a3      	str	r3, [r4, r2]
 8004f78:	e7b3      	b.n	8004ee2 <_malloc_r+0x22>
 8004f7a:	6862      	ldr	r2, [r4, #4]
 8004f7c:	42a3      	cmp	r3, r4
 8004f7e:	bf0c      	ite	eq
 8004f80:	6032      	streq	r2, [r6, #0]
 8004f82:	605a      	strne	r2, [r3, #4]
 8004f84:	e7ec      	b.n	8004f60 <_malloc_r+0xa0>
 8004f86:	4623      	mov	r3, r4
 8004f88:	6864      	ldr	r4, [r4, #4]
 8004f8a:	e7b2      	b.n	8004ef2 <_malloc_r+0x32>
 8004f8c:	4634      	mov	r4, r6
 8004f8e:	6876      	ldr	r6, [r6, #4]
 8004f90:	e7b9      	b.n	8004f06 <_malloc_r+0x46>
 8004f92:	230c      	movs	r3, #12
 8004f94:	603b      	str	r3, [r7, #0]
 8004f96:	4638      	mov	r0, r7
 8004f98:	f000 fa26 	bl	80053e8 <__malloc_unlock>
 8004f9c:	e7a1      	b.n	8004ee2 <_malloc_r+0x22>
 8004f9e:	6025      	str	r5, [r4, #0]
 8004fa0:	e7de      	b.n	8004f60 <_malloc_r+0xa0>
 8004fa2:	bf00      	nop
 8004fa4:	2000414c 	.word	0x2000414c

08004fa8 <srand>:
 8004fa8:	b538      	push	{r3, r4, r5, lr}
 8004faa:	4b10      	ldr	r3, [pc, #64]	; (8004fec <srand+0x44>)
 8004fac:	681d      	ldr	r5, [r3, #0]
 8004fae:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8004fb0:	4604      	mov	r4, r0
 8004fb2:	b9b3      	cbnz	r3, 8004fe2 <srand+0x3a>
 8004fb4:	2018      	movs	r0, #24
 8004fb6:	f000 fa09 	bl	80053cc <malloc>
 8004fba:	4602      	mov	r2, r0
 8004fbc:	63a8      	str	r0, [r5, #56]	; 0x38
 8004fbe:	b920      	cbnz	r0, 8004fca <srand+0x22>
 8004fc0:	4b0b      	ldr	r3, [pc, #44]	; (8004ff0 <srand+0x48>)
 8004fc2:	480c      	ldr	r0, [pc, #48]	; (8004ff4 <srand+0x4c>)
 8004fc4:	2142      	movs	r1, #66	; 0x42
 8004fc6:	f000 f8ed 	bl	80051a4 <__assert_func>
 8004fca:	490b      	ldr	r1, [pc, #44]	; (8004ff8 <srand+0x50>)
 8004fcc:	4b0b      	ldr	r3, [pc, #44]	; (8004ffc <srand+0x54>)
 8004fce:	e9c0 1300 	strd	r1, r3, [r0]
 8004fd2:	4b0b      	ldr	r3, [pc, #44]	; (8005000 <srand+0x58>)
 8004fd4:	6083      	str	r3, [r0, #8]
 8004fd6:	230b      	movs	r3, #11
 8004fd8:	8183      	strh	r3, [r0, #12]
 8004fda:	2100      	movs	r1, #0
 8004fdc:	2001      	movs	r0, #1
 8004fde:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8004fe2:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	611c      	str	r4, [r3, #16]
 8004fe8:	615a      	str	r2, [r3, #20]
 8004fea:	bd38      	pop	{r3, r4, r5, pc}
 8004fec:	20000010 	.word	0x20000010
 8004ff0:	08005f14 	.word	0x08005f14
 8004ff4:	08005f2b 	.word	0x08005f2b
 8004ff8:	abcd330e 	.word	0xabcd330e
 8004ffc:	e66d1234 	.word	0xe66d1234
 8005000:	0005deec 	.word	0x0005deec

08005004 <cleanup_glue>:
 8005004:	b538      	push	{r3, r4, r5, lr}
 8005006:	460c      	mov	r4, r1
 8005008:	6809      	ldr	r1, [r1, #0]
 800500a:	4605      	mov	r5, r0
 800500c:	b109      	cbz	r1, 8005012 <cleanup_glue+0xe>
 800500e:	f7ff fff9 	bl	8005004 <cleanup_glue>
 8005012:	4621      	mov	r1, r4
 8005014:	4628      	mov	r0, r5
 8005016:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800501a:	f000 b9eb 	b.w	80053f4 <_free_r>
	...

08005020 <_reclaim_reent>:
 8005020:	4b2c      	ldr	r3, [pc, #176]	; (80050d4 <_reclaim_reent+0xb4>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4283      	cmp	r3, r0
 8005026:	b570      	push	{r4, r5, r6, lr}
 8005028:	4604      	mov	r4, r0
 800502a:	d051      	beq.n	80050d0 <_reclaim_reent+0xb0>
 800502c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800502e:	b143      	cbz	r3, 8005042 <_reclaim_reent+0x22>
 8005030:	68db      	ldr	r3, [r3, #12]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d14a      	bne.n	80050cc <_reclaim_reent+0xac>
 8005036:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005038:	6819      	ldr	r1, [r3, #0]
 800503a:	b111      	cbz	r1, 8005042 <_reclaim_reent+0x22>
 800503c:	4620      	mov	r0, r4
 800503e:	f000 f9d9 	bl	80053f4 <_free_r>
 8005042:	6961      	ldr	r1, [r4, #20]
 8005044:	b111      	cbz	r1, 800504c <_reclaim_reent+0x2c>
 8005046:	4620      	mov	r0, r4
 8005048:	f000 f9d4 	bl	80053f4 <_free_r>
 800504c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800504e:	b111      	cbz	r1, 8005056 <_reclaim_reent+0x36>
 8005050:	4620      	mov	r0, r4
 8005052:	f000 f9cf 	bl	80053f4 <_free_r>
 8005056:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005058:	b111      	cbz	r1, 8005060 <_reclaim_reent+0x40>
 800505a:	4620      	mov	r0, r4
 800505c:	f000 f9ca 	bl	80053f4 <_free_r>
 8005060:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8005062:	b111      	cbz	r1, 800506a <_reclaim_reent+0x4a>
 8005064:	4620      	mov	r0, r4
 8005066:	f000 f9c5 	bl	80053f4 <_free_r>
 800506a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800506c:	b111      	cbz	r1, 8005074 <_reclaim_reent+0x54>
 800506e:	4620      	mov	r0, r4
 8005070:	f000 f9c0 	bl	80053f4 <_free_r>
 8005074:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8005076:	b111      	cbz	r1, 800507e <_reclaim_reent+0x5e>
 8005078:	4620      	mov	r0, r4
 800507a:	f000 f9bb 	bl	80053f4 <_free_r>
 800507e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8005080:	b111      	cbz	r1, 8005088 <_reclaim_reent+0x68>
 8005082:	4620      	mov	r0, r4
 8005084:	f000 f9b6 	bl	80053f4 <_free_r>
 8005088:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800508a:	b111      	cbz	r1, 8005092 <_reclaim_reent+0x72>
 800508c:	4620      	mov	r0, r4
 800508e:	f000 f9b1 	bl	80053f4 <_free_r>
 8005092:	69a3      	ldr	r3, [r4, #24]
 8005094:	b1e3      	cbz	r3, 80050d0 <_reclaim_reent+0xb0>
 8005096:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005098:	4620      	mov	r0, r4
 800509a:	4798      	blx	r3
 800509c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800509e:	b1b9      	cbz	r1, 80050d0 <_reclaim_reent+0xb0>
 80050a0:	4620      	mov	r0, r4
 80050a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80050a6:	f7ff bfad 	b.w	8005004 <cleanup_glue>
 80050aa:	5949      	ldr	r1, [r1, r5]
 80050ac:	b941      	cbnz	r1, 80050c0 <_reclaim_reent+0xa0>
 80050ae:	3504      	adds	r5, #4
 80050b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80050b2:	2d80      	cmp	r5, #128	; 0x80
 80050b4:	68d9      	ldr	r1, [r3, #12]
 80050b6:	d1f8      	bne.n	80050aa <_reclaim_reent+0x8a>
 80050b8:	4620      	mov	r0, r4
 80050ba:	f000 f99b 	bl	80053f4 <_free_r>
 80050be:	e7ba      	b.n	8005036 <_reclaim_reent+0x16>
 80050c0:	680e      	ldr	r6, [r1, #0]
 80050c2:	4620      	mov	r0, r4
 80050c4:	f000 f996 	bl	80053f4 <_free_r>
 80050c8:	4631      	mov	r1, r6
 80050ca:	e7ef      	b.n	80050ac <_reclaim_reent+0x8c>
 80050cc:	2500      	movs	r5, #0
 80050ce:	e7ef      	b.n	80050b0 <_reclaim_reent+0x90>
 80050d0:	bd70      	pop	{r4, r5, r6, pc}
 80050d2:	bf00      	nop
 80050d4:	20000010 	.word	0x20000010

080050d8 <_sbrk_r>:
 80050d8:	b538      	push	{r3, r4, r5, lr}
 80050da:	4d06      	ldr	r5, [pc, #24]	; (80050f4 <_sbrk_r+0x1c>)
 80050dc:	2300      	movs	r3, #0
 80050de:	4604      	mov	r4, r0
 80050e0:	4608      	mov	r0, r1
 80050e2:	602b      	str	r3, [r5, #0]
 80050e4:	f7fb fdb4 	bl	8000c50 <_sbrk>
 80050e8:	1c43      	adds	r3, r0, #1
 80050ea:	d102      	bne.n	80050f2 <_sbrk_r+0x1a>
 80050ec:	682b      	ldr	r3, [r5, #0]
 80050ee:	b103      	cbz	r3, 80050f2 <_sbrk_r+0x1a>
 80050f0:	6023      	str	r3, [r4, #0]
 80050f2:	bd38      	pop	{r3, r4, r5, pc}
 80050f4:	20004154 	.word	0x20004154

080050f8 <__sread>:
 80050f8:	b510      	push	{r4, lr}
 80050fa:	460c      	mov	r4, r1
 80050fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005100:	f000 fcb2 	bl	8005a68 <_read_r>
 8005104:	2800      	cmp	r0, #0
 8005106:	bfab      	itete	ge
 8005108:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800510a:	89a3      	ldrhlt	r3, [r4, #12]
 800510c:	181b      	addge	r3, r3, r0
 800510e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005112:	bfac      	ite	ge
 8005114:	6563      	strge	r3, [r4, #84]	; 0x54
 8005116:	81a3      	strhlt	r3, [r4, #12]
 8005118:	bd10      	pop	{r4, pc}

0800511a <__swrite>:
 800511a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800511e:	461f      	mov	r7, r3
 8005120:	898b      	ldrh	r3, [r1, #12]
 8005122:	05db      	lsls	r3, r3, #23
 8005124:	4605      	mov	r5, r0
 8005126:	460c      	mov	r4, r1
 8005128:	4616      	mov	r6, r2
 800512a:	d505      	bpl.n	8005138 <__swrite+0x1e>
 800512c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005130:	2302      	movs	r3, #2
 8005132:	2200      	movs	r2, #0
 8005134:	f000 f938 	bl	80053a8 <_lseek_r>
 8005138:	89a3      	ldrh	r3, [r4, #12]
 800513a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800513e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005142:	81a3      	strh	r3, [r4, #12]
 8005144:	4632      	mov	r2, r6
 8005146:	463b      	mov	r3, r7
 8005148:	4628      	mov	r0, r5
 800514a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800514e:	f000 b817 	b.w	8005180 <_write_r>

08005152 <__sseek>:
 8005152:	b510      	push	{r4, lr}
 8005154:	460c      	mov	r4, r1
 8005156:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800515a:	f000 f925 	bl	80053a8 <_lseek_r>
 800515e:	1c43      	adds	r3, r0, #1
 8005160:	89a3      	ldrh	r3, [r4, #12]
 8005162:	bf15      	itete	ne
 8005164:	6560      	strne	r0, [r4, #84]	; 0x54
 8005166:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800516a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800516e:	81a3      	strheq	r3, [r4, #12]
 8005170:	bf18      	it	ne
 8005172:	81a3      	strhne	r3, [r4, #12]
 8005174:	bd10      	pop	{r4, pc}

08005176 <__sclose>:
 8005176:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800517a:	f000 b831 	b.w	80051e0 <_close_r>
	...

08005180 <_write_r>:
 8005180:	b538      	push	{r3, r4, r5, lr}
 8005182:	4d07      	ldr	r5, [pc, #28]	; (80051a0 <_write_r+0x20>)
 8005184:	4604      	mov	r4, r0
 8005186:	4608      	mov	r0, r1
 8005188:	4611      	mov	r1, r2
 800518a:	2200      	movs	r2, #0
 800518c:	602a      	str	r2, [r5, #0]
 800518e:	461a      	mov	r2, r3
 8005190:	f7fb fd0d 	bl	8000bae <_write>
 8005194:	1c43      	adds	r3, r0, #1
 8005196:	d102      	bne.n	800519e <_write_r+0x1e>
 8005198:	682b      	ldr	r3, [r5, #0]
 800519a:	b103      	cbz	r3, 800519e <_write_r+0x1e>
 800519c:	6023      	str	r3, [r4, #0]
 800519e:	bd38      	pop	{r3, r4, r5, pc}
 80051a0:	20004154 	.word	0x20004154

080051a4 <__assert_func>:
 80051a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80051a6:	4614      	mov	r4, r2
 80051a8:	461a      	mov	r2, r3
 80051aa:	4b09      	ldr	r3, [pc, #36]	; (80051d0 <__assert_func+0x2c>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4605      	mov	r5, r0
 80051b0:	68d8      	ldr	r0, [r3, #12]
 80051b2:	b14c      	cbz	r4, 80051c8 <__assert_func+0x24>
 80051b4:	4b07      	ldr	r3, [pc, #28]	; (80051d4 <__assert_func+0x30>)
 80051b6:	9100      	str	r1, [sp, #0]
 80051b8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80051bc:	4906      	ldr	r1, [pc, #24]	; (80051d8 <__assert_func+0x34>)
 80051be:	462b      	mov	r3, r5
 80051c0:	f000 f8e0 	bl	8005384 <fiprintf>
 80051c4:	f000 fd22 	bl	8005c0c <abort>
 80051c8:	4b04      	ldr	r3, [pc, #16]	; (80051dc <__assert_func+0x38>)
 80051ca:	461c      	mov	r4, r3
 80051cc:	e7f3      	b.n	80051b6 <__assert_func+0x12>
 80051ce:	bf00      	nop
 80051d0:	20000010 	.word	0x20000010
 80051d4:	08005f86 	.word	0x08005f86
 80051d8:	08005f93 	.word	0x08005f93
 80051dc:	08005fc1 	.word	0x08005fc1

080051e0 <_close_r>:
 80051e0:	b538      	push	{r3, r4, r5, lr}
 80051e2:	4d06      	ldr	r5, [pc, #24]	; (80051fc <_close_r+0x1c>)
 80051e4:	2300      	movs	r3, #0
 80051e6:	4604      	mov	r4, r0
 80051e8:	4608      	mov	r0, r1
 80051ea:	602b      	str	r3, [r5, #0]
 80051ec:	f7fb fcfb 	bl	8000be6 <_close>
 80051f0:	1c43      	adds	r3, r0, #1
 80051f2:	d102      	bne.n	80051fa <_close_r+0x1a>
 80051f4:	682b      	ldr	r3, [r5, #0]
 80051f6:	b103      	cbz	r3, 80051fa <_close_r+0x1a>
 80051f8:	6023      	str	r3, [r4, #0]
 80051fa:	bd38      	pop	{r3, r4, r5, pc}
 80051fc:	20004154 	.word	0x20004154

08005200 <__sflush_r>:
 8005200:	898a      	ldrh	r2, [r1, #12]
 8005202:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005206:	4605      	mov	r5, r0
 8005208:	0710      	lsls	r0, r2, #28
 800520a:	460c      	mov	r4, r1
 800520c:	d458      	bmi.n	80052c0 <__sflush_r+0xc0>
 800520e:	684b      	ldr	r3, [r1, #4]
 8005210:	2b00      	cmp	r3, #0
 8005212:	dc05      	bgt.n	8005220 <__sflush_r+0x20>
 8005214:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005216:	2b00      	cmp	r3, #0
 8005218:	dc02      	bgt.n	8005220 <__sflush_r+0x20>
 800521a:	2000      	movs	r0, #0
 800521c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005220:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005222:	2e00      	cmp	r6, #0
 8005224:	d0f9      	beq.n	800521a <__sflush_r+0x1a>
 8005226:	2300      	movs	r3, #0
 8005228:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800522c:	682f      	ldr	r7, [r5, #0]
 800522e:	602b      	str	r3, [r5, #0]
 8005230:	d032      	beq.n	8005298 <__sflush_r+0x98>
 8005232:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005234:	89a3      	ldrh	r3, [r4, #12]
 8005236:	075a      	lsls	r2, r3, #29
 8005238:	d505      	bpl.n	8005246 <__sflush_r+0x46>
 800523a:	6863      	ldr	r3, [r4, #4]
 800523c:	1ac0      	subs	r0, r0, r3
 800523e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005240:	b10b      	cbz	r3, 8005246 <__sflush_r+0x46>
 8005242:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005244:	1ac0      	subs	r0, r0, r3
 8005246:	2300      	movs	r3, #0
 8005248:	4602      	mov	r2, r0
 800524a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800524c:	6a21      	ldr	r1, [r4, #32]
 800524e:	4628      	mov	r0, r5
 8005250:	47b0      	blx	r6
 8005252:	1c43      	adds	r3, r0, #1
 8005254:	89a3      	ldrh	r3, [r4, #12]
 8005256:	d106      	bne.n	8005266 <__sflush_r+0x66>
 8005258:	6829      	ldr	r1, [r5, #0]
 800525a:	291d      	cmp	r1, #29
 800525c:	d82c      	bhi.n	80052b8 <__sflush_r+0xb8>
 800525e:	4a2a      	ldr	r2, [pc, #168]	; (8005308 <__sflush_r+0x108>)
 8005260:	40ca      	lsrs	r2, r1
 8005262:	07d6      	lsls	r6, r2, #31
 8005264:	d528      	bpl.n	80052b8 <__sflush_r+0xb8>
 8005266:	2200      	movs	r2, #0
 8005268:	6062      	str	r2, [r4, #4]
 800526a:	04d9      	lsls	r1, r3, #19
 800526c:	6922      	ldr	r2, [r4, #16]
 800526e:	6022      	str	r2, [r4, #0]
 8005270:	d504      	bpl.n	800527c <__sflush_r+0x7c>
 8005272:	1c42      	adds	r2, r0, #1
 8005274:	d101      	bne.n	800527a <__sflush_r+0x7a>
 8005276:	682b      	ldr	r3, [r5, #0]
 8005278:	b903      	cbnz	r3, 800527c <__sflush_r+0x7c>
 800527a:	6560      	str	r0, [r4, #84]	; 0x54
 800527c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800527e:	602f      	str	r7, [r5, #0]
 8005280:	2900      	cmp	r1, #0
 8005282:	d0ca      	beq.n	800521a <__sflush_r+0x1a>
 8005284:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005288:	4299      	cmp	r1, r3
 800528a:	d002      	beq.n	8005292 <__sflush_r+0x92>
 800528c:	4628      	mov	r0, r5
 800528e:	f000 f8b1 	bl	80053f4 <_free_r>
 8005292:	2000      	movs	r0, #0
 8005294:	6360      	str	r0, [r4, #52]	; 0x34
 8005296:	e7c1      	b.n	800521c <__sflush_r+0x1c>
 8005298:	6a21      	ldr	r1, [r4, #32]
 800529a:	2301      	movs	r3, #1
 800529c:	4628      	mov	r0, r5
 800529e:	47b0      	blx	r6
 80052a0:	1c41      	adds	r1, r0, #1
 80052a2:	d1c7      	bne.n	8005234 <__sflush_r+0x34>
 80052a4:	682b      	ldr	r3, [r5, #0]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d0c4      	beq.n	8005234 <__sflush_r+0x34>
 80052aa:	2b1d      	cmp	r3, #29
 80052ac:	d001      	beq.n	80052b2 <__sflush_r+0xb2>
 80052ae:	2b16      	cmp	r3, #22
 80052b0:	d101      	bne.n	80052b6 <__sflush_r+0xb6>
 80052b2:	602f      	str	r7, [r5, #0]
 80052b4:	e7b1      	b.n	800521a <__sflush_r+0x1a>
 80052b6:	89a3      	ldrh	r3, [r4, #12]
 80052b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80052bc:	81a3      	strh	r3, [r4, #12]
 80052be:	e7ad      	b.n	800521c <__sflush_r+0x1c>
 80052c0:	690f      	ldr	r7, [r1, #16]
 80052c2:	2f00      	cmp	r7, #0
 80052c4:	d0a9      	beq.n	800521a <__sflush_r+0x1a>
 80052c6:	0793      	lsls	r3, r2, #30
 80052c8:	680e      	ldr	r6, [r1, #0]
 80052ca:	bf08      	it	eq
 80052cc:	694b      	ldreq	r3, [r1, #20]
 80052ce:	600f      	str	r7, [r1, #0]
 80052d0:	bf18      	it	ne
 80052d2:	2300      	movne	r3, #0
 80052d4:	eba6 0807 	sub.w	r8, r6, r7
 80052d8:	608b      	str	r3, [r1, #8]
 80052da:	f1b8 0f00 	cmp.w	r8, #0
 80052de:	dd9c      	ble.n	800521a <__sflush_r+0x1a>
 80052e0:	6a21      	ldr	r1, [r4, #32]
 80052e2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80052e4:	4643      	mov	r3, r8
 80052e6:	463a      	mov	r2, r7
 80052e8:	4628      	mov	r0, r5
 80052ea:	47b0      	blx	r6
 80052ec:	2800      	cmp	r0, #0
 80052ee:	dc06      	bgt.n	80052fe <__sflush_r+0xfe>
 80052f0:	89a3      	ldrh	r3, [r4, #12]
 80052f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80052f6:	81a3      	strh	r3, [r4, #12]
 80052f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80052fc:	e78e      	b.n	800521c <__sflush_r+0x1c>
 80052fe:	4407      	add	r7, r0
 8005300:	eba8 0800 	sub.w	r8, r8, r0
 8005304:	e7e9      	b.n	80052da <__sflush_r+0xda>
 8005306:	bf00      	nop
 8005308:	20400001 	.word	0x20400001

0800530c <_fflush_r>:
 800530c:	b538      	push	{r3, r4, r5, lr}
 800530e:	690b      	ldr	r3, [r1, #16]
 8005310:	4605      	mov	r5, r0
 8005312:	460c      	mov	r4, r1
 8005314:	b913      	cbnz	r3, 800531c <_fflush_r+0x10>
 8005316:	2500      	movs	r5, #0
 8005318:	4628      	mov	r0, r5
 800531a:	bd38      	pop	{r3, r4, r5, pc}
 800531c:	b118      	cbz	r0, 8005326 <_fflush_r+0x1a>
 800531e:	6983      	ldr	r3, [r0, #24]
 8005320:	b90b      	cbnz	r3, 8005326 <_fflush_r+0x1a>
 8005322:	f7ff fcd1 	bl	8004cc8 <__sinit>
 8005326:	4b14      	ldr	r3, [pc, #80]	; (8005378 <_fflush_r+0x6c>)
 8005328:	429c      	cmp	r4, r3
 800532a:	d11b      	bne.n	8005364 <_fflush_r+0x58>
 800532c:	686c      	ldr	r4, [r5, #4]
 800532e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d0ef      	beq.n	8005316 <_fflush_r+0xa>
 8005336:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005338:	07d0      	lsls	r0, r2, #31
 800533a:	d404      	bmi.n	8005346 <_fflush_r+0x3a>
 800533c:	0599      	lsls	r1, r3, #22
 800533e:	d402      	bmi.n	8005346 <_fflush_r+0x3a>
 8005340:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005342:	f7ff fd84 	bl	8004e4e <__retarget_lock_acquire_recursive>
 8005346:	4628      	mov	r0, r5
 8005348:	4621      	mov	r1, r4
 800534a:	f7ff ff59 	bl	8005200 <__sflush_r>
 800534e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005350:	07da      	lsls	r2, r3, #31
 8005352:	4605      	mov	r5, r0
 8005354:	d4e0      	bmi.n	8005318 <_fflush_r+0xc>
 8005356:	89a3      	ldrh	r3, [r4, #12]
 8005358:	059b      	lsls	r3, r3, #22
 800535a:	d4dd      	bmi.n	8005318 <_fflush_r+0xc>
 800535c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800535e:	f7ff fd77 	bl	8004e50 <__retarget_lock_release_recursive>
 8005362:	e7d9      	b.n	8005318 <_fflush_r+0xc>
 8005364:	4b05      	ldr	r3, [pc, #20]	; (800537c <_fflush_r+0x70>)
 8005366:	429c      	cmp	r4, r3
 8005368:	d101      	bne.n	800536e <_fflush_r+0x62>
 800536a:	68ac      	ldr	r4, [r5, #8]
 800536c:	e7df      	b.n	800532e <_fflush_r+0x22>
 800536e:	4b04      	ldr	r3, [pc, #16]	; (8005380 <_fflush_r+0x74>)
 8005370:	429c      	cmp	r4, r3
 8005372:	bf08      	it	eq
 8005374:	68ec      	ldreq	r4, [r5, #12]
 8005376:	e7da      	b.n	800532e <_fflush_r+0x22>
 8005378:	08005ed0 	.word	0x08005ed0
 800537c:	08005ef0 	.word	0x08005ef0
 8005380:	08005eb0 	.word	0x08005eb0

08005384 <fiprintf>:
 8005384:	b40e      	push	{r1, r2, r3}
 8005386:	b503      	push	{r0, r1, lr}
 8005388:	4601      	mov	r1, r0
 800538a:	ab03      	add	r3, sp, #12
 800538c:	4805      	ldr	r0, [pc, #20]	; (80053a4 <fiprintf+0x20>)
 800538e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005392:	6800      	ldr	r0, [r0, #0]
 8005394:	9301      	str	r3, [sp, #4]
 8005396:	f000 f8a3 	bl	80054e0 <_vfiprintf_r>
 800539a:	b002      	add	sp, #8
 800539c:	f85d eb04 	ldr.w	lr, [sp], #4
 80053a0:	b003      	add	sp, #12
 80053a2:	4770      	bx	lr
 80053a4:	20000010 	.word	0x20000010

080053a8 <_lseek_r>:
 80053a8:	b538      	push	{r3, r4, r5, lr}
 80053aa:	4d07      	ldr	r5, [pc, #28]	; (80053c8 <_lseek_r+0x20>)
 80053ac:	4604      	mov	r4, r0
 80053ae:	4608      	mov	r0, r1
 80053b0:	4611      	mov	r1, r2
 80053b2:	2200      	movs	r2, #0
 80053b4:	602a      	str	r2, [r5, #0]
 80053b6:	461a      	mov	r2, r3
 80053b8:	f7fb fc3c 	bl	8000c34 <_lseek>
 80053bc:	1c43      	adds	r3, r0, #1
 80053be:	d102      	bne.n	80053c6 <_lseek_r+0x1e>
 80053c0:	682b      	ldr	r3, [r5, #0]
 80053c2:	b103      	cbz	r3, 80053c6 <_lseek_r+0x1e>
 80053c4:	6023      	str	r3, [r4, #0]
 80053c6:	bd38      	pop	{r3, r4, r5, pc}
 80053c8:	20004154 	.word	0x20004154

080053cc <malloc>:
 80053cc:	4b02      	ldr	r3, [pc, #8]	; (80053d8 <malloc+0xc>)
 80053ce:	4601      	mov	r1, r0
 80053d0:	6818      	ldr	r0, [r3, #0]
 80053d2:	f7ff bd75 	b.w	8004ec0 <_malloc_r>
 80053d6:	bf00      	nop
 80053d8:	20000010 	.word	0x20000010

080053dc <__malloc_lock>:
 80053dc:	4801      	ldr	r0, [pc, #4]	; (80053e4 <__malloc_lock+0x8>)
 80053de:	f7ff bd36 	b.w	8004e4e <__retarget_lock_acquire_recursive>
 80053e2:	bf00      	nop
 80053e4:	20004148 	.word	0x20004148

080053e8 <__malloc_unlock>:
 80053e8:	4801      	ldr	r0, [pc, #4]	; (80053f0 <__malloc_unlock+0x8>)
 80053ea:	f7ff bd31 	b.w	8004e50 <__retarget_lock_release_recursive>
 80053ee:	bf00      	nop
 80053f0:	20004148 	.word	0x20004148

080053f4 <_free_r>:
 80053f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80053f6:	2900      	cmp	r1, #0
 80053f8:	d044      	beq.n	8005484 <_free_r+0x90>
 80053fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80053fe:	9001      	str	r0, [sp, #4]
 8005400:	2b00      	cmp	r3, #0
 8005402:	f1a1 0404 	sub.w	r4, r1, #4
 8005406:	bfb8      	it	lt
 8005408:	18e4      	addlt	r4, r4, r3
 800540a:	f7ff ffe7 	bl	80053dc <__malloc_lock>
 800540e:	4a1e      	ldr	r2, [pc, #120]	; (8005488 <_free_r+0x94>)
 8005410:	9801      	ldr	r0, [sp, #4]
 8005412:	6813      	ldr	r3, [r2, #0]
 8005414:	b933      	cbnz	r3, 8005424 <_free_r+0x30>
 8005416:	6063      	str	r3, [r4, #4]
 8005418:	6014      	str	r4, [r2, #0]
 800541a:	b003      	add	sp, #12
 800541c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005420:	f7ff bfe2 	b.w	80053e8 <__malloc_unlock>
 8005424:	42a3      	cmp	r3, r4
 8005426:	d908      	bls.n	800543a <_free_r+0x46>
 8005428:	6825      	ldr	r5, [r4, #0]
 800542a:	1961      	adds	r1, r4, r5
 800542c:	428b      	cmp	r3, r1
 800542e:	bf01      	itttt	eq
 8005430:	6819      	ldreq	r1, [r3, #0]
 8005432:	685b      	ldreq	r3, [r3, #4]
 8005434:	1949      	addeq	r1, r1, r5
 8005436:	6021      	streq	r1, [r4, #0]
 8005438:	e7ed      	b.n	8005416 <_free_r+0x22>
 800543a:	461a      	mov	r2, r3
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	b10b      	cbz	r3, 8005444 <_free_r+0x50>
 8005440:	42a3      	cmp	r3, r4
 8005442:	d9fa      	bls.n	800543a <_free_r+0x46>
 8005444:	6811      	ldr	r1, [r2, #0]
 8005446:	1855      	adds	r5, r2, r1
 8005448:	42a5      	cmp	r5, r4
 800544a:	d10b      	bne.n	8005464 <_free_r+0x70>
 800544c:	6824      	ldr	r4, [r4, #0]
 800544e:	4421      	add	r1, r4
 8005450:	1854      	adds	r4, r2, r1
 8005452:	42a3      	cmp	r3, r4
 8005454:	6011      	str	r1, [r2, #0]
 8005456:	d1e0      	bne.n	800541a <_free_r+0x26>
 8005458:	681c      	ldr	r4, [r3, #0]
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	6053      	str	r3, [r2, #4]
 800545e:	4421      	add	r1, r4
 8005460:	6011      	str	r1, [r2, #0]
 8005462:	e7da      	b.n	800541a <_free_r+0x26>
 8005464:	d902      	bls.n	800546c <_free_r+0x78>
 8005466:	230c      	movs	r3, #12
 8005468:	6003      	str	r3, [r0, #0]
 800546a:	e7d6      	b.n	800541a <_free_r+0x26>
 800546c:	6825      	ldr	r5, [r4, #0]
 800546e:	1961      	adds	r1, r4, r5
 8005470:	428b      	cmp	r3, r1
 8005472:	bf04      	itt	eq
 8005474:	6819      	ldreq	r1, [r3, #0]
 8005476:	685b      	ldreq	r3, [r3, #4]
 8005478:	6063      	str	r3, [r4, #4]
 800547a:	bf04      	itt	eq
 800547c:	1949      	addeq	r1, r1, r5
 800547e:	6021      	streq	r1, [r4, #0]
 8005480:	6054      	str	r4, [r2, #4]
 8005482:	e7ca      	b.n	800541a <_free_r+0x26>
 8005484:	b003      	add	sp, #12
 8005486:	bd30      	pop	{r4, r5, pc}
 8005488:	2000414c 	.word	0x2000414c

0800548c <__sfputc_r>:
 800548c:	6893      	ldr	r3, [r2, #8]
 800548e:	3b01      	subs	r3, #1
 8005490:	2b00      	cmp	r3, #0
 8005492:	b410      	push	{r4}
 8005494:	6093      	str	r3, [r2, #8]
 8005496:	da08      	bge.n	80054aa <__sfputc_r+0x1e>
 8005498:	6994      	ldr	r4, [r2, #24]
 800549a:	42a3      	cmp	r3, r4
 800549c:	db01      	blt.n	80054a2 <__sfputc_r+0x16>
 800549e:	290a      	cmp	r1, #10
 80054a0:	d103      	bne.n	80054aa <__sfputc_r+0x1e>
 80054a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80054a6:	f000 baf1 	b.w	8005a8c <__swbuf_r>
 80054aa:	6813      	ldr	r3, [r2, #0]
 80054ac:	1c58      	adds	r0, r3, #1
 80054ae:	6010      	str	r0, [r2, #0]
 80054b0:	7019      	strb	r1, [r3, #0]
 80054b2:	4608      	mov	r0, r1
 80054b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80054b8:	4770      	bx	lr

080054ba <__sfputs_r>:
 80054ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054bc:	4606      	mov	r6, r0
 80054be:	460f      	mov	r7, r1
 80054c0:	4614      	mov	r4, r2
 80054c2:	18d5      	adds	r5, r2, r3
 80054c4:	42ac      	cmp	r4, r5
 80054c6:	d101      	bne.n	80054cc <__sfputs_r+0x12>
 80054c8:	2000      	movs	r0, #0
 80054ca:	e007      	b.n	80054dc <__sfputs_r+0x22>
 80054cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80054d0:	463a      	mov	r2, r7
 80054d2:	4630      	mov	r0, r6
 80054d4:	f7ff ffda 	bl	800548c <__sfputc_r>
 80054d8:	1c43      	adds	r3, r0, #1
 80054da:	d1f3      	bne.n	80054c4 <__sfputs_r+0xa>
 80054dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080054e0 <_vfiprintf_r>:
 80054e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054e4:	460d      	mov	r5, r1
 80054e6:	b09d      	sub	sp, #116	; 0x74
 80054e8:	4614      	mov	r4, r2
 80054ea:	4698      	mov	r8, r3
 80054ec:	4606      	mov	r6, r0
 80054ee:	b118      	cbz	r0, 80054f8 <_vfiprintf_r+0x18>
 80054f0:	6983      	ldr	r3, [r0, #24]
 80054f2:	b90b      	cbnz	r3, 80054f8 <_vfiprintf_r+0x18>
 80054f4:	f7ff fbe8 	bl	8004cc8 <__sinit>
 80054f8:	4b89      	ldr	r3, [pc, #548]	; (8005720 <_vfiprintf_r+0x240>)
 80054fa:	429d      	cmp	r5, r3
 80054fc:	d11b      	bne.n	8005536 <_vfiprintf_r+0x56>
 80054fe:	6875      	ldr	r5, [r6, #4]
 8005500:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005502:	07d9      	lsls	r1, r3, #31
 8005504:	d405      	bmi.n	8005512 <_vfiprintf_r+0x32>
 8005506:	89ab      	ldrh	r3, [r5, #12]
 8005508:	059a      	lsls	r2, r3, #22
 800550a:	d402      	bmi.n	8005512 <_vfiprintf_r+0x32>
 800550c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800550e:	f7ff fc9e 	bl	8004e4e <__retarget_lock_acquire_recursive>
 8005512:	89ab      	ldrh	r3, [r5, #12]
 8005514:	071b      	lsls	r3, r3, #28
 8005516:	d501      	bpl.n	800551c <_vfiprintf_r+0x3c>
 8005518:	692b      	ldr	r3, [r5, #16]
 800551a:	b9eb      	cbnz	r3, 8005558 <_vfiprintf_r+0x78>
 800551c:	4629      	mov	r1, r5
 800551e:	4630      	mov	r0, r6
 8005520:	f000 fb06 	bl	8005b30 <__swsetup_r>
 8005524:	b1c0      	cbz	r0, 8005558 <_vfiprintf_r+0x78>
 8005526:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005528:	07dc      	lsls	r4, r3, #31
 800552a:	d50e      	bpl.n	800554a <_vfiprintf_r+0x6a>
 800552c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005530:	b01d      	add	sp, #116	; 0x74
 8005532:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005536:	4b7b      	ldr	r3, [pc, #492]	; (8005724 <_vfiprintf_r+0x244>)
 8005538:	429d      	cmp	r5, r3
 800553a:	d101      	bne.n	8005540 <_vfiprintf_r+0x60>
 800553c:	68b5      	ldr	r5, [r6, #8]
 800553e:	e7df      	b.n	8005500 <_vfiprintf_r+0x20>
 8005540:	4b79      	ldr	r3, [pc, #484]	; (8005728 <_vfiprintf_r+0x248>)
 8005542:	429d      	cmp	r5, r3
 8005544:	bf08      	it	eq
 8005546:	68f5      	ldreq	r5, [r6, #12]
 8005548:	e7da      	b.n	8005500 <_vfiprintf_r+0x20>
 800554a:	89ab      	ldrh	r3, [r5, #12]
 800554c:	0598      	lsls	r0, r3, #22
 800554e:	d4ed      	bmi.n	800552c <_vfiprintf_r+0x4c>
 8005550:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005552:	f7ff fc7d 	bl	8004e50 <__retarget_lock_release_recursive>
 8005556:	e7e9      	b.n	800552c <_vfiprintf_r+0x4c>
 8005558:	2300      	movs	r3, #0
 800555a:	9309      	str	r3, [sp, #36]	; 0x24
 800555c:	2320      	movs	r3, #32
 800555e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005562:	f8cd 800c 	str.w	r8, [sp, #12]
 8005566:	2330      	movs	r3, #48	; 0x30
 8005568:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800572c <_vfiprintf_r+0x24c>
 800556c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005570:	f04f 0901 	mov.w	r9, #1
 8005574:	4623      	mov	r3, r4
 8005576:	469a      	mov	sl, r3
 8005578:	f813 2b01 	ldrb.w	r2, [r3], #1
 800557c:	b10a      	cbz	r2, 8005582 <_vfiprintf_r+0xa2>
 800557e:	2a25      	cmp	r2, #37	; 0x25
 8005580:	d1f9      	bne.n	8005576 <_vfiprintf_r+0x96>
 8005582:	ebba 0b04 	subs.w	fp, sl, r4
 8005586:	d00b      	beq.n	80055a0 <_vfiprintf_r+0xc0>
 8005588:	465b      	mov	r3, fp
 800558a:	4622      	mov	r2, r4
 800558c:	4629      	mov	r1, r5
 800558e:	4630      	mov	r0, r6
 8005590:	f7ff ff93 	bl	80054ba <__sfputs_r>
 8005594:	3001      	adds	r0, #1
 8005596:	f000 80aa 	beq.w	80056ee <_vfiprintf_r+0x20e>
 800559a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800559c:	445a      	add	r2, fp
 800559e:	9209      	str	r2, [sp, #36]	; 0x24
 80055a0:	f89a 3000 	ldrb.w	r3, [sl]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	f000 80a2 	beq.w	80056ee <_vfiprintf_r+0x20e>
 80055aa:	2300      	movs	r3, #0
 80055ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80055b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80055b4:	f10a 0a01 	add.w	sl, sl, #1
 80055b8:	9304      	str	r3, [sp, #16]
 80055ba:	9307      	str	r3, [sp, #28]
 80055bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80055c0:	931a      	str	r3, [sp, #104]	; 0x68
 80055c2:	4654      	mov	r4, sl
 80055c4:	2205      	movs	r2, #5
 80055c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055ca:	4858      	ldr	r0, [pc, #352]	; (800572c <_vfiprintf_r+0x24c>)
 80055cc:	f7fa fe20 	bl	8000210 <memchr>
 80055d0:	9a04      	ldr	r2, [sp, #16]
 80055d2:	b9d8      	cbnz	r0, 800560c <_vfiprintf_r+0x12c>
 80055d4:	06d1      	lsls	r1, r2, #27
 80055d6:	bf44      	itt	mi
 80055d8:	2320      	movmi	r3, #32
 80055da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80055de:	0713      	lsls	r3, r2, #28
 80055e0:	bf44      	itt	mi
 80055e2:	232b      	movmi	r3, #43	; 0x2b
 80055e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80055e8:	f89a 3000 	ldrb.w	r3, [sl]
 80055ec:	2b2a      	cmp	r3, #42	; 0x2a
 80055ee:	d015      	beq.n	800561c <_vfiprintf_r+0x13c>
 80055f0:	9a07      	ldr	r2, [sp, #28]
 80055f2:	4654      	mov	r4, sl
 80055f4:	2000      	movs	r0, #0
 80055f6:	f04f 0c0a 	mov.w	ip, #10
 80055fa:	4621      	mov	r1, r4
 80055fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005600:	3b30      	subs	r3, #48	; 0x30
 8005602:	2b09      	cmp	r3, #9
 8005604:	d94e      	bls.n	80056a4 <_vfiprintf_r+0x1c4>
 8005606:	b1b0      	cbz	r0, 8005636 <_vfiprintf_r+0x156>
 8005608:	9207      	str	r2, [sp, #28]
 800560a:	e014      	b.n	8005636 <_vfiprintf_r+0x156>
 800560c:	eba0 0308 	sub.w	r3, r0, r8
 8005610:	fa09 f303 	lsl.w	r3, r9, r3
 8005614:	4313      	orrs	r3, r2
 8005616:	9304      	str	r3, [sp, #16]
 8005618:	46a2      	mov	sl, r4
 800561a:	e7d2      	b.n	80055c2 <_vfiprintf_r+0xe2>
 800561c:	9b03      	ldr	r3, [sp, #12]
 800561e:	1d19      	adds	r1, r3, #4
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	9103      	str	r1, [sp, #12]
 8005624:	2b00      	cmp	r3, #0
 8005626:	bfbb      	ittet	lt
 8005628:	425b      	neglt	r3, r3
 800562a:	f042 0202 	orrlt.w	r2, r2, #2
 800562e:	9307      	strge	r3, [sp, #28]
 8005630:	9307      	strlt	r3, [sp, #28]
 8005632:	bfb8      	it	lt
 8005634:	9204      	strlt	r2, [sp, #16]
 8005636:	7823      	ldrb	r3, [r4, #0]
 8005638:	2b2e      	cmp	r3, #46	; 0x2e
 800563a:	d10c      	bne.n	8005656 <_vfiprintf_r+0x176>
 800563c:	7863      	ldrb	r3, [r4, #1]
 800563e:	2b2a      	cmp	r3, #42	; 0x2a
 8005640:	d135      	bne.n	80056ae <_vfiprintf_r+0x1ce>
 8005642:	9b03      	ldr	r3, [sp, #12]
 8005644:	1d1a      	adds	r2, r3, #4
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	9203      	str	r2, [sp, #12]
 800564a:	2b00      	cmp	r3, #0
 800564c:	bfb8      	it	lt
 800564e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005652:	3402      	adds	r4, #2
 8005654:	9305      	str	r3, [sp, #20]
 8005656:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800573c <_vfiprintf_r+0x25c>
 800565a:	7821      	ldrb	r1, [r4, #0]
 800565c:	2203      	movs	r2, #3
 800565e:	4650      	mov	r0, sl
 8005660:	f7fa fdd6 	bl	8000210 <memchr>
 8005664:	b140      	cbz	r0, 8005678 <_vfiprintf_r+0x198>
 8005666:	2340      	movs	r3, #64	; 0x40
 8005668:	eba0 000a 	sub.w	r0, r0, sl
 800566c:	fa03 f000 	lsl.w	r0, r3, r0
 8005670:	9b04      	ldr	r3, [sp, #16]
 8005672:	4303      	orrs	r3, r0
 8005674:	3401      	adds	r4, #1
 8005676:	9304      	str	r3, [sp, #16]
 8005678:	f814 1b01 	ldrb.w	r1, [r4], #1
 800567c:	482c      	ldr	r0, [pc, #176]	; (8005730 <_vfiprintf_r+0x250>)
 800567e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005682:	2206      	movs	r2, #6
 8005684:	f7fa fdc4 	bl	8000210 <memchr>
 8005688:	2800      	cmp	r0, #0
 800568a:	d03f      	beq.n	800570c <_vfiprintf_r+0x22c>
 800568c:	4b29      	ldr	r3, [pc, #164]	; (8005734 <_vfiprintf_r+0x254>)
 800568e:	bb1b      	cbnz	r3, 80056d8 <_vfiprintf_r+0x1f8>
 8005690:	9b03      	ldr	r3, [sp, #12]
 8005692:	3307      	adds	r3, #7
 8005694:	f023 0307 	bic.w	r3, r3, #7
 8005698:	3308      	adds	r3, #8
 800569a:	9303      	str	r3, [sp, #12]
 800569c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800569e:	443b      	add	r3, r7
 80056a0:	9309      	str	r3, [sp, #36]	; 0x24
 80056a2:	e767      	b.n	8005574 <_vfiprintf_r+0x94>
 80056a4:	fb0c 3202 	mla	r2, ip, r2, r3
 80056a8:	460c      	mov	r4, r1
 80056aa:	2001      	movs	r0, #1
 80056ac:	e7a5      	b.n	80055fa <_vfiprintf_r+0x11a>
 80056ae:	2300      	movs	r3, #0
 80056b0:	3401      	adds	r4, #1
 80056b2:	9305      	str	r3, [sp, #20]
 80056b4:	4619      	mov	r1, r3
 80056b6:	f04f 0c0a 	mov.w	ip, #10
 80056ba:	4620      	mov	r0, r4
 80056bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80056c0:	3a30      	subs	r2, #48	; 0x30
 80056c2:	2a09      	cmp	r2, #9
 80056c4:	d903      	bls.n	80056ce <_vfiprintf_r+0x1ee>
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d0c5      	beq.n	8005656 <_vfiprintf_r+0x176>
 80056ca:	9105      	str	r1, [sp, #20]
 80056cc:	e7c3      	b.n	8005656 <_vfiprintf_r+0x176>
 80056ce:	fb0c 2101 	mla	r1, ip, r1, r2
 80056d2:	4604      	mov	r4, r0
 80056d4:	2301      	movs	r3, #1
 80056d6:	e7f0      	b.n	80056ba <_vfiprintf_r+0x1da>
 80056d8:	ab03      	add	r3, sp, #12
 80056da:	9300      	str	r3, [sp, #0]
 80056dc:	462a      	mov	r2, r5
 80056de:	4b16      	ldr	r3, [pc, #88]	; (8005738 <_vfiprintf_r+0x258>)
 80056e0:	a904      	add	r1, sp, #16
 80056e2:	4630      	mov	r0, r6
 80056e4:	f3af 8000 	nop.w
 80056e8:	4607      	mov	r7, r0
 80056ea:	1c78      	adds	r0, r7, #1
 80056ec:	d1d6      	bne.n	800569c <_vfiprintf_r+0x1bc>
 80056ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80056f0:	07d9      	lsls	r1, r3, #31
 80056f2:	d405      	bmi.n	8005700 <_vfiprintf_r+0x220>
 80056f4:	89ab      	ldrh	r3, [r5, #12]
 80056f6:	059a      	lsls	r2, r3, #22
 80056f8:	d402      	bmi.n	8005700 <_vfiprintf_r+0x220>
 80056fa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80056fc:	f7ff fba8 	bl	8004e50 <__retarget_lock_release_recursive>
 8005700:	89ab      	ldrh	r3, [r5, #12]
 8005702:	065b      	lsls	r3, r3, #25
 8005704:	f53f af12 	bmi.w	800552c <_vfiprintf_r+0x4c>
 8005708:	9809      	ldr	r0, [sp, #36]	; 0x24
 800570a:	e711      	b.n	8005530 <_vfiprintf_r+0x50>
 800570c:	ab03      	add	r3, sp, #12
 800570e:	9300      	str	r3, [sp, #0]
 8005710:	462a      	mov	r2, r5
 8005712:	4b09      	ldr	r3, [pc, #36]	; (8005738 <_vfiprintf_r+0x258>)
 8005714:	a904      	add	r1, sp, #16
 8005716:	4630      	mov	r0, r6
 8005718:	f000 f880 	bl	800581c <_printf_i>
 800571c:	e7e4      	b.n	80056e8 <_vfiprintf_r+0x208>
 800571e:	bf00      	nop
 8005720:	08005ed0 	.word	0x08005ed0
 8005724:	08005ef0 	.word	0x08005ef0
 8005728:	08005eb0 	.word	0x08005eb0
 800572c:	08005fc2 	.word	0x08005fc2
 8005730:	08005fcc 	.word	0x08005fcc
 8005734:	00000000 	.word	0x00000000
 8005738:	080054bb 	.word	0x080054bb
 800573c:	08005fc8 	.word	0x08005fc8

08005740 <_printf_common>:
 8005740:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005744:	4616      	mov	r6, r2
 8005746:	4699      	mov	r9, r3
 8005748:	688a      	ldr	r2, [r1, #8]
 800574a:	690b      	ldr	r3, [r1, #16]
 800574c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005750:	4293      	cmp	r3, r2
 8005752:	bfb8      	it	lt
 8005754:	4613      	movlt	r3, r2
 8005756:	6033      	str	r3, [r6, #0]
 8005758:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800575c:	4607      	mov	r7, r0
 800575e:	460c      	mov	r4, r1
 8005760:	b10a      	cbz	r2, 8005766 <_printf_common+0x26>
 8005762:	3301      	adds	r3, #1
 8005764:	6033      	str	r3, [r6, #0]
 8005766:	6823      	ldr	r3, [r4, #0]
 8005768:	0699      	lsls	r1, r3, #26
 800576a:	bf42      	ittt	mi
 800576c:	6833      	ldrmi	r3, [r6, #0]
 800576e:	3302      	addmi	r3, #2
 8005770:	6033      	strmi	r3, [r6, #0]
 8005772:	6825      	ldr	r5, [r4, #0]
 8005774:	f015 0506 	ands.w	r5, r5, #6
 8005778:	d106      	bne.n	8005788 <_printf_common+0x48>
 800577a:	f104 0a19 	add.w	sl, r4, #25
 800577e:	68e3      	ldr	r3, [r4, #12]
 8005780:	6832      	ldr	r2, [r6, #0]
 8005782:	1a9b      	subs	r3, r3, r2
 8005784:	42ab      	cmp	r3, r5
 8005786:	dc26      	bgt.n	80057d6 <_printf_common+0x96>
 8005788:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800578c:	1e13      	subs	r3, r2, #0
 800578e:	6822      	ldr	r2, [r4, #0]
 8005790:	bf18      	it	ne
 8005792:	2301      	movne	r3, #1
 8005794:	0692      	lsls	r2, r2, #26
 8005796:	d42b      	bmi.n	80057f0 <_printf_common+0xb0>
 8005798:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800579c:	4649      	mov	r1, r9
 800579e:	4638      	mov	r0, r7
 80057a0:	47c0      	blx	r8
 80057a2:	3001      	adds	r0, #1
 80057a4:	d01e      	beq.n	80057e4 <_printf_common+0xa4>
 80057a6:	6823      	ldr	r3, [r4, #0]
 80057a8:	68e5      	ldr	r5, [r4, #12]
 80057aa:	6832      	ldr	r2, [r6, #0]
 80057ac:	f003 0306 	and.w	r3, r3, #6
 80057b0:	2b04      	cmp	r3, #4
 80057b2:	bf08      	it	eq
 80057b4:	1aad      	subeq	r5, r5, r2
 80057b6:	68a3      	ldr	r3, [r4, #8]
 80057b8:	6922      	ldr	r2, [r4, #16]
 80057ba:	bf0c      	ite	eq
 80057bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80057c0:	2500      	movne	r5, #0
 80057c2:	4293      	cmp	r3, r2
 80057c4:	bfc4      	itt	gt
 80057c6:	1a9b      	subgt	r3, r3, r2
 80057c8:	18ed      	addgt	r5, r5, r3
 80057ca:	2600      	movs	r6, #0
 80057cc:	341a      	adds	r4, #26
 80057ce:	42b5      	cmp	r5, r6
 80057d0:	d11a      	bne.n	8005808 <_printf_common+0xc8>
 80057d2:	2000      	movs	r0, #0
 80057d4:	e008      	b.n	80057e8 <_printf_common+0xa8>
 80057d6:	2301      	movs	r3, #1
 80057d8:	4652      	mov	r2, sl
 80057da:	4649      	mov	r1, r9
 80057dc:	4638      	mov	r0, r7
 80057de:	47c0      	blx	r8
 80057e0:	3001      	adds	r0, #1
 80057e2:	d103      	bne.n	80057ec <_printf_common+0xac>
 80057e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80057e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057ec:	3501      	adds	r5, #1
 80057ee:	e7c6      	b.n	800577e <_printf_common+0x3e>
 80057f0:	18e1      	adds	r1, r4, r3
 80057f2:	1c5a      	adds	r2, r3, #1
 80057f4:	2030      	movs	r0, #48	; 0x30
 80057f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80057fa:	4422      	add	r2, r4
 80057fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005800:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005804:	3302      	adds	r3, #2
 8005806:	e7c7      	b.n	8005798 <_printf_common+0x58>
 8005808:	2301      	movs	r3, #1
 800580a:	4622      	mov	r2, r4
 800580c:	4649      	mov	r1, r9
 800580e:	4638      	mov	r0, r7
 8005810:	47c0      	blx	r8
 8005812:	3001      	adds	r0, #1
 8005814:	d0e6      	beq.n	80057e4 <_printf_common+0xa4>
 8005816:	3601      	adds	r6, #1
 8005818:	e7d9      	b.n	80057ce <_printf_common+0x8e>
	...

0800581c <_printf_i>:
 800581c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005820:	7e0f      	ldrb	r7, [r1, #24]
 8005822:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005824:	2f78      	cmp	r7, #120	; 0x78
 8005826:	4691      	mov	r9, r2
 8005828:	4680      	mov	r8, r0
 800582a:	460c      	mov	r4, r1
 800582c:	469a      	mov	sl, r3
 800582e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005832:	d807      	bhi.n	8005844 <_printf_i+0x28>
 8005834:	2f62      	cmp	r7, #98	; 0x62
 8005836:	d80a      	bhi.n	800584e <_printf_i+0x32>
 8005838:	2f00      	cmp	r7, #0
 800583a:	f000 80d8 	beq.w	80059ee <_printf_i+0x1d2>
 800583e:	2f58      	cmp	r7, #88	; 0x58
 8005840:	f000 80a3 	beq.w	800598a <_printf_i+0x16e>
 8005844:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005848:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800584c:	e03a      	b.n	80058c4 <_printf_i+0xa8>
 800584e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005852:	2b15      	cmp	r3, #21
 8005854:	d8f6      	bhi.n	8005844 <_printf_i+0x28>
 8005856:	a101      	add	r1, pc, #4	; (adr r1, 800585c <_printf_i+0x40>)
 8005858:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800585c:	080058b5 	.word	0x080058b5
 8005860:	080058c9 	.word	0x080058c9
 8005864:	08005845 	.word	0x08005845
 8005868:	08005845 	.word	0x08005845
 800586c:	08005845 	.word	0x08005845
 8005870:	08005845 	.word	0x08005845
 8005874:	080058c9 	.word	0x080058c9
 8005878:	08005845 	.word	0x08005845
 800587c:	08005845 	.word	0x08005845
 8005880:	08005845 	.word	0x08005845
 8005884:	08005845 	.word	0x08005845
 8005888:	080059d5 	.word	0x080059d5
 800588c:	080058f9 	.word	0x080058f9
 8005890:	080059b7 	.word	0x080059b7
 8005894:	08005845 	.word	0x08005845
 8005898:	08005845 	.word	0x08005845
 800589c:	080059f7 	.word	0x080059f7
 80058a0:	08005845 	.word	0x08005845
 80058a4:	080058f9 	.word	0x080058f9
 80058a8:	08005845 	.word	0x08005845
 80058ac:	08005845 	.word	0x08005845
 80058b0:	080059bf 	.word	0x080059bf
 80058b4:	682b      	ldr	r3, [r5, #0]
 80058b6:	1d1a      	adds	r2, r3, #4
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	602a      	str	r2, [r5, #0]
 80058bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80058c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80058c4:	2301      	movs	r3, #1
 80058c6:	e0a3      	b.n	8005a10 <_printf_i+0x1f4>
 80058c8:	6820      	ldr	r0, [r4, #0]
 80058ca:	6829      	ldr	r1, [r5, #0]
 80058cc:	0606      	lsls	r6, r0, #24
 80058ce:	f101 0304 	add.w	r3, r1, #4
 80058d2:	d50a      	bpl.n	80058ea <_printf_i+0xce>
 80058d4:	680e      	ldr	r6, [r1, #0]
 80058d6:	602b      	str	r3, [r5, #0]
 80058d8:	2e00      	cmp	r6, #0
 80058da:	da03      	bge.n	80058e4 <_printf_i+0xc8>
 80058dc:	232d      	movs	r3, #45	; 0x2d
 80058de:	4276      	negs	r6, r6
 80058e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80058e4:	485e      	ldr	r0, [pc, #376]	; (8005a60 <_printf_i+0x244>)
 80058e6:	230a      	movs	r3, #10
 80058e8:	e019      	b.n	800591e <_printf_i+0x102>
 80058ea:	680e      	ldr	r6, [r1, #0]
 80058ec:	602b      	str	r3, [r5, #0]
 80058ee:	f010 0f40 	tst.w	r0, #64	; 0x40
 80058f2:	bf18      	it	ne
 80058f4:	b236      	sxthne	r6, r6
 80058f6:	e7ef      	b.n	80058d8 <_printf_i+0xbc>
 80058f8:	682b      	ldr	r3, [r5, #0]
 80058fa:	6820      	ldr	r0, [r4, #0]
 80058fc:	1d19      	adds	r1, r3, #4
 80058fe:	6029      	str	r1, [r5, #0]
 8005900:	0601      	lsls	r1, r0, #24
 8005902:	d501      	bpl.n	8005908 <_printf_i+0xec>
 8005904:	681e      	ldr	r6, [r3, #0]
 8005906:	e002      	b.n	800590e <_printf_i+0xf2>
 8005908:	0646      	lsls	r6, r0, #25
 800590a:	d5fb      	bpl.n	8005904 <_printf_i+0xe8>
 800590c:	881e      	ldrh	r6, [r3, #0]
 800590e:	4854      	ldr	r0, [pc, #336]	; (8005a60 <_printf_i+0x244>)
 8005910:	2f6f      	cmp	r7, #111	; 0x6f
 8005912:	bf0c      	ite	eq
 8005914:	2308      	moveq	r3, #8
 8005916:	230a      	movne	r3, #10
 8005918:	2100      	movs	r1, #0
 800591a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800591e:	6865      	ldr	r5, [r4, #4]
 8005920:	60a5      	str	r5, [r4, #8]
 8005922:	2d00      	cmp	r5, #0
 8005924:	bfa2      	ittt	ge
 8005926:	6821      	ldrge	r1, [r4, #0]
 8005928:	f021 0104 	bicge.w	r1, r1, #4
 800592c:	6021      	strge	r1, [r4, #0]
 800592e:	b90e      	cbnz	r6, 8005934 <_printf_i+0x118>
 8005930:	2d00      	cmp	r5, #0
 8005932:	d04d      	beq.n	80059d0 <_printf_i+0x1b4>
 8005934:	4615      	mov	r5, r2
 8005936:	fbb6 f1f3 	udiv	r1, r6, r3
 800593a:	fb03 6711 	mls	r7, r3, r1, r6
 800593e:	5dc7      	ldrb	r7, [r0, r7]
 8005940:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005944:	4637      	mov	r7, r6
 8005946:	42bb      	cmp	r3, r7
 8005948:	460e      	mov	r6, r1
 800594a:	d9f4      	bls.n	8005936 <_printf_i+0x11a>
 800594c:	2b08      	cmp	r3, #8
 800594e:	d10b      	bne.n	8005968 <_printf_i+0x14c>
 8005950:	6823      	ldr	r3, [r4, #0]
 8005952:	07de      	lsls	r6, r3, #31
 8005954:	d508      	bpl.n	8005968 <_printf_i+0x14c>
 8005956:	6923      	ldr	r3, [r4, #16]
 8005958:	6861      	ldr	r1, [r4, #4]
 800595a:	4299      	cmp	r1, r3
 800595c:	bfde      	ittt	le
 800595e:	2330      	movle	r3, #48	; 0x30
 8005960:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005964:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005968:	1b52      	subs	r2, r2, r5
 800596a:	6122      	str	r2, [r4, #16]
 800596c:	f8cd a000 	str.w	sl, [sp]
 8005970:	464b      	mov	r3, r9
 8005972:	aa03      	add	r2, sp, #12
 8005974:	4621      	mov	r1, r4
 8005976:	4640      	mov	r0, r8
 8005978:	f7ff fee2 	bl	8005740 <_printf_common>
 800597c:	3001      	adds	r0, #1
 800597e:	d14c      	bne.n	8005a1a <_printf_i+0x1fe>
 8005980:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005984:	b004      	add	sp, #16
 8005986:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800598a:	4835      	ldr	r0, [pc, #212]	; (8005a60 <_printf_i+0x244>)
 800598c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005990:	6829      	ldr	r1, [r5, #0]
 8005992:	6823      	ldr	r3, [r4, #0]
 8005994:	f851 6b04 	ldr.w	r6, [r1], #4
 8005998:	6029      	str	r1, [r5, #0]
 800599a:	061d      	lsls	r5, r3, #24
 800599c:	d514      	bpl.n	80059c8 <_printf_i+0x1ac>
 800599e:	07df      	lsls	r7, r3, #31
 80059a0:	bf44      	itt	mi
 80059a2:	f043 0320 	orrmi.w	r3, r3, #32
 80059a6:	6023      	strmi	r3, [r4, #0]
 80059a8:	b91e      	cbnz	r6, 80059b2 <_printf_i+0x196>
 80059aa:	6823      	ldr	r3, [r4, #0]
 80059ac:	f023 0320 	bic.w	r3, r3, #32
 80059b0:	6023      	str	r3, [r4, #0]
 80059b2:	2310      	movs	r3, #16
 80059b4:	e7b0      	b.n	8005918 <_printf_i+0xfc>
 80059b6:	6823      	ldr	r3, [r4, #0]
 80059b8:	f043 0320 	orr.w	r3, r3, #32
 80059bc:	6023      	str	r3, [r4, #0]
 80059be:	2378      	movs	r3, #120	; 0x78
 80059c0:	4828      	ldr	r0, [pc, #160]	; (8005a64 <_printf_i+0x248>)
 80059c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80059c6:	e7e3      	b.n	8005990 <_printf_i+0x174>
 80059c8:	0659      	lsls	r1, r3, #25
 80059ca:	bf48      	it	mi
 80059cc:	b2b6      	uxthmi	r6, r6
 80059ce:	e7e6      	b.n	800599e <_printf_i+0x182>
 80059d0:	4615      	mov	r5, r2
 80059d2:	e7bb      	b.n	800594c <_printf_i+0x130>
 80059d4:	682b      	ldr	r3, [r5, #0]
 80059d6:	6826      	ldr	r6, [r4, #0]
 80059d8:	6961      	ldr	r1, [r4, #20]
 80059da:	1d18      	adds	r0, r3, #4
 80059dc:	6028      	str	r0, [r5, #0]
 80059de:	0635      	lsls	r5, r6, #24
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	d501      	bpl.n	80059e8 <_printf_i+0x1cc>
 80059e4:	6019      	str	r1, [r3, #0]
 80059e6:	e002      	b.n	80059ee <_printf_i+0x1d2>
 80059e8:	0670      	lsls	r0, r6, #25
 80059ea:	d5fb      	bpl.n	80059e4 <_printf_i+0x1c8>
 80059ec:	8019      	strh	r1, [r3, #0]
 80059ee:	2300      	movs	r3, #0
 80059f0:	6123      	str	r3, [r4, #16]
 80059f2:	4615      	mov	r5, r2
 80059f4:	e7ba      	b.n	800596c <_printf_i+0x150>
 80059f6:	682b      	ldr	r3, [r5, #0]
 80059f8:	1d1a      	adds	r2, r3, #4
 80059fa:	602a      	str	r2, [r5, #0]
 80059fc:	681d      	ldr	r5, [r3, #0]
 80059fe:	6862      	ldr	r2, [r4, #4]
 8005a00:	2100      	movs	r1, #0
 8005a02:	4628      	mov	r0, r5
 8005a04:	f7fa fc04 	bl	8000210 <memchr>
 8005a08:	b108      	cbz	r0, 8005a0e <_printf_i+0x1f2>
 8005a0a:	1b40      	subs	r0, r0, r5
 8005a0c:	6060      	str	r0, [r4, #4]
 8005a0e:	6863      	ldr	r3, [r4, #4]
 8005a10:	6123      	str	r3, [r4, #16]
 8005a12:	2300      	movs	r3, #0
 8005a14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a18:	e7a8      	b.n	800596c <_printf_i+0x150>
 8005a1a:	6923      	ldr	r3, [r4, #16]
 8005a1c:	462a      	mov	r2, r5
 8005a1e:	4649      	mov	r1, r9
 8005a20:	4640      	mov	r0, r8
 8005a22:	47d0      	blx	sl
 8005a24:	3001      	adds	r0, #1
 8005a26:	d0ab      	beq.n	8005980 <_printf_i+0x164>
 8005a28:	6823      	ldr	r3, [r4, #0]
 8005a2a:	079b      	lsls	r3, r3, #30
 8005a2c:	d413      	bmi.n	8005a56 <_printf_i+0x23a>
 8005a2e:	68e0      	ldr	r0, [r4, #12]
 8005a30:	9b03      	ldr	r3, [sp, #12]
 8005a32:	4298      	cmp	r0, r3
 8005a34:	bfb8      	it	lt
 8005a36:	4618      	movlt	r0, r3
 8005a38:	e7a4      	b.n	8005984 <_printf_i+0x168>
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	4632      	mov	r2, r6
 8005a3e:	4649      	mov	r1, r9
 8005a40:	4640      	mov	r0, r8
 8005a42:	47d0      	blx	sl
 8005a44:	3001      	adds	r0, #1
 8005a46:	d09b      	beq.n	8005980 <_printf_i+0x164>
 8005a48:	3501      	adds	r5, #1
 8005a4a:	68e3      	ldr	r3, [r4, #12]
 8005a4c:	9903      	ldr	r1, [sp, #12]
 8005a4e:	1a5b      	subs	r3, r3, r1
 8005a50:	42ab      	cmp	r3, r5
 8005a52:	dcf2      	bgt.n	8005a3a <_printf_i+0x21e>
 8005a54:	e7eb      	b.n	8005a2e <_printf_i+0x212>
 8005a56:	2500      	movs	r5, #0
 8005a58:	f104 0619 	add.w	r6, r4, #25
 8005a5c:	e7f5      	b.n	8005a4a <_printf_i+0x22e>
 8005a5e:	bf00      	nop
 8005a60:	08005fd3 	.word	0x08005fd3
 8005a64:	08005fe4 	.word	0x08005fe4

08005a68 <_read_r>:
 8005a68:	b538      	push	{r3, r4, r5, lr}
 8005a6a:	4d07      	ldr	r5, [pc, #28]	; (8005a88 <_read_r+0x20>)
 8005a6c:	4604      	mov	r4, r0
 8005a6e:	4608      	mov	r0, r1
 8005a70:	4611      	mov	r1, r2
 8005a72:	2200      	movs	r2, #0
 8005a74:	602a      	str	r2, [r5, #0]
 8005a76:	461a      	mov	r2, r3
 8005a78:	f7fb f87c 	bl	8000b74 <_read>
 8005a7c:	1c43      	adds	r3, r0, #1
 8005a7e:	d102      	bne.n	8005a86 <_read_r+0x1e>
 8005a80:	682b      	ldr	r3, [r5, #0]
 8005a82:	b103      	cbz	r3, 8005a86 <_read_r+0x1e>
 8005a84:	6023      	str	r3, [r4, #0]
 8005a86:	bd38      	pop	{r3, r4, r5, pc}
 8005a88:	20004154 	.word	0x20004154

08005a8c <__swbuf_r>:
 8005a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a8e:	460e      	mov	r6, r1
 8005a90:	4614      	mov	r4, r2
 8005a92:	4605      	mov	r5, r0
 8005a94:	b118      	cbz	r0, 8005a9e <__swbuf_r+0x12>
 8005a96:	6983      	ldr	r3, [r0, #24]
 8005a98:	b90b      	cbnz	r3, 8005a9e <__swbuf_r+0x12>
 8005a9a:	f7ff f915 	bl	8004cc8 <__sinit>
 8005a9e:	4b21      	ldr	r3, [pc, #132]	; (8005b24 <__swbuf_r+0x98>)
 8005aa0:	429c      	cmp	r4, r3
 8005aa2:	d12b      	bne.n	8005afc <__swbuf_r+0x70>
 8005aa4:	686c      	ldr	r4, [r5, #4]
 8005aa6:	69a3      	ldr	r3, [r4, #24]
 8005aa8:	60a3      	str	r3, [r4, #8]
 8005aaa:	89a3      	ldrh	r3, [r4, #12]
 8005aac:	071a      	lsls	r2, r3, #28
 8005aae:	d52f      	bpl.n	8005b10 <__swbuf_r+0x84>
 8005ab0:	6923      	ldr	r3, [r4, #16]
 8005ab2:	b36b      	cbz	r3, 8005b10 <__swbuf_r+0x84>
 8005ab4:	6923      	ldr	r3, [r4, #16]
 8005ab6:	6820      	ldr	r0, [r4, #0]
 8005ab8:	1ac0      	subs	r0, r0, r3
 8005aba:	6963      	ldr	r3, [r4, #20]
 8005abc:	b2f6      	uxtb	r6, r6
 8005abe:	4283      	cmp	r3, r0
 8005ac0:	4637      	mov	r7, r6
 8005ac2:	dc04      	bgt.n	8005ace <__swbuf_r+0x42>
 8005ac4:	4621      	mov	r1, r4
 8005ac6:	4628      	mov	r0, r5
 8005ac8:	f7ff fc20 	bl	800530c <_fflush_r>
 8005acc:	bb30      	cbnz	r0, 8005b1c <__swbuf_r+0x90>
 8005ace:	68a3      	ldr	r3, [r4, #8]
 8005ad0:	3b01      	subs	r3, #1
 8005ad2:	60a3      	str	r3, [r4, #8]
 8005ad4:	6823      	ldr	r3, [r4, #0]
 8005ad6:	1c5a      	adds	r2, r3, #1
 8005ad8:	6022      	str	r2, [r4, #0]
 8005ada:	701e      	strb	r6, [r3, #0]
 8005adc:	6963      	ldr	r3, [r4, #20]
 8005ade:	3001      	adds	r0, #1
 8005ae0:	4283      	cmp	r3, r0
 8005ae2:	d004      	beq.n	8005aee <__swbuf_r+0x62>
 8005ae4:	89a3      	ldrh	r3, [r4, #12]
 8005ae6:	07db      	lsls	r3, r3, #31
 8005ae8:	d506      	bpl.n	8005af8 <__swbuf_r+0x6c>
 8005aea:	2e0a      	cmp	r6, #10
 8005aec:	d104      	bne.n	8005af8 <__swbuf_r+0x6c>
 8005aee:	4621      	mov	r1, r4
 8005af0:	4628      	mov	r0, r5
 8005af2:	f7ff fc0b 	bl	800530c <_fflush_r>
 8005af6:	b988      	cbnz	r0, 8005b1c <__swbuf_r+0x90>
 8005af8:	4638      	mov	r0, r7
 8005afa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005afc:	4b0a      	ldr	r3, [pc, #40]	; (8005b28 <__swbuf_r+0x9c>)
 8005afe:	429c      	cmp	r4, r3
 8005b00:	d101      	bne.n	8005b06 <__swbuf_r+0x7a>
 8005b02:	68ac      	ldr	r4, [r5, #8]
 8005b04:	e7cf      	b.n	8005aa6 <__swbuf_r+0x1a>
 8005b06:	4b09      	ldr	r3, [pc, #36]	; (8005b2c <__swbuf_r+0xa0>)
 8005b08:	429c      	cmp	r4, r3
 8005b0a:	bf08      	it	eq
 8005b0c:	68ec      	ldreq	r4, [r5, #12]
 8005b0e:	e7ca      	b.n	8005aa6 <__swbuf_r+0x1a>
 8005b10:	4621      	mov	r1, r4
 8005b12:	4628      	mov	r0, r5
 8005b14:	f000 f80c 	bl	8005b30 <__swsetup_r>
 8005b18:	2800      	cmp	r0, #0
 8005b1a:	d0cb      	beq.n	8005ab4 <__swbuf_r+0x28>
 8005b1c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005b20:	e7ea      	b.n	8005af8 <__swbuf_r+0x6c>
 8005b22:	bf00      	nop
 8005b24:	08005ed0 	.word	0x08005ed0
 8005b28:	08005ef0 	.word	0x08005ef0
 8005b2c:	08005eb0 	.word	0x08005eb0

08005b30 <__swsetup_r>:
 8005b30:	4b32      	ldr	r3, [pc, #200]	; (8005bfc <__swsetup_r+0xcc>)
 8005b32:	b570      	push	{r4, r5, r6, lr}
 8005b34:	681d      	ldr	r5, [r3, #0]
 8005b36:	4606      	mov	r6, r0
 8005b38:	460c      	mov	r4, r1
 8005b3a:	b125      	cbz	r5, 8005b46 <__swsetup_r+0x16>
 8005b3c:	69ab      	ldr	r3, [r5, #24]
 8005b3e:	b913      	cbnz	r3, 8005b46 <__swsetup_r+0x16>
 8005b40:	4628      	mov	r0, r5
 8005b42:	f7ff f8c1 	bl	8004cc8 <__sinit>
 8005b46:	4b2e      	ldr	r3, [pc, #184]	; (8005c00 <__swsetup_r+0xd0>)
 8005b48:	429c      	cmp	r4, r3
 8005b4a:	d10f      	bne.n	8005b6c <__swsetup_r+0x3c>
 8005b4c:	686c      	ldr	r4, [r5, #4]
 8005b4e:	89a3      	ldrh	r3, [r4, #12]
 8005b50:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005b54:	0719      	lsls	r1, r3, #28
 8005b56:	d42c      	bmi.n	8005bb2 <__swsetup_r+0x82>
 8005b58:	06dd      	lsls	r5, r3, #27
 8005b5a:	d411      	bmi.n	8005b80 <__swsetup_r+0x50>
 8005b5c:	2309      	movs	r3, #9
 8005b5e:	6033      	str	r3, [r6, #0]
 8005b60:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005b64:	81a3      	strh	r3, [r4, #12]
 8005b66:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005b6a:	e03e      	b.n	8005bea <__swsetup_r+0xba>
 8005b6c:	4b25      	ldr	r3, [pc, #148]	; (8005c04 <__swsetup_r+0xd4>)
 8005b6e:	429c      	cmp	r4, r3
 8005b70:	d101      	bne.n	8005b76 <__swsetup_r+0x46>
 8005b72:	68ac      	ldr	r4, [r5, #8]
 8005b74:	e7eb      	b.n	8005b4e <__swsetup_r+0x1e>
 8005b76:	4b24      	ldr	r3, [pc, #144]	; (8005c08 <__swsetup_r+0xd8>)
 8005b78:	429c      	cmp	r4, r3
 8005b7a:	bf08      	it	eq
 8005b7c:	68ec      	ldreq	r4, [r5, #12]
 8005b7e:	e7e6      	b.n	8005b4e <__swsetup_r+0x1e>
 8005b80:	0758      	lsls	r0, r3, #29
 8005b82:	d512      	bpl.n	8005baa <__swsetup_r+0x7a>
 8005b84:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005b86:	b141      	cbz	r1, 8005b9a <__swsetup_r+0x6a>
 8005b88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005b8c:	4299      	cmp	r1, r3
 8005b8e:	d002      	beq.n	8005b96 <__swsetup_r+0x66>
 8005b90:	4630      	mov	r0, r6
 8005b92:	f7ff fc2f 	bl	80053f4 <_free_r>
 8005b96:	2300      	movs	r3, #0
 8005b98:	6363      	str	r3, [r4, #52]	; 0x34
 8005b9a:	89a3      	ldrh	r3, [r4, #12]
 8005b9c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005ba0:	81a3      	strh	r3, [r4, #12]
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	6063      	str	r3, [r4, #4]
 8005ba6:	6923      	ldr	r3, [r4, #16]
 8005ba8:	6023      	str	r3, [r4, #0]
 8005baa:	89a3      	ldrh	r3, [r4, #12]
 8005bac:	f043 0308 	orr.w	r3, r3, #8
 8005bb0:	81a3      	strh	r3, [r4, #12]
 8005bb2:	6923      	ldr	r3, [r4, #16]
 8005bb4:	b94b      	cbnz	r3, 8005bca <__swsetup_r+0x9a>
 8005bb6:	89a3      	ldrh	r3, [r4, #12]
 8005bb8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005bbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005bc0:	d003      	beq.n	8005bca <__swsetup_r+0x9a>
 8005bc2:	4621      	mov	r1, r4
 8005bc4:	4630      	mov	r0, r6
 8005bc6:	f000 f84d 	bl	8005c64 <__smakebuf_r>
 8005bca:	89a0      	ldrh	r0, [r4, #12]
 8005bcc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005bd0:	f010 0301 	ands.w	r3, r0, #1
 8005bd4:	d00a      	beq.n	8005bec <__swsetup_r+0xbc>
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	60a3      	str	r3, [r4, #8]
 8005bda:	6963      	ldr	r3, [r4, #20]
 8005bdc:	425b      	negs	r3, r3
 8005bde:	61a3      	str	r3, [r4, #24]
 8005be0:	6923      	ldr	r3, [r4, #16]
 8005be2:	b943      	cbnz	r3, 8005bf6 <__swsetup_r+0xc6>
 8005be4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005be8:	d1ba      	bne.n	8005b60 <__swsetup_r+0x30>
 8005bea:	bd70      	pop	{r4, r5, r6, pc}
 8005bec:	0781      	lsls	r1, r0, #30
 8005bee:	bf58      	it	pl
 8005bf0:	6963      	ldrpl	r3, [r4, #20]
 8005bf2:	60a3      	str	r3, [r4, #8]
 8005bf4:	e7f4      	b.n	8005be0 <__swsetup_r+0xb0>
 8005bf6:	2000      	movs	r0, #0
 8005bf8:	e7f7      	b.n	8005bea <__swsetup_r+0xba>
 8005bfa:	bf00      	nop
 8005bfc:	20000010 	.word	0x20000010
 8005c00:	08005ed0 	.word	0x08005ed0
 8005c04:	08005ef0 	.word	0x08005ef0
 8005c08:	08005eb0 	.word	0x08005eb0

08005c0c <abort>:
 8005c0c:	b508      	push	{r3, lr}
 8005c0e:	2006      	movs	r0, #6
 8005c10:	f000 f890 	bl	8005d34 <raise>
 8005c14:	2001      	movs	r0, #1
 8005c16:	f7fa ffa3 	bl	8000b60 <_exit>

08005c1a <__swhatbuf_r>:
 8005c1a:	b570      	push	{r4, r5, r6, lr}
 8005c1c:	460e      	mov	r6, r1
 8005c1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c22:	2900      	cmp	r1, #0
 8005c24:	b096      	sub	sp, #88	; 0x58
 8005c26:	4614      	mov	r4, r2
 8005c28:	461d      	mov	r5, r3
 8005c2a:	da08      	bge.n	8005c3e <__swhatbuf_r+0x24>
 8005c2c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005c30:	2200      	movs	r2, #0
 8005c32:	602a      	str	r2, [r5, #0]
 8005c34:	061a      	lsls	r2, r3, #24
 8005c36:	d410      	bmi.n	8005c5a <__swhatbuf_r+0x40>
 8005c38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005c3c:	e00e      	b.n	8005c5c <__swhatbuf_r+0x42>
 8005c3e:	466a      	mov	r2, sp
 8005c40:	f000 f894 	bl	8005d6c <_fstat_r>
 8005c44:	2800      	cmp	r0, #0
 8005c46:	dbf1      	blt.n	8005c2c <__swhatbuf_r+0x12>
 8005c48:	9a01      	ldr	r2, [sp, #4]
 8005c4a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005c4e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005c52:	425a      	negs	r2, r3
 8005c54:	415a      	adcs	r2, r3
 8005c56:	602a      	str	r2, [r5, #0]
 8005c58:	e7ee      	b.n	8005c38 <__swhatbuf_r+0x1e>
 8005c5a:	2340      	movs	r3, #64	; 0x40
 8005c5c:	2000      	movs	r0, #0
 8005c5e:	6023      	str	r3, [r4, #0]
 8005c60:	b016      	add	sp, #88	; 0x58
 8005c62:	bd70      	pop	{r4, r5, r6, pc}

08005c64 <__smakebuf_r>:
 8005c64:	898b      	ldrh	r3, [r1, #12]
 8005c66:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005c68:	079d      	lsls	r5, r3, #30
 8005c6a:	4606      	mov	r6, r0
 8005c6c:	460c      	mov	r4, r1
 8005c6e:	d507      	bpl.n	8005c80 <__smakebuf_r+0x1c>
 8005c70:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005c74:	6023      	str	r3, [r4, #0]
 8005c76:	6123      	str	r3, [r4, #16]
 8005c78:	2301      	movs	r3, #1
 8005c7a:	6163      	str	r3, [r4, #20]
 8005c7c:	b002      	add	sp, #8
 8005c7e:	bd70      	pop	{r4, r5, r6, pc}
 8005c80:	ab01      	add	r3, sp, #4
 8005c82:	466a      	mov	r2, sp
 8005c84:	f7ff ffc9 	bl	8005c1a <__swhatbuf_r>
 8005c88:	9900      	ldr	r1, [sp, #0]
 8005c8a:	4605      	mov	r5, r0
 8005c8c:	4630      	mov	r0, r6
 8005c8e:	f7ff f917 	bl	8004ec0 <_malloc_r>
 8005c92:	b948      	cbnz	r0, 8005ca8 <__smakebuf_r+0x44>
 8005c94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c98:	059a      	lsls	r2, r3, #22
 8005c9a:	d4ef      	bmi.n	8005c7c <__smakebuf_r+0x18>
 8005c9c:	f023 0303 	bic.w	r3, r3, #3
 8005ca0:	f043 0302 	orr.w	r3, r3, #2
 8005ca4:	81a3      	strh	r3, [r4, #12]
 8005ca6:	e7e3      	b.n	8005c70 <__smakebuf_r+0xc>
 8005ca8:	4b0d      	ldr	r3, [pc, #52]	; (8005ce0 <__smakebuf_r+0x7c>)
 8005caa:	62b3      	str	r3, [r6, #40]	; 0x28
 8005cac:	89a3      	ldrh	r3, [r4, #12]
 8005cae:	6020      	str	r0, [r4, #0]
 8005cb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cb4:	81a3      	strh	r3, [r4, #12]
 8005cb6:	9b00      	ldr	r3, [sp, #0]
 8005cb8:	6163      	str	r3, [r4, #20]
 8005cba:	9b01      	ldr	r3, [sp, #4]
 8005cbc:	6120      	str	r0, [r4, #16]
 8005cbe:	b15b      	cbz	r3, 8005cd8 <__smakebuf_r+0x74>
 8005cc0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005cc4:	4630      	mov	r0, r6
 8005cc6:	f000 f863 	bl	8005d90 <_isatty_r>
 8005cca:	b128      	cbz	r0, 8005cd8 <__smakebuf_r+0x74>
 8005ccc:	89a3      	ldrh	r3, [r4, #12]
 8005cce:	f023 0303 	bic.w	r3, r3, #3
 8005cd2:	f043 0301 	orr.w	r3, r3, #1
 8005cd6:	81a3      	strh	r3, [r4, #12]
 8005cd8:	89a0      	ldrh	r0, [r4, #12]
 8005cda:	4305      	orrs	r5, r0
 8005cdc:	81a5      	strh	r5, [r4, #12]
 8005cde:	e7cd      	b.n	8005c7c <__smakebuf_r+0x18>
 8005ce0:	08004c61 	.word	0x08004c61

08005ce4 <_raise_r>:
 8005ce4:	291f      	cmp	r1, #31
 8005ce6:	b538      	push	{r3, r4, r5, lr}
 8005ce8:	4604      	mov	r4, r0
 8005cea:	460d      	mov	r5, r1
 8005cec:	d904      	bls.n	8005cf8 <_raise_r+0x14>
 8005cee:	2316      	movs	r3, #22
 8005cf0:	6003      	str	r3, [r0, #0]
 8005cf2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005cf6:	bd38      	pop	{r3, r4, r5, pc}
 8005cf8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005cfa:	b112      	cbz	r2, 8005d02 <_raise_r+0x1e>
 8005cfc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005d00:	b94b      	cbnz	r3, 8005d16 <_raise_r+0x32>
 8005d02:	4620      	mov	r0, r4
 8005d04:	f000 f830 	bl	8005d68 <_getpid_r>
 8005d08:	462a      	mov	r2, r5
 8005d0a:	4601      	mov	r1, r0
 8005d0c:	4620      	mov	r0, r4
 8005d0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005d12:	f000 b817 	b.w	8005d44 <_kill_r>
 8005d16:	2b01      	cmp	r3, #1
 8005d18:	d00a      	beq.n	8005d30 <_raise_r+0x4c>
 8005d1a:	1c59      	adds	r1, r3, #1
 8005d1c:	d103      	bne.n	8005d26 <_raise_r+0x42>
 8005d1e:	2316      	movs	r3, #22
 8005d20:	6003      	str	r3, [r0, #0]
 8005d22:	2001      	movs	r0, #1
 8005d24:	e7e7      	b.n	8005cf6 <_raise_r+0x12>
 8005d26:	2400      	movs	r4, #0
 8005d28:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005d2c:	4628      	mov	r0, r5
 8005d2e:	4798      	blx	r3
 8005d30:	2000      	movs	r0, #0
 8005d32:	e7e0      	b.n	8005cf6 <_raise_r+0x12>

08005d34 <raise>:
 8005d34:	4b02      	ldr	r3, [pc, #8]	; (8005d40 <raise+0xc>)
 8005d36:	4601      	mov	r1, r0
 8005d38:	6818      	ldr	r0, [r3, #0]
 8005d3a:	f7ff bfd3 	b.w	8005ce4 <_raise_r>
 8005d3e:	bf00      	nop
 8005d40:	20000010 	.word	0x20000010

08005d44 <_kill_r>:
 8005d44:	b538      	push	{r3, r4, r5, lr}
 8005d46:	4d07      	ldr	r5, [pc, #28]	; (8005d64 <_kill_r+0x20>)
 8005d48:	2300      	movs	r3, #0
 8005d4a:	4604      	mov	r4, r0
 8005d4c:	4608      	mov	r0, r1
 8005d4e:	4611      	mov	r1, r2
 8005d50:	602b      	str	r3, [r5, #0]
 8005d52:	f7fa fef5 	bl	8000b40 <_kill>
 8005d56:	1c43      	adds	r3, r0, #1
 8005d58:	d102      	bne.n	8005d60 <_kill_r+0x1c>
 8005d5a:	682b      	ldr	r3, [r5, #0]
 8005d5c:	b103      	cbz	r3, 8005d60 <_kill_r+0x1c>
 8005d5e:	6023      	str	r3, [r4, #0]
 8005d60:	bd38      	pop	{r3, r4, r5, pc}
 8005d62:	bf00      	nop
 8005d64:	20004154 	.word	0x20004154

08005d68 <_getpid_r>:
 8005d68:	f7fa bee2 	b.w	8000b30 <_getpid>

08005d6c <_fstat_r>:
 8005d6c:	b538      	push	{r3, r4, r5, lr}
 8005d6e:	4d07      	ldr	r5, [pc, #28]	; (8005d8c <_fstat_r+0x20>)
 8005d70:	2300      	movs	r3, #0
 8005d72:	4604      	mov	r4, r0
 8005d74:	4608      	mov	r0, r1
 8005d76:	4611      	mov	r1, r2
 8005d78:	602b      	str	r3, [r5, #0]
 8005d7a:	f7fa ff40 	bl	8000bfe <_fstat>
 8005d7e:	1c43      	adds	r3, r0, #1
 8005d80:	d102      	bne.n	8005d88 <_fstat_r+0x1c>
 8005d82:	682b      	ldr	r3, [r5, #0]
 8005d84:	b103      	cbz	r3, 8005d88 <_fstat_r+0x1c>
 8005d86:	6023      	str	r3, [r4, #0]
 8005d88:	bd38      	pop	{r3, r4, r5, pc}
 8005d8a:	bf00      	nop
 8005d8c:	20004154 	.word	0x20004154

08005d90 <_isatty_r>:
 8005d90:	b538      	push	{r3, r4, r5, lr}
 8005d92:	4d06      	ldr	r5, [pc, #24]	; (8005dac <_isatty_r+0x1c>)
 8005d94:	2300      	movs	r3, #0
 8005d96:	4604      	mov	r4, r0
 8005d98:	4608      	mov	r0, r1
 8005d9a:	602b      	str	r3, [r5, #0]
 8005d9c:	f7fa ff3f 	bl	8000c1e <_isatty>
 8005da0:	1c43      	adds	r3, r0, #1
 8005da2:	d102      	bne.n	8005daa <_isatty_r+0x1a>
 8005da4:	682b      	ldr	r3, [r5, #0]
 8005da6:	b103      	cbz	r3, 8005daa <_isatty_r+0x1a>
 8005da8:	6023      	str	r3, [r4, #0]
 8005daa:	bd38      	pop	{r3, r4, r5, pc}
 8005dac:	20004154 	.word	0x20004154

08005db0 <_init>:
 8005db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005db2:	bf00      	nop
 8005db4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005db6:	bc08      	pop	{r3}
 8005db8:	469e      	mov	lr, r3
 8005dba:	4770      	bx	lr

08005dbc <_fini>:
 8005dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dbe:	bf00      	nop
 8005dc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dc2:	bc08      	pop	{r3}
 8005dc4:	469e      	mov	lr, r3
 8005dc6:	4770      	bx	lr
